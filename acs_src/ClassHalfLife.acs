script "HLGaussScript" (void) //622 -- HL_GAUSS_SCRIPT
{
    if (CheckInventory("HLGaussCharged") >= (CheckInventory("HLGaussCounter") * 10)) { SetInventory("HLGaussChargeAddCounter", 1); }
}

script "HLWalkRun" (int momx, int momy, int momz) //2723
{
    // This script determines if we should walk or run.
    // Notes: Fastest running speed is 24.
    // Fastest walking speed is 12.
    if (momx < 0) momx = -momx;
    if (momy < 0) momy = -momy;
    if (momz < 0) momz = -momz;
    SetResultValue((momx + momy)> 12);
}

script "HL2677" (void) net //2677
{
	if(CheckInventory("HalfLifeClass") == true && GetActorProperty(0,APROP_Health) > 0)// just for safety purposes
	{
		if(!CheckInventory("HalfLifeOpposingForce"))
		{
			localambientsound("HEV/Flashlight", 127);
			if(CheckInventory("flashlightinventory") == true)
			{
				TakeInventory("flashlightinventory", 1);
			}
			else
			{
				GiveInventory("flashlightinventory", 1);
				ACS_NamedExecuteWithResult("HLFlashLightLoop",0,0,0);
			}
		}
		else
		{
			if(CheckInventory("flashlightinventory") == true)
			{
				localambientsound("PCV/NightVisionOff", 127);
				TakeInventory("flashlightinventory", 1);
			}
			else
			{
				localambientsound("PCV/NightVisionOn", 127);
				GiveInventory("flashlightinventory", 1);
			}
		}
	}
}

script "HLFlashLightLoop" (void)
{
    while (CheckInventory("flashlightinventory"))
    {
        LineAttack(0, GetActorAngle(0), GetActorPitch(0), 0, "HLFlashLight", "None", 2048.0, FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL, 0);
        Delay(1);
    }
}

int fbeamx, fbeamy, fbeamz;

script "HL2678" (int which) //2678
{
    int x, y, z;
    x = GetActorX(0); y = GetActorY(0); z = GetActorZ(0);	
    switch(which)
    {
    case 0:
		SetActivatorToTarget(0);
        ACS_NamedExecuteAlways("HL2679", 0, x, y, z);
        break;
    case 1:
		SetActivatorToTarget(0);
        ACS_NamedExecuteAlways("HL2680", 0, x, y, z);
        ACS_NamedExecuteWithResult("HL2681", x, y, z);
        break;
	case 2:
        ACS_NamedExecuteWithResult("HL2682", fbeamx, fbeamy, fbeamz);
        break;
	case 3:
	    fbeamx = GetActorX(0); fbeamy = GetActorY(0); fbeamz = GetActorZ(0);
		break;
    }
}
 
str lolpages[2] =
{ "HLGaussParticleYellow", "HLGaussParticleWhite" };

script "HL2679" (int tx, int ty, int tz) clientside //2679
{
    int t, i, k = 0, l, angle, pitch;
    int x, y, z;
    int vx, vy, vz, mag, magI;
    str particle;
   
    particle = lolpages[CheckInventory("SamsaraRGPPage")];
 
    angle = GetActorAngle(0) - 0.1;
    pitch = GetActorPitch(0);
   
    if(angle < 0)
        angle += 1.0;
       
    x = GetActorX(0) + cos(angle) * ftoi(10 * cos(pitch));
    y = GetActorY(0) + sin(angle) * ftoi(10 * cos(pitch));
   
    if(pitch <= 0.0)
		z = GetActorZ(0) + GetActorViewHeight(0)-(GetActorProperty(0,APROP_AttackZOffset)/2) + 10 * (1.0 - cos(pitch));	
	else
		z = GetActorZ(0) + GetActorViewHeight(0)-(GetActorProperty(0,APROP_AttackZOffset)/2) - 10 * (1.0 - cos(pitch));
       
 
    vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
    vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
    magI = ftoi(mag);
 
    for (i = 0; i < magI; i += 2)
    {
        SpawnForced(particle, x+(vx*i), y+(vy*i), z+(vz*i),28000+PlayerNumber(),GetActorAngle(0) >> 8);
		SetActorPitch(28000+PlayerNumber(), -pitch);
	}
}
 
////////////////////////////////
#libdefine PUFF_DIST 8.0
#libdefine PLAYER_VIEWHEIGHT 34.0
 
script "HL2680" (int px, int py, int pz) CLIENTSIDE //2680
{
    int tx, ty, tz;
    int vx, vy, vz;
    int repeat, vl;
    int angle, pitch;
    int i;
 
    angle = GetActorAngle(0) - 0.05;
    pitch = GetActorPitch(0);
    tx = GetActorX(0) + cos(angle) * ftoi(15 * cos(pitch));
    ty = GetActorY(0) + sin(angle) * ftoi(15 * cos(pitch));
   
    if(pitch <= 0.0)
        tz = GetActorZ(0) + (GetActorViewHeight(0)-(GetActorProperty(0,APROP_AttackZOffset)/2) - 3.5) + 15 * (1.0 - cos(pitch));
    else
        tz = GetActorZ(0) + (GetActorViewHeight(0)-(GetActorProperty(0,APROP_AttackZOffset)/2) - 3.5) - 15 * (1.0 - cos(pitch));
   
    vx = px - tx;
    vy = py - ty;
    vz = pz - tz;
    vl = magnitudeThree_f(vx,vy,vz);
   
    vx = FixedMul(FixedDiv(vx,vl),PUFF_DIST);
    vy = FixedMul(FixedDiv(vy,vl),PUFF_DIST);
    vz = FixedMul(FixedDiv(vz,vl),PUFF_DIST);
   
    repeat = (FixedDiv(vl,PUFF_DIST)) >> 16;
   
    if(repeat <= 0)
        terminate;
       
    for(i = 1; i <= repeat; i++)
    {
        Spawn("HLEgonParticle",tx + (i * vx),ty + (i * vy),tz + (i * vz),0,0);
        if(i % 125 == 0)
            Delay(1); //Force delay to reduce lag
    }
}
 
#libdefine D_PUFF_DIST_E1   9.0
#libdefine D_PUFF_DIST_ROT  2
#libdefine D_PUFF_CHOOSER   2
#libdefine D_PUFF_DELAY     1000
#libdefine PUFF_ROT_UP      100
 
script "HL2681" (int px, int py, int pz) CLIENTSIDE //2681
{
    int tx, ty, tz;
    int e1x, e1y, e1z, e1l;
    int e2x, e2y, e2z, e2l;
    int e3x, e3y, e3z, e3l;
    int kf1, kf2, kf3, kfd;
    int repeat, helper;
    int angle, pitch, i;
   
    int puff_dist_e1 = GetCVAR("hl_pd_line");
    int puff_dist_rot = GetCVAR("hl_pd_rot");
    int puff_chooser = GetCVAR("hl_puff_chooser");
    int puff_delay = GetCVAR("hl_puff_delay");
   
    if(puff_dist_e1 <= 0)
        puff_dist_e1 = D_PUFF_DIST_E1;
    else
        puff_dist_e1 = puff_dist_e1 << 16;
       
    if(puff_dist_rot <= 0)
        puff_dist_rot = D_PUFF_DIST_ROT;
       
    if(puff_chooser <= 0)
        puff_chooser = D_PUFF_CHOOSER;
       
    if(puff_delay <= 0)
        puff_delay = D_PUFF_DELAY;
   
    angle = GetActorAngle(0) - 0.05;
    pitch = GetActorPitch(0);
    tx = GetActorX(0) + cos(angle) * ftoi(15 * cos(pitch));
    ty = GetActorY(0) + sin(angle) * ftoi(15 * cos(pitch));
   
    if(pitch <= 0.0)
        tz = GetActorZ(0) + (GetActorViewHeight(0)-(GetActorProperty(0,APROP_AttackZOffset)/2) - 2) + 15 * (1.0 - cos(pitch));
    else
        tz = GetActorZ(0) + (GetActorViewHeight(0)-(GetActorProperty(0,APROP_AttackZOffset)/2) - 2) - 15 * (1.0 - cos(pitch));
 
    e1x = px - tx;
    e1y = py - ty;
    e1z = pz - tz;
   
    e1l = magnitudeThree_f(e1x,e1y,e1z);
    e1x = FixedDiv(e1x,e1l);
    e1y = FixedDiv(e1y,e1l);
    e1z = FixedDiv(e1z,e1l);
   
    kf1 = e1x;
    kf2 = e1y;
    kf3 = e1z;
   
    kfd = FixedMul(tx,kf1);
    kfd += FixedMul(ty,kf2);
    kfd += FixedMul(tz,kf3);
   
    if(kf1 == 0)
    {
        if(kf2 == 0)
        {
            if(kf3 == 0)
                terminate;
           
            e2x = 0;
            e2y = FixedDiv(kfd,kf2);
            e2z = 0;
        }
        else if(kf3 == 0)
        {
            e2x = 0;
            e2y = 0;
            e2z = FixedDiv(kfd,kf3);
        }
        else
        {
            e2x = FixedDiv(kfd,kf1);
            e2y = 0;
            e2z = 0;
        }
    }
    else if(kf2 == 0)
    {
        if(kf3 == 0)
        {
            e2x = 0;
            e2y = 0;
            e2z = FixedDiv(kfd,kf3);
        }
        else
        {
            e2x = 0;
            e2y = FixedDiv(kfd,kf2);
            e2z = 0;
        }
    }
    else if(kf3 == 0)
    {
        e2x = 0;
        e2y = 0;
        e2z = FixedDiv(kfd,kf3);
    }
    else
    {
        e2x = 0;
        e2y = 0;
        e2z = FixedDiv(kfd,kf3);
    }
   
    e2x = e2x - tx;
    e2y = e2y - ty;
    e2z = e2z - tz;
     
    e2l = magnitudeThree_f(e2x,e2y,e2z);
    e2x = FixedDiv(e2x,e2l);
    e2y = FixedDiv(e2y,e2l);
    e2z = FixedDiv(e2z,e2l);
   
    e3x = FixedMul(e1y,e2z) - FixedMul(e1z,e2y);
    e3y = FixedMul(e1z,e2x) - FixedMul(e1x,e2z);
    e3z = FixedMul(e1x,e2y) - FixedMul(e1y,e2x);
   
    e3l = magnitudeThree_f(e3x,e3y,e3z);
    e3x = FixedDiv(e3x,e3l);
    e3y = FixedDiv(e3y,e3l);
    e3z = FixedDiv(e3z,e3l);
   
    repeat = (FixedDiv(e1l,PUFF_DIST)) >> 16;
    repeat *= 8;
   
    if(repeat <= 0)
        terminate;
       
    for(i = 1; i <= repeat; i++)
    {
        if(i % puff_chooser == 0)
        {
            kf1 = tx;
            kf1 += (i * e1x);
            kf2 = ty;
            kf2 += (i * e1y);
            kf3 = tz;
            kf3 += (i * e1z);
           
            helper = puff_dist_rot * i;
            helper = ((helper + (timer()*4)) % 256) << 8;
           
            if(i < PUFF_ROT_UP)
            {
                kf1 += FixedMul(FixedMul(i * (puff_dist_e1 / PUFF_ROT_UP),sin(helper)),e2x);
                kf2 += FixedMul(FixedMul(i * (puff_dist_e1 / PUFF_ROT_UP),sin(helper)),e2y);
                kf3 += FixedMul(FixedMul(i * (puff_dist_e1 / PUFF_ROT_UP),sin(helper)),e2z);
               
                kf1 += FixedMul(FixedMul(i * (puff_dist_e1 / PUFF_ROT_UP),cos(helper)),e3x);
                kf2 += FixedMul(FixedMul(i * (puff_dist_e1 / PUFF_ROT_UP),cos(helper)),e3y);
                kf3 += FixedMul(FixedMul(i * (puff_dist_e1 / PUFF_ROT_UP),cos(helper)),e3z);
            }
            else
            {
                kf1 += FixedMul(FixedMul(puff_dist_e1,sin(helper)),e2x);
                kf2 += FixedMul(FixedMul(puff_dist_e1,sin(helper)),e2y);
                kf3 += FixedMul(FixedMul(puff_dist_e1,sin(helper)),e2z);
               
                kf1 += FixedMul(FixedMul(puff_dist_e1,cos(helper)),e3x);
                kf2 += FixedMul(FixedMul(puff_dist_e1,cos(helper)),e3y);
                kf3 += FixedMul(FixedMul(puff_dist_e1,cos(helper)),e3z);
            }
           
            Spawn("HLEgonParticleHelix",kf1,kf2,kf3,0,GetActorAngle(0) >> 8);
		}
       
        if(i % puff_delay == 0)
            Delay(1); //Force delay to reduce lag
    }
}

script "HL2682" (int tx, int ty, int tz) clientside //2682
{
    int t, i, k = 0, l, angle, pitch;
    int x, y, z;
    int vx, vy, vz, mag, magI;
    str particle;
   
    angle = GetActorAngle(0) - 0.1;
    pitch = GetActorPitch(0);
   
    if(angle < 0)
        angle += 1.0;
       
    x = GetActorX(0) + cos(angle) * ftoi(10 * cos(pitch));
    y = GetActorY(0) + sin(angle) * ftoi(10 * cos(pitch));
   
    if(pitch <= 0.0)
        z = GetActorZ(0) + 34.0 * (1.0 - cos(pitch));
    else
        z = GetActorZ(0) + 34.0 * (1.0 - cos(pitch));
       
 
    vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
    vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
    magI = ftoi(mag);
 
    for (i = 0; i < magI; i += 2)
    {
		SetActivatorToTarget(0);
		particle = lolpages[CheckInventory("SamsaraRGPPage")];
        SpawnForced(particle, x+(vx*i), y+(vy*i), z+(vz*i),28500+PlayerNumber(),GetActorAngle(0) >> 8);
		SetActorPitch(28500+PlayerNumber(), GetActorPitch(0));
	}
}

str damagestrings[13][2] =
{
    {"",                    ""},
    {"HEV/BulletDamage",    "PCV/Boop"},
    {"HEV/EnergyDamage",    "PCV/Boop"},
    {"HEV/FireDamage",      "PCV/Boop"},
    {"HEV/ShockDamage",     "PCV/Boop"},
    {"",                    ""},
    {"HEV/Hazard",          "PCV/Det"},
    {"HEV/MinorFracture",   "PCV/Boop"},
    {"HEV/MajorFracture",   "PCV/Boop"},
    {"HEV/MinorLaceration", "PCV/Boop"},
    {"HEV/MajorLaceration", "PCV/Boop"},
    {"",                    ""},
    {"HEV/Detection3",      "PCV/Det"},
};

str armorstrings[20][2] =
{
    {"HEV/Armor5",   "PCV/Fuzz"},
    {"HEV/Armor10",  "PCV/Fuzz"},
    {"HEV/Armor15",  "PCV/Fuzz"},
    {"HEV/Armor20",  "PCV/Fuzz"},
    {"HEV/Armor25",  "PCV/Fuzz"},
    {"HEV/Armor30",  "PCV/Fuzz"},
    {"HEV/Armor35",  "PCV/Fuzz"},
    {"HEV/Armor40",  "PCV/Fuzz"},
    {"HEV/Armor45",  "PCV/Fuzz"},
    {"HEV/Armor50",  "PCV/Fuzz"},
    {"HEV/Armor55",  "PCV/Fuzz"},
    {"HEV/Armor60",  "PCV/Fuzz"},
    {"HEV/Armor65",  "PCV/Fuzz"},
    {"HEV/Armor70",  "PCV/Fuzz"},
    {"HEV/Armor75",  "PCV/Fuzz"},
    {"HEV/Armor80",  "PCV/Fuzz"},
    {"HEV/Armor85",  "PCV/Fuzz"},
    {"HEV/Armor90",  "PCV/Fuzz"},
    {"HEV/Armor95",  "PCV/Fuzz"},
    {"HEV/Armor100", "PCV/Fuzz"},
};

str pickupstrings[2][24][2] =
{
    {
        {"HEV/Crowbar",  "HEV/Knife"},
        {"HEV/Hornet",   "HEV/ShockRoach"},
        {"HEV/Pistol"},
        {"HEV/Shotgun"},
        {"HEV/Magnum",   "HEV/Deagle"},
        {"HEV/SMG"},
        {"HEV/RPG",      "HEV/SporeLauncher"},
        {"HEV/Gauss",    "HEV/SAW"},
        {"HEV/Egon",     "HEV/Displacer"},
        {"HEV/Snark",    "HEV/Grenade"},
        {"HEV/Crossbow", "HEV/Sniper"},
        {"HEV/Longjump", "HEV/Barnacle"},
    },
    {
        {"PCV/Blip", "PCV/Blip"},
        {"PCV/Blip", "PCV/Blip"},
        {"PCV/Blip"},
        {"PCV/Blip"},
        {"PCV/Blip", "PCV/Blip"},
        {"PCV/Blip"},
        {"PCV/Blip", "PCV/Blip"},
        {"PCV/Blip", "PCV/Blip"},
        {"PCV/Blip", "PCV/Blip"},
        {"PCV/Blip", "PCV/Blip"},
        {"PCV/Blip", "PCV/Blip"},
        {"PCV/Blip", "PCV/Blip"},
    },
};

str HL_HUD_Colors[6] = { "HEVBlue", "HEVBlue", "HEVYellow", "PCVGreen", "HEVRed", "HEVRed"  }; //HLUpper, OPUpper, HLNormal, OPNormal, HLLower, OPLower
str HL_HUD_HealthArmorGraphics[6] = { "HLHEALTB", "OPFHLTHB", "HLHEALTH", "OPFHLTH0", "HHEALTHR", "OPFHLTHR"  }; //HLHigh, OPHigh, HLMed, OPMEd, HLLow, OPLow
str HL_HUD_Bars[2] = { "HL1HBAR", "OPFBAR" };
str HL_HUD_HealthArmorSuits[4] = { "HLSUIT0", "OPFARM0", "HLSUIT1", "OPFARM1" };
str HL_HUD_Numbers[2] = { "HL1NUMS", "OPFNUMS" };
int HL_HUD_HealthValues[3] = { 100, 30, 0 }; //max, lower, none
int HL_HUD_ArmorValues[2] = { 101, 0 };
int HL_HUD_HealthArmorKillValues[6][2] = { 
	{ 10, 	 1    },
	{ 50, 	 200  },
	{ 100, 	 300  },
	{ 500, 	 400  },
	{ 1000,  500  },
	{ 10000, 1000 }, 
};

#define HALFLIFEWEAPONS 17

// weapon, priammotype1, priammotype2, hlammofont1, opammofont1, secammotype1, secammotype2, hlammofont2, opammofont2, dualtoken
str HL_HUD_AmmoStrings[HALFLIFEWEAPONS][10] =
{
    {"Hornetgun",                   "HornetGunAmmo",     "",           "HPKUP8",  "OPFAMM08", "",           "", "",       "",         ""},
    {"Shock Roach",                 "ShockRoachAmmo",    "",           "HPKUP8",  "OPFAMM08", "",           "", "",       "",         ""},
    {"9mm Pistol",                  "HL9mmCounter",      "",           "HPKUP1",  "OPFAMM01", "",           "", "",       "",         ""},
    {"Assault Shotgun",             "HLShotgunCounter",  "Shell",      "HPKUP4",  "OPFAMM04", "",           "", "",       "",         ""},
    {".357 Python",                 "HLPythonCounter",   "Shell",      "HPKUP2",  "OPFAMM02", "",           "", "",       "",         ""},
    {"Desert Eagle",                "HLDeagleCounter",   "Shell",      "HPKUP2",  "OPFAMM02", "",           "", "",       "",         ""},
    {"MP5",                         "HLMP5Counter",      "Clip",       "HPKUP1",  "OPFAMM01", "RocketAmmo", "", "HPKUP3", "OPFAMM03", ""},
    {" RPG ",                       "HLRPGCounter",      "RocketAmmo", "HPKUP6",  "OPFAMM05", "",           "", "",       "",         ""},
    {"Spore Launcher",              "HLSporeCounter",    "RocketAmmo", "HPKUP6",  "OPFAMM05", "",           "", "",       "",         ""},
    {"Gauss Cannon",                "Cell",              "",           "HPKUP7",  "OPFAMM09", "",           "", "",       "",         ""},
    {"M249 Squad Automatic Weapon", "HLSawCounter",      "Cell",       "HPKUP9",  "OPFAMM07", "",           "", "",       "",         ""},
    {"E.G.O.N.",                    "Cell",              "",           "HPKUP7",  "OPFAMM09", "",           "", "",       "",         ""},
    {"Displacer Cannon",            "Cell",              "",           "HPKUP7",  "OPFAMM09", "",           "", "",       "",         ""},
    {"HL Squeaks",                  "HLSqueakAmmo",      "",           "HPKUP11", "OPFAMM10", "",           "", "",       "",         ""},
    {"Mk 2 Grenades",               "RocketAmmo",        "",           "HPKUP11", "OPFAMM10", "",           "", "",       "",         ""},
    {"HL Crossbow",                 "HLXBowAmmoCounter", "Shell",      "HPKUP5",  "OPFAMM07", "",           "", "",       "",         ""},
    {"M40A1 Sniper Rifle",          "HLSniperCounter",   "Shell",      "HPKUP9",  "OPFAMM07", "",           "", "",       "",         ""},
};

// prilowamount1, prilowamount2, removepricounterwhenempty, seclowamount1, seclowamount2, removeseccounterwhenempty
int HL_HUD_AmmoInts[HALFLIFEWEAPONS][6] =
{
    {3,  0,  0, 0, 0, 0},
    {4,  0,  0, 0, 0, 0},
    {6,  0,  0, 0, 0, 0},
    {3,  10, 0, 0, 0, 0},
    {3,  10, 0, 0, 0, 0},
    {3,  10, 0, 0, 0, 0},
    {16, 30, 0, 5, 0, 1},
    {1,  5,  0, 0, 0, 0},
    {2,  5,  0, 0, 0, 0},
    {40, 0,  0, 0, 0, 0},
    {21, 40, 0, 0, 0, 0},
    {40, 0,  0, 0, 0, 0},
    {40, 0,  0, 0, 0, 0},
    {2,  0,  0, 0, 0, 0},
    {5,  0,  0, 0, 0, 0},
    {2,  10, 0, 0, 0, 0},
    {2,  10, 0, 0, 0, 0},
};

#define HALFLIFESLOTS 7 // 10

str HL_HUD_WeaponBarGraphics[HALFLIFESLOTS][5] =
{
    {"GotWeapon0", "HWMSLOT", "OPFWMB", "HWMSLOT1", "OPFWM1"},
    {"GotWeapon2", "HWMSLOT", "OPFWMB", "HWMSLOT2", "OPFWM2"},
    {"GotWeapon3", "HWMSLOT", "OPFWMB", "HWMSLOT3", "OPFWM3"},
    {"GotWeapon4", "HWMSLOT", "OPFWMB", "HWMSLOT4", "OPFWM4"},
    {"GotWeapon5", "HWMSLOT", "OPFWMB", "HWMSLOT5", "OPFWM5"},
    {"GotWeapon6", "HWMSLOT", "OPFWMB", "HWMSLOT6", "OPFWM6"},
    {"GotWeapon7", "HWMSLOT", "OPFWMB", "HWMSLOT7", "OPFWM7"},
    /*
    {"",           "HWMSLOT", "OPFWMB", "HWMSLOT8", "OPFWM8"}, // unique 2
    {"",           "HWMSLOT", "OPFWMB", "HWMSLOT9", "OPFWM9"}, // unique 1
    {"",           "HWMSLOT", "OPFWMB", "HWMSLOT0", "OPFWM0"}, // fallback melee
    */
};

script "Freeman_Loop" (void)
{
	int longJumpDelay = 0;
	int longJumpCharges = 0;
	int longJumpChargeFade = 0;

	while(CheckInventory("HalfLifeClass"))
	{
        int hgunregentimer, shockregentimer;

		if (CheckInventory("SamsaraHalfLifeCanLongJump"))
		{	
			int playerInput = GetPlayerInput(-1,INPUT_BUTTONS);
			int oldPlayerInput  = GetPlayerInput(-1,INPUT_OLDBUTTONS);
			int moveDirection = GetPlayerInput(-1,INPUT_FORWARDMOVE);

			longJumpCharges += playerInput & BT_JUMP && !(oldPlayerInput & BT_JUMP) && !isDead(0);

			if(moveDirection > 0 && longJumpCharges >= 2 && longJumpDelay <= 0 && (GetActorZ(0) - GetActorFloorZ(0) < 32.0) && !isDead(0))
			{
				longJumpChargeFade = 0;
				longJumpCharges = 0;
				ACS_NamedExecuteWithResult("HLLongJumpSlowedThrust",24,6);

				longJumpDelay = 35;
			}
		}

		Delay(1);

		if(longJumpCharges > 0)
		{
			if(longJumpChargeFade >= 17)
			{
				longJumpChargeFade = 0;
				longJumpCharges = 0;
			}
		}
		longJumpChargeFade++;
		longJumpDelay--;

        if (CheckInventory("SamsaraHasInfiniteAmmo") || !CheckInventory("HLHornetGunRegenLock") || !CheckWeapon("Hornetgun"))
        {
            hgunregentimer += 1 + CheckInventory("SamsaraHasDoubleFiringSpeed");

            if (hgunregentimer > 19)
            {
                hgunregentimer = 8;
                GiveInventory("HornetGunAmmo", 1);
            }
        }
        else { hgunregentimer = 0; }

        if (CheckInventory("SamsaraHasInfiniteAmmo") || !CheckInventory("HLShockRoachRegenLock") || !CheckWeapon("Shock Roach"))
        {
            shockregentimer += 1 + CheckInventory("SamsaraHasDoubleFiringSpeed");

            if (shockregentimer > 19)
            {
                shockregentimer = 8;
                if (CheckWeapon("Shock Roach") && CheckInventory("ShockRoachAmmo") < GetAmmoCapacity("ShockRoachAmmo") && !isDead(0)) { PlaySound(0, "HLShockRoach/Recharge", CHAN_6); }
                GiveInventory("ShockRoachAmmo", 1);
            }
        }
        else { shockregentimer = 0; }
	}
}

script "Freeman_HEV_Enter" (void) clientside//hev suit
{
	int a, b, c, d, e, suitcharge;
	int armormod;
	int armorrange = -1;
	int currenthealth;
	int currentarmor; // more like old but I refuse to fix it

	While(ClassifyActor(0) & ACTOR_PLAYER && CheckInventory("HalfLifeClass"))
	{
		If(GetCvar("samsara_cl_hevtalk") == true)
		{
			If(GetActorProperty(0,APROP_Health) - CurrentHealth < 0)
			{
				if(CheckInventory("HLHEVIsTalking") == false)
				{
					GiveInventory("HLHEVIsTalking", 1);
					ACS_NamedExecuteAlways("HLHEVTalk",0,0,0,0);
					if(CheckInventory("HLHEVDamageType") == 7)
					{
						if(GetActorProperty(0,APROP_Health) - CurrentHealth <= -50){SetInventory("HLHEVDamageType", 8);}
					} else if(CheckInventory("HLHEVDamageType") == 9) { // hmm
						if(GetActorProperty(0,APROP_Health) - CurrentHealth <= -50){SetInventory("HLHEVDamageType", 10);}
					}
					LocalAmbientSound(damagestrings[CheckInventory("HLHEVDamageType")][CheckInventory("HalfLifeOpposingForce")],127);
				}
			}
			// done with health chunk, now armor
			if(CurrentArmor > 0) // well I suppose since the HEV talks to the player when taking damage hearing this is rare
			{
				if(CheckInventory("BasicArmor") - CurrentArmor > 1)
				{
					if(CheckInventory("HLHEVIsTalking") == false)
					{
						GiveInventory("HLHEVIsTalking", 1);
						ACS_NamedExecuteAlways("HLHEVTalk",0,0,0,0);
						if(!CheckInventory("HalfLifeOpposingForce"))
							LocalAmbientSound("HEV/ArmorGone",127);
						else
							LocalAmbientSound("PCV/Buzz",127);
					}
				}
			}
		
			armormod = (CheckInventory("BasicArmor")-5)/5;
			if(CheckInventory("BasicArmor") - CurrentArmor > 0)
			{
				if(armorrange != armormod)
				{
					if(CheckInventory("HLHEVIsTalking") == false)
					{
						GiveInventory("HLHEVIsTalking", 1);
						ACS_NamedExecuteAlways("HLHEVTalk",0,0,0,0);
						LocalAmbientSound(armorstrings[armormod][CheckInventory("HalfLifeOpposingForce")],127);
					}
				}
				armorrange = armormod;
			}
		
			//done with armor, and of lower priority if pickups :D
			if(CheckInventory("HLHEVPickupID") != 0)
			{
				if(CheckInventory("HLHEVIsTalking") == false)
				{
					GiveInventory("HLHEVIsTalking", 1);
					ACS_NamedExecuteAlways("HLHEVTalk",0,3,0,0);
					LocalAmbientSound(pickupstrings[CheckInventory("HalfLifeOpposingForce")][(CheckInventory("HLHEVPickupID") - 1)][CheckInventory("HLHEVLoadoutID")], 127);
				}
				TakeInventory("HLHEVPickupID", 255);
				TakeInventory("HLHEVLoadoutID", 255);
			}	
		}
		
		CurrentHealth = GetActorProperty(0,APROP_Health);
		CurrentArmor = CheckInventory("BasicArmor");
		
		if(GetActorProperty(0, APROP_Health) > 0)
		{
			if(CheckInventory("flashlightinventory") == true)
			{
				if(!CheckInventory("HalfLifeOpposingForce"))
				{
					if(CheckInventory("FlashLightAmmo") == 0)
					{
						if(GetCVar("samsara_runninginzdoom"))
							ACS_NamedExecuteAlways("HL2677",0,0,0,0);
						else
							NamedRequestScriptPuke("HL2677",0,0,0,0);
					}
					TakeInventory("FlashLightAmmo", 1);
					SetInventory("SamsaraFlashLightAmmoDisplay", CheckInventory("FlashLightAmmo") / 35);
						
					if(CheckInventory("FlashLightAmmo") > 840)
					{
						SetFont("HFLIGHT2");
						SetHudSize(640,480,0);
						HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,1,0,700.1,100.1,0.0,0.5);
						SetHudSize(0,0,0);
						SetFont("SMALLFONT");
					}
					else
					{
						SetFont("HFLIGHT5");
						SetHudSize(640,480,0);
						HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,1,0,700.1,100.1,0.0,0.5);
						SetHudSize(0,0,0);
						SetFont("SMALLFONT");
					}
				}
				else
				{
				if(CheckInventory("FlashLightAmmo") == 0)
					{
						ACS_NamedExecuteAlways("HL2677",0,0,0,0);
					}
					SetHudSize(40,160,1);
					SetFont("HUDNV0");
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD,17458,0,20.0,80.0,0.2,0.1);
					SetHudSize(360,400,1);
					SetFont("HUDNV1");
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD,17459,0,180.0,200.0,0.2,0.66);
					GiveInventory("HLPCVNightVision", 1);
					TakeInventory("FlashLightAmmo", 1);
					SetInventory("SamsaraFlashLightAmmoDisplay", CheckInventory("FlashLightAmmo") / 35);
				}
			}
		}
		else
		{
			SetFont("none");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,1,0,700.1,100.1,0.033,0.5);
			TakeInventory("flashlightinventory", 1);
		}
		
		if(CheckInventory("flashlightinventory") == false)
		{
			SetFont("none");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,1,0,700.1,100.1,0.033,0.5);
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,17458,0,180.0,200.0,0.2,0.66);
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,17459,0,180.0,200.0,0.2,0.66);
			
			GiveInventory("FlashLightAmmo", 2);
			SetInventory("SamsaraFlashLightAmmoDisplay", CheckInventory("FlashLightAmmo") / 35);
			TakeInventory("HLPCVNightVision", 65536);
		}
		
		// Flashlight HUD shit
			
		if(CheckInventory("FlashLightAmmo") > 840)
		{
			SetFont("HFLIGHT1"); if(CheckInventory("HalfLifeOpposingForce")) { SetFont("HNVIS1"); }
			SetHudSize(640,480,0);
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,2,0,700.1,100.1,0.0,0.5);
			SetFont("HFLIGHT0"); if(CheckInventory("HalfLifeOpposingForce")) { SetFont("HNVIS0"); }
			SetHUDClipRect(700+(-32*(CheckInventory("FlashLightAmmo")-4200)/4200),100,32,32);
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,3,0,700.1,100.1,0.0,0.5);
			SetHUDClipRect(0,0,0,0);
			SetHudSize(0,0,0);
			SetFont("SMALLFONT");
		}
		else
		{
			SetFont("HFLIGHT4"); if(CheckInventory("HalfLifeOpposingForce")) { SetFont("HNVIS4"); }
			SetHudSize(640,480,0);
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,2,0,700.1,100.1,0.0,0.5);
			SetFont("HFLIGHT3"); if(CheckInventory("HalfLifeOpposingForce")) { SetFont("HNVIS3"); }
			SetHUDClipRect(700+(-32*(CheckInventory("FlashLightAmmo")-4200)/4200),100,32,32);
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,3,0,700.1,100.1,0.0,0.5);
			SetHUDClipRect(0,0,0,0);
			SetHudSize(0,0,0);
			SetFont("SMALLFONT");
		}

		if(GetCVAR("screenblocks") == 11 && CheckInventory("SamsaraUsingNewFullscreenHUD"))
		{
			SetHudSize(640,480, 0);
			int ArmorAmount = CheckInventory("BasicArmor");
            int KillCount = PlayerFrags();

            if (CheckInventory("ChickenModeOn")) { KillCount = CheckInventory("ChickenKillCount"); }
            else if (IsSinglePlayer() || IsCoop()) { KillCount = CheckInventory("KillCountAmountTrue"); }

            if (KillCount > 9999) { KillCount = 9999; }

			for(a = 0; a < 3; a++)
			{
				if(GetActorProperty(0, APROP_HEALTH) > HL_HUD_HealthValues[a])
				{
					SetFont(HL_HUD_HealthArmorGraphics[CheckInventory("HalfLifeOpposingForce")+(a*2)]);
					HudMessage(s:"A"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 30.0, 463.2, 0.033, 0.5+(0.1 * (5 + abs(a-1))));
					SetFont(HL_HUD_Bars[CheckInventory("HalfLifeOpposingForce")]);
					HudMessage(s:"A"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 110.0, 460.2, 0.033,0.5+(0.1 * (5 + abs(a-1))));		
					SetFont(HL_HUD_HealthArmorSuits[CheckInventory("HalfLifeOpposingForce")]);
					HudMessage(s:"A"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 170.0, 463.2, 0.033, 0.5+0);		
					SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]); HUDMessage(d:GetActorProperty(0, APROP_HEALTH); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[(a*2)+CheckInventory("HalfLifeOpposingForce")], 45.1, 460.2, 0.033, 0.5+(0.1 * (5 + abs(a-1))));
					break;
				}
			}	
			for(b = 0; b < 2; b++)
			{
				if(ArmorAmount >= HL_HUD_ArmorValues[b])
				{
					SuitCharge=36*ArmorAmount/100;
					SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]); HudMessage(d:ArmorAmount; HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[2+CheckInventory("HalfLifeOpposingForce")], 210.1, 460.2, 0.033, 0.5+(0.2 * (2 + abs(b-1))));
					SetHUDClipRect(140, 461-SuitCharge, 64, 100);		
					SetFont(HL_HUD_HealthArmorSuits[CheckInventory("HalfLifeOpposingForce")+2]);
					HudMessage(s:"A"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 170.0, 463.2, 0.033, 0.5+(0.2 * (2 + abs(b-1))));			
					SetHUDClipRect(0,0,0,0);
					SetHUDSize(0,0,0);
					break;
				}
			}
			for(c = 0; c < 6; c++)
			{
				if(KillCount < HL_HUD_HealthArmorKillValues[c][0])
				{
					SetHudSize(900,600,0);	
					SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]); HudMessage(d: KillCount; HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[2+CheckInventory("HalfLifeOpposingForce")], -15.2, 575.2, 0.033, 0.5+(1.0 * (HL_HUD_HealthArmorKillValues[c][1]/1000)));
					SetHudSize(0,0,0);
					break;
				}
			}

            // Ammo
            SetHUDSize(640, 480, 0);
            for (d = 0; d < HALFLIFEWEAPONS; d++)
            {
                str curweapon = HL_HUD_AmmoStrings[d][0];

                if (CheckWeapon(curweapon))
                {
                    // Primary ammo
                    str priammotype1 = HL_HUD_AmmoStrings[d][1];
                    int prilowamount1 = HL_HUD_AmmoInts[d][0];

                    str priammotype2 = HL_HUD_AmmoStrings[d][2];
                    int prilowamount2 = HL_HUD_AmmoInts[d][1];

                    if (!StrCmp(curweapon, "9mm Pistol"))
                    {
                        if (CheckInventory("SamsaraReloadMode") >= 2)
                        {
                            if (CheckInventory("PistolModeOn"))
                            {
                                priammotype2 = "Clip";
                                prilowamount2 = 30;
                            }
                        } else {
                            if (CheckInventory("PistolModeOn"))
                            {
                                priammotype1 = "Clip";
                                prilowamount1 = 30;
                            } else {
                                priammotype1 = "";
                                prilowamount1 = 0;
                            }
                        }
                    }

                    if (StrCmp(priammotype1, "") && StrCmp(priammotype2, "") && CheckInventory("SamsaraReloadMode") <= 1)
                    {
                        priammotype1 = priammotype2;
                        prilowamount1 = prilowamount2;

                        priammotype2 = "";
                        prilowamount2 = 0;
                    }

                    if (StrCmp(priammotype1, ""))
                    {
                        if (StrCmp(priammotype2, ""))
                        {
                            if (CheckInventory(priammotype1) > 0 || CheckInventory(priammotype2) > 0 || HL_HUD_AmmoInts[d][2] <= 0)
                            {
                                // Primary magazine
                                SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]);
                                if (CheckInventory(priammotype1) < prilowamount1) { HudMessage(d:CheckInventory(priammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[4 + CheckInventory("HalfLifeOpposingForce")], 620.2, 460.2, 0.033, 0.5 + 0.2); }
                                else { HudMessage(d:CheckInventory(priammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[2 + CheckInventory("HalfLifeOpposingForce")], 620.2, 460.2, 0.033, 0.5 + 0.2); }

                                // Primary ammo divider
                                SetFont(HL_HUD_Bars[CheckInventory("HalfLifeOpposingForce")]);
                                HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 630.0, 460.2, 0.033, 0.5 + 0.2);
                            }
                        }

                        // Primary ammo total
                        if (StrCmp(priammotype2, ""))
                        {
                            if (CheckInventory(priammotype1) > 0 || CheckInventory(priammotype2) > 0 || HL_HUD_AmmoInts[d][2] <= 0)
                            {
                                SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]);
                                if (CheckInventory(priammotype2) < prilowamount2) { HudMessage(d:CheckInventory(priammotype2); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[4 + CheckInventory("HalfLifeOpposingForce")], 700.2, 460.2, 0.033, 0.5 + 0.2); }
                                else { HudMessage(d:CheckInventory(priammotype2); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[2 + CheckInventory("HalfLifeOpposingForce")], 700.2, 460.2, 0.033, 0.5 + 0.2); }
                            }
                        } else {
                            if (CheckInventory(priammotype1) > 0 || HL_HUD_AmmoInts[d][2] <= 0)
                            {
                                SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]);
                                if (CheckInventory(priammotype1) < prilowamount1) { HudMessage(d:CheckInventory(priammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[4 + CheckInventory("HalfLifeOpposingForce")], 700.2, 460.2, 0.033, 0.5 + 0.2); }
                                else { HudMessage(d:CheckInventory(priammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[2 + CheckInventory("HalfLifeOpposingForce")], 700.2, 460.2, 0.033, 0.5 + 0.2); }
                            }
                        }
                    }

                    // Primary ammo graphic
                    if (StrCmp(priammotype2, ""))
                    {
                        if (StrCmp(HL_HUD_AmmoStrings[d][3 + CheckInventory("HalfLifeOpposingForce")], "") && (CheckInventory(priammotype1) > 0 || CheckInventory(priammotype2) > 0 || HL_HUD_AmmoInts[d][2] <= 0))
                        {
                            SetFont(HL_HUD_AmmoStrings[d][3 + CheckInventory("HalfLifeOpposingForce")]);
                            HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 720.2, 450.2, 0.033, 0.5 + 0.2);
                        }
                    } else {
                        if (StrCmp(HL_HUD_AmmoStrings[d][3 + CheckInventory("HalfLifeOpposingForce")], "") && (CheckInventory(priammotype1) > 0 || HL_HUD_AmmoInts[d][2] <= 0))
                        {
                            SetFont(HL_HUD_AmmoStrings[d][3 + CheckInventory("HalfLifeOpposingForce")]);
                            HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 720.2, 450.2, 0.033, 0.5 + 0.2);
                        }
                    }

                    // Secondary ammo
                    str secammotype1 = HL_HUD_AmmoStrings[d][5];
                    int seclowamount1 = HL_HUD_AmmoInts[d][3];

                    str secammotype2 = HL_HUD_AmmoStrings[d][6];
                    int seclowamount2 = HL_HUD_AmmoInts[d][4];

                    str dualtoken = HL_HUD_AmmoStrings[d][9];
                    str pridualammotype = HL_HUD_AmmoStrings[d][2];
                    str secdualammotype = HL_HUD_AmmoStrings[d][6];

                    bool checkpridualammo = StrCmp(pridualammotype, "") && StrCmp(secdualammotype, "") && !StrCmp(pridualammotype, secdualammotype) &&
                                            CheckInventory("SamsaraReloadMode") >= 2;

                    if (StrCmp(dualtoken, ""))
                    {
                        if (CheckInventory(dualtoken))
                        {
                            if (StrCmp(pridualammotype, "") && StrCmp(secdualammotype, "") && !StrCmp(pridualammotype, secdualammotype))
                            {
                                if (StrCmp(secammotype1, "") && StrCmp(secammotype2, "") && CheckInventory("SamsaraReloadMode") <= 1)
                                {
                                    secammotype1 = "";
                                    seclowamount1 = 0;

                                    secammotype2 = "";
                                    seclowamount2 = 0;
                                } else {
                                    secammotype2 = "";
                                    seclowamount2 = 0;
                                }
                            } else {
                                if (StrCmp(secammotype1, "") && StrCmp(secammotype2, "") && CheckInventory("SamsaraReloadMode") <= 1)
                                {
                                    secammotype1 = secammotype2;
                                    seclowamount1 = seclowamount2;

                                    secammotype2 = "";
                                    seclowamount2 = 0;
                                }
                            }

                            if (!StrCmp(pridualammotype, "") || !StrCmp(secdualammotype, "") || StrCmp(pridualammotype, secdualammotype) || CheckInventory("SamsaraReloadMode") >= 2)
                            {
                                if (StrCmp(secammotype1, ""))
                                {
                                    if (StrCmp(secammotype2, ""))
                                    {
                                        if (CheckInventory(secammotype1) > 0 || CheckInventory(secammotype2) > 0 || HL_HUD_AmmoInts[d][5] <= 0)
                                        {
                                            // Secondary magazine
                                            SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]);
                                            if (CheckInventory(secammotype1) < seclowamount1) { HudMessage(d:CheckInventory(secammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[4 + CheckInventory("HalfLifeOpposingForce")], 620.2, 430.2, 0.033, 0.5 + 0.2); }
                                            else { HudMessage(d:CheckInventory(secammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[2 + CheckInventory("HalfLifeOpposingForce")], 620.2, 430.2, 0.033, 0.5 + 0.2); }

                                            // Secondary ammo divider
                                            SetFont(HL_HUD_Bars[CheckInventory("HalfLifeOpposingForce")]);
                                            HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 630.0, 430.2, 0.033, 0.5 + 0.2);
                                        }
                                    }

                                    // Secondary ammo total
                                    if (StrCmp(secammotype2, ""))
                                    {
                                        if (CheckInventory(secammotype1) > 0 || CheckInventory(secammotype2) > 0 || HL_HUD_AmmoInts[d][5] <= 0)
                                        {
                                            SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]);
                                            if (CheckInventory(secammotype2) < seclowamount2) { HudMessage(d:CheckInventory(secammotype2); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[4 + CheckInventory("HalfLifeOpposingForce")], 700.2, 430.2, 0.033, 0.5 + 0.2); }
                                            else { HudMessage(d:CheckInventory(secammotype2); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[2 + CheckInventory("HalfLifeOpposingForce")], 700.2, 430.2, 0.033, 0.5 + 0.2); }
                                        }
                                    } else {
                                        if (checkpridualammo)
                                        {
                                            if (CheckInventory(priammotype2) > 0 || CheckInventory(secammotype1) > 0 || HL_HUD_AmmoInts[d][5] <= 0)
                                            {
                                                SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]);
                                                if (CheckInventory(secammotype1) < seclowamount1) { HudMessage(d:CheckInventory(secammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[4 + CheckInventory("HalfLifeOpposingForce")], 700.2, 430.2, 0.033, 0.5 + 0.2); }
                                                else { HudMessage(d:CheckInventory(secammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[2 + CheckInventory("HalfLifeOpposingForce")], 700.2, 430.2, 0.033, 0.5 + 0.2); }
                                            }
                                        } else {
                                            if (CheckInventory(secammotype1) > 0 || HL_HUD_AmmoInts[d][5] <= 0)
                                            {
                                                SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]);
                                                if (CheckInventory(secammotype1) < seclowamount1) { HudMessage(d:CheckInventory(secammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[4 + CheckInventory("HalfLifeOpposingForce")], 700.2, 430.2, 0.033, 0.5 + 0.2); }
                                                else { HudMessage(d:CheckInventory(secammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[2 + CheckInventory("HalfLifeOpposingForce")], 700.2, 430.2, 0.033, 0.5 + 0.2); }
                                            }
                                        }
                                    }
                                }

                                // Secondary ammo graphic
                                if (StrCmp(secammotype2, ""))
                                {
                                    if (StrCmp(HL_HUD_AmmoStrings[d][7 + CheckInventory("HalfLifeOpposingForce")], "") && (CheckInventory(secammotype1) > 0 || CheckInventory(secammotype2) > 0 || HL_HUD_AmmoInts[d][5] <= 0))
                                    {
                                        SetFont(HL_HUD_AmmoStrings[d][7 + CheckInventory("HalfLifeOpposingForce")]);
                                        HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 720.2, 430.2, 0.033, 0.5 + 0.2);
                                    }
                                } else {
                                    if (checkpridualammo)
                                    {
                                        if (StrCmp(HL_HUD_AmmoStrings[d][7 + CheckInventory("HalfLifeOpposingForce")], "") && (CheckInventory(priammotype2) > 0 || CheckInventory(secammotype1) > 0 || HL_HUD_AmmoInts[d][5] <= 0))
                                        {
                                            SetFont(HL_HUD_AmmoStrings[d][7 + CheckInventory("HalfLifeOpposingForce")]);
                                            HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 720.2, 430.2, 0.033, 0.5 + 0.2);
                                        }
                                    } else {
                                        if (StrCmp(HL_HUD_AmmoStrings[d][7 + CheckInventory("HalfLifeOpposingForce")], "") && (CheckInventory(secammotype1) > 0 || HL_HUD_AmmoInts[d][5] <= 0))
                                        {
                                            SetFont(HL_HUD_AmmoStrings[d][7 + CheckInventory("HalfLifeOpposingForce")]);
                                            HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 720.2, 430.2, 0.033, 0.5 + 0.2);
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if (StrCmp(secammotype1, "") && StrCmp(secammotype2, "") && CheckInventory("SamsaraReloadMode") <= 1)
                        {
                            secammotype1 = secammotype2;
                            seclowamount1 = seclowamount2;

                            secammotype2 = "";
                            seclowamount2 = 0;
                        }

                        if (StrCmp(secammotype1, ""))
                        {
                            if (StrCmp(secammotype2, ""))
                            {
                                if (CheckInventory(secammotype1) > 0 || CheckInventory(secammotype2) > 0 || HL_HUD_AmmoInts[d][5] <= 0)
                                {
                                    // Secondary magazine
                                    SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]);
                                    if (CheckInventory(secammotype1) < seclowamount1) { HudMessage(d:CheckInventory(secammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[4 + CheckInventory("HalfLifeOpposingForce")], 620.2, 430.2, 0.033, 0.5 + 0.2); }
                                    else { HudMessage(d:CheckInventory(secammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[2 + CheckInventory("HalfLifeOpposingForce")], 620.2, 430.2, 0.033, 0.5 + 0.2); }

                                    // Secondary ammo divider
                                    SetFont(HL_HUD_Bars[CheckInventory("HalfLifeOpposingForce")]);
                                    HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 630.0, 430.2, 0.033, 0.5 + 0.2);
                                }
                            }

                            // Secondary ammo total
                            if (StrCmp(secammotype2, ""))
                            {
                                if (CheckInventory(secammotype1) > 0 || CheckInventory(secammotype2) > 0 || HL_HUD_AmmoInts[d][5] <= 0)
                                {
                                    SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]);
                                    if (CheckInventory(secammotype2) < seclowamount2) { HudMessage(d:CheckInventory(secammotype2); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[4 + CheckInventory("HalfLifeOpposingForce")], 700.2, 430.2, 0.033, 0.5 + 0.2); }
                                    else { HudMessage(d:CheckInventory(secammotype2); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[2 + CheckInventory("HalfLifeOpposingForce")], 700.2, 430.2, 0.033, 0.5 + 0.2); }
                                }
                            } else {
                                if (CheckInventory(secammotype1) > 0 || HL_HUD_AmmoInts[d][5] <= 0)
                                {
                                    SetFont(HL_HUD_Numbers[CheckInventory("HalfLifeOpposingForce")]);
                                    if (CheckInventory(secammotype1) < seclowamount1) { HudMessage(d:CheckInventory(secammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[4 + CheckInventory("HalfLifeOpposingForce")], 700.2, 430.2, 0.033, 0.5 + 0.2); }
                                    else { HudMessage(d:CheckInventory(secammotype1); HUDMSG_PLAIN|HUDMSG_COLORSTRING|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, HL_HUD_Colors[2 + CheckInventory("HalfLifeOpposingForce")], 700.2, 430.2, 0.033, 0.5 + 0.2); }
                                }
                            }
                        }

                        // Secondary ammo graphic
                        if (StrCmp(secammotype2, ""))
                        {
                            if (StrCmp(HL_HUD_AmmoStrings[d][7 + CheckInventory("HalfLifeOpposingForce")], "") && (CheckInventory(secammotype1) > 0 || CheckInventory(secammotype2) > 0 || HL_HUD_AmmoInts[d][5] <= 0))
                            {
                                SetFont(HL_HUD_AmmoStrings[d][7 + CheckInventory("HalfLifeOpposingForce")]);
                                HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 720.2, 430.2, 0.033, 0.5 + 0.2);
                            }
                        } else {
                            if (StrCmp(HL_HUD_AmmoStrings[d][7 + CheckInventory("HalfLifeOpposingForce")], "") && (CheckInventory(secammotype1) > 0 || HL_HUD_AmmoInts[d][5] <= 0))
                            {
                                SetFont(HL_HUD_AmmoStrings[d][7 + CheckInventory("HalfLifeOpposingForce")]);
                                HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, 720.2, 430.2, 0.033, 0.5 + 0.2);
                            }
                        }
                    }
                }
            }

			if (CheckInventory("ExpandedHud"))
			{
				SetHUDSize(640, 480, 1);
				SetFont(HL_HUD_WeaponBarGraphics[0][1+CheckInventory("HalfLifeOpposingForce")]);

				for(e = 0; e < HALFLIFESLOTS; e++)
				{
					HudMessage(s: "A"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, (255+(20*(e))) * 1.0, 0.1, 0.033,0.5+0.001); // 230

					if(CheckInventory(HL_HUD_WeaponBarGraphics[e][0]))
					{
						SetFont(HL_HUD_WeaponBarGraphics[e][3+CheckInventory("HalfLifeOpposingForce")]);
						HudMessage(s: "A"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 0, 0, (255+(20*(e))) * 1.0, 0.1, 0.033,0.5+0.2); // 230
						SetFont(HL_HUD_WeaponBarGraphics[0][1+CheckInventory("HalfLifeOpposingForce")]);
					}
				}
			}

			SetHUDSize(0,0,0);
		}	
		else
		{
			SetFont("none");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,3,0,590.1,120.1,0.033,0.5);
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,2,0,590.1,120.1,0.033,0.5);
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,1,0,590.1,120.1,0.033,0.5);
			SetHudSize(0,0,0);
			SetHUDClipRect(0,0,0,0);
			SetFont("SMALLFONT");
		}
		Delay(1);
	}	

	if(CheckInventory("flashlightinventory") == true)
	{
		TakeInventory("flashlightinventory", 1);
	}
	SetFont("none");
	HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,3,0,590.1,120.1,0.033,0.5);
	HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,2,0,590.1,120.1,0.033,0.5);
	HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,1,0,590.1,120.1,0.033,0.5);
	SetHudSize(0,0,0);
	SetHUDClipRect(0,0,0,0);
	SetFont("SMALLFONT");
	terminate;
}

str HLDamageIndicators[2][13] = {
	{ "", "", "HLDMG8", "HLDMG7", "HLDMG4", "HLDMG2", "HLDMG1", "", "", "", "", "HLDMG6", "HLDMG3" },
	{ "", "", "PCV_NUKE", "PCV_FIRE", "PCV_ELEC", "PCV_OXY", "PCV_ACID", "", "", "", "", "PCV_ICE", "PCV_BIOH" }
};

Script "HL_HUD_DMGTypes" (void)
{
    if(CheckInventory("HalfLifeClass") && GetCVAR("screenblocks") == 11 && CheckInventory("SamsaraUsingNewFullscreenHUD"))
    {
		SetHUDSize(640, 480, 1);
		for(int a = 1; a < 13; a++)
		{
			if(CheckInventory("HLHEVDamageType") == a && GetActorProperty(0, APROP_HEALTH) > 0 && StrCmp(HLDamageIndicators[CheckInventory("HalfLifeOpposingForce")][a], "") != 0)
			{
				SetFont(HLDamageIndicators[CheckInventory("HalfLifeOpposingForce")][a]); HudMessage(s: "A"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP|HUDMSG_FADEINOUT, 23780, 0, 45.1, 420.2, 0.1,1.0,0.75);
			}
		}
		SetHUDSize(0,0,0);
	}
}

str HLPickupIDsNew[2][12][2] =
{
    {
        {"HPKUP00H", "HPKUP00H"},
        {"HPKUP20H", "HPKUP20H"},
        {"HPKUP01H"},
        {"HPKUP14H"},
        {"HPKUP12H", "HPKUP12H"},
        {"HPKUP13H"},
        {"HPKUP17H", "HPKUP17H"},
        {"HPKUP18H", "HPKUP18H"},
        {"HPKUP19H", "HPKUP19H"},
        {"HPKUP15H", "HPKUP15H"},
        {"HPKUP16H", "HPKUP16H"},
        {"HPKUP10H", "HPKUP10H"},
    },
    {
        {"OPFSL11H", "OPFSL11H"},
        {"OPFSL01H", "OPFSL01H"},
        {"OPFSL10H"},
        {"OPFSL03H"},
        {"OPFSL02H", "OPFSL02H"},
        {"OPFSL04H"},
        {"OPFSL05H", "OPFSL05H"},
        {"OPFSL06H", "OPFSL06H"},
        {"OPFSL07H", "OPFSL07H"},
        {"OPFSL09H", "OPFSL09H"},
        {"OPFSL08H", "OPFSL08H"},
        {"OPFSL00H", "OPFSL00H"},
    },
};

Script "HL_HUD_Pickups" (int cause, int loadout)
{
	if(CheckInventory("HalfLifeClass") && GetCVAR("screenblocks") == 11 && CheckInventory("SamsaraUsingNewFullscreenHUD"))
	{
		SetHUDSize(640, 480, 1);
		SetFont(HLPickupIDsNew[CheckInventory("HalfLifeOpposingForce")][cause][loadout]); HudMessage(s: "A"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP|HUDMSG_FADEINOUT, 23781, 0, 720.2, 400.2, 0.333,1.0,3.0);
		SetHUDSize(0,0,0);		
	}
}

Script "HalfLifeRecoil" (int weapon) clientside
{
	int a;
	int pln = PlayerNumber();
	if (CheckInventory("SamsaraRecoilIsDisabled")) { terminate; }

	switch(weapon)
	{
		case 1:
			for(a = 0; a < 4; a++) { SetActorPitch(0, GetActorPitch(0) - a*32); Delay(1); }
			for(a = 3; a > 0; a--) { SetActorPitch(0, GetActorPitch(0) + a*32); Delay(1); }
			break;
		case 2:
			for(a = 0; a < 5; a++) { SetActorPitch(0, GetActorPitch(0) - a*64); Delay(1); }
			for(a = 4; a > 0; a--) { SetActorPitch(0, GetActorPitch(0) + a*64); Delay(1); }
			break;
		case 3:
			for(a = 0; a < 5; a++) { SetActorPitch(0, GetActorPitch(0) - a*56); Delay(1); }
			for(a = 4; a > 0; a--) { SetActorPitch(0, GetActorPitch(0) + a*56); Delay(1); }
			break;
		case 4:
			for(a = 0; a < 3; a++) { SetActorPitch(0, GetActorPitch(0) - a*32); Delay(1); }
			for(a = 2; a > 0; a--) { SetActorPitch(0, GetActorPitch(0) + a*32); Delay(1); }
			break;
		case 5:
			for(a = 0; a < 5; a++) { SetActorPitch(0, GetActorPitch(0) - a*48); Delay(1); }
			for(a = 4; a > 0; a--) { SetActorPitch(0, GetActorPitch(0) + a*48); Delay(1); }
			break;
		case 6:
			for(a = 0; a < 4; a++) { SetActorPitch(0, GetActorPitch(0) - a*56); Delay(1); }
			for(a = 3; a > 0; a--) { SetActorPitch(0, GetActorPitch(0) + a*56); Delay(1); }
			break;
		case 7:
			for(a = 0; a < 8; a++) { SetActorPitch(0, GetActorPitch(0) - a*56); Delay(1); }
			for(a = 7; a > 0; a--) { SetActorPitch(0, GetActorPitch(0) + a*56); Delay(1); }
			break;
		case 8:
			for(a = 0; a < 4; a++) { SetActorPitch(0, GetActorPitch(0) - a*56); Delay(1); }
			for(a = 3; a > 0; a--) { SetActorPitch(0, GetActorPitch(0) + a*33); Delay(3); }
			break;		
		case 9:
			for(a = 0; a < 4; a++) { SetActorPitch(0, GetActorPitch(0) - a*56); Delay(1); }
			for(a = 3; a > 0; a--) { SetActorPitch(0, GetActorPitch(0) + a*33); Delay(1); }
			break;				
	}
}

script "HalfLifeLaserSight" (int mode)
{
    SetInventory("SamsaraHalfLifeLaserSightReady", 1);

    while (true)
    {
        if (isDead(0) || !CheckInventory("SamsaraHalfLifeLaserSightReady")) { terminate; }

        switch (mode)
        {
          case 1:
            if (!CheckWeapon("Desert Eagle")) { terminate; }

            if (CheckInventory("HLDeagleLaserActivated") && !CheckInventory("SamsaraHalfLifeLaserSightHidden"))
            {
                if (isSinglePlayer() || isCoop()) { LineAttack(0, GetActorAngle(0), GetActorPitch(0), 0, "HLDeagleLaserDotCoop", "None", 8192.0, FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL, 0); }
                else { LineAttack(0, GetActorAngle(0), GetActorPitch(0), 0, "HLDeagleLaserDot", "None", 8192.0, FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL, 0); }
            }
            break;

          case 2:
            if (!CheckWeapon(" RPG ")) { terminate; }

            if (CheckInventory("SamsaraHalfLifeRPGLaserActivated") && !CheckInventory("SamsaraHalfLifeLaserSightHidden"))
            {
                if (isSinglePlayer() || isCoop()) { LineAttack(0, GetActorAngle(0), GetActorPitch(0), 0, "RPGLaserDotCoop", "None", 8192.0, FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL, 0); }
                else { LineAttack(0, GetActorAngle(0), GetActorPitch(0), 0, "RPGLaserDot", "None", 8192.0, FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL, 0); }
            }
            break;
        }

        Delay(1);
    }
}

str HLWeaponSelectedTokens[11] = { "freeman_fistselected", "freeman_pistolselected", "freeman_slot1selected", "freeman_slot2selected", "freeman_slot3selected",
                                   "freeman_slot4selected", "freeman_slot5selected", "freeman_slot6selected", "freeman_slot7selected", "freeman_uniqueselected", "freeman_unique2selected" };

Script "HalfLifeWeaponSkin" (int token) clientside
{
	if(CheckInventory("HalfLifeOpposingForce") && CheckInventory(HLWeaponSelectedTokens[token]))
	
		SetResultValue(1);
	else
		SetResultValue(0);
}

script "HalfLifeAllyFunctions" (int options) // half life ally functions -- 2684
{
	int mypositionx = GetActorX(0);
	int mypositiony = GetActorY(0);
	int mypositionz = GetActorZ(0);
	int result;
	int seetoken = CheckInventory("seetoken");
	Switch(options)
	{
	case 1:
		SetActivatorToTarget(0);	
		if((ClassifyActor(0) & ACTOR_PLAYER))
		{
			result = 1;
		}
		else if((ClassifyActor(0) & ACTOR_MONSTER) && CheckInventory("AllyToken") == false && seetoken == 1)
		{
			result = 2;
		}
		else
		{
			result = 0;
		}
		SetResultValue(result);
		break;
	case 2:
		SetActivatorToTarget(0);		
		if(ACS_NamedExecuteWithResult("HLWalkRun",(GetActorVelX(0) / 1.0), (GetActorVelY(0) / 1.0), (GetActorVelZ(0) / 1.0)) 
		|| distance_ftoi(mypositionx, mypositiony, mypositionz, GetActorX(0), GetActorY(0), GetActorZ(0)) > 640)
		{
			SetResultValue(1);
		}
		else
		{
		    SetResultValue(0);
		}
		break;
	case 3:
		SetActivatorToTarget(0);
		If(GetActorX(0) - mypositionx > 2048 || GetActorX(0) - mypositionx < -2048)
		{
			SetResultValue(1);
		}
		If(GetActorProperty(0,APROP_Waterlevel) > 1 && GetActorZ(0) - GetActorFloorZ(0) > 32)
		{
			SetResultValue(1);
		}
		If(GetActorProperty(0,APROP_Health) <= 0)
		{
			
			SetResultValue(1);
		}
		else
		{
			SetResultValue(0);
		}
		break;
	case 4:
		if(GetActorProperty(0,APROP_WaterLevel) > 1)
		{	
			SetActivator(0,AAPTR_Master);
			if(GetActorZ(0) - mypositionz > 32)
			{	
				SetResultValue(1);
			}
			else
			{
				SetResultValue(0);
			}
			break;
		}
		SetActivator(0,AAPTR_Master);
		if(GetActorZ(0) - mypositionz > 32)
		{
			SetResultValue(1);
		}
		else
		{
			SetResultValue(0);
		}
		break;
	case 5:
		SetActivatorToTarget(0);
		If(GetActorProperty(0,APROP_Health) < 100)
		{
			SetResultValue(1);
		}
		Else
		{
			SetResultValue(0);
		}
		break;
	case 6: //talk timer
		If(CheckInventory("TalkToken") == 0)
		{
		GiveInventory("TalkToken", 1);
		Delay(256);
		TakeInventory("TalkToken", 1);
		}
		else{}	
		break;
	}
}

script "HL2685" (int cause) clientside //2685
{
	if(cause < 12)
	{
		SetInventory("HLHEVDamageType", cause + 1);
		ACS_NamedExecuteWithResult("HL_HUD_DMGTypes");
	}
	else
	{
        int pickuptype = cause - 12;
        int loadouttype = 0;

        switch (pickuptype)
        {
          default: break;
          case 0: loadouttype = CheckInventory("SamsaraHalfLifeLoadoutFallbackMelee"); break;
          case 1: loadouttype = CheckInventory("SamsaraHalfLifeLoadoutSlot1"); break;
          case 4: loadouttype = CheckInventory("SamsaraHalfLifeLoadoutSlot3"); break;
          case 6: loadouttype = CheckInventory("SamsaraHalfLifeLoadoutSlot5"); break;
          case 7: loadouttype = CheckInventory("SamsaraHalfLifeLoadoutSlot6"); break;
          case 8: loadouttype = CheckInventory("SamsaraHalfLifeLoadoutSlot7"); break;
          case 9: loadouttype = CheckInventory("SamsaraHalfLifeLoadoutUnique1"); break;
          case 10: loadouttype = CheckInventory("SamsaraHalfLifeLoadoutUnique2"); break;
          case 11: loadouttype = CheckInventory("SamsaraHalfLifeLoadoutUnique3"); break;
        }

		SetInventory("HLHEVPickupID", pickuptype + 1);
        SetInventory("HLHEVLoadoutID", loadouttype);
		ACS_NamedExecuteWithResult("HL_HUD_Pickups", pickuptype, loadouttype);
	}
}

script "HLHEVTalk" (int talktimer) clientside //2686
{
	Switch(talktimer)
	{
		case 0:
		if(CheckInventory("HLHEVIsTalking") == 1)
		{
			delay(80);
			TakeInventory("HLHevIsTalking", 1);
		}
		break;
		case 1:
		if(CheckInventory("HLHEVIsTalking") == 1)
		{
			delay(360);
			TakeInventory("HLHevIsTalking", 1);
		}
		break;
		case 2:
		if(CheckInventory("HLHEVIsTalking") == 1)
		{
			delay(160);
			TakeInventory("HLHevIsTalking", 1);
		}
		break;
		case 3: 
		if(CheckInventory("HLHEVIsTalking") == 1)
		{
			delay(105);
			TakeInventory("HLHevIsTalking", 1);
		}
		break;
	}
	terminate;
}

bool freemanonmap;

Script "HalfLifeDisplacerTeleportDecide" (void)
{
	SetActorProperty(0, APROP_Damage, 0);
	Delay(1);
	If(CheckInventory("HalfLifeClass"))
	{
		SetActivator(0, AAPTR_Tracer);
		If(GetActorProperty(0,APROP_Health) <= 0 || GetActorProperty(0,APROP_SpawnHealth) < 2000 || ((ClassifyActor(0) & ACTOR_MONSTER) || (ClassifyActor(0) & ACTOR_PLAYER)))
		{
			If((ClassifyActor(0) & ACTOR_MONSTER) || (ClassifyActor(0) & ACTOR_PLAYER))
				SetResultValue(1);
		}
		else
		{
			SetResultValue(0);
		}
	}
}

script "HalfLifeStartCoordinate" (void)
{
    if (CheckInventory("HalfLifeClass"))
    {
        SetInventory("HLDisplacerTeleportedPlayer", 0);
        SetInventory("HLDisplacerTeleporterX", 0);
        SetInventory("HLDisplacerTeleporterY", 0);
        SetInventory("HLDisplacerTeleporterZ", 0);
        SetInventory("HLDisplacerTeleporterXStart", (GetActorX(0) >> 16) + 65536);
        SetInventory("HLDisplacerTeleporterYStart", (GetActorY(0) >> 16) + 65536);
        SetInventory("HLDisplacerTeleporterZStart", (GetActorZ(0) >> 16) + 65536);
    }
}

script "HalfLifeStartCoordinateEnter" ENTER { ACS_NamedExecuteWithResult("HalfLifeStartCoordinate"); }
script "HalfLifeStartCoordinateRespawn" RESPAWN { ACS_NamedExecuteWithResult("HalfLifeStartCoordinate"); }
script "HalfLifeStartCoordinateReturn" RETURN { ACS_NamedExecuteWithResult("HalfLifeStartCoordinate"); }

Script "HalfLifeDisplacerTeleport" (int type)
{
	int x, y, z;

	if(type == 1)
	{
		x = GetActorX(0);
		y = GetActorY(0);
		z = GetActorZ(0);
		int oldTID, target;
		oldTID = ActivatorTID();
		target = UniqueTID();
		Thing_ChangeTID(0, target);
		SetActivator(0, AAPTR_Tracer);
		If(GetActorProperty(0,APROP_Health) > 0 || GetActorProperty(0,APROP_SpawnHealth) >= 2500 || (!(ClassifyActor(0) & ACTOR_MONSTER) || (!ClassifyActor(0) & ACTOR_PLAYER)))
		{	
			SetActivator(target);
			Thing_ChangeTID(target, oldTID);
			Thing_Remove(0);
			terminate;
		}
		Warp(0, x, y, z, 0, WARPF_ABSOLUTEPOSITION|WARPF_NOCHECKPOSITION);
		SetActorVelocity(0,0,0,0,0,0);
		PlaySound(oldTID, "HLDisplacer/TeleportOut", CHAN_7, 1.0, 0, ATTN_NORM);
	}
	else if(type == 2)
	{
		if(CheckInventory("HLDisplacerTeleportedPlayer"))
		{
			x = CheckInventory("HLDisplacerTeleporterX")<<16;
			y = CheckInventory("HLDisplacerTeleporterY")<<16;
			z = CheckInventory("HLDisplacerTeleporterZ")<<16;
			TakeInventory("HLDisplacerTeleportedPlayer", 1);
			//SpawnForced("HLDisplacerRing",GetActorX(0),GetActorY(0),GetActorZ(0)+(32<<16),0,0);
			SpawnForced("HLPlayerTeleportPost",GetActorX(0),GetActorY(0),GetActorZ(0)+(32<<16),0,0);	
			Warp(0, x, y, z, 0, WARPF_ABSOLUTEPOSITION|WARPF_NOCHECKPOSITION);
			SpawnForced("HLPlayerTeleportPost",x,y,z+(32<<16),0,0);
			//PlaySound(0, "HLDisplacer/TeleportOut", CHAN_7, 1.0, 0, ATTN_NORM);
			TakeInventory("HLDisplacerTeleporterX", 131072);
			TakeInventory("HLDisplacerTeleporterY", 131072);
			TakeInventory("HLDisplacerTeleporterZ", 131072);
		}
		else
		{
			GiveInventory("HLDisplacerTeleporterX", (GetActorX(0)>>16)+65536);
			GiveInventory("HLDisplacerTeleporterY", (GetActorY(0)>>16)+65536);
			GiveInventory("HLDisplacerTeleporterZ", (GetActorZ(0)>>16)+65536);
			x = CheckInventory("HLDisplacerTeleporterXStart")<<16;
			y = CheckInventory("HLDisplacerTeleporterYStart")<<16;
			z = CheckInventory("HLDisplacerTeleporterZStart")<<16;
			GiveInventory("HLDisplacerTeleportedPlayer", 1);
			//SpawnForced("HLDisplacerRing",GetActorX(0),GetActorY(0),GetActorZ(0)+(32<<16),0,0);
			SpawnForced("HLPlayerTeleportPost",GetActorX(0),GetActorY(0),GetActorZ(0)+(32<<16),0,0);
			Warp(0, x, y, z, 0, WARPF_ABSOLUTEPOSITION|WARPF_NOCHECKPOSITION);
			SpawnForced("HLPlayerTeleportPost",x,y,z+(32<<16),0,0);
			//PlaySound(0, "HLDisplacer/TeleportOut", CHAN_7, 1.0, 0, ATTN_NORM);
		}		
		SetActorVelocity(0,0,0,0,0,0);	
	}
}

Script "HalfLifeGrenadeFuse" (void)
{
	int oldTID, target;
	oldTID = ActivatorTID();
	target = UniqueTID();
	Thing_ChangeTID(0, target);
	SetActivator(0, AAPTR_Target);
	int grenadefuse = CheckInventory("HLGrenadeFuse");
	SetActivator(target);
	Thing_ChangeTID(target, oldTID);
	GiveInventory("HLGrenadeFuse", grenadefuse);
	
	while(CheckInventory("HLGrenadeFuse") > 0)
	{
		TakeInventory("HLGrenadeFuse", 1);
		Delay(1);
	}
	
	SetActorState(0, "Death", true);
	terminate;
}

Script "HalfLifeSniperScope" (void)
{
	While(CheckInventory("HLSniperIsZoomed"))
	{
		SetHudSize(640,480,0);
		SetFont("HLM40A1Z");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD,17460,0,321.0,240.0,0.2,1.0);
		Delay(1);
	}
	SetHudSize(0,0,0);
	SetFont("none");
	HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD,17460,0,160.0,100.0,0.2,1.0);
	terminate;
}

Script "HalfLifeAllyWalkRunSpeed" (int set)
{
	if(CheckFlag(0,"SHOOTABLE") == false)
		terminate;
	int speed = CheckInventory("HLSpeedTokens");
	switch(set)
	{
		case 0:
			SetActorProperty(0, APROP_Speed, (speed<<16)/2);
			break;
		case 1:
			SetActorProperty(0, APROP_Speed, speed<<16);
			break;
		case 2:
			SetActorProperty(0, APROP_Speed, (speed<<16)/4);
			break;
		case 3:
			SetActorProperty(0, APROP_Speed, (speed<<16)/5);
			break;
		case 4:
			SetActorProperty(0, APROP_Speed, (FixedMul(1.5,speed)<<16));
			break;
		case 5:
			SetActorProperty(0, APROP_Speed, (speed<<16)*2);
			break;
	}
}

Script "HalfLifeFootStepGenerator" enter
{
	if((ClassifyActor(0) & ACTOR_WORLD))
		terminate;
		
	if(CheckInventory("HalfLifeClass"))
	{
		int speedx, speedy, lasttimer, velocity, movement;
		
		while((ClassifyActor(0) & ACTOR_ALIVE))
		{
			//we'll handle crouch here too
			if(GetActorViewHeight(0) <=  GetActorViewHeight(0) / 2 << 16)
				GiveInventory("HalfLifeCrouching",1);
			else
				TakeInventory("HalfLifeCrouching",1);
		
			speedx = GetActorVelX(0);
			speedy = GetActorVelY(0);
			
			velocity = magnitudeTwo_f(speedx, speedy);
			if(velocity>>8 != 0)
				movement = 750/((velocity>>8)*7);
			else
				movement = 0;
													
			if((Timer()-lasttimer) > movement && movement != 0)
			{
				//PlaySound(0, "HLPlayer/Step", CHAN_BODY, 1.0, false, ATTN_NORM);
				if (!CheckInventory("SamsaraQuietFootsteps")) { SpawnSpotForced("HLStep",0,0,0); }
				lasttimer = Timer();
			}
			
			Delay(1);
		}
	}
}

//should be harmless to have mixer references here
str HalfLifeFootStepSoundObjects[3] = { "HLStep", "HLRobotStep", "HLVoltigoreStep" };

Script "HalfLifeFootStepGeneratorEnemy" (int steptype)
{
	if((ClassifyActor(0) & ACTOR_WORLD))
		terminate;
		
	if((ClassifyActor(0) & ACTOR_MONSTER))
	{
		int speedx, speedy, currentx, currenty, lastx, lasty, lasttimer, velocity, movement;
		
		while((ClassifyActor(0) & ACTOR_ALIVE))
		{
			lastx = GetActorX(0);
			lasty = GetActorY(0);
			Delay(1);
			currentx = GetActorX(0);
			currenty = GetActorY(0);
			
			speedx = abs(currentx - lastx)>>16;
			speedy = abs(currenty - lasty)>>16;
			
			velocity = magnitudeTwo(speedx, speedy);
			
			if(velocity != 0)
				movement = 500/(velocity*7);
			else
				movement = 0;
			
			if((Timer()-lasttimer) > movement && movement != 0)
			{
				SpawnSpotForced(HalfLifeFootStepSoundObjects[steptype],0,0,0);
				lasttimer = Timer();
			}
		}
		terminate;
	}
}

Script "HalfLife_BulletDamage" (int damage)
{
	int bulletX = GetActorX(0);
	int bulletY = GetActorY(0);
	int bulletZ = GetActorZ(0);
	SetActivator(0,AAPTR_Tracer);
	int monsterX = GetActorX(0);
	int monsterY = GetActorY(0);
	int monsterZ = GetActorZ(0);
	int monsterHealth = GetActorProperty(0,APROP_Health);
	int monsterHeight = GetActorProperty(0,APROP_Height);
	int monsterWidth = GetActorProperty(0,APROP_Radius)*2;
	
	if(CheckFlag(0,"NOBLOOD")) { SetResultValue(damage); terminate; }
	
	if(!CheckInventory("IsFatButBiped") && monsterWidth > monsterHeight)
	{
		int monsterAngle = GetActorAngle(0);
		int vang = VectorAngle(monsterX - bulletX, monsterY - bulletY);
		int angle = vang % 1.0;
		
		if(!CheckInventory("NoHeadShots") && bulletZ > monsterZ + FixedMul(monsterHeight,0.35) && bulletZ < monsterZ + FixedMul(monsterHeight,0.65) && ((abs(monsterAngle - angle)) < 0.65 && (abs(monsterAngle - angle)) > 0.35))
		{			
			SetResultValue(damage*2);
		}
		else
			SetResultValue(damage);
	}
	else
	{
		if(!CheckInventory("NoHeadShots") && bulletZ > monsterZ + FixedMul(monsterHeight,0.75))
		{
			int result;
			if(GetCvar("samsara_mixerloaded"))
				result = ACS_NamedExecuteWithResult("Goldeneye_HatShot",0,0,0,0);
			else
				result = 0;
				
			if(result == -1)
			{
				SetResultValue(-1);
				terminate;
			}

			SetResultValue(damage*2);
		}
		else
			SetResultValue(damage);
	}
}

Script "HL_BloodGenerator_Offsets" (void)
{
	int missilex = GetActorX(0);
	int missiley = GetActorY(0);
	int missilez = GetActorZ(0);
	int missileAngle = GetActorAngle(0);
	SetActivator(0,AAPTR_Tracer);
		
	int enemyx = GetActorX(0);
	int enemyy = GetActorY(0);
	int enemyz = GetActorZ(0);
	int currentangle = GetActorAngle(0);
	int vang = VectorAngle(enemyx - missilex, enemyy - missiley);
	int angle = vang % 1.0;
	TakeInventory("HL_BloodGeneratorBleedAngle",999999);
	TakeInventory("HL_BloodGeneratorAngle",999999);
	TakeInventory("HL_BloodGeneratorZ",999999);
	GiveInventory("HL_BloodGeneratorAngle",angle+65536);
	GiveInventory("HL_BloodGeneratorBleedAngle",missileAngle+65536);
	GiveInventory("HL_BloodGeneratorZ",(missilez - enemyz)>>16 + 65536);
}

Script "HL_BloodGenerator_Return" (int mode) 
{
	int result;
	switch(mode)
	{
		case 1:
			result = ((CheckInventory("HL_BloodGeneratorAngle") - 65536)/182)+180;
			break;
		case 2:
			result = CheckInventory("HL_BloodGeneratorZ");
			break;
		case 3:
			result = ((CheckInventory("HL_BloodGeneratorBleedAngle") - 65536)/182);
			break;
	}
	SetResultValue(result);
}

script "HLBarnacleTether" (int query, int organic) //2679
{
	int vx, vy, vz, tx, ty, tz, mag, i, x, y, z;
	int vectorx, vectory, vectorz, xoff, yoff, angle, pitch, length, magI;
	int queryCounter;
	int tongueTid = 28000+PlayerNumber();
	int startingTid = UniqueTid();
	str particle = "HLOPBarnacleTongue";
	Thing_ChangeTid(0,startingTid);
	Thing_Remove(tongueTid);
	if(query)
	{
		if((timer()%16)/4 != 0)
			particle = strparam(s:"HLOPBarnacleTongue",d:((timer()%16)/4)+1);
			
		tx = GetActorX(0); 
		ty = GetActorY(0); 
		tz = GetActorZ(0);
		
		SetActivatorToTarget(0);	
			
		xoff = sin(GetActorAngle(0)) * 4;
		yoff = cos(GetActorAngle(0)) * 4;
			
		x = GetActorX(0) + xoff;
		y = GetActorY(0) - yoff;
		z = GetActorZ(0) + GetActorProperty(0,APROP_ViewHeight)/((GetActorProperty(0,APROP_Height)<32.0) + 1) - 4.0;
		
		vectorx = tx - x;
		vectory = ty - y;
		vectorz = tz - z;
		angle = VectorAngle(vectorx, vectory);
		
		length = magnitudeTwo(vectorx>>16,vectory>>16);
		pitch = VectorAngle(length<<16, vectorz);

		vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz); vx = FixedDiv(vx, mag); 
		vy = FixedDiv(vy, mag);  vz = FixedDiv(vz, mag);
		magI = ftoi(mag);
		
		for (i = 16; i < magI; i += 16)
		{
			if (!CheckInventory("HLOPBarnacleTetherActive"))
			{
				GiveInventory("HLOPBarnacleReleaseTether",1);
				TakeInventory("HLOPBarnacleLatchedTether",1);
				Thing_Remove(startingTid);
				break;
			}
				
			SpawnForced(particle, x+(vx*i), y+(vy*i), z+(vz*i),tongueTid);
			SetActorAngle(tongueTid, angle);
			SetActorPitch(tongueTid, pitch);
		}
		
		Delay(2);
	}
	else
	{
		if(organic)
		{
			SetActivator(0,AAPTR_Tracer);
		
			int monsterIsSmall = GetActorProperty(0,APROP_Mass) <= 50 && ClassifyActor(0) & ACTOR_MONSTER;
			
			while (ClassifyActor(startingTid) > 1)
			{
				SetActivator(startingtid,AAPTR_Target);

				if (!CheckInventory("HLOPBarnacleTetherActive")) { break; }

				SetActivator(startingTid,AAPTR_Tracer);
				ACS_NamedExecuteWithResult("HLBarnacleMonsterBlocker",0,0,0,0);
				
				if (!(ClassifyActor(0) & ACTOR_ALIVE)) { break; }
				
				tx = GetActorX(0); ty = GetActorY(0); tz = GetActorZ(0) + GetActorProperty(0,APROP_Height)/2;
		
				SetActivatorToTarget(startingTid);
				
				if (!(ClassifyActor(0) & ACTOR_ALIVE)) { break; }
					
				xoff = sin(GetActorAngle(0)) * 4;
				yoff = cos(GetActorAngle(0)) * 4;
					
				x = GetActorX(0) + xoff;
				y = GetActorY(0) - yoff;
				z = GetActorZ(0) + GetActorProperty(0,APROP_ViewHeight)/((GetActorProperty(0,APROP_Height)<32.0) + 1) - 4.0;
				
				vectorx = tx - x;
				vectory = ty - y;
				vectorz = tz - z;
				angle = VectorAngle(vectorx, vectory);
				
				length = magnitudeTwo(vectorx>>16,vectory>>16);
				pitch = VectorAngle(length<<16, vectorz);

				vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
				vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
				magI = ftoi(mag);
				
				for (i = 0; i < magI; i += 16)
				{
					SpawnForced(particle, x+(vx*i), y+(vy*i), z+(vz*i),tongueTid);
					SetActorAngle(tongueTid, angle);
					SetActorPitch(tongueTid, pitch);
				}
				
				if(monsterIsSmall)
				{
					angle += 0.5;
					vectorz *= -1;
					SetActivator(startingTid,AAPTR_Tracer);
				}
				
				ThrustThing(angle>>8,1,0,0);							
				ThrustThingZ(0,sign(vectorz)*4,0,0);
					
				if(monsterIsSmall) { SetActivator(startingTid,AAPTR_Target); }
				
				Delay(2);
				
				Thing_Remove(tongueTid);
			}
		}	
		SetActivator(startingTid,AAPTR_Target);
		Thing_Remove(tongueTid);
		GiveInventory("HLOPBarnacleReleaseTether",1);
		TakeInventory("HLOPBarnacleLatchedTether",1);
		TakeInventory("HLOPBarnacleTetherActive",1);
	}
}

Script "HLBarnacleMonsterBlocker" (void)
{
	if(!(ClassifyActor(0) & ACTOR_Monster) || CheckFlag(0,"NOBLOCKMONST"))
		terminate;
	
	GiveInventory("HLOPBarnacleBlockRemover",1);
	Delay(2);
	TakeInventory("HLOPBarnacleBlockRemover",1);
}

Script "HLLongJumpSlowedThrust" (int maxThrust, int speed)
{
	int thrustAngle = GetActorAngle(0)>>8;
	int thrustCounter = 1;
	SetPlayerProperty(0,1,PROP_FROZEN);
	Thing_Stop(0);
    PlaySound(0, "HLLongJump/Activate", CHAN_7);
	ACS_NamedExecuteWithResult("HalfLifeRecoil",6);
	for(int a = 0; a < maxThrust; a+= speed)
	{
		ThrustThing(thrustAngle,maxThrust/(2*thrustCounter),0,0);
		ThrustThingZ(0,(maxThrust/(2*thrustCounter))*4,0,0);
		thrustCounter++;
		Delay(2);
	}
	SetPlayerProperty(0,0,PROP_FROZEN);
}
