// Scripts placed here due to the presence of UnloadingNow

script "SamsaraMegaHealth" (int hpcount, int hpPerSec, int delayTics) //259 -- SAMSARA_MEGAHEALTH // used by quake 1, quake 2, and hexen 2
{
    int hpGiven = GetActorProperty(0, APROP_Health);
    int startHealth = hpGiven;
    int hpCap = getMaxHealth(0);

    if (GetCVar("samsara_nohealthcap")) { hpCap = INTMAX; }
    else if (hpCap < 250) { hpCap = 250; }

    SetActorProperty(0, APROP_Health, min(hpGiven + hpcount, hpCap));
    hpGiven = GetActorProperty(0, APROP_Health) - hpGiven;

    hpPerSec = 1.0 / (hpPerSec * 35);

    int takeCounter, hpToTake;

    while (1)
    {
        if (CheckInventory("QuakeRegenTimer") || CheckInventory("SamsaraHasProsperity") || GetCVar("sv_degeneration"))
        {
            Delay(1);
            continue;
        }

        if (UnloadingNow)
        {
            hpToTake = GetActorProperty(0, APROP_Health);

            hpToTake = middle(hpToTake, getMaxHealth(0), hpToTake - hpGiven);
            SetActorProperty(0, APROP_Health, hpToTake);
            break;
        }

        if (delayTics > 0) { delayTics--; }
        else
        {
            takeCounter += hpPerSec;
            hpToTake = min(ftoi(takeCounter), hpGiven);
            hpGiven -= hpToTake;

            SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_Health) - hpToTake);
            takeCounter -= itof(hpToTake);
        }

        if (hpGiven <= 0) { break; }
        if (GetActorProperty(0, APROP_Health) <= startHealth ||
            GetActorProperty(0, APROP_Health) <= getMaxHealth(0)) { break; }
        Delay(1);
    }
}

script "SamsaraQPowers" (int startTime, int respawning) //636 -- SAMSARA_QPOWERS // used by quake 1
{
    int pln = PlayerNumber();
    int quadTimer,  oQuadTimer;
    int regenTimer, oRegenTimer;
    int invisTimer, oInvisTimer;
    int pentTimer,  oPentTimer;
    int health, oHealth, regenPulse, oPulse;
    int regenX, regenY;
    int healthGiven, healthMax;
    int opowercount, powercount, offset;
    int baseHealthUpgrade;

    if (GetCVar("samsara_restorehealth") > 0 && !respawning && !isDead(0) && !isLMS() && !GetCVar("samsara_lmsrules"))
    {
        health = GetActorProperty(0, APROP_Health);

        baseHealthUpgrade = CheckInventory("SamsaraExtraBaseSpawnHealth") + CheckInventory("SamsaraExtraBaseSpawnHealthDeterminant") + CheckInventory("SamsaraExtraBaseSpawnHealthPermanent");

        if (GetCVar("samsara_restorehealth") >= 2)
        {
            if (samsaraClassNum() == CLASS_WITCHAVEN) { SetActorProperty(0, APROP_Health, max(health, 100 + CheckInventory("SamsaraWitchavenHealthIncrease") + baseHealthUpgrade)); }
            else if (samsaraClassNum() == CLASS_DEMONESS) { SetActorProperty(0, APROP_Health, max(health, 70 + CheckInventory("Hexen2HealthAdd") + baseHealthUpgrade)); }
            else if (samsaraClassNum() != CLASS_QUAKE) { SetActorProperty(0, APROP_Health, max(health, 100 + baseHealthUpgrade)); }
        } else if (GetCVar("samsara_restorehealth") == 1) {
            if (samsaraClassNum() == CLASS_WITCHAVEN) { SetActorProperty(0, APROP_Health, max(health, (100 + CheckInventory("SamsaraWitchavenHealthIncrease") + baseHealthUpgrade) / 2)); }
            else if (samsaraClassNum() == CLASS_DEMONESS) { SetActorProperty(0, APROP_Health, max(health, (70 + CheckInventory("Hexen2HealthAdd") + baseHealthUpgrade) / 2)); }
            else if (samsaraClassNum() != CLASS_QUAKE) { SetActorProperty(0, APROP_Health, max(health, (100 + baseHealthUpgrade) / 2)); }
        }
    }

    if (samsaraClassNum() != CLASS_QUAKE) { terminate; }

    quadTimer   = CheckQuad();
    regenTimer  = CheckInventory("QuakeRegenTimer");
    invisTimer  = CheckInventory("QuakeInvisTimer");
    pentTimer   = CheckInventory("QuakePentTimer");

    health = GetActorProperty(0, APROP_Health);

    while (ServerEnterTimes[pln] == startTime)
    {
        oHealth = health;
        health = GetActorProperty(0, APROP_Health);

        if (health <= 0)
        {
            if (CheckInventory("SamsaraHasDisabledInventoryCooldown")) { TakeInventory("QuakeQuadTimer", 0x7FFFFFFF); }
            else
            {
                quadTimer = CheckQuad(); 
                TakeInventory("QuakeQuadTimer", quadTimer);
            }

            if (!CheckInventory("QuakeQuadTimer") || CheckQuad() > 0 || CheckInventory("SamsaraHasDisabledInventoryCooldown") || !GetCVar("samsara_permaquad")) { SetInventory("SamsaraQuadDamageCooldownDisplay", 0); }
            else { SetInventory("SamsaraQuadDamageCooldownDisplay", CheckInventory("QuakeQuadTimer") / 35 + 1); }

            TakeInventory("QuakeRegenTimer", 0x7FFFFFFF);
            TakeInventory("QuakeInvisTimer", 0x7FFFFFFF);
            TakeInventory("QuakePentTimer", 0x7FFFFFFF);

            Delay(1);
            continue;
        }

        oQuadTimer = quadTimer;
        quadTimer  = CheckQuad();

        oRegenTimer = regenTimer;
        regenTimer  = CheckInventory("QuakeRegenTimer");

        oInvisTimer = invisTimer;
        invisTimer  = CheckInventory("QuakeInvisTimer");

        oPentTimer = pentTimer;
        pentTimer  = CheckInventory("QuakePentTimer");

        offset = 1;
        opowercount = powercount;
        powercount = 0;
        powercount += (quadTimer > 0);
        powercount += (regenTimer > 0);
        powercount += (invisTimer > 0);
        powercount += (pentTimer > 0);

        if (quadTimer - 35 > oQuadTimer)
        {
            if (CheckInventory("SamsaraAlternateSoundToken") >= 2) { AmbientSound("quakeweps/dmc/quadon", 127); } // Deathmatch Classic
            else if (CheckInventory("SamsaraAlternateSoundToken") == 1) { AmbientSound("quakeweps/rerelease/quadon", 127); } // Rerelease
            else { AmbientSound("quakeweps/quadon", 127); } // Original
        }

        if (quadTimer > 0)
        {
            if (quadTimer % 35 == 0 || oQuadTimer < quadTimer || (opowercount != powercount))
            {
                SetHudSize(320, 200, 1);
                SetFont("Q1P1ICO1");
                HudMessage(s:"A"; HUDMSG_FADEOUT, 58101, CR_UNTRANSLATED, 311.0, PY320 - (POFF320 * offset), 1.5, 1.0);
                SetHudSize(320, 200, 1);
                SetFont("QUAKCONP");
                HudMessage(d:(quadTimer+34) / 35;  HUDMSG_FADEOUT, 58102 , CR_UNTRANSLATED, 300.2, PY320 - (POFF320 * offset), 1.5, 1.0);
            }

            offset++;

            if (oQuadTimer <= 0 || oHealth <= 0) { GiveInventory("QuadDamagePower", 1); }
        }
        else
        {
            if (CheckInventory("DoNotQuad")) { TakeInventory("DoNotQuad", 1); }

            if (quadTimer == 0)
            {
                HudMessage(s:""; HUDMSG_PLAIN, 58101, CR_UNTRANSLATED, 0, 0, 1);
                HudMessage(s:""; HUDMSG_PLAIN, 58102, CR_UNTRANSLATED, 0, 0, 1);
            }
            TakeInventory("QuadDamagePower", 1);

            if (CheckInventory("SamsaraHasDisabledInventoryCooldown"))
            {
                TakeInventory("QuakeQuadTimer", 0x7FFFFFFF);
                if (!CheckInventory("QuakeQuadTimer") || CheckQuad() > 0 || CheckInventory("SamsaraHasDisabledInventoryCooldown") || !GetCVar("samsara_permaquad")) { SetInventory("SamsaraQuadDamageCooldownDisplay", 0); }
                else { SetInventory("SamsaraQuadDamageCooldownDisplay", CheckInventory("QuakeQuadTimer") / 35 + 1); }
            }
        }

        if (quadTimer == 105)
        {
            if (CheckInventory("SamsaraAlternateSoundToken") >= 2) { LocalAmbientSound("quakeweps/dmc/quadoff", 127); } // Deathmatch Classic
            else if (CheckInventory("SamsaraAlternateSoundToken") == 1) { LocalAmbientSound("quakeweps/rerelease/quadoff", 127); } // Rerelease
            else { LocalAmbientSound("quakeweps/quadoff", 127); } // Original
        }

        if ((quadTimer % 35 == 0) && (quadTimer / 35 <= 3) && (quadTimer > 0))
        {
            FadeRange(0, 64, 255, 0.25, 0, 64, 255, 0, 0.33);
        }

        if (quadTimer == -QUAD_THRESHOLD)
        {
            if (CheckInventory("CantQuad") && CheckInventory("QuadDamageItem") && GetCVar("samsara_permaquad") && !CheckInventory("SamsaraHasDisabledInventoryCooldown") && !UnloadingNow)
            {
                if (CheckInventory("SamsaraAlternateSoundToken") >= 2) { LocalAmbientSound("quakeweps/dmc/quadready", 96); } // Deathmatch Classic
                else if (CheckInventory("SamsaraAlternateSoundToken") == 1) { LocalAmbientSound("quakeweps/rerelease/quadready", 96); } // Rerelease
                else { LocalAmbientSound("quakeweps/quadready", 96); } // Original

                SetHudSize(240, 180, 1);
                SetFont("QUADICO2");
                HudMessage(s:"A"; HUDMSG_FADEOUT, 58103, CR_UNTRANSLATED, 215.4, 102.0, 0.0, 1.0);
            }

            TakeInventory("CantQuad", 0x7FFFFFFF);
        }
        else
        {
            GiveInventory("CantQuad", 1);
        }

        /*
         * Pentagram shit
         */

        if (pentTimer - 35 > oPentTimer)
        {
            AmbientSound("quakeweps/pentagramon", 127);
        }

        if (pentTimer > 0)
        {
            if (pentTimer % 35 == 0 || oPentTimer < pentTimer || powercount != opowercount)
            {
                SetHudSize(320, 200, 1);
                SetFont("Q1P3ICO1");
                HudMessage(s:"A"; HUDMSG_FADEOUT, 58107, CR_UNTRANSLATED, 311.0, PY320 - (POFF320 * offset), 1.5, 1.0);
                SetHudSize(320, 200, 1);
                SetFont("QUAKCONP");
                HudMessage(d:(pentTimer+34) / 35;  HUDMSG_FADEOUT, 58108, CR_UNTRANSLATED, 300.2, PY320 - (POFF320*offset), 1.5, 1.0);
            }

            offset++;

            if (pentTimer % 35 == 0 && pentTimer / 35 < 5)
            {
                LocalAmbientSound("quakeweps/pentagramout", PowerOutVols[regenTimer / 35]);
            }
            else if (Timer() % 140 == 0)
            {
                ActivatorSound("quakeweps/pentagram", 96);
            }

            if (oPentTimer <= 0 || oHealth <= 0) { GiveInventory("QuakePentagram", 1); }
        }
        else
        {
            if (oPentTimer != 0)
            {
                HudMessage(s:""; HUDMSG_PLAIN, 58107, CR_UNTRANSLATED, 0, 0, 1);
                HudMessage(s:""; HUDMSG_PLAIN, 58108, CR_UNTRANSLATED, 0, 0, 1);
                TakeInventory("QuakePentagram", 0x7FFFFFFF);
            }

        }

        /*
         * Regen shit
		 
		 938: i do want to make the regen icon pulse in the sprite instead of just increasing in size, but I can't figure out how to do that.
         */

        if (regenTimer != 0)
        {
            if (regenTimer - 35 > oRegenTimer) { AmbientSound("quakeweps/regenannounce", 127); }

            regenX = 320 - (regenPulse * 18);
            regenY = 200 - (regenPulse * 18);

            if (regenTimer % 35 == 0 || regenPulse != 0 || oPulse != 0 || oRegenTimer < regenTimer || (opowercount != powercount))
            {
                SetHudSize(320, 200, 1); // SetHudSize(regenX, regenY, 1);
                regenX = ftoi(regenX * REGEN_CENTER_X);
                regenY = ftoi(regenY * REGEN_CENTER_Y) - ftoi(regenY * (REGEN_OFFSET * offset));

                SetFont("Q1P5ICO1");
                HudMessage(s:"A"; HUDMSG_FADEOUT, 58103, CR_UNTRANSLATED, 311.0, PY320 - (POFF320 * offset), 1.25, 0.25); //itof(regenX) + 0.4, itof(regenY)
                SetHudSize(320, 200, 1);
                SetFont("QUAKCONP");
                HudMessage(d:(regenTimer+34) / 35;  HUDMSG_FADEOUT, 58104, CR_UNTRANSLATED, 300.2, PY320 - (POFF320 * offset), 1.25, 0.25);
                // the +34 was added so that the regen pulse didn't prematurely lower the seconds display by one
            }

            offset++;

            oPulse = regenPulse;
            regenPulse = max(0, regenPulse - 1);

            if (regenTimer % 35 == 18 && !isDead(0))
            {
                healthMax = getMaxHealth(0);

                if (GetCVar("samsara_nohealthcap")) { healthMax = INTMAX; }
                else if (healthMax < 250) { healthMax = 250; }

                if (health >= 100) { giveHealthMax(5, healthMax); }
                else if (health + 10 >= 100)
                {
                    SetActorProperty(0, APROP_Health, 100);
                    giveHealthMax(5, healthMax);
                }
                else { giveHealthMax(15, healthMax); }

                if (GetActorProperty(0, APROP_Health) > health)
                {
                    FadeRange(255, 128, 128, 0.1, 255, 0, 0, 0.0, 0.3333);
                    ActivatorSound("quakeweps/regen", 127);
                    regenPulse = 12;
                }

                if (!GetCVar("samsara_nohealthcap")) { healthGiven += max(GetActorProperty(0, APROP_Health) - health, 0); }
                health = GetActorProperty(0, APROP_Health);
            }

            if (regenTimer % 35 == 0 && regenTimer / 35 < 5)
            {
                LocalAmbientSound("quakeweps/regenout", PowerOutVols[regenTimer / 35]);
            }
        }
        else if (CheckInventory("SamsaraHasProsperity") || GetCVar("sv_degeneration"))
        {
            regenTimer = 0;
        }
        else
        {
            if (oRegenTimer != 0)
            {
                HudMessage(s:""; HUDMSG_PLAIN, 58103, CR_UNTRANSLATED, 0, 0, 1);
                HudMessage(s:""; HUDMSG_PLAIN, 58104, CR_UNTRANSLATED, 0, 0, 1);
            }

            if (health <= getMaxHealth(0)) { healthGiven = 0; }

            if (Timer() % 35 == 0 && healthGiven > 0 && (health - 1 >= getMaxHealth(0)))
            {
                SetActorProperty(0, APROP_Health, health - 1);
            }
        }

        /*
         * Invis shit
         */

        if (invisTimer - 35 > oInvisTimer)
        {
            ActivatorSound("quakeweps/invison", 127);
        }

        if (invisTimer > 0)
        {
            if (invisTimer % 35 == 0 || oInvisTimer < invisTimer || powercount != opowercount)
            {
                SetHudSize(320, 200, 1);
                SetFont("Q1P2ICO1");
                HudMessage(s:"A"; HUDMSG_FADEOUT, 58105, CR_UNTRANSLATED, 311.0, PY320 - (POFF320 * offset), 1.5, 1.0);
                SetHudSize(320, 200, 1);
                SetFont("QUAKCONP");
                HudMessage(d:(invisTimer+34) / 35;  HUDMSG_FADEOUT, 58106, CR_UNTRANSLATED, 300.2, PY320 - (POFF320 * offset), 1.5, 1.0);
            }

            offset++;

            if (invisTimer % 105 == 0)
            {
                ActivatorSound("quakeweps/inviswhisper", 127);
            }

            if (invisTimer == 105)
            {
                LocalAmbientSound("quakeweps/invisout", 127);
            }

            if (oInvisTimer <= 0 || oHealth <= 0) { GiveInventory("QuakeInvisibility", 1); }
        }
        else
        {
            if (oInvisTimer != 0)
            {
                HudMessage(s:""; HUDMSG_PLAIN, 58105, CR_UNTRANSLATED, 0, 0, 1);
                HudMessage(s:""; HUDMSG_PLAIN, 58106, CR_UNTRANSLATED, 0, 0, 1);
                GiveInventory("QuakeInvisibilityOff", 1);
            }

        }

        TakeInventory("QuakeQuadTimer", 1);
        if (!CheckInventory("QuakeQuadTimer") || CheckQuad() > 0 || CheckInventory("SamsaraHasDisabledInventoryCooldown") || !GetCVar("samsara_permaquad")) { SetInventory("SamsaraQuadDamageCooldownDisplay", 0); }
        else { SetInventory("SamsaraQuadDamageCooldownDisplay", CheckInventory("QuakeQuadTimer") / 35 + 1); }

        TakeInventory("QuakeRegenTimer", 1);
        TakeInventory("QuakeInvisTimer", 1);
        TakeInventory("QuakePentTimer", 1);

        if (UnloadingNow)
        {
            SetActorProperty(0, APROP_Health, middle(health, getMaxHealth(0), health - healthGiven));

            health = GetActorProperty(0, APROP_Health);

            baseHealthUpgrade = CheckInventory("SamsaraExtraBaseSpawnHealth") + CheckInventory("SamsaraExtraBaseSpawnHealthDeterminant") + CheckInventory("SamsaraExtraBaseSpawnHealthPermanent");

            if (GetCVar("samsara_restorehealth") >= 2) { SetActorProperty(0, APROP_Health, max(health, 100 + baseHealthUpgrade)); } // getMaxHealth(0)
            else { SetActorProperty(0, APROP_Health, max(health, (100 + baseHealthUpgrade) / 2)); } // getMaxHealth(0) / 2
            break;
        }

        Delay(1);
    }
}
