int PainkillerSilverTarotCards = 14;
int PainkillerGoldTarotCards = 17;
int PKGiveSilver = 2;
int PKGiveGold = 3;

str Painkiller_Silver_CardGraphics[14][6] = {
	{ "PKSCRD00", "PKBCRD00", "Soul Catcher", "Leech souls from a distance", "Painkiller_SoulCatcher", "Painkiller_SoulCatcher_Power" },
	{ "PKSCRD01", "PKBCRD01", "Gold Magnet", "Gold magnetically attracts to you", "Painkiller_GoldMagnet", "Painkiller_GoldMagnet_Power" },
	{ "PKSCRD02", "PKBCRD02", "Soul Redeemer", "Souls provide more health", "Painkiller_SoulRedeemer", "Painkiller_SoulRedeemer_Power" },
	{ "PKSCRD03", "PKBCRD03", "Dark Soul", "Morph into demon form at every 50 souls", "Painkiller_DarkSoul", "Painkiller_DarkSoul_Power" },
	{ "PKSCRD04", "PKBCRD04", "Blessing", "Increase the base health to 150", "Painkiller_Blessing", "Painkiller_Blessing_Power" },
	{ "PKSCRD05", "PKBCRD05", "Replenish", "Double the ammo in ammo boxes", "Painkiller_Replenish", "Painkiller_Replenish_Power" },
	{ "PKSCRD06", "PKBCRD06", "Forgiveness", "You can use Golden Cards five times per level", "Painkiller_Forgiveness", "Painkiller_Forgiveness_Power" },
	{ "PKSCRD07", "PKBCRD07", "Mercy", "You can use Golden Cards seven times per level", "Painkiller_Mercy", "Painkiller_Mercy_Power" },
	{ "PKSCRD08", "PKBCRD08", "Last Breath", "Health regeneration when you're dying", "Painkiller_LastBreath", "Painkiller_LastBreath_Power" },
	{ "PKSCRD09", "PKBCRD09", "Health Stealer", "12.5% of the damage to the enemy goes to player's health", "Painkiller_HealthStealer", "Painkiller_HealthStealer_Power" },
	{ "PKSCRD10", "PKBCRD10", "Health Regeneration", "Health starts regeneratating 10 seconds after the last damage", "Painkiller_HealthRegeneration", "Painkiller_HealthRegeneration_Power" },
	{ "PKSCRD11", "PKBCRD11", "Armor Regeneration", "Armor starts regeneratating 10 seconds after the last damage", "Painkiller_ArmorRegeneration", "Painkiller_ArmorRegeneration_Power" },
	{ "PKSCRD12", "PKBCRD12", "Fear", "All enemies have 90% of initial HP", "Painkiller_Fear", "Painkiller_Fear_Power" },
	{ "PKSCRD13", "PKBCRD13", "666 Ammo", "Get 666 ammo for each weapon at the beginning of each level", "Painkiller_666Ammo", "Painkiller_666Ammo_Power" }
};

str Painkiller_Gold_CardGraphics[17][6] = {
	{ "PKSCRD14", "PKBCRD14", "Speed", "Move faster", "Painkiller_Speed", "Painkiller_Speed_Power" },
	{ "PKSCRD15", "PKBCRD15", "Dexterity", "Weapons reload 2x faster", "Painkiller_Dexterity", "Painkiller_Dexterity_Power" },
	{ "PKSCRD16", "PKBCRD16", "Fury", "Deliver 2x more damage", "Painkiller_Fury", "Painkiller_Fury_Power" },
	{ "PKSCRD17", "PKBCRD17", "Rage", "Deliver 4x more damage", "Painkiller_Rage", "Painkiller_Rage_Power" },
	{ "PKSCRD18", "PKBCRD18", "Confusion", "Confuse enemies", "Painkiller_Confusion", "Painkiller_Confusion_Power" },
	{ "PKSCRD19", "PKBCRD19", "Endurance", "Take only half of the damage", "Painkiller_Endurance", "Painkiller_Endurance_Power" },
	{ "PKSCRD20", "PKBCRD20", "Iron Will", "Enemies can't hurt you", "Painkiller_IronWill", "Painkiller_IronWill_Power" },
	{ "PKSCRD21", "PKBCRD21", "Haste", "The world moves 2x slower. Does not work in multiplayer", "Painkiller_Haste", "Painkiller_Haste_Power" },
	{ "PKSCRD22", "PKBCRD22", "Double Haste", "The world moves 4x slower. Does not work in multiplayer", "Painkiller_DoubleHaste", "Painkiller_DoubleHaste_Power" },
	{ "PKSCRD23", "PKBCRD23", "Triple Haste", "The world moves 8x slower. Does not work in multiplayer", "Painkiller_TripleHaste", "Painkiller_TripleHaste_Power" },
	{ "PKSCRD24", "PKBCRD24", "Time Bonus", "Golden Cards last 10 seconds longer", "Painkiller_TimeBonus", "Painkiller_TimeBonus_Power" },
	{ "PKSCRD25", "PKBCRD25", "Double Time Bonus", "Golden Cards last 20 seconds longer", "Painkiller_DoubleTimeBonus", "Painkiller_DoubleTimeBonus_Power" },
	{ "PKSCRD26", "PKBCRD26", "Weapon Modifier", "Call Weapon Modifier", "Painkiller_WeaponModifier", "Painkiller_WeaponModifier_Power" },
	{ "PKSCRD27", "PKBCRD27", "Magic Gun", "Never waste ammo", "Painkiller_MagicGun", "Painkiller_MagicGun_Power" },
	{ "PKSCRD28", "PKBCRD28", "The Sceptre", "All enemies are weak", "Painkiller_TheSceptre", "Painkiller_TheSceptre_Power" },
	{ "PKSCRD29", "PKBCRD29", "Demon Morph", "Morph into Demon", "Painkiller_DemonMorphCard", "Painkiller_DemonMorphCard_Power" },
	{ "PKSCRD30", "PKBCRD30", "Rebirth", "Fully regenerate health and armor", "Painkiller_Rebirth", "Painkiller_Rebirth_Power" }
};

str PKArmors[55][2] =
{
    // Built-in
    { "BasicArmorBonus",                             "PKARMOR1" },
    { "ArmorBonus",                                  "PKARMOR1" },
    { "MaxArmorBonus",                               "PKARMOR1" },
    { "SlimeRepellent",                              "PKARMOR1" },
    { "GreenArmor",                                  "PKARMOR2" },
    { "SilverShield",                                "PKARMOR2" },
    { "LeatherArmor",                                "PKARMOR2" },
    { "ChexArmor",                                   "PKARMOR2" },
    { "BasicArmorPickup",                            "PKARMOR3" },
    { "BlueArmor",                                   "PKARMOR3" },
    { "BlueArmorForMegasphere",                      "PKARMOR3" },
    { "EnchantedShield",                             "PKARMOR3" },
    { "MetalArmor",                                  "PKARMOR3" },
    { "SuperChexArmor",                              "PKARMOR3" },

    // Normal
    { "ArmorScrapArmorNormal",                       "PKARMOR1" },
    { "ArmorScrap100",                               "PKARMOR1" },
    { "ArmorScrap200",                               "PKARMOR1" },
    { "InfiniteArmorBonus",                          "PKARMOR1" },
    { "MaxArmorScrapArmorNormal",                    "PKARMOR1" },
    { "ArmorScrapDumpArmorNormal",                   "PKARMOR1" },
    { "ArmorPackBonusLightArmorNormal",              "PKARMOR1" },
    { "ArmorPackBonusHeavyArmorNormal",              "PKARMOR1" },
    { "ArmorPack1ArmorNormal",                       "PKARMOR2" },
    { "StrifeArmorPack1ArmorNormal",                 "PKARMOR2" },
    { "ArmorPack3ArmorNormal",                       "PKARMOR3" },
    { "StrifeArmorPack3ArmorNormal",                 "PKARMOR3" },
    { "FuckArmor",                                   "PKARMOR3" },

    // Quake
    { "ArmorScrapArmorQuake",                        "PKARMOR1" },
    { "MaxArmorScrapArmorQuake",                     "PKARMOR1" },
    { "ArmorScrapDumpArmorQuake",                    "PKARMOR1" },
    { "ArmorPackBonusLightArmorQuake",               "PKARMOR1" },
    { "ArmorPackBonusHeavyArmorQuake",               "PKARMOR1" },
    { "ArmorPack1ArmorQuake",                        "PKARMOR2" },
    { "StrifeArmorPack1ArmorQuake",                  "PKARMOR2" },
    { "ArmorPack3ArmorQuake",                        "PKARMOR3" },
    { "StrifeArmorPack3ArmorQuakeTier2Active",       "PKARMOR3" },

    // Quake+
    { "StrifeArmorPack3ArmorQuakePlusTier2Inactive", "PKARMOR3" },

    // Marathon
    { "ArmorScrapArmorMarathon",                     "PKARMOR1" },
    { "MaxArmorScrapArmorMarathon",                  "PKARMOR1" },
    { "ArmorScrapDumpArmorMarathon",                 "PKARMOR1" },
    { "ArmorPackBonusLightArmorMarathon",            "PKARMOR1" },
    { "ArmorPackBonusHeavyArmorMarathon",            "PKARMOR1" },
    { "ArmorPack1ArmorMarathon",                     "PKARMOR2" },
    { "StrifeArmorPack1ArmorMarathon",               "PKARMOR2" },
    { "ArmorPack3ArmorMarathon",                     "PKARMOR3" },
    { "StrifeArmorPack3ArmorMarathon",               "PKARMOR3" },

    // Heretic
    { "ArmorScrapArmorHeretic",                      "PKARMOR1" },
    { "MaxArmorScrapArmorHeretic",                   "PKARMOR1" },
    { "ArmorScrapDumpArmorHeretic",                  "PKARMOR1" },
    { "ArmorPackBonusLightArmorHeretic",             "PKARMOR1" },
    { "ArmorPackBonusHeavyArmorHeretic",             "PKARMOR1" },
    { "ArmorPack1ArmorHeretic",                      "PKARMOR2" },
    { "StrifeArmorPack1ArmorHeretic",                "PKARMOR2" },
    { "ArmorPack3ArmorHeretic",                      "PKARMOR3" },
    { "StrifeArmorPack3ArmorHeretic",                "PKARMOR3" }
};

int PKTarotGoldCardCosts[17] = { 100, 300, 200, 500, 200, 100, 666, 100, 300, 500, 100, 300, 100, 300, 300, 666, 400 };
int PKTarotSilverCardCosts[14] = { 500, 1000, 1000, 400, 200, 500, 1000, 2000, 500, 2000, 1000, 1000, 1000, 2000 };

Script "Painkiller_BoltGunScopeGraphic" (void)
{
	while(CheckInventory("Painkiller_Zoomed"))
	{
		SetHudSize(768,1024,0);
		SetFont("PKBOLTZM");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD,1578,0,384.0,512.0,0.1,0.75);
		Delay(1);
	}
	HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD,1578,0,160.0,100.0,0.2,1.0);
}

Script "Painkiller_Loop" (void)
{
	if(!CheckInventory("PainkillerClass"))
		terminate;

	ACS_NamedExecuteWithResult("Painkiller_BlackTarotRestore");

	//int musicvolume = GetCVAR("SND_MusicVolume");
	int pln = PlayerNumber();
	int lastsilver1, lastsilver2, lastHealth, returnCardResult1, returnCardResult2, memory1, memory2;
	//LocalSetMusic(PainkillerMusic[themeseed][0][songseed],0);
	LocalAmbientSound("Painkiller/StartLevel",255);
	FadeTo (0, 0, 0, 1.0, 0.0);
	FadeTo (0, 0, 0, 0.0, 3.0);
	if(CheckInventory("Painkiller_SilverSlot1") > 0) ACS_NamedExecuteWithResult("Painkiller_SilverCardActivate",CheckInventory("Painkiller_SilverSlot1")-1,1);
	if(CheckInventory("Painkiller_SilverSlot2") > 0) ACS_NamedExecuteWithResult("Painkiller_SilverCardActivate",CheckInventory("Painkiller_SilverSlot2")-1,1);

	while(CheckInventory("PainkillerClass"))
	{
		ACS_NamedExecuteWithResult("Painkiller_HudItems",pln);
		if(CheckInventory("Painkiller_SilverSlot1") != lastsilver1)
		{
			TakeInventory(Painkiller_Silver_CardGraphics[lastsilver1-1][5],32);
			if(CheckInventory("Painkiller_SilverSlot1") != 0)
				GiveInventory(Painkiller_Silver_CardGraphics[CheckInventory("Painkiller_SilverSlot1")-1][5],1);
		}
		if(CheckInventory("Painkiller_SilverSlot2") != lastsilver2)
		{
			TakeInventory(Painkiller_Silver_CardGraphics[lastsilver2-1][5],32);
			if(CheckInventory("Painkiller_SilverSlot2") != 0)
				GiveInventory(Painkiller_Silver_CardGraphics[CheckInventory("Painkiller_SilverSlot2")-1][5],1);
		}
		if(!CheckInventory("Painkiller_GoldActive"))
		{
			if((CheckInventory("Painkiller_SoulCount") >= 66 - CheckInventory("Painkiller_DarkSoul_Power") * 16) && !CheckInventory("Painkiller_BlockDemonMorph") && !CheckInventory("Painkiller_NoDemonMorph"))
			{
				TakeInventory("Painkiller_DemonMorphFlash1",1);
				TakeInventory("Painkiller_DemonMorphFlash2",1);
				TakeInventory("Painkiller_SoulCount",65536);
				GiveInventory("Painkiller_BlockDemonMorph",1);
				ACS_NamedExecuteAlways("Painkiller_StartDemonMorph",0,1050,0,0);
			}
			/*else if(CheckInventory("Painkiller_SoulCount") == 65 && !CheckInventory("Painkiller_DemonMorphFlash2") && !CheckInventory("Painkiller_NoDemonMorph"))
			{
				GiveInventory("Painkiller_DemonMorphFlash2",1);
				ACS_NamedExecuteAlways("Painkiller_StartDemonMorph",0,35,0,0);
			}
			else if(CheckInventory("Painkiller_SoulCount") == 64 && !CheckInventory("Painkiller_DemonMorphFlash1") && !CheckInventory("Painkiller_NoDemonMorph"))
			{
				GiveInventory("Painkiller_DemonMorphFlash1",1);
				ACS_NamedExecuteAlways("Painkiller_StartDemonMorph",0,17,0,0);
			}	*/
		}

		if(CheckInventory("Painkiller_SilverSlot1") > 0) returnCardResult1 = ACS_NamedExecuteWithResult("Painkiller_SilverCardActivate",CheckInventory("Painkiller_SilverSlot1")-1,0,returnCardResult1,memory1);
		if(CheckInventory("Painkiller_SilverSlot2") > 0) returnCardResult2 = ACS_NamedExecuteWithResult("Painkiller_SilverCardActivate",CheckInventory("Painkiller_SilverSlot2")-1,0,returnCardResult2,memory2);

		int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
		if((buttons & BT_AltAttack) && (buttons & BT_Attack))
		{
			GiveInventory("Painkiller_Combo", 1);
		}
		lastsilver1 = CheckInventory("Painkiller_SilverSlot1");
		lastsilver2 = CheckInventory("Painkiller_SilverSlot2");

		switch(CheckInventory("Painkiller_SilverSlot1")-1)
		{
			default: break;
			case 10:
			case 11:
				memory1 = GetActorProperty(0,APROP_Health);
				break;
		}
		switch(CheckInventory("Painkiller_SilverSlot2")-1)
		{
			default: break;
			case 10:
			case 11:
				memory2 = GetActorProperty(0,APROP_Health);
				break;
		}

		Delay(1);
		TakeInventory("Painkiller_Combo", 1);

		//Footstep code
		int speedx, speedy, lasttimer, velocity, movement;
		speedx = GetActorVelX(0);
		speedy = GetActorVelY(0);

		velocity = magnitudeTwo_f(speedx, speedy);
		if(velocity>>8 != 0)
			movement = 750/((velocity>>8)*7);
		else
			movement = 0;

		if((Timer()-lasttimer) > movement && movement != 0)
		{
			//PlaySound(0, "HLPlayer/Step", CHAN_BODY, 1.0, false, ATTN_NORM);
			if (!CheckInventory("SamsaraQuietFootsteps")) { SpawnSpotForced("Painkiller_Step",0,0,0); }
			lasttimer = Timer();
		}
	}
}

Script "Painkiller_SilverCardActivate" (int card, int start, int memory1, int memory2)
{
	int returnValue = 0;
	int myHealth = 0;
	int myArmor = 0;
	switch(card)
	{
		default: break;
		case 4:
			if(start)
			{
				if (GetActorProperty(0, APROP_Health) < 150) { SetActorProperty(0, APROP_Health, 150); }
			}
			break;
		case 8:
			if(!CheckInventory("Painkiller_LastBreathToken"))
				SetPlayerProperty(0,1,PROP_BUDDHA);
			GiveInventory("Painkiller_LastBreathToken",1);

			myHealth = GetActorProperty(0,APROP_Health);
			if(myHealth <= 1)
			{
				SetActorProperty(0,APROP_Health,33);
				SetPlayerProperty(0,0,PROP_BUDDHA);
			}
			break;
		case 10:
			myHealth = GetActorProperty(0,APROP_Health);
			if(myHealth >= memory2)
				returnValue = memory1+1;
			else
				returnValue = 0;
			if(returnValue >= 350)
			{
				if(myHealth < 75 && (timer()%2)==0 && !isDead(0))
					SetActorProperty(0,APROP_Health,myHealth+1);
			}
			break;
		case 11:
			myHealth = GetActorProperty(0,APROP_Health);
			myArmor = CheckInventory("BasicArmor");
			if(myHealth >= memory2)
				returnValue = memory1+1;
			else
				returnValue = 0;
			if(returnValue >= 350)
			{
				if(myArmor < 75 && (timer()%2)==0 && !isDead(0))
					GiveInventory("ArmorScrapArmorNormal",1);
			}
			break;
		case 12:
			if(start)
			{
				Delay(5);
				GiveInventory("Painkiller_Fear_Player",1);
			}
			break;
		case 13:
			if(start)
			{
				if (GetAmmoCapacity("Clip") < 666) { SetAmmoCapacity("Clip",666); }
				if (GetAmmoCapacity("Shell") < 666) { SetAmmoCapacity("Shell",666); }
				if (GetAmmoCapacity("RocketAmmo") < 666) { SetAmmoCapacity("RocketAmmo",666); }
				if (GetAmmoCapacity("Cell") < 666) { SetAmmoCapacity("Cell",666); }
				if (GetAmmoCapacity("Painkiller_FreezerAmmo") < 666) { SetAmmoCapacity("Painkiller_FreezerAmmo",666); }
				if (GetAmmoCapacity("Painkiller_FlamerAmmo") < 666) { SetAmmoCapacity("Painkiller_FlamerAmmo",666); }
				if (GetAmmoCapacity("Painkiller_ElectroAmmo") < 666) { SetAmmoCapacity("Painkiller_ElectroAmmo",666); }
				if (GetAmmoCapacity("Painkiller_HeaterAmmo") < 666) { SetAmmoCapacity("Painkiller_HeaterAmmo",666); }

				if (CheckInventory("Clip") < 666) { SetInventory("Clip",666); }
				if (CheckInventory("Shell") < 666) { SetInventory("Shell",666); }
				if (CheckInventory("RocketAmmo") < 666) { SetInventory("RocketAmmo",666); }
				if (CheckInventory("Cell") < 666) { SetInventory("Cell",666); }
				if (CheckInventory("Painkiller_FreezerAmmo") < 666) { SetInventory("Painkiller_FreezerAmmo",666); }
				if (CheckInventory("Painkiller_FlamerAmmo") < 666) { SetInventory("Painkiller_FlamerAmmo",666); }
				if (CheckInventory("Painkiller_ElectroAmmo") < 666) { SetInventory("Painkiller_ElectroAmmo",666); }
				if (CheckInventory("Painkiller_HeaterAmmo") < 666) { SetInventory("Painkiller_HeaterAmmo",666); }

                SetInventory("SamsaraPainkiller666AmmoActive", 1);
			}
			break;
	}
	SetResultValue(returnValue);
}

Script "Painkiller_HudItems" (int pln) CLIENTSIDE
{
	int screenblocks = GetCvar("screenblocks");
	if(screenblocks == 11 && CheckInventory("SamsaraUsingNewFullscreenHUD"))
	{
		SetHudSize(320,200,0);
		for(int armortype = 0; armortype < 55; armortype++)
		{
			if(GetArmorType(PKArmors[armortype][0],pln))
			{
				SetFont(PKArmors[armortype][1]);
				HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,24000,CR_UNTRANSLATED,10.0,191.0,0.0);
				break;
			}
			else
			{
				SetFont("PKARMOR0");
				HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,24000,CR_UNTRANSLATED,10.0,191.0,0.0);
			}
		}
		SetHudSize(960,700,0);
		int compassDegree = GetActorAngle(0) % 1.0;
		if(compassDegree < 0) compassDegree += 1.0;
		if(compassDegree > 1.0) compassDegree -= 1.0;
		compassDegree = compassDegree / 910 + 1;
		str compassZero = compassDegree < 10 ? "0" : "";
		SetFont(strparam(s:"PKCOMP",s:compassZero,d:compassDegree));
		HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,24001,CR_UNTRANSLATED,480.0,52.0,0.0);
		SetHudSize(0,0,0);
	}
	else
	{
		HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,24000,CR_UNTRANSLATED,480.0,52.0,0.0);
		HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,24001,CR_UNTRANSLATED,480.0,52.0,0.0);
	}
}

Script "Painkiller_Painkiller_WarpBack" (void)
{
	int current = UniqueTID();
	Thing_ChangeTID(0, current);
	SetActivatorToTarget(0);
	int movedistance = 24.0;
	int inrangeX,inrangeY,inrangeZ;
	while(true)
	{
		//PrintBold(s:GetActorClass(0));

		int currentX = GetActorX(current);
		int currentY = GetActorY(current);
		int currentZ = GetActorZ(current);
		int playerX = GetActorX(0);
		int playerY = GetActorY(0);
		int playerZ = GetActorZ(0);

		if(currentX > playerX+movedistance) { inrangeX = false; currentX-=movedistance; }
		else if(currentX < playerX-movedistance) { inrangeX = false; currentX+=movedistance; }
		else { inrangeX = true; currentX = playerX; }

		if(currentY > playerY+movedistance) { inrangeY = false; currentY-=movedistance; }
		else if(currentY < playerY-movedistance) { inrangeY = false; currentY+=movedistance; }
		else { inrangeY = true; currentY = playerY; }

		if(currentZ > playerZ+52.0) { inrangeZ = false; currentZ-=movedistance; }
		else if(currentZ < playerZ+28.0) { inrangeZ = false; currentZ+=movedistance; }
		else { inrangeZ = true; currentZ = playerZ+36.0; }

		if(inrangeX && inrangeY && inrangeZ)
		{
			GiveInventory("Painkiller_PainkillerReturned",1);
			Thing_Remove(current);
			terminate;
		}

		//PrintBold(d:inrangeX,d:inrangeY,d:inrangeZ);

		//SetActorPosition(current,currentX,currentY,currentZ,0);
		Warp(current,currentX,currentY,currentZ,0,WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEPOSITION|WARPF_INTERPOLATE|WARPF_MOVEPTR);
		Delay(1);
	}
}

Script "Painkiller_BeamSpawner" (int type)
{
	int myTid = UniqueTid();
	switch(type)
	{
		case 0:
			SpawnForced("Painkiller_Painkiller_BeamFire",GetActorX(0),GetActorY(0),GetActorZ(0),myTid);
			break;
		case 1:
			SpawnForced("Painkiller_Painkiller_BeamFire2",GetActorX(0),GetActorY(0),GetActorZ(0),myTid);
			break;
	}
	SetPointerExt(AAPTR_Master,0,mytid);
	SetActivatorToTarget(0);
	SetPointerExt(AAPTR_Target,0,mytid);
	Thing_ChangeTid(myTid,0);
}

Script "Painkiller_Fire_Laser" (int sideOffset, int forwardOffset, int zOffset)
{
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0) + 10.0;

	SetActivatorToTarget(0);

	int pAngle = GetActorAngle(0);
	int pPitch = GetActorPitch(0);
	int mx = GetActorX(0);
	int my = GetActorY(0);
	int mz = GetActorZ(0) + GetActorViewHeight(0);

	int vectorX = mx - x;
	int vectorY = my - y;
	int vectorZ = mz - z;

	int angle = VectorAngle(vectorX,vectorY) + 0.5;
	int pitch = VectorAngle(VectorLength(vectorX,vectorY),vectorZ);

	LineAttack(0,angle,pitch,0,"Painkiller_Painkiller_LaserEnd","Painkiller",magnitudeThree_f(vectorX,vectorY,vectorZ),FHF_NORANDOMPUFFZ);

	if(angle > 1.0) angle -= 1.0;

	int giveAngle = angle;
	int givePitch = pitch;

	if(giveAngle < 0.0) giveAngle += 1.0;
	if(givePitch < 0.0) givePitch += 1.0;

	GiveInventory("Painkiller_RailAngle",giveAngle + 1.0);
	GiveInventory("Painkiller_RailPitch",givePitch + 1.0);
}

Script "Painkiller_Laser_Offsets" (int mode)
{
	switch(mode)
	{
		case 0: SetResultValue(CheckInventory("Painkiller_RailAngle") - 1.0); break;
		case 1: SetResultValue(CheckInventory("Painkiller_RailPitch") - 1.0); break;
	}
}

Script "Painkiller_Laser" (int type, int space, int height)
{
	int tx = GetActorX(0);
	int ty = GetActorY(0);
	int tz = GetActorZ(0);
	SetActivatorToTarget(0);
	ACS_NamedExecuteWithResult("Painkiller_Laser_Draw",tx,ty,tz);
}

Script "Painkiller_Laser_Draw" (int tx, int ty, int tz) CLIENTSIDE
{
	int t, i, k = 0, l, angle, pitch, x, y, z, vx, vy, vz, mag, magI, horz, space;
	str segment = "Painkiller_PainkillerLaserSegment";

	space = 36;
	i = 15;
	horz = 6;

	int newtid = UniqueTid();

	int xoff = (cos(GetActorAngle(0)) * i) + (sin(GetActorAngle(0)) * horz);
	int yoff = (sin(GetActorAngle(0)) * i) - (cos(GetActorAngle(0)) * horz);

	x = GetActorX(0) + xoff;
	y = GetActorY(0) + yoff;
	z = GetActorZ(0) + GetActorViewHeight(0) - 4.5 - (i * sin(GetActorPitch(0)));

	int vectorx = tx - x;
	int vectory = ty - y;
	int vectorz = tz - z;
	angle = VectorAngle(vectorx, vectory);

	int length = magnitudeTwo(vectorx>>16,vectory>>16);
	pitch = VectorAngle(length<<16, vectorz);

	vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
	vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
	magI = ftoi(mag);
	for (i = i; i < magI; i += space)
	{
		SpawnForced(segment, x+(vx*i), y+(vy*i), z+(vz*i), newtid);
		SetActorPitch(newtid, pitch);
		SetActorAngle(newtid, angle);
		if(i % 1500 == 0)
			Delay(1);
	}
}

Script "Painkiller_ShotgunBlast" (void)
{
	int newtid = UniqueTid();
	int thrust;
	int angle = GetActorAngle(0)+0.5;

	Thing_ChangeTid(0,newtid);
	SetActivator(0,AAPTR_Tracer);
	if(ClassifyActor(0) == ACTOR_NONE || ClassifyActor(0) & ACTOR_ALIVE)
		terminate;

	int mass = GetActorProperty(0,APROP_Mass);
	if(mass != 0)
		thrust = 800/mass;

	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	SetActivator(newtid,AAPTR_Target);
	int distance = magnitudeThree_f(x - GetActorX(0),y - GetActorY(0),z - GetActorZ(0));
	SetActivator(newtid,AAPTR_Tracer);

	if(distance < 192.0)
	{
		ThrustThing(angle*256/65536,thrust,1,0);
		ThrustThingZ(0,thrust,0,1);
	}
}

Script "Painkiller_BloodGenerator_Offsets" (void)
{
	int missilex = GetActorX(0);
	int missiley = GetActorY(0);
	int missilez = GetActorZ(0);
	SetActivator(0,AAPTR_Tracer);

	int enemyx = GetActorX(0);
	int enemyy = GetActorY(0);
	int enemyz = GetActorZ(0);
	int currentangle = GetActorAngle(0);
	int vang = VectorAngle(enemyx - missilex, enemyy - missiley);
	int angle = vang % 1.0;
	SetInventory("Painkiller_BloodGeneratorAngle",angle+65536);
	SetInventory("Painkiller_BloodGeneratorZ",(missilez - enemyz)>>16 + 65536);
}

Script "Painkiller_BloodGenerator_Return" (int mode)
{
	int result;
	switch(mode)
	{
		case 1:
			result = ((CheckInventory("Painkiller_BloodGeneratorAngle") - 65536)/182)+180;
			break;
		case 2:
			result = CheckInventory("Painkiller_BloodGeneratorZ");
			break;
	}
	SetResultValue(result);
}

script "Painkiller_ProjectilePitch" (void)
{
	int horizontalVector = magnitudeTwo_f(GetActorVelX(0), GetActorVelY(0))<<8;
	int velZ = GetActorVelZ(0);
	int pitch = VectorAngle(horizontalVector, velZ);
	SetActorPitch(0, pitch);
}

Script "Painkiller_ShooterPitch" (void)
{
	SetActivatorToTarget(0);
	SetResultValue(GetActorPitch(0));
}

Script "Painkiller_ShooterAngle" (void)
{
	SetActivatorToTarget(0);
	SetResultValue(GetActorAngle(0));
}

Script "Painkiller_FlagStorage" (int retrieve, int flag)
{
	int result;
	switch(retrieve)
	{
		case 1:
			switch(flag)
			{
				case 1:
					GiveInventory("Painkiller_NoPainFlag",CheckFlag(0,"NOPAIN"));
					break;
				case 2:
					GiveInventory("Painkiller_NoGravityFlag",CheckFlag(0,"NOGRAVITY"));
					break;
				case 3:
					GiveInventory("Painkiller_NoBloodFlag",CheckFlag(0,"NOBLOOD"));
					break;
			}
			result = 1;
			break;
		case 2:
			switch(flag)
			{
				case 1:
					result = CheckInventory("Painkiller_NoPainFlag");
					break;
				case 2:
					result = CheckInventory("Painkiller_NoGravityFlag");
					break;
				case 3:
					result = CheckInventory("Painkiller_NoBloodFlag");
					break;
			}
			break;
	}
	SetResultValue(result);
}

Script "Painkiller_Freeze" (int thaw, int thawhealth, int renderstyle)
{
	int freezetimer, loopcounter, health, render;
	//CreateTranslation(2449,0:255=0:255);
	CreateTranslation(2450,0:255=%[0,0,0]:[1.0,1.0,1.0]);
	CreateTranslation(2451,0:255=%[0,0,0]:[1.075,1.125,1.125]);
	CreateTranslation(2452,0:255=%[0,0,0]:[1.15,1.25,1.25]);
	CreateTranslation(2453,0:255=%[0,0,0]:[1.125,1.375,1.375]);
	CreateTranslation(2454,0:255=%[0,0,0]:[1.325,1.5,1.5]);
	CreateTranslation(2455,0:255=%[0,0,0]:[1.4,1.625,1.625]);
	CreateTranslation(2456,0:255=%[0,0,0]:[1.475,1.75,1.75]);
	CreateTranslation(2457,0:255=%[0,0,0]:[1.525,1.875,1.875]);
	CreateTranslation(2458,0:255=%[0,0,0]:[1.6,2.0,2.0]);
	switch(thaw)
	{
		Case 1:
			health = GetActorProperty(0, APROP_Health);
			render = GetActorProperty(0, APROP_RenderStyle);
			SetActorProperty(0,APROP_RenderStyle,STYLE_NORMAL);
			SetActorProperty(0,APROP_Invulnerable,1);

			if(GetCVar("sams_runninginzandro"))
			{
				for(loopcounter = 2450; loopcounter < 2459; loopcounter++)
				{
					Thing_SetTranslation(0,loopcounter);
					Delay(2);
				}

				freezetimer = 0;
				while(freezetimer <= 175)
				{
					freezetimer++;
					Delay(1);
				}

				if(GetActorProperty(0,APROP_Health) > GetActorProperty(0,APROP_SpawnHealth)/2)
					ACS_NamedExecuteWithResult("Painkiller_Freeze",2,health,render,0);
				else
				{
					Thing_SetTranslation(0,0);
					SetActorProperty(0,APROP_RenderStyle,render);
					GiveInventory("Painkiller_IceShatter",1);
				}
			}
			else
			{
				SetActorProperty(0,APROP_Health,health/2);

				for(loopcounter = 2450; loopcounter < 2459; loopcounter++)
				{
					Thing_SetTranslation(0,loopcounter);
					Delay(2);
				}

				SetActorProperty(0,APROP_Invulnerable,0);
				SetActorFlag(0,"BUDDHA",1);

				while(GetActorProperty(0,APROP_Health) > 1)
				{
					freezetimer++;
					if(freezetimer >= 175)
					{
						SetActorFlag(0,"BUDDHA",0);
						ACS_NamedExecuteWithResult("Painkiller_Freeze",2,health,render,0);
						terminate;
					}

					Delay(1);
				}
				SetActorFlag(0,"BUDDHA",0);
				Thing_SetTranslation(0,0);
				SetActorProperty(0,APROP_RenderStyle,render);
				GiveInventory("Painkiller_IceShatter",1);
			}
			break;
		Case 2:
			SetActorProperty(0,APROP_Invulnerable,0);
			SetActorProperty(0,APROP_Health,thawhealth);
			SetActorProperty(0,APROP_RenderStyle,renderstyle);
			SetActorState(0,"PainkillerIceThaw",true);
			for(loopcounter = 2458; loopcounter > 2449; loopcounter--)
			{
				Thing_SetTranslation(0,loopcounter);
				Delay(2);
			}
			Thing_SetTranslation(0,0);
			break;
	}
}

// Used for non-bleeding enemies like robots that don't have souls
Script "Painkiller_Freeze2" (int thaw, int thawhealth, int renderstyle)
{
	int freezetimer, loopcounter, health, render;
	//CreateTranslation(2449,0:255=0:255);
	CreateTranslation(2450,0:255=%[0,0,0]:[1.0,1.0,1.0]);
	CreateTranslation(2451,0:255=%[0,0,0]:[1.075,1.125,1.125]);
	CreateTranslation(2452,0:255=%[0,0,0]:[1.15,1.25,1.25]);
	CreateTranslation(2453,0:255=%[0,0,0]:[1.125,1.375,1.375]);
	CreateTranslation(2454,0:255=%[0,0,0]:[1.325,1.5,1.5]);
	CreateTranslation(2455,0:255=%[0,0,0]:[1.4,1.625,1.625]);
	CreateTranslation(2456,0:255=%[0,0,0]:[1.475,1.75,1.75]);
	CreateTranslation(2457,0:255=%[0,0,0]:[1.525,1.875,1.875]);
	CreateTranslation(2458,0:255=%[0,0,0]:[1.6,2.0,2.0]);
	switch(thaw)
	{
		Case 1:
			health = GetActorProperty(0, APROP_Health);
			render = GetActorProperty(0, APROP_RenderStyle);
			SetActorProperty(0,APROP_RenderStyle,STYLE_NORMAL);
			SetActorProperty(0,APROP_Invulnerable,1);

			if(GetCVar("sams_runninginzandro"))
			{
				for(loopcounter = 2450; loopcounter < 2459; loopcounter++)
				{
					Thing_SetTranslation(0,loopcounter);
					Delay(2);
				}

				freezetimer = 0;
				while(freezetimer <= 175)
				{
					freezetimer++;
					Delay(1);
				}

				if(GetActorProperty(0,APROP_Health) > GetActorProperty(0,APROP_SpawnHealth)/2)
					ACS_NamedExecuteWithResult("Painkiller_Freeze2",2,health,render,0);
				else
				{
					Thing_SetTranslation(0,0);
					SetActorProperty(0,APROP_RenderStyle,render);
					GiveInventory("Painkiller_IceShatter2",1);
				}
			}
			else
			{
				SetActorProperty(0,APROP_Health,health/2);

				for(loopcounter = 2450; loopcounter < 2459; loopcounter++)
				{
					Thing_SetTranslation(0,loopcounter);
					Delay(2);
				}

				SetActorProperty(0,APROP_Invulnerable,0);
				SetActorFlag(0,"BUDDHA",1);

				while(GetActorProperty(0,APROP_Health) > 1)
				{
					freezetimer++;
					if(freezetimer >= 175)
					{
						SetActorFlag(0,"BUDDHA",0);
						ACS_NamedExecuteWithResult("Painkiller_Freeze2",2,health,render,0);
						terminate;
					}

					Delay(1);
				}
				SetActorFlag(0,"BUDDHA",0);
				Thing_SetTranslation(0,0);
				SetActorProperty(0,APROP_RenderStyle,render);
				GiveInventory("Painkiller_IceShatter2",1);
			}
			break;
		Case 2:
			SetActorProperty(0,APROP_Invulnerable,0);
			SetActorProperty(0,APROP_Health,thawhealth);
			SetActorProperty(0,APROP_RenderStyle,renderstyle);
			SetActorState(0,"PainkillerIceThaw",true);
			for(loopcounter = 2458; loopcounter > 2449; loopcounter--)
			{
				Thing_SetTranslation(0,loopcounter);
				Delay(2);
			}
			Thing_SetTranslation(0,0);
			break;
	}
}

// Used for enemies like flemoids that don't have gibs
Script "Painkiller_Freeze3" (int thaw, int thawhealth, int renderstyle)
{
	int freezetimer, loopcounter, health, render;
	//CreateTranslation(2449,0:255=0:255);
	CreateTranslation(2450,0:255=%[0,0,0]:[1.0,1.0,1.0]);
	CreateTranslation(2451,0:255=%[0,0,0]:[1.075,1.125,1.125]);
	CreateTranslation(2452,0:255=%[0,0,0]:[1.15,1.25,1.25]);
	CreateTranslation(2453,0:255=%[0,0,0]:[1.125,1.375,1.375]);
	CreateTranslation(2454,0:255=%[0,0,0]:[1.325,1.5,1.5]);
	CreateTranslation(2455,0:255=%[0,0,0]:[1.4,1.625,1.625]);
	CreateTranslation(2456,0:255=%[0,0,0]:[1.475,1.75,1.75]);
	CreateTranslation(2457,0:255=%[0,0,0]:[1.525,1.875,1.875]);
	CreateTranslation(2458,0:255=%[0,0,0]:[1.6,2.0,2.0]);
	switch(thaw)
	{
		Case 1:
			health = GetActorProperty(0, APROP_Health);
			render = GetActorProperty(0, APROP_RenderStyle);
			SetActorProperty(0,APROP_RenderStyle,STYLE_NORMAL);
			SetActorProperty(0,APROP_Invulnerable,1);

			if(GetCVar("sams_runninginzandro"))
			{
				for(loopcounter = 2450; loopcounter < 2459; loopcounter++)
				{
					Thing_SetTranslation(0,loopcounter);
					Delay(2);
				}

				freezetimer = 0;
				while(freezetimer <= 175)
				{
					freezetimer++;
					Delay(1);
				}

				if(GetActorProperty(0,APROP_Health) > GetActorProperty(0,APROP_SpawnHealth)/2)
					ACS_NamedExecuteWithResult("Painkiller_Freeze3",2,health,render,0);
				else
				{
					Thing_SetTranslation(0,0);
					SetActorProperty(0,APROP_RenderStyle,render);
					GiveInventory("Painkiller_IceShatter",1);
				}
			}
			else
			{
				SetActorProperty(0,APROP_Health,health/2);

				for(loopcounter = 2450; loopcounter < 2459; loopcounter++)
				{
					Thing_SetTranslation(0,loopcounter);
					Delay(2);
				}

				SetActorProperty(0,APROP_Invulnerable,0);
				SetActorFlag(0,"BUDDHA",1);

				while(GetActorProperty(0,APROP_Health) > 1)
				{
					freezetimer++;
					if(freezetimer >= 175)
					{
						SetActorFlag(0,"BUDDHA",0);
						ACS_NamedExecuteWithResult("Painkiller_Freeze3",2,health,render,0);
						terminate;
					}

					Delay(1);
				}
				SetActorFlag(0,"BUDDHA",0);
				Thing_SetTranslation(0,0);
				SetActorProperty(0,APROP_RenderStyle,render);
				GiveInventory("Painkiller_IceShatter3",1);
			}
			break;
		Case 2:
			SetActorProperty(0,APROP_Invulnerable,0);
			SetActorProperty(0,APROP_Health,thawhealth);
			SetActorProperty(0,APROP_RenderStyle,renderstyle);
			SetActorState(0,"PainkillerIceThaw",true);
			for(loopcounter = 2458; loopcounter > 2449; loopcounter--)
			{
				Thing_SetTranslation(0,loopcounter);
				Delay(2);
			}
			Thing_SetTranslation(0,0);
			break;
	}
}

Script "Painkiller_StakeShatter" (int activatorTrigger)
{
	if(!activatorTrigger) SetActivator(0,AAPTR_TRACER);
	//PrintBold(s:GetActorClass(0));
	if((ClassifyActor(0) & ACTOR_ALIVE || GetActorProperty(0,APROP_MASS) > 500 || !CheckInventory("Painkiller_RunStake")) && (GetActorClass(0) != "Painkiller_GrenadeHitBox"))
	{
		SetResultValue(0);
	}
	else if(GetActorClass(0) == "Painkiller_GrenadeHitBox")
	{
		SetResultValue(2);
	}
	else { SetResultValue(1); }
}

Script "Painkiller_TidToken" (void)
{
	int newtid = UniqueTid()>>16;
	Thing_ChangeTid(0,newtid);
	//PrintBold(d:newtid);
	//PrintBold(d:ActivatorTid());
	SetActivatorToTarget(0);
	SetInventory("Painkiller_TidToken",newtid);
	GiveActorInventory("Painkiller_StakeFlew",newtid,1);
}

Script "Painkiller_StakeRetrieveTracer" (void)
{
	int health = 66;
	int angle = GetActorAngle(0);
	int newtid = UniqueTid();
	int stakeX = GetActorX(0);
	int stakeY = GetActorY(0);
	int stakeZ = GetActorZ(0);
	Thing_ChangeTid(0,newtid);
	SetActivatorToTarget(0);
	int pitch = GetActorPitch(0);
	SetActivator(newtid,AAPTR_DEFAULT);
	SetActivator(0,AAPTR_TRACER);
	//PrintBold(s:GetActorClass(0));

    if (ClassifyActor(0) & ACTOR_WORLD) { terminate; }

	if(CheckInventory("Painkiller_Sceptred"))
		health = 1;

	if(GetActorProperty(0,APROP_Health) >= -health)
	{
		ACS_NamedExecuteAlways("Samsara_KillCount",0,0,0,0);
	}

	SetActorState(0,"PainkillerStake",true);
	int monsterX = GetActorX(0);
	int monsterY = GetActorY(0);
	int monsterZ = GetActorZ(0);
	int deltaX = monsterX - stakeX;
	int deltaY = monsterY - stakeY;
	int deltaZ = monsterZ - stakeZ;

	int gravity = GetActorProperty(0,APROP_GRAVITY);
	int height = GetActorProperty(0,APROP_HEIGHT)*4;
	GiveInventory("Painkiller_Staked",1);
	SetActorProperty(0,APROP_GRAVITY,0.0);
	GiveInventory("Painkiller_NoInteractionOn",1);

	While(ClassifyActor(newtid) > 1 && ClassifyActor(0) & ACTOR_DEAD)
	{
		Warp(newtid,-8.0,0,deltaZ,0,WARPF_NOCHECKPOSITION|WARPF_COPYINTERPOLATION);
		SetActorAngle(0,angle+0.5);
		SetActorPitch(0,pitch);
		Delay(2);
	}
	//GiveInventory("Painkiller_NoInteractionOff",1);
	//SetActorProperty(0,APROP_GRAVITY,gravity);
	GiveInventory("Painkiller_CorpseBurst",1);
	Delay(2);
	Thing_Remove(0);
	//PrintBold(d:detectTid);
	//PrintBold(s:GetActorClass(detectTid));
	//SetPointerExt(AAPTR_TRACER,0,detectTid);
}

Script "Painkiller_ForceStakeBodyRemoval" (void)
{
	int activator = ActivatorTid();
	SetActivator(0,AAPTR_TRACER);
	Delay(100);
	if(CheckInventory("Painkiller_Staked") == 1)
		terminate;

	GiveInventory("Painkiller_CorpseBurst",1);
	Delay(2);
	Thing_Remove(0);
}

Script "Painkiller_GrenadeTidToken" (void)
{
	int newtid = UniqueTid()>>16;
	Thing_ChangeTid(0,newtid);
	//PrintBold(d:newtid);
	//PrintBold(d:ActivatorTid());
	SetActivatorToTarget(0);
	SetInventory("Painkiller_GrenadeTidToken",newtid);
}

Script "Painkiller_GrenadeRetrieveTracer" (void)
{
	int newtid = UniqueTid()>>16;
	Thing_ChangeTid(0,newtid);
	SetActivatorToTarget(0);
	int detectTid = CheckInventory("Painkiller_GrenadeTidToken");
	TakeInventory("Painkiller_GrenadeTidToken",65536);
	SetActivator(newtid,AAPTR_DEFAULT);
	SetPointer(AAPTR_TRACER,detectTid);
	SetActivator(detectTid,AAPTR_TRACER);
	SetPointer(AAPTR_TRACER,newtid);
	Thing_ChangeTid(newtid,0);
	Thing_ChangeTid(detectTid,0);
}

Script "Painkiller_StakeGrenadeComboLaunch" (void)
{
	int newtid = UniqueTid();
	Thing_ChangeTid(0,newtid);
	SetActivator(0,AAPTR_TRACER);
	//Thing_Remove(newtid);
	SetActorState(0,"Launch",true);
}

Script "Painkiller_RetrieveFireHeight" (void)
{
	SetActivator(0,AAPTR_TRACER);
	SetResultValue(GetActorProperty(0,APROP_Height)>>16);
}

Script "Painkiller_EnemyCharrer" (int inventory)
{
	int loopcounter;
	if(inventory == 0)
		SetActivator(0,AAPTR_TRACER);

	if(strleft(GetActorClass(0),9) == "Totenkopf")
		terminate;

	if(GetCvar("samsara_nopainkillercorpseremoval")) { terminate; }

	if(ClassifyActor(0) & ACTOR_DEAD && !CheckInventory("Painkiller_PainkillerRoasted") && !(ClassifyActor(0) & ACTOR_PLAYER))
	{
		GiveInventory("Painkiller_PainkillerRoasted",1);
		Delay(35);
		CreateTranslation(2430,0:255=%[0,0,0]:[0.6,0.6,0.6]);
		CreateTranslation(2431,0:255=%[0,0,0]:[0.55,0.55,0.55]);
		CreateTranslation(2432,0:255=%[0,0,0]:[0.5,0.5,0.5]);
		CreateTranslation(2433,0:255=%[0,0,0]:[0.45,0.45,0.45]);
		CreateTranslation(2434,0:255=%[0,0,0]:[0.4,0.4,0.4]);
		CreateTranslation(2435,0:255=%[0,0,0]:[0.35,0.35,0.35]);
		CreateTranslation(2436,0:255=%[0,0,0]:[0.3,0.3,0.3]);
		CreateTranslation(2437,0:255=%[0,0,0]:[0.25,0.25,0.25]);
		CreateTranslation(2438,0:255=%[0,0,0]:[0.2,0.2,0.2]);
		CreateTranslation(2439,0:255=%[0,0,0]:[0.15,0.15,0.15]);
		CreateTranslation(2440,0:255=%[0,0,0]:[0.1,0.1,0.1]);
		for(loopcounter = 2432; loopcounter < 2441; loopcounter++)
		{
			Thing_SetTranslation(0,loopcounter);
			Delay(4);
		}
	}
}

Script "Painkiller_LaserBezier" (int type, int space, int height) CLIENTSIDE
{
	int t, i, k = 0, l, angle, pitch, x, y, z, tx, ty, tz, vx, vy, vz, mag, magI, horz, pitchoffset;
	int segmentx, segmenty, segmentz, direction, curve;
	str segment;
	switch(type)
	{
		case 1:
			segment = "Painkiller_PainkillerLaserSegment";
			i = 8;
			break;
		case 2:
			segment = "Painkiller_ElectrodriverBeamSegment";
			i = -33;
			break;
		case 3:
			segment = "Painkiller_ElectrodriverBeamSegment2";
			i = -33;
			break;
		case 4:
			segment = "Painkiller_ElectrodriverBeamSegment";
			i = -16;
			break;
		case 5:
			segment = "Painkiller_ElectrodriverBeamSegment2";
			i = -16;
			break;
	}

	int newtid = UniqueTid();

	tx = GetActorX(0); ty = GetActorY(0); tz = GetActorZ(0);

	SetActivatorToTarget(0);

	if(type == 2||type == 3)
		horz = 5 + random(-2,2);
	if(type == 4||type == 5)
		horz = random(-2,2);

	//int xoff = (horz * sin(GetActorAngle(0))) - (i * cos(GetActorAngle(0)) * cos(GetActorPitch(0)));
	//int yoff = (horz * cos(GetActorAngle(0))) + (i * sin(GetActorAngle(0)) * cos(GetActorPitch(0)));
	int xoff = (horz * sin(GetActorAngle(0))) - FixedMul(i * cos(GetActorAngle(0)),cos(GetActorPitch(0))) + (random(-2,2) * sin(GetActorPitch(0)));
	int yoff = (horz * cos(GetActorAngle(0))) + FixedMul(i * sin(GetActorAngle(0)),cos(GetActorPitch(0))) + (random(-2,2) * sin(GetActorPitch(0)));

	//PrintBold(s:"X Coordinate: ", f:xoff, s:", Y Coordinate: ", f:yoff);

	x = GetActorX(0) + xoff;
	y = GetActorY(0) - yoff;
	//z = GetActorZ(0) + (GetActorViewHeight(0)-(GetActorProperty(0,APROP_AttackZOffset)/2) - 2) + height * (1.0 - cos(GetActorPitch(0)));
	//z = GetActorZ(0) + FixedMul(height * 1.0,sin(GetActorPitch(0)));
	z = GetActorZ(0) + (height * 1.0) + (i * sin(GetActorPitch(0)));

	int vectorx = tx - x;
	int vectory = ty - y;
	int vectorz = tz - z;
	angle = VectorAngle(vectorx, vectory);

	int length = magnitudeTwo(vectorx>>16,vectory>>16);
	pitch = VectorAngle(length<<16, vectorz);

	vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
	vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
	magI = ftoi(mag);
	curve = sin(Timer()*1536)/256;

	for (i = i; i < magI; i += space)
	{
		//PrintBold(f:segmentz);
		int newtid2 = UniqueTid();

		SpawnForced(segment, x+segmentx, y+segmenty, z+segmentz, newtid);
		Thing_ChangeTid(newtid,newtid2);

		pitchoffset += curve;

		SetActorAngle(newtid2, angle);
		SetActorPitch(newtid2, pitch+pitchoffset);
		//segmentx += (cos(angle)*space) * (cos(pitch+pitchoffset)*space);
		//segmenty += (sin(angle)*space) * (cos(pitch+pitchoffset)*space);

		segmentx += FixedMul(cos(angle)*space,cos(pitch+pitchoffset));
		segmenty += FixedMul(sin(angle)*space,cos(pitch+pitchoffset));
		segmentz += sin(pitch+pitchoffset)*space;
		Thing_ChangeTid(newtid2,0);
		if(i % 1500 == 0)
			Delay(1);
	}
}

Script "Painkiller_ElectrodriverOscilate" (void)
{
	int result = sin(Timer()*1536)/0.25;
	SetResultValue(result);
}

Script "Painkiller_DemonMorphBlast" (void)
{
	int newtid = UniqueTid();
	int activator = ActivatorTid();
	Thing_ChangeTid(0,newtid);
	SetActivatorToTarget(0);
	int angle = GetActorAngle(0);
	int pitch = GetActorPitch(0);
	ThrustThing(angle*256/65536,(50*cos(pitch))>>16,1,newtid);
	ThrustThingZ(newtid,(50*cos(pitch))>>16,0,1);
	Thing_ChangeTid(newtid,activator);
}

Script "Painkiller_EnemyFryer" (void)
{
	SetActivator(0,AAPTR_TRACER);

	if (CheckInventory("Painkiller_Frying") || isDead(0))
		terminate;

	PlaySound(0,"Painkiller/Electrodriver/ElectroFryLoop",CHAN_ITEM,0.33,true);
	GiveInventory("Painkiller_Frying",1);

	int actorClass = ClassifyActor(0);

    int delaycount = 0;

	for (int loopcounter = 0; loopcounter < 17 && !(actorClass <= ACTOR_WORLD) && !isDead(0); loopcounter++)
	{
        while (delaycount < 10)
        {
            if (isDead(0)) { break; }

            delaycount++;
            Delay(1);
        }

        if (isDead(0)) { break; }

        delaycount = 0;

		actorClass = ClassifyActor(0);

		int x = GetActorX(0);
		int y = GetActorY(0);
		int z = GetActorZ(0) + GetActorProperty(0,APROP_Height)/2;

		SpawnForced("Painkiller_ElectroDriverFrySpawner",x,y,z,0,0);
		SpawnForced("Painkiller_ElectroDriverFryEffect",x,y,z,0,0);

		if (!isDead(0) && !CheckFlag(0, "NOPAIN")) { SetActorState(0, "Pain", true); }

		SetActorVelocity(0,random(-0.5,0.5),random(-0.5,0.5),0,0,0);
		//ThrustThing(random(0,256),1,0,0);
		ThrustThingZ(0,2,random(0,1),1);
	}
	TakeInventory("Painkiller_Frying",1);
	StopSound(0,CHAN_ITEM);
}

Script "Painkiller_ElectroDiscEffects" (void)
{
	PlaySound(0,"Painkiller/Electrodriver/ElectroGeoFryLoop",CHAN_ITEM,0.33,true);

	Delay(10);

	for (int loopcounter = 0; loopcounter < 17 && !(ClassifyActor(0) & ACTOR_WORLD); loopcounter++)
	{
		int x = GetActorX(0);
		int y = GetActorY(0);
		int z = GetActorZ(0) + GetActorProperty(0,APROP_Height)/2;

		SpawnForced("Painkiller_ElectroDriverFrySpawner",x,y,z,0,0);
		SpawnForced("Painkiller_ElectroDriverFryEffect",x,y,z,0,0);

		Delay(10);
	}
	StopSound(0,CHAN_ITEM);
}


script "Painkiller_HasTarget" (void)
{
    SetActivator(0, AAPTR_TRACER);
    SetActivator(0, AAPTR_TARGET);

    bool isally = CheckActorClass(0, "ClericAlly") || CheckActorClass(0, "MageAlly") || CheckActorClass(0, "FighterAlly") ||
                  CheckActorClass(0, "IanPaulFreeley") || CheckActorClass(0, "TaradinoCassatt") || CheckActorClass(0, "ThiBarret") || CheckActorClass(0, "LoreleiNi") || CheckActorClass(0, "DougWendt") ||
                  CheckActorClass(0, "Kamechak") || CheckActorClass(0, "DanBlaze") || CheckActorClass(0, "AllianceCommando") ||
                  CheckActorClass(0, "CyborgAlly") || CheckActorClass(0, "LizardAlly") || CheckActorClass(0, "SpecimenAlly") || CheckActorClass(0, "DominatrixAlly") ||
                  CheckActorClass(0, "HLSqueak") || CheckActorClass(0, "HLSqueakCoop") ||
                  CheckActorClass(0, "HLScientist1") || CheckActorClass(0, "HLScientist1_ShrinkEffect") || CheckActorClass(0, "HLScientist1_Shrink") ||
                  CheckActorClass(0, "HLScientist2") || CheckActorClass(0, "HLScientist2_ShrinkEffect") || CheckActorClass(0, "HLScientist2_Shrink") ||
                  CheckActorClass(0, "HLScientist3") || CheckActorClass(0, "HLScientist3_ShrinkEffect") || CheckActorClass(0, "HLScientist3_Shrink") ||
                  CheckActorClass(0, "HLScientist4") || CheckActorClass(0, "HLScientist4_ShrinkEffect") || CheckActorClass(0, "HLScientist4_Shrink") ||
                  CheckActorClass(0, "LonelyScientist1") || CheckActorClass(0, "LonelyScientist1_ShrinkEffect") || CheckActorClass(0, "LonelyScientist1_Shrink") ||
                  CheckActorClass(0, "LonelyScientist2") || CheckActorClass(0, "LonelyScientist2_ShrinkEffect") || CheckActorClass(0, "LonelyScientist2_Shrink") ||
                  CheckActorClass(0, "LonelyScientist3") || CheckActorClass(0, "LonelyScientist3_ShrinkEffect") || CheckActorClass(0, "LonelyScientist3_Shrink") ||
                  CheckActorClass(0, "LonelyScientist4") || CheckActorClass(0, "LonelyScientist4_ShrinkEffect") || CheckActorClass(0, "LonelyScientist4_Shrink") ||
                  CheckActorClass(0, "HLBarney") || CheckActorClass(0, "HLBarney_ShrinkEffect") || CheckActorClass(0, "HLBarney_Shrink") ||
                  CheckActorClass(0, "HLBarneySpawn") || CheckActorClass(0, "HLBarneySpawn_Shrink") ||
                  CheckActorClass(0, "HLOtis1") || CheckActorClass(0, "HLOtis1_ShrinkEffect") || CheckActorClass(0, "HLOtis1_Shrink") ||
                  CheckActorClass(0, "HLOtis2") || CheckActorClass(0, "HLOtis2_ShrinkEffect") || CheckActorClass(0, "HLOtis2_Shrink") ||
                  CheckActorClass(0, "HLOtis3") || CheckActorClass(0, "HLOtis3_ShrinkEffect") || CheckActorClass(0, "HLOtis3_Shrink") ||
                  CheckActorClass(0, "HLOtis1Spawn") || CheckActorClass(0, "HLOtis1Spawn_Shrink") ||
                  CheckActorClass(0, "HLOtis2Spawn") || CheckActorClass(0, "HLOtis2Spawn_Shrink") ||
                  CheckActorClass(0, "HLOtis3Spawn") || CheckActorClass(0, "HLOtis3Spawn_Shrink") ||
                  CheckActorClass(0, "HECU_Grunt1_StayOpp_MP5") || CheckActorClass(0, "HECU_Grunt1_FollowOpp_MP5") ||
                  CheckActorClass(0, "HECU_Grunt2_StayOpp_MP5") || CheckActorClass(0, "HECU_Grunt2_FollowOpp_MP5") ||
                  CheckActorClass(0, "HECU_Grunt1_StayOpp_Shotgun") || CheckActorClass(0, "HECU_Grunt1_FollowOpp_Shotgun") ||
                  CheckActorClass(0, "HECU_Grunt2_StayOpp_Shotgun") || CheckActorClass(0, "HECU_Grunt2_FollowOpp_Shotgun") ||
                  CheckActorClass(0, "HECU_Grunt1_StayOpp_Saw") || CheckActorClass(0, "HECU_Grunt1_FollowOpp_Saw") ||
                  CheckActorClass(0, "HECU_Grunt2_StayOpp_Saw") || CheckActorClass(0, "HECU_Grunt2_FollowOpp_Saw") ||
                  CheckActorClass(0, "HECU_Shotgunner1_StayOpp_MP5") || CheckActorClass(0, "HECU_Shotgunner1_FollowOpp_MP5") ||
                  CheckActorClass(0, "HECU_Shotgunner2_StayOpp_MP5") || CheckActorClass(0, "HECU_Shotgunner2_FollowOpp_MP5") ||
                  CheckActorClass(0, "HECU_Shotgunner1_StayOpp_Shotgun") || CheckActorClass(0, "HECU_Shotgunner1_FollowOpp_Shotgun") ||
                  CheckActorClass(0, "HECU_Shotgunner2_StayOpp_Shotgun") || CheckActorClass(0, "HECU_Shotgunner2_FollowOpp_Shotgun") ||
                  CheckActorClass(0, "HECU_Shotgunner1_StayOpp_Saw") || CheckActorClass(0, "HECU_Shotgunner1_FollowOpp_Saw") ||
                  CheckActorClass(0, "HECU_Shotgunner2_StayOpp_Saw") || CheckActorClass(0, "HECU_Shotgunner2_FollowOpp_Saw") ||
                  CheckActorClass(0, "HECU_Mask_StayOpp_MP5") || CheckActorClass(0, "HECU_Mask_FollowOpp_MP5") ||
                  CheckActorClass(0, "HECU_Mask_StayOpp_Shotgun") || CheckActorClass(0, "HECU_Mask_FollowOpp_Shotgun") ||
                  CheckActorClass(0, "HECU_Mask_StayOpp_Saw") || CheckActorClass(0, "HECU_Mask_FollowOpp_Saw") ||
                  CheckActorClass(0, "HECU_Commander1_StayOpp_MP5") || CheckActorClass(0, "HECU_Commander1_FollowOpp_MP5") ||
                  CheckActorClass(0, "HECU_Commander2_StayOpp_MP5") || CheckActorClass(0, "HECU_Commander2_FollowOpp_MP5") ||
                  CheckActorClass(0, "HECU_Commander1_StayOpp_Shotgun") || CheckActorClass(0, "HECU_Commander1_FollowOpp_Shotgun") ||
                  CheckActorClass(0, "HECU_Commander2_StayOpp_Shotgun") || CheckActorClass(0, "HECU_Commander2_FollowOpp_Shotgun") ||
                  CheckActorClass(0, "HECU_Commander1_StayOpp_Saw") || CheckActorClass(0, "HECU_Commander1_FollowOpp_Saw") ||
                  CheckActorClass(0, "HECU_Commander2_StayOpp_Saw") || CheckActorClass(0, "HECU_Commander2_FollowOpp_Saw");

    if ((ClassifyActor(0) & ACTOR_ALIVE) && !isally && SetActivator(0, AAPTR_TARGET)) { SetResultValue(1); }
    else { SetResultValue(0); }
}

Script "Painkiller_TracerDead" (void)
{
	if(SetActivator(0,AAPTR_TRACER))
	{
		if(ClassifyActor(0) & ACTOR_DEAD)
			SetResultValue(1);
		else
			SetResultValue(0);
	}
	else
		SetResultValue(0);
}

Script "Painkiller_SpawnElectroBeamer" (void)
{
	int disctid = UniqueTid();
	int newtid = UniqueTid();
	Thing_ChangeTid(0,disctid);
	if (isSinglePlayer() || isCoop()) SpawnSpotFacingForced("Painkiller_ElectroDiscBeamerCoop",0,newtid);
	else SpawnSpotFacingForced("Painkiller_ElectroDiscBeamer",0,newtid);
	SetPointerExt(AAPTR_TRACER,0,newtid);
	SetActivator(disctid,AAPTR_TARGET);
	SetPointerExt(AAPTR_MASTER,0,newtid);
	Thing_ChangeTid(disctid,0);
}

Script "Painkiller_SpawnGrenadeHitBox" (int type)
{
	str hitbox;
	switch(type)
	{
		case 1:
			hitbox = "Painkiller_GrenadeHitBox";
			break;
		case 2:
			hitbox = "Painkiller_HeaterHitBox";
			break;
	}
	int bombtid = UniqueTid();
	int newtid = UniqueTid();
	Thing_ChangeTid(0,bombtid);
	SpawnSpotFacingForced(hitbox,0,newtid);
	SetActivator(newtid,AAPTR_DEFAULT);
	SetPointer(AAPTR_TRACER,bombtid);
	Thing_ChangeTid(bombtid,0);
}

Script "Painkiller_DemonModeActive" (void)
{
	While(CheckWeapon("Painkiller_DemonMorph"))
	{
		SetHudSize(768,1024,0);
		SetFont("PKDEMONC");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD|HUDMSG_ALPHA|HUDMSG_ADDBLEND,1578,0,384.0,512.0,0.1,0.75);
		Delay(1);
	}
	TakeInventory("Painkiller_BlockDemonMorph",1);
	SetFont("none");
	HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD|HUDMSG_ALPHA,1578,0,160.0,100.0,0.2,0.0);
	Delay(1);
}

Script "Painkiller_MonsterKill" (int corpseActor)
{
	//For monsters that burst, we will get the coordinates so we know where to put it
	int monsterX = GetActorX(0);
	int monsterY = GetActorY(0);
	int monsterZ = GetActorZ(0);
	int monsterHealth = GetActorProperty(0,APROP_SpawnHealth);
	int coinDummyTid = UniqueTid();

	if(CheckInventory("Painkiller_DeathQueue"))
		terminate;
	else
		GiveInventory("Painkiller_DeathQueue",1);

	SpawnForced("Painkiller_CoinTosser",monsterX,monsterY,monsterZ+((ACS_NamedExecuteWithResult("Painkiller_GibHeightCheck")<<16)/2),coinDummyTid);
	ACS_NamedExecuteWithResult("Painkiller_DropCoins",GetActorProperty(0,APROP_Radius)>>16,ACS_NamedExecuteWithResult("Painkiller_GibHeightCheck"),monsterHealth,coinDummyTid);
	Delay(104);
	if(!GetCvar("samsara_nopainkillercorpseremoval")) { GiveInventory("Painkiller_CorpseRemover",1); }
	Delay(1);
	if(corpseActor == 0)
	{
		if(!(ClassifyActor(0) & ACTOR_MONSTER))
		{
			if(monsterHealth >= 300)
				SpawnForced("Painkiller_RedSoul",monsterX,monsterY,monsterZ,0);
			else
				SpawnForced("Painkiller_GreenSoul",monsterX,monsterY,monsterZ,0);

			if(!GetCvar("samsara_nopainkillercorpseremoval")) { SpawnForced("Painkiller_CorpseBurstGibbed",monsterX,monsterY,monsterZ,0); }
		}
		else
		{
			if(monsterHealth >= 300)
				SpawnSpotFacingForced("Painkiller_RedSoul",0,0);
			else
				SpawnSpotFacingForced("Painkiller_GreenSoul",0,0);

			if(!GetCvar("samsara_nopainkillercorpseremoval")) { GiveInventory("Painkiller_CorpseBurst2",1); }
		}
	}
	else if(!GetCvar("samsara_nopainkillercorpseremoval")) { Thing_Remove(0); }
}

Script "Painkiller_MonsterKill2" (int corpseActor)
{
	//For monsters that burst, we will get the coordinates so we know where to put it
	int monsterX = GetActorX(0);
	int monsterY = GetActorY(0);
	int monsterZ = GetActorZ(0);
	int monsterHealth = GetActorProperty(0,APROP_SpawnHealth);
	int coinDummyTid = UniqueTid();

	if(CheckInventory("Painkiller_DeathQueue"))
		terminate;
	else
		GiveInventory("Painkiller_DeathQueue",1);

	SpawnForced("Painkiller_CoinTosser",monsterX,monsterY,monsterZ+((ACS_NamedExecuteWithResult("Painkiller_GibHeightCheck")<<16)/2),coinDummyTid);
	ACS_NamedExecuteWithResult("Painkiller_DropCoins",GetActorProperty(0,APROP_Radius)>>16,ACS_NamedExecuteWithResult("Painkiller_GibHeightCheck"),monsterHealth,coinDummyTid);
	Delay(104);
	if(!GetCvar("samsara_nopainkillercorpseremoval")) { GiveInventory("Painkiller_CorpseRemover",1); }
	Delay(1);
	if(!GetCvar("samsara_nopainkillercorpseremoval")) { Thing_Remove(0); }
}

Script "Painkiller_StartDemonMorph" (int duration)
{
	int morphtime = 0;

	SetFont("PKDEMONB");
	SetHudSize(1, 1, 1);
	HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD|HUDMSG_ALPHA, 32600, 0, 0.0, 0.0, 65536.0, 0.5);
	ACS_NamedExecuteWithResult("Painkiller_DemonMorphFade");
	GiveInventory("Painkiller_DemonMorph", 1);
	GiveInventory("PainkillerDemonMorphActive", 1);
	GiveInventory("PainkillerDemonMorphScreen", 1);
	GiveInventory("PainkillerDemonMorphInvulnerability", 1);

	until (morphtime >= duration)
	{
		if (!CheckInventory("Painkiller_DemonMorph")) { break; }

		if (!CheckWeapon("Painkiller_DemonMorph")) { SetWeapon("Painkiller_DemonMorph"); }
		morphtime++;
		Delay(1);
	}

	TakeInventory("PainkillerDemonMorphActive", 1);

	while (CheckWeapon("Painkiller_DemonMorph")) { Delay(1); }

	HudMessage(s:""; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD, 32600, 0, 0.0, 0.0, 0.5, 0.1);
}

Script "Painkiller_DemonMorphFade" (void)
{
	FadeRange(0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.25);
	Delay(9);
	FadeRange(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.25);
}

Script "Painkiller_ItemRemoval" UNLOADING
{
	TakeInventory("PainkillerDemonMorphActive", 1);
	TakeInventory("PainkillerDemonMorphScreen", 1);
	TakeInventory("PainkillerDemonMorphTimerFreezer", 1);
	TakeInventory("PainkillerDemonMorphSlower", 1);
	TakeInventory("PainkillerDemonMorphInvulnerability", 1);
	TakeInventory("Painkiller_DemonMorph", 1);
}

Script "Painkiller_BlackTarot_Initiate" (void) NET
{
	if(CheckInventory("Painkiller_BlockDemonMorph"))
		terminate;

	if(!CheckInventory("Painkiller_TarotOpened"))
	{
		if(!CheckInventory("CompendiumOpened"))
		{
			GiveInventory("Painkiller_TarotOpened",1);
			int execute = ACS_NamedExecuteWithResult("Painkiller_BlackTarotUI");
			SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
		}
	}
	else
	{
		TakeInventory("Painkiller_TarotOpened",1);
		SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
	}
}

Script "Painkiller_GiveTarotCard" (int silverorgold)
{
	int randnum;
	int i = 0;
	if(silverorgold == 1)
	{
		for(i = 0; i < PKGiveSilver; i++)
		{
			randnum = random(0,PainkillerSilverTarotCards-1);
			GiveInventory(Painkiller_Silver_CardGraphics[randnum][4],1);
		}
	}
	else
	{
		for(i = 0; i < PKGiveGold; i++)
		{
			randnum = random(0,PainkillerGoldTarotCards-1);
			GiveInventory(Painkiller_Gold_CardGraphics[randnum][4],1);
		}
	}
}

Script "Painkiller_RestoreTarots" RESPAWN
{
	ACS_NamedExecuteWithResult("Painkiller_BlackTarotRestore");
}

Script "Painkiller_BlackTarotRestore" (void)
{
	int player = PlayerNumber();
	if(isCoop() || isSinglePlayer() || isInvasion())
	{
		if(!CheckInventory("Painkiller_GoldGiven"))
		{
			SetInventory("Painkiller_GoldAmount",GetCvar("samsara_mp_startingGold"));
			GiveInventory("Painkiller_GoldGiven",1);
		}
		terminate;
	}

	SetInventory("Painkiller_GoldAmount",GetCvar("samsara_mp_startingGold"));

	for(int silver = 0; silver < 14; silver++)
	{
		GiveInventory(Painkiller_Silver_CardGraphics[silver][4],1);
	}
	for(int gold = 0; gold < 17; gold++)
	{
		GiveInventory(Painkiller_Gold_CardGraphics[gold][4],1);
	}

	for(int i = 0; i < 32; i++)
	{
		if(GetCvar("samsara_mp_silverSlot1") == i)
		{
			TakeInventory("Painkiller_SilverSlot1",32);
			if(CheckInventory("Painkiller_GoldAmount") >= PKTarotSilverCardCosts[i-1])
			{
				GiveInventory("Painkiller_SilverSlot1",i);
				TakeInventory("Painkiller_GoldAmount",PKTarotSilverCardCosts[i-1]);
			}
		}
		if(GetCvar("samsara_mp_silverSlot2") == i)
		{
			TakeInventory("Painkiller_SilverSlot2",32);
			if(CheckInventory("Painkiller_GoldAmount") >= PKTarotSilverCardCosts[i-1])
			{
				GiveInventory("Painkiller_SilverSlot2",i);
				TakeInventory("Painkiller_GoldAmount",PKTarotSilverCardCosts[i-1]);
			}
		}
		if(GetCvar("samsara_mp_goldSlot1") == i)
		{
			TakeInventory("Painkiller_GoldSlot1",32);
			if(CheckInventory("Painkiller_GoldAmount") >= PKTarotGoldCardCosts[i-1])
			{
				GiveInventory("Painkiller_GoldSlot1",i);
				TakeInventory("Painkiller_GoldAmount",PKTarotGoldCardCosts[i-1]);
			}
		}
		if(GetCvar("samsara_mp_goldSlot2") == i)
		{
			TakeInventory("Painkiller_GoldSlot2",32);
			if(CheckInventory("Painkiller_GoldAmount") >= PKTarotGoldCardCosts[i-1])
			{
				GiveInventory("Painkiller_GoldSlot2",i);
				TakeInventory("Painkiller_GoldAmount",PKTarotGoldCardCosts[i-1]);
			}
		}
		if(GetCvar("samsara_mp_goldSlot3") == i)
		{
			TakeInventory("Painkiller_GoldSlot3",32);
			if(CheckInventory("Painkiller_GoldAmount") >= PKTarotGoldCardCosts[i-1])
			{
				GiveInventory("Painkiller_GoldSlot3",i);
				TakeInventory("Painkiller_GoldAmount",PKTarotGoldCardCosts[i-1]);
			}
		}
	}
}

#DEFINE PAINKILLER_RECHARGE_COST 1000

Script "Painkiller_BlackTarotUI" (void)
{
	int cursorx, cursory, a, b, holding, hoverqueue, holddelay, holdqueue, dropdelay, goldamount, hovercharge;
	int hudboundsx = 1024;
	int hudboundsy = 1280;
	int hudcenterx = hudboundsx/2;
	int hudcentery = hudboundsy/2;
	int gameMode = !(isCoop() || isInvasion() || isSinglePlayer()) ? 0 : 1;
	int remainingCharges = 0;
	int chargeCondition = 0;

	While(CheckInventory("Painkiller_TarotOpened") && !CheckInventory("Painkiller_BlockDemonMorph"))
	{
		int mousesensitivity = GetCvar("mouse_sensitivity");
		if(mousesensitivity == 0.0)
			 mousesensitivity = 1.0;
		int standardholddelay = FixedDiv(6.0,mousesensitivity)>>16;
		int yaw = GetPlayerInput(-1, INPUT_YAW);
		int pitch = GetPlayerInput(-1, INPUT_PITCH);
		int buttons = GetPlayerInput(-1, INPUT_BUTTONS);

		if(yaw > 1 || yaw < -1)
			cursorx -= FixedMul(yaw/16,mousesensitivity);

		if(pitch > 1 || pitch < -1)
			cursory -= FixedMul(pitch/8,mousesensitivity);

		if(cursorx < 0)
			cursorx = 0;
		else if(cursorx > hudboundsx)
			cursorx = hudboundsx;

		if(cursory < 0)
			cursory = 0;
		else if(cursory > hudboundsy)
			cursory = hudboundsy;

		//Basic Graphics
		SetHudSize(hudboundsx,hudboundsy,true);
		SetFont("PKTBOARD");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1578,0,hudcenterx*1.0,hudcentery*1.0,0.0);
		SetFont("PKCURSOR");
		HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD, 1509, CR_UNTRANSLATED, (cursorx*1.0), (cursory*1.0), 1.0);
		SetFont("PKTBORDR");
		SetHudSize(FixedMul(hudboundsx,1.245),FixedMul(hudboundsy,0.75),true);
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1576,0,floorwhole(hudboundsx*0.31),floorwhole(hudboundsy*0.485),0.1,0.0);

		//Gold Display
		goldAmount = CheckInventory("Painkiller_GoldAmount");
		SetFont("PKBRDFNT");
		SetHudSize(FixedMul(hudboundsx,1.125),FixedMul(hudboundsy,0.75),true);
		HudMessage(s:(goldAmount < 100000 ? "0" : ""),s:(goldAmount < 10000 ? "0" : ""),s:(goldAmount < 1000 ? "0" : ""),s:(goldAmount < 100 ? "0" : ""),s:(goldAmount < 10 ? "0" : ""),d:goldAmount;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1520,CR_UNTRANSLATED,floorwhole(hudboundsx*0.9875)+0.2,floorwhole(hudboundsy*0.28),0.0);
		hoverqueue = 0;

		SetFont("PKCHCRYS");
		SetHudSize(hudboundsx,hudboundsy,true);
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1577,0,floorwhole(hudboundsx*0.5835),floorwhole(hudboundsy*0.3735),0.1,timer()%100 > 50 ? 1.0-(((timer()%100) - 50) * 0.02) : ((timer()%100) * 0.02));

		//Buy tarot charges
		if(cursorx < FixedMul(hudboundsx,0.65) && (cursorx > (FixedMul(hudboundsx,0.54))) && (cursory < FixedMul(hudboundsy,0.445) && cursory > FixedMul(hudboundsy,0.33)) && holding == 0 && dropdelay <= 0)
		{
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1577,0,floorwhole(hudboundsx*0.5835),floorwhole(hudboundsy*0.3735),0.1,1.0);
			if(hovercharge == 0) LocalAmbientSound("Painkiller/TarotBoard/HoverCharge",255);
			hoverqueue = 1;
			hovercharge = 1;
						
			if(gameMode == 0)
			{
				if(CheckInventory("Painkiller_Mercy_Power"))
				{
					chargeCondition = 3;
					remainingCharges = 3 - CheckInventory("Painkiller_TarotMPUses");
				}
				else if(CheckInventory("Painkiller_Forgiveness_Power"))
				{
					chargeCondition = 3;
					remainingCharges = 2 - CheckInventory("Painkiller_TarotMPUses");
				}
				else
				{
					chargeCondition = 1;
					remainingCharges = 1 - CheckInventory("Painkiller_TarotMPUses");
				}
			}
			else
			{
				if(CheckInventory("Painkiller_Mercy_Power"))
				{
					chargeCondition = 7;
					remainingCharges = 7 - CheckInventory("Painkiller_TarotUsage");
				}
				else if(CheckInventory("Painkiller_Forgiveness_Power"))
				{
					chargeCondition = 5;
					remainingCharges = 5 - CheckInventory("Painkiller_TarotUsage");
				}
				else
				{
					chargeCondition = 3;
					remainingCharges = 3 - CheckInventory("Painkiller_TarotUsage");
				}
			}
			
			SetFont("CMPBPAIN");
			SetHudSize(FixedMul(hudboundsx,1.245),FixedMul(hudboundsy,0.75),true);
			SetHudClipRect(FixedMul(hudboundsx,0.08),FixedMul(hudboundsy,0.4250),FixedMul(hudboundsx,0.4550),FixedMul(hudboundsy,0.11),FixedMul(hudboundsx,0.4350));
			HudMessage(s:"Recharge Tarot Charges";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1575,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.22)+0.1,0.0);
			HudMessage(s:"Restore Gold Tarot charges. Charges remaining: ",d:remainingCharges;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1574,"PainkillerBrown",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2325)+0.1,0.0);
			HudMessage(s:"Cost: ",d:PAINKILLER_RECHARGE_COST;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1573,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2575)+0.1,0.0);
			SetHudClipRect(0,0,0,0,0);
			
			if(((buttons & (BT_USE|BT_ATTACK)) || holdqueue == 1) && holddelay <= 0)
			{
				holdqueue = 1;
				if(!(buttons & (BT_USE|BT_ATTACK)))
				{
					
					if(goldAmount >= PAINKILLER_RECHARGE_COST && remainingCharges < chargeCondition) 
					{
						LocalAmbientSound("Painkiller/TarotBoard/BuyCharge",255);
						TakeInventory("Painkiller_TarotMPUses",1);
						TakeInventory("Painkiller_TarotUsage",1);
						TakeInventory("Painkiller_GoldAmount",PAINKILLER_RECHARGE_COST);
					}
					else LocalAmbientSound("Sounds/Painkiller/wrong_place.wav",255);
					holdqueue = 0;
					holddelay = standardholddelay;
					holding = 0;
					hoverqueue = 0;
				}
			}
		}
		else 
		{
			hovercharge = 0;
			RemoveMessages(1573,1575);
		}
		
		//Card Display
		for(a = 0; a < PainkillerSilverTarotCards; a++)
		{
			if(!CheckInventory(Painkiller_Silver_CardGraphics[a][4]))
				continue;

			SetHudSize(4*hudboundsx,hudboundsy*2,true);
			SetFont(Painkiller_Silver_CardGraphics[a][0]);
			if(CheckInventory("Painkiller_SilverSlot1") == (a+1))
			{
				if(cursorx < FixedMul(hudboundsx,0.2075) && (cursorx > (FixedMul(hudboundsx,0.07))) && (cursory < FixedMul(hudboundsy,0.535) && cursory > FixedMul(hudboundsy,0.3)))
				{
					hoverqueue = 1;
					SetFont("CMPBPAIN");
					SetHudSize(FixedMul(hudboundsx,1.245),FixedMul(hudboundsy,0.75),true);
					SetHudClipRect(FixedMul(hudboundsx,0.08),FixedMul(hudboundsy,0.4250),FixedMul(hudboundsx,0.4550),FixedMul(hudboundsy,0.11),FixedMul(hudboundsx,0.4350));
					HudMessage(s:Painkiller_Silver_CardGraphics[a][2];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1575,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.22)+0.1,0.0);
					HudMessage(s:Painkiller_Silver_CardGraphics[a][3];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1574,"PainkillerBrown",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2325)+0.1,0.0);
					HudMessage(s:"Withdrawal Return: ",d:PKTarotSilverCardCosts[a]/2;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1573,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2575)+0.1,0.0);
					SetHudClipRect(0,0,0,0,0);

					if(((buttons & (BT_USE|BT_ATTACK)) || holdqueue == 1) && holddelay <= 0 && (holding-1) < PainkillerSilverTarotCards)
					{
						holdqueue = 1;
						if(!(buttons & (BT_USE|BT_ATTACK)))
						{
							LocalAmbientSound("Painkiller/TarotBoard/MoveCard",255);
							SetUserCvar(PlayerNumber(),"samsara_mp_silverSlot1",0);
							GiveInventory("Painkiller_GoldAmount",PKTarotSilverCardCosts[CheckInventory("Painkiller_SilverSlot1")-1]/2);
							TakeInventory("Painkiller_SilverSlot1",32);
							holdqueue = 0;
							holddelay = standardholddelay;
							holding = (a+1);
							hoverqueue = 0;
						}
					}
				}
			}
			else if(CheckInventory("Painkiller_SilverSlot2") == (a+1))
			{
				if(cursorx < FixedMul(hudboundsx,0.375) && (cursorx > (FixedMul(hudboundsx,0.2375))) && (cursory < FixedMul(hudboundsy,0.535) && cursory > FixedMul(hudboundsy,0.3)))
				{
					hoverqueue = 1;
					SetFont("CMPBPAIN");
					SetHudSize(FixedMul(hudboundsx,1.245),FixedMul(hudboundsy,0.75),true);
					SetHudClipRect(FixedMul(hudboundsx,0.08),FixedMul(hudboundsy,0.4250),FixedMul(hudboundsx,0.4550),FixedMul(hudboundsy,0.11),FixedMul(hudboundsx,0.4350));
					HudMessage(s:Painkiller_Silver_CardGraphics[a][2];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1575,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.22)+0.1,0.0);
					HudMessage(s:Painkiller_Silver_CardGraphics[a][3];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1574,"PainkillerBrown",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2325)+0.1,0.0);
					HudMessage(s:"Withdrawal Return: ",d:PKTarotSilverCardCosts[a]/2;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1573,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2575)+0.1,0.0);
					SetHudClipRect(0,0,0,0,0);

					if(((buttons & (BT_USE|BT_ATTACK)) || holdqueue == 1) && holddelay <= 0 && (holding-1) < PainkillerSilverTarotCards)
					{
						holdqueue = 1;
						if(!(buttons & (BT_USE|BT_ATTACK)))
						{
							LocalAmbientSound("Painkiller/TarotBoard/MoveCard",255);
							SetUserCvar(PlayerNumber(),"samsara_mp_silverSlot2",0);
							GiveInventory("Painkiller_GoldAmount",PKTarotSilverCardCosts[CheckInventory("Painkiller_SilverSlot2")-1]/2);
							TakeInventory("Painkiller_SilverSlot2",32);
							holdqueue = 0;
							holddelay = standardholddelay;
							holding = (a+1);
							hoverqueue = 0;
						}
					}
				}
			}

			if(dropdelay <= 0 && (holding == 0 && CheckInventory("Painkiller_SilverSlot1") != (a+1) && CheckInventory("Painkiller_SilverSlot2") != (a+1) && cursorx < FixedMul(hudboundsx,0.125)+(a*61)+24) && (cursorx > (FixedMul(hudboundsx,0.125)+(a*61)-24)) && (cursory < FixedMul(hudboundsy,0.25) && cursory > FixedMul(hudboundsy,0.1675)))
			{
				if(buttons & (BT_USE|BT_ATTACK))
				{
					if(CheckInventory("Painkiller_GoldAmount") >= PKTarotSilverCardCosts[a])
					{
						LocalAmbientSound("Painkiller/TarotBoard/MoveCard",255);
						holddelay = standardholddelay;
						holding = (a+1);
					}
					else
					{
						LocalAmbientSound("Painkiller/TarotBoard/WrongPlace",255);
						holddelay = standardholddelay;
					}
				}
				else
				{
					hoverqueue = 1;
					SetFont("CMPBPAIN");
					SetHudSize(FixedMul(hudboundsx,1.245),FixedMul(hudboundsy,0.75),true);
					SetHudClipRect(FixedMul(hudboundsx,0.08),FixedMul(hudboundsy,0.4250),FixedMul(hudboundsx,0.4550),FixedMul(hudboundsy,0.11),FixedMul(hudboundsx,0.4350));
					HudMessage(s:Painkiller_Silver_CardGraphics[a][2];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1575,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.22)+0.1,0.0);
					HudMessage(s:Painkiller_Silver_CardGraphics[a][3];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1574,"PainkillerBrown",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2325)+0.1,0.0);
					HudMessage(s:"Cost to place: ",d:PKTarotSilverCardCosts[a];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1573,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2575)+0.1,0.0);
					SetHudClipRect(0,0,0,0,0);
				}
			}
			if(hoverqueue == 0)
			{
				HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1575,"PainkillerRed",0,0,0.0);
				HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1574,"PainkillerBrown",0,0,0.0);
				HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1573,"PainkillerRed",0,0,0.0);
			}
			if((buttons & (BT_USE|BT_ATTACK)) && holding != 0)
			{
				if((holding-1) < PainkillerSilverTarotCards && holddelay <= 0 && cursorx < FixedMul(hudboundsx,0.2075) && (cursorx > (FixedMul(hudboundsx,0.07))) && (cursory < FixedMul(hudboundsy,0.53) && cursory > FixedMul(hudboundsy,0.3)))
				{
					GiveInventory("Painkiller_GoldAmount",PKTarotSilverCardCosts[CheckInventory("Painkiller_SilverSlot1")-1]/2);
					TakeInventory("Painkiller_SilverSlot1",32);
					GiveInventory("Painkiller_SilverSlot1",holding);
					TakeInventory("Painkiller_GoldAmount",PKTarotSilverCardCosts[holding-1]);
					LocalAmbientSound("Painkiller/TarotCard/Pay",255);
					SetUserCvar(PlayerNumber(),"samsara_mp_silverSlot1",holding);
					LocalAmbientSound("Painkiller/TarotBoard/SilverPlace",255);
					holddelay = standardholddelay;
					holding = 0;
				}
				else if((holding-1) < PainkillerSilverTarotCards && holddelay <= 0 && cursorx < FixedMul(hudboundsx,0.375) && (cursorx > (FixedMul(hudboundsx,0.2375))) && (cursory < FixedMul(hudboundsy,0.53) && cursory > FixedMul(hudboundsy,0.3)))
				{
					GiveInventory("Painkiller_GoldAmount",PKTarotSilverCardCosts[CheckInventory("Painkiller_SilverSlot2")-1]/2);
					TakeInventory("Painkiller_SilverSlot2",32);
					GiveInventory("Painkiller_SilverSlot2",holding);
					TakeInventory("Painkiller_GoldAmount",PKTarotSilverCardCosts[holding-1]);
					LocalAmbientSound("Painkiller/TarotCard/Pay",255);
					SetUserCvar(PlayerNumber(),"samsara_mp_silverSlot2",holding);
					LocalAmbientSound("Painkiller/TarotBoard/SilverPlace",255);
					holddelay = standardholddelay;
					holding = 0;
				}
				else if((holding-1) < PainkillerSilverTarotCards && holddelay <= 0 && cursorx < FixedMul(hudboundsx,0.63) && (cursorx > (FixedMul(hudboundsx,0.49))) && (cursory < FixedMul(hudboundsy,0.725) && cursory > FixedMul(hudboundsy,0.49)))
				{
					LocalAmbientSound("Painkiller/TarotBoard/WrongPlace",255);
					holddelay = standardholddelay;
				}
				else if((holding-1) < PainkillerSilverTarotCards && holddelay <= 0 && cursorx < FixedMul(hudboundsx,0.795) && (cursorx > (FixedMul(hudboundsx,0.6575))) && (cursory < FixedMul(hudboundsy,0.725) && cursory > FixedMul(hudboundsy,0.49)))
				{
					LocalAmbientSound("Painkiller/TarotBoard/WrongPlace",255);
					holddelay = standardholddelay;
				}
				else if((holding-1) < PainkillerSilverTarotCards && holddelay <= 0 && cursorx < FixedMul(hudboundsx,0.96) && (cursorx > (FixedMul(hudboundsx,0.8225))) && (cursory < FixedMul(hudboundsy,0.725) && cursory > FixedMul(hudboundsy,0.49)))
				{
					LocalAmbientSound("Painkiller/TarotBoard/WrongPlace",255);
					holddelay = standardholddelay;
				}
				if(holddelay <= 0 && (holding-1) < PainkillerSilverTarotCards)
				{
					HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1512,0,0,0,0.0);
					LocalAmbientSound("Painkiller/TarotBoard/DropCard",255);
					holddelay = 0;
					dropdelay = standardholddelay;
					holding = 0;
				}
			}

			SetHudSize(FixedMul(5.75,hudboundsx),FixedMul(2.625,hudboundsy),true);
			SetFont(Painkiller_Silver_CardGraphics[a][0]);

			if(holding == a+1)
			{
				RemoveMessages(1551+a,1551+a);
				HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1512,0,floorwhole(5.75*cursorx)-48.0,floorwhole(2.625*cursory)-12.0,0.0);
			}
			else
			{
				if(CheckInventory("Painkiller_SilverSlot1") == (a+1))
				{
					SetFont(Painkiller_Silver_CardGraphics[a][1]);
					SetHudSize(FixedMul(2.5,hudboundsx),FixedMul(1.6475,hudboundsy),true);
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1551+a,0,floorwhole(hudboundsx*0.3125),floorwhole(hudboundsy*0.67),0.0);
				}
				else if(CheckInventory("Painkiller_SilverSlot2") == (a+1))
				{
					SetFont(Painkiller_Silver_CardGraphics[a][1]);
					SetHudSize(FixedMul(2.5,hudboundsx),FixedMul(1.6475,hudboundsy),true);
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1551+a,0,floorwhole(hudboundsx*0.7325),floorwhole(hudboundsy*0.67),0.0);
				}
				else
				{
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1551+a,0,floorwhole(hudboundsx*0.625)+(a*352*1.0),floorwhole(hudboundsy*0.52),0.0);
				}
			}
		}

		for(b = 0; b < PainkillerGoldTarotCards; b++)
		{
			if(!CheckInventory(Painkiller_Gold_CardGraphics[b][4]))
				continue;

			SetHudSize(4*hudboundsx,hudboundsy*2,true);
			SetFont(Painkiller_Gold_CardGraphics[b][0]);
			if(CheckInventory("Painkiller_GoldSlot1") == (b+1))
			{
				if(cursorx < FixedMul(hudboundsx,0.63) && (cursorx > (FixedMul(hudboundsx,0.49))) && (cursory < FixedMul(hudboundsy,0.725) && cursory > FixedMul(hudboundsy,0.49)))
				{
					hoverqueue = 1;
					SetFont("CMPBPAIN");
					SetHudSize(FixedMul(hudboundsx,1.245),FixedMul(hudboundsy,0.75),true);
					SetHudClipRect(FixedMul(hudboundsx,0.08),FixedMul(hudboundsy,0.4250),FixedMul(hudboundsx,0.4550),FixedMul(hudboundsy,0.11),FixedMul(hudboundsx,0.4350));
					HudMessage(s:Painkiller_Gold_CardGraphics[b][2];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1575,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.22)+0.1,0.0);
					HudMessage(s:Painkiller_Gold_CardGraphics[b][3];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1574,"PainkillerBrown",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2325)+0.1,0.0);
					HudMessage(s:"Withdrawal Return: ",d:PKTarotGoldCardCosts[b]/2;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1573,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2575)+0.1,0.0);
					SetHudClipRect(0,0,0,0,0);

					if(((buttons & (BT_USE|BT_ATTACK)) || holdqueue == 1) && holddelay <= 0)
					{
						holdqueue = 1;
						if(!(buttons & (BT_USE|BT_ATTACK)))
						{
							SetUserCvar(PlayerNumber(),"samsara_mp_goldSlot1",0);
							LocalAmbientSound("Painkiller/TarotBoard/MoveCard",255);
							GiveInventory("Painkiller_GoldAmount",PKTarotGoldCardCosts[CheckInventory("Painkiller_GoldSlot1")-1]/2);
							TakeInventory("Painkiller_GoldSlot1",32);
							holdqueue = 0;
							holddelay = standardholddelay;
							holding = (a+b+1);
							hoverqueue = 0;
						}
					}
				}
			}
			else if(CheckInventory("Painkiller_GoldSlot2") == (b+1))
			{
				if(cursorx < FixedMul(hudboundsx,0.795) && (cursorx > (FixedMul(hudboundsx,0.6575))) && (cursory < FixedMul(hudboundsy,0.725) && cursory > FixedMul(hudboundsy,0.49)))
				{
					hoverqueue = 1;
					SetFont("CMPBPAIN");
					SetHudSize(FixedMul(hudboundsx,1.245),FixedMul(hudboundsy,0.75),true);
					SetHudClipRect(FixedMul(hudboundsx,0.08),FixedMul(hudboundsy,0.4250),FixedMul(hudboundsx,0.4550),FixedMul(hudboundsy,0.11),FixedMul(hudboundsx,0.4350));
					HudMessage(s:Painkiller_Gold_CardGraphics[b][2];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1575,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.22)+0.1,0.0);
					HudMessage(s:Painkiller_Gold_CardGraphics[b][3];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1574,"PainkillerBrown",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2325)+0.1,0.0);
					HudMessage(s:"Withdrawal Return: ",d:PKTarotGoldCardCosts[b]/2;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1573,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2575)+0.1,0.0);
					SetHudClipRect(0,0,0,0,0);

					if(((buttons & (BT_USE|BT_ATTACK)) || holdqueue == 1) && holddelay <= 0)
					{
						holdqueue = 1;
						if(!(buttons & (BT_USE|BT_ATTACK)))
						{
							SetUserCvar(PlayerNumber(),"samsara_mp_goldSlot2",0);
							LocalAmbientSound("Painkiller/TarotBoard/MoveCard",255);
							GiveInventory("Painkiller_GoldAmount",PKTarotGoldCardCosts[CheckInventory("Painkiller_GoldSlot2")-1]/2);
							TakeInventory("Painkiller_GoldSlot2",32);
							holdqueue = 0;
							holddelay = standardholddelay;
							holding = (a+b+1);
							hoverqueue = 0;
						}
					}
				}
			}
			else if(CheckInventory("Painkiller_GoldSlot3") == (b+1))
			{
				if(cursorx < FixedMul(hudboundsx,0.96) && (cursorx > (FixedMul(hudboundsx,0.8225))) && (cursory < FixedMul(hudboundsy,0.725) && cursory > FixedMul(hudboundsy,0.49)))
				{
					hoverqueue = 1;
					SetFont("CMPBPAIN");
					SetHudSize(FixedMul(hudboundsx,1.245),FixedMul(hudboundsy,0.75),true);
					SetHudClipRect(FixedMul(hudboundsx,0.08),FixedMul(hudboundsy,0.4250),FixedMul(hudboundsx,0.4550),FixedMul(hudboundsy,0.11),FixedMul(hudboundsx,0.4350));
					HudMessage(s:Painkiller_Gold_CardGraphics[b][2];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1575,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.22)+0.1,0.0);
					HudMessage(s:Painkiller_Gold_CardGraphics[b][3];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1574,"PainkillerBrown",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2325)+0.1,0.0);
					HudMessage(s:"Withdrawal Return: ",d:PKTarotGoldCardCosts[b]/2;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1573,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2575)+0.1,0.0);
					SetHudClipRect(0,0,0,0,0);

					if(((buttons & (BT_USE|BT_ATTACK)) || holdqueue == 1) && holddelay <= 0)
					{
						holdqueue = 1;
						if(!(buttons & (BT_USE|BT_ATTACK)))
						{
							SetUserCvar(PlayerNumber(),"samsara_mp_goldSlot3",0);
							LocalAmbientSound("Painkiller/TarotBoard/MoveCard",255);
							GiveInventory("Painkiller_GoldAmount",PKTarotGoldCardCosts[CheckInventory("Painkiller_GoldSlot3")-1]/2);
							TakeInventory("Painkiller_GoldSlot3",32);
							holdqueue = 0;
							holddelay = standardholddelay;
							holding = (a+b+1);
							hoverqueue = 0;
						}
					}
				}
			}
			if(dropdelay <= 0 && (holding == 0 && CheckInventory("Painkiller_GoldSlot1") != (b+1) && CheckInventory("Painkiller_GoldSlot2") != (b+1) && CheckInventory("Painkiller_GoldSlot3") != (b+1) && cursorx < FixedMul(hudboundsx,0.1025)+(b*53)+20) && (cursorx > (FixedMul(hudboundsx,0.1025)+(b*53)-20)) && (cursory < FixedMul(hudboundsy,0.85) && cursory > FixedMul(hudboundsy,0.78)))
			{
				if(buttons & (BT_USE|BT_ATTACK))
				{
					if(CheckInventory("Painkiller_GoldAmount") >= PKTarotGoldCardCosts[a])
					{
						LocalAmbientSound("Painkiller/TarotBoard/MoveCard",255);
						holddelay = standardholddelay;
						holding = (a+b+1);
						HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1521+b,0,floorwhole(hudboundsx*0.59)+(b*357*1.0),floorwhole(hudboundsy*2.415),0.0);
					}
					else
					{
						LocalAmbientSound("Painkiller/TarotBoard/WrongPlace",255);
						holddelay = standardholddelay;
					}
				}
				else
				{
					hoverqueue = 1;
					SetFont("CMPBPAIN");
					SetHudSize(FixedMul(hudboundsx,1.245),FixedMul(hudboundsy,0.75),true);
					SetHudClipRect(FixedMul(hudboundsx,0.08),FixedMul(hudboundsy,0.4250),FixedMul(hudboundsx,0.4550),FixedMul(hudboundsy,0.11),FixedMul(hudboundsx,0.4350));
					HudMessage(s:Painkiller_Gold_CardGraphics[b][2];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1575,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.22)+0.1,0.0);
					HudMessage(s:Painkiller_Gold_CardGraphics[b][3];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1574,"PainkillerBrown",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2325)+0.1,0.0);
					HudMessage(s:"Cost to place: ",d:PKTarotGoldCardCosts[b];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1573,"PainkillerRed",2*floorwhole(hudboundsx*0.0475)+0.1,2*floorwhole(hudboundsy*0.2575)+0.1,0.0);
					SetHudClipRect(0,0,0,0,0);
				}
			}
			if(hoverqueue == 0)
			{
				HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1575,"PainkillerRed",0,0,0.0);
				HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1574,"PainkillerBrown",0,0,0.0);
				HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1573,"PainkillerRed",0,0,0.0);
			}
			if((buttons & (BT_USE|BT_ATTACK)) && holding != 0)
			{
				if(holddelay <= 0 && cursorx < FixedMul(hudboundsx,0.63) && (cursorx > (FixedMul(hudboundsx,0.49))) && (cursory < FixedMul(hudboundsy,0.725) && cursory > FixedMul(hudboundsy,0.49)))
				{
					GiveInventory("Painkiller_GoldAmount",PKTarotGoldCardCosts[CheckInventory("Painkiller_GoldSlot1")-1]/2);
					TakeInventory("Painkiller_GoldSlot1",32);
					GiveInventory("Painkiller_GoldSlot1",holding-a);
					TakeInventory("Painkiller_GoldAmount",PKTarotGoldCardCosts[holding-a-1]);
					LocalAmbientSound("Painkiller/TarotCard/Pay",255);
					SetUserCvar(PlayerNumber(),"samsara_mp_goldSlot1",holding-a);
					LocalAmbientSound("Painkiller/TarotBoard/GoldPlace",255);
					holddelay = standardholddelay;
					holding = 0;
				}
				else if(holddelay <= 0 && cursorx < FixedMul(hudboundsx,0.795) && (cursorx > (FixedMul(hudboundsx,0.6575))) && (cursory < FixedMul(hudboundsy,0.725) && cursory > FixedMul(hudboundsy,0.49)))
				{
					GiveInventory("Painkiller_GoldAmount",PKTarotGoldCardCosts[CheckInventory("Painkiller_GoldSlot2")-1]/2);
					TakeInventory("Painkiller_GoldSlot2",32);
					GiveInventory("Painkiller_GoldSlot2",holding-a);
					TakeInventory("Painkiller_GoldAmount",PKTarotGoldCardCosts[holding-a-1]);
					LocalAmbientSound("Painkiller/TarotCard/Pay",255);
					SetUserCvar(PlayerNumber(),"samsara_mp_goldSlot2",holding-a);
					LocalAmbientSound("Painkiller/TarotBoard/GoldPlace",255);
					holddelay = standardholddelay;
					holding = 0;
				}
				else if(holddelay <= 0 && cursorx < FixedMul(hudboundsx,0.96) && (cursorx > (FixedMul(hudboundsx,0.8225))) && (cursory < FixedMul(hudboundsy,0.725) && cursory > FixedMul(hudboundsy,0.49)))
				{
					GiveInventory("Painkiller_GoldAmount",PKTarotGoldCardCosts[CheckInventory("Painkiller_GoldSlot3")-1]/2);
					TakeInventory("Painkiller_GoldSlot3",32);
					GiveInventory("Painkiller_GoldSlot3",holding-a);
					TakeInventory("Painkiller_GoldAmount",PKTarotGoldCardCosts[holding-a-1]);
					LocalAmbientSound("Painkiller/TarotCard/Pay",255);
					SetUserCvar(PlayerNumber(),"samsara_mp_goldSlot3",holding-a);
					LocalAmbientSound("Painkiller/TarotBoard/GoldPlace",255);
					holddelay = standardholddelay;
					holding = 0;
				}
				else if((holding-1) > a && holddelay <= 0 && cursorx < FixedMul(hudboundsx,0.2075) && (cursorx > (FixedMul(hudboundsx,0.07))) && (cursory < FixedMul(hudboundsy,0.53) && cursory > FixedMul(hudboundsy,0.3)))
				{
					LocalAmbientSound("Painkiller/TarotBoard/WrongPlace",255);
					holddelay = standardholddelay;
				}
				else if((holding-1) > a && holddelay <= 0 && cursorx < FixedMul(hudboundsx,0.375) && (cursorx > (FixedMul(hudboundsx,0.2375))) && (cursory < FixedMul(hudboundsy,0.53) && cursory > FixedMul(hudboundsy,0.3)))
				{
					LocalAmbientSound("Painkiller/TarotBoard/WrongPlace",255);
					holddelay = standardholddelay;
				}
				if(holddelay <= 0)
				{
					LocalAmbientSound("Painkiller/TarotBoard/DropCard",255);
					holddelay = 0;
					dropdelay = standardholddelay;
					holding = 0;
				}
			}

			SetHudSize(FixedMul(6.75,hudboundsx),FixedMul(3.0,hudboundsy),true);
			SetFont(Painkiller_Gold_CardGraphics[b][0]);

			if(holding == (a+b+1))
			{
				RemoveMessages(1521+b,1521+b);
				HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1512,0,floorwhole(6.75*cursorx)-48.0,floorwhole(3.0*cursory)-12.0,0.0);
			}
			else
			{
				if(CheckInventory("Painkiller_GoldSlot1") == (b+1))
				{
					SetFont(Painkiller_Gold_CardGraphics[b][1]);
					SetHudSize(FixedMul(2.5,hudboundsx),FixedMul(1.6475,hudboundsy),true);
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1521+b,0,floorwhole(hudboundsx*1.3625),floorwhole(hudboundsy*0.985),0.0);
				}
				else if(CheckInventory("Painkiller_GoldSlot2") == (b+1))
				{
					SetFont(Painkiller_Gold_CardGraphics[b][1]);
					SetHudSize(FixedMul(2.5,hudboundsx),FixedMul(1.6475,hudboundsy),true);
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1521+b,0,floorwhole(hudboundsx*1.78),floorwhole(hudboundsy*0.985),0.0);
				}
				else if(CheckInventory("Painkiller_GoldSlot3") == (b+1))
				{
					SetFont(Painkiller_Gold_CardGraphics[b][1]);
					SetHudSize(FixedMul(2.5,hudboundsx),FixedMul(1.6475,hudboundsy),true);
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1521+b,0,floorwhole(hudboundsx*2.195),floorwhole(hudboundsy*0.985),0.0);
				}
				else
				{
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1521+b,0,floorwhole(hudboundsx*0.59)+(b*357*1.0),floorwhole(hudboundsy*2.415),0.0);
				}
			}
		}

		if(holding == 0)
			HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1512,0,0,0,0.0);

		Delay(1);
		holddelay--;
		dropdelay--;
	}
	RemoveMessages(1495,1600);
	SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
}

Script "Painkiller_GoldTarot_Activate" (void) NET
{
	int gameMode = !(isCoop() || isInvasion() || isSinglePlayer()) ? 0 : 1;
	int screenSize = 0;

	if(CheckInventory("Painkiller_GoldActive") || (CheckInventory("Painkiller_GoldSlot1") == 0 && CheckInventory("Painkiller_GoldSlot2") == 0 && CheckInventory("Painkiller_GoldSlot3") == 0) || CheckWeapon("Painkiller_DemonMorph") || (!CheckInventory("Painkiller_TarotMPUses") && gameMode == 0) || isDead(0))
		terminate;

	if(CheckInventory("Painkiller_TarotUsage") >= 3 || (CheckInventory("Painkiller_TarotMPUses") < 3 && gameMode == 0))
	{
		if(gameMode == 0)
		{
			if((CheckInventory("Painkiller_TarotMPUses") == 0 && CheckInventory("Painkiller_Mercy_Power")) || (CheckInventory("Painkiller_TarotMPUses") == 1 && CheckInventory("Painkiller_Forgiveness_Power")))
				terminate;
		}
		else
		{
			if(!(CheckInventory("Painkiller_TarotUsage") < 7 && CheckInventory("Painkiller_Mercy_Power")) && !(CheckInventory("Painkiller_TarotUsage") < 5 && CheckInventory("Painkiller_Forgiveness_Power")))
				terminate;
		}
	}

	if(gameMode == 0)
	{
		if(!CheckInventory("Painkiller_NoTarotCardLimit"))
		{
			TakeInventory("Painkiller_TarotMPUses",1);
		}

		TakeInventory("Painkiller_Tarot_GoldGiver",65536);
	}

	//TakeInventory("Painkiller_TarotLevel",99999);
	//GiveInventory("Painkiller_TarotLevel",levelnum);

	if(!CheckInventory("Painkiller_NoTarotCardLimit"))
	{
		GiveInventory("Painkiller_TarotUsage",1);
	}

	int goldSlot1 = CheckInventory("Painkiller_GoldSlot1");
	int goldSlot2 = CheckInventory("Painkiller_GoldSlot2");
	int goldSlot3 = CheckInventory("Painkiller_GoldSlot3");

	int duration = 0;
	GiveInventory("Painkiller_GoldActive",1);
	if(goldSlot1 > 0)
		GiveInventory(Painkiller_Gold_CardGraphics[goldSlot1-1][5],1);
	if(goldSlot2 > 0)
		GiveInventory(Painkiller_Gold_CardGraphics[goldSlot2-1][5],1);
	if(goldSlot3 > 0)
		GiveInventory(Painkiller_Gold_CardGraphics[goldSlot3-1][5],1);

	int maxDuration = 700+(CheckInventory("Painkiller_TimeBonus_Power")*350)+(CheckInventory("Painkiller_DoubleTimeBonus_Power")*700);

	while(duration < maxDuration && (ClassifyActor(0) & ACTOR_ALIVE))
	{
		screenSize = ACS_NamedExecuteWithResult("screenBlocks") <= 10;
		SetHudSize(320,256,1);
		SetFont("PKTARTAK");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1500,0,160.0,128.0,0.5);

		SetHudSize(4096,3072,1);
		if(maxDuration - duration < 105 && duration % 17 < 7)
		{
			HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1499,0,1664.0,2800.0-(screenSize*512.0),0.5);
			HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1498,0,2048.0,2800.0-(screenSize*512.0),0.5);
			HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1497,0,2432.0,2800.0-(screenSize*512.0),0.5);
		}
		else
		{
			SetFont(Painkiller_Gold_CardGraphics[goldSlot1-1][1]);
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1499,0,1664.0,2800.0-(screenSize*512.0),0.5);
			SetFont(Painkiller_Gold_CardGraphics[goldSlot2-1][1]);
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1498,0,2048.0,2800.0-(screenSize*512.0),0.5);
			SetFont(Painkiller_Gold_CardGraphics[goldSlot3-1][1]);
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1497,0,2432.0,2800.0-(screenSize*512.0),0.5);
		}

		Delay(1);
		duration++;
	}
	TakeInventory("Painkiller_GoldActive",1);
}

Script "Painkiller_BlackTarot_CardLoop" (int type, int extra)
{
	switch(type)
	{
		case 1:
			if(SinglePlayer())
			{
				Playsound(0,"Painkiller/BulletTimeStart",CHAN_NOPAUSE|CHAN_5,1.0,0,ATTN_NORM);
				Playsound(0,"Painkiller/BulletTimeLoop",CHAN_NOPAUSE|CHAN_7,1.0,1,ATTN_NORM);
				while(CheckInventory("Painkiller_GoldActive"))
				{
					GiveInventory("Painkiller_Haste_Freezer",1);
					Delay(7);
				}
			}
			else
				Print(s:"Haste does not work outside of singleplayer games. Please select a different gold card.");
			break;
		case 2:
			if(SinglePlayer())
			{
				Playsound(0,"Painkiller/BulletTimeStart",CHAN_NOPAUSE|CHAN_5,1.0,0,ATTN_NORM);
				Playsound(0,"Painkiller/BulletTimeLoop",CHAN_NOPAUSE|CHAN_7,1.0,1,ATTN_NORM);
				while(CheckInventory("Painkiller_GoldActive"))
				{
					GiveInventory("Painkiller_DoubleHaste_Freezer",1);
					Delay(5);
				}
			}
			else
				Print(s:"Double Haste does not work outside of singleplayer games. Please select a different gold card.");
			break;
		case 3:
			if(SinglePlayer())
			{
				Playsound(0,"Painkiller/BulletTimeStart",CHAN_NOPAUSE|CHAN_5,1.0,0,ATTN_NORM);
				Playsound(0,"Painkiller/BulletTimeLoop",CHAN_NOPAUSE|CHAN_7,1.0,1,ATTN_NORM);
				while(CheckInventory("Painkiller_GoldActive"))
				{
					GiveInventory("Painkiller_TripleHaste_Freezer",1);
					Delay(3);
				}
			}
			else
				Print(s:"Triple Haste does not work outside of singleplayer games. Please select a different gold card.");
			break;
		case 4:
			while(CheckInventory("Painkiller_GoldActive"))
			{
				GiveInventory("Painkiller_DoubleFireSpeed",1);
				Delay(5);
			}
			TakeInventory("Painkiller_DoubleFireSpeed",1);
			break;
		case 5:
			while(CheckInventory("Painkiller_GoldActive"))
			{
				GiveInventory("Painkiller_DoubleDamage",1);
				Delay(5);
			}
			TakeInventory("Painkiller_DoubleDamage",1);
			break;
		case 6:
			while(CheckInventory("Painkiller_GoldActive"))
			{
				GiveInventory("Painkiller_QuadDamage",1);
				Delay(5);
			}
			TakeInventory("Painkiller_QuadDamage",1);
			break;
		case 7:
			while(CheckInventory("Painkiller_GoldActive"))
			{
				GiveInventory("Painkiller_Speed_Speeder",1);
				Delay(5);
			}
			TakeInventory("Painkiller_Speed_Speeder",1);
			break;
		case 8:
			while(CheckInventory("Painkiller_GoldActive"))
			{
				GiveInventory("Painkiller_Frightening",1);
				GiveInventory("Painkiller_Confusing",1);
				Delay(5);
			}
			TakeInventory("Painkiller_Frightening",1);
			TakeInventory("Painkiller_Confusing",1);
			break;
		case 9:
			while(CheckInventory("Painkiller_GoldActive"))
			{
				GiveInventory("Painkiller_Endurance_Protection",1);
				Delay(5);
			}
			break;
		case 10:
			while(CheckInventory("Painkiller_GoldActive"))
			{
				if(isCoop() || isSinglePlayer() || isInvasion())
				{
					GiveInventory("Painkiller_IronWill_Protection",1);
				}
				else
				{
					GiveInventory("Painkiller_IronWill_Protection_MP",1);
				}

				Delay(5);
			}
			break;
		case 11:
			while(CheckInventory("Painkiller_GoldActive"))
			{
				GiveInventory("Painkiller_Sceptre_Player",1);
				Delay(2);
			}
			break;
		case 12:
			while(CheckInventory("Painkiller_GoldActive"))
			{
				GiveInventory("Painkiller_MagicGun_Ammo",1);
				Delay(5);
			}
			TakeInventory("Painkiller_MagicGun_Ammo",1);
			break;
		case 13:
			SetFont("PKDEMONB");
			SetHudSize(1, 1, 1);
			HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD|HUDMSG_ALPHA, 32600, 0, 0.0, 0.0, 65536.0, 0.5);
			ACS_NamedExecuteWithResult("Painkiller_DemonMorphFade");
			GiveInventory("Painkiller_DemonMorph", 1);
			GiveInventory("PainkillerDemonMorphActive", 1);
			GiveInventory("PainkillerDemonMorphScreen", 1);
			GiveInventory("PainkillerDemonMorphInvulnerability", 1);

			while (CheckInventory("Painkiller_GoldActive"))
			{
				if (!CheckInventory("Painkiller_DemonMorph")) { break; }

				if (!CheckWeapon("Painkiller_DemonMorph")) { SetWeapon("Painkiller_DemonMorph"); }
				Delay(1);
			}

			TakeInventory("PainkillerDemonMorphActive", 1);

			while (CheckWeapon("Painkiller_DemonMorph")) { Delay(1); }

			HudMessage(s:""; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD, 32600, 0, 0.0, 0.0, 0.5, 0.1);
			break;
		case 14:
			while(CheckInventory("Painkiller_GoldActive"))
			{
				GiveInventory("Painkiller_WeaponModifier_Token", 1);
				Delay(5);
			}
			TakeInventory("Painkiller_WeaponModifier_Token", 1);
			break;
	}
	StopSound(0,CHAN_7);
	Playsound(0,"Painkiller/BulletTimeStop",CHAN_NOPAUSE|CHAN_5,1.0,0,ATTN_NORM);
}

script "Painkiller_SoulCatcher" (int type)
{
    int newtid = UniqueTID();

    if (type >= 3) { SpawnSpotFacingForced("Painkiller_RingTarget", 0, newtid); }
    else if (type == 2) { SpawnSpotFacingForced("Painkiller_CoinTarget", 0, newtid); }
    else if (type == 1) { SpawnSpotFacingForced("Painkiller_SoulTargetRed", 0, newtid); }
    else { SpawnSpotFacingForced("Painkiller_SoulTarget", 0, newtid); }

    while (ClassifyActor(0) != ACTOR_WORLD && ClassifyActor(newtid) != ACTOR_NONE)
    {
        if (ACS_NamedExecuteWithResult("hasValidPointer", newtid, AAPTR_TARGET) && ACS_NamedExecuteWithResult("Painkiller_CheckMagnet", type, newtid)) { Warp(newtid, 0, 0, 0, 0, WARPF_NOCHECKPOSITION|WARPF_COPYINTERPOLATION); }
        else { Warp(newtid, 0, 0, 0, 0, WARPF_NOCHECKPOSITION|WARPF_COPYINTERPOLATION|WARPF_MOVEPTR); }

        Delay(1);
    }

    Thing_Remove(0);
    Thing_Remove(newtid);
}

script "Painkiller_CheckMagnet" (int type, int newtid)
{
    int result = 0;

    SetActivator(newtid, AAPTR_TARGET);

    if (type >= 2) { result = CheckInventory("Painkiller_GoldMagnet_Power"); }
    else { result = CheckInventory("Painkiller_SoulCatcher_Power"); }

    SetResultValue(result);
}

Script "Painkiller_IsItGibbed" (void)
{
	int health = 66;
	if(CheckInventory("Painkiller_Sceptred"))
		health = 1;

	SetResultValue(GetActorProperty(0,APROP_Health) < -health);
}

Script "Painkiller_DropCoins" (int radius, int height, int spawnHealth, int coinDummyTid)
{
	if(!(ClassifyActor(0) & ACTOR_MONSTER))
		terminate;

	SetPointerExt(AAPTR_MASTER,0,coinDummyTid);
	SetActivator(coinDummyTid);
	Thing_ChangeTid(coinDummyTid,0);

	Delay(105);

	str type = "Painkiller_TossCoin";
	int alive;
	int a = 0;
	int healthTier = 20;
	int volume = height * radius * radius;
	int chunks = volume/2000;
	if(chunks < 1)
		chunks = 1;

	if(spawnHealth >= 4000) healthTier = 0;
	else if(spawnHealth >= 2000) healthTier = 5;
	else if(spawnHealth >= 1000) healthTier = 10;
	else if(spawnHealth >= 500) healthTier = 15;

	for(a = 0; a < chunks; a++)
	{
		if(random(0,healthTier)>0)
			type = "Painkiller_TossCoin";
		else
			type = "Painkiller_TossRing";

		GiveInventory(type, 1);
	}
}

Script "Painkiller_GibCreator" (int frozen)
{
	int alive;
	int a = 0;
	int height = ACS_NamedExecuteWithResult("Painkiller_GibHeightCheck");
	int radius = GetActorProperty(0,APROP_Radius)>>16;
	int volume = height * radius * radius;
	int chunks = volume/2000;
	if(chunks < 1)
		chunks = 1;

	for(a = 0; a < chunks; a++)
		GiveInventory("Painkiller_TossChunk", 1);
	for(a = 0; a < chunks/2; a++)
		GiveInventory("Painkiller_TossBlood", 1);
	for(a = 0; a < chunks*2; a++)
		GiveInventory("Painkiller_TossSpray", 1);
}

Script "Painkiller_GibHeightCheck" (void)
{
	int height = (GetActorProperty(0,APROP_Height)>>16);
	height += height * (3 * (GetActorProperty(0,APROP_Health) <= 0));
	SetResultValue(height);
}

Script "Painkiller_FreezeShatter" (void)
{
	int height = GetActorProperty(0,APROP_Height);
	int radius = GetActorProperty(0,APROP_Radius);
	if(ClassifyActor(0) & ACTOR_DEAD) height *= 4;
	int shatterAmount = ((height/1.0) * (radius/1.0)) / 32;
	for(int i = 0; i < shatterAmount; i++)
	{
		int shardTid = UniqueTid();
		SpawnForced("Painkiller_IceChunk",GetActorX(0)+random(0,radius),GetActorY(0)+random(0,radius),GetActorZ(0)+random(0,height),shardTid);
		SetActorVelocity(shardTid,random(-2.0,2.0),random(-2.0,2.0),random(2.0,4.0),0,0);
		Thing_ChangeTid(shardTid,0);
	}
	int coinDummyTid = UniqueTid();
	SpawnForced("Painkiller_CoinTosser",GetActorX(0),GetActorY(0),GetActorZ(0)+height/2,coinDummyTid);
	ACS_NamedExecuteWithResult("Painkiller_DropCoins",radius>>16,height>>16,GetActorProperty(0,APROP_SpawnHealth),coinDummyTid);
	if(!GetCvar("samsara_nopainkillercorpseremoval")) { Thing_Remove(0); }
	else { GiveInventory("EnemyZorched",1); }
}

Script "Painkiller_HitBoxRemover" (void)
{
	int myTid = UniqueTid();
	Thing_ChangeTid(0,myTid);
	if(!SetActivator(0,AAPTR_Tracer))
	{
		SetActivator(myTid);
		Thing_Remove(0);
	}
	Thing_ChangeTid(myTid,0);
}

Script "Painkiller_LaserDamageSound" (void)
{
	SetActivator(0,AAPTR_Tracer);
	PlaySound(0,"Painkiller/Painkiller/AltHit",CHAN_5,1.0);
}

Script "Painkiller_Sceptre_Weakener" (void)
{
	int health = GetActorProperty(0,APROP_Health);
	if(!CheckFlag(0,"BOSS"))
	{
		GiveInventory("Painkiller_Sceptred",1);
		SetActorProperty(0,APROP_Health,1);
		Delay(2);
		TakeInventory("Painkiller_Sceptred",1);
		SetActorProperty(0,APROP_Health,health);
	}
}

Script "Painkiller_Fear_Weakener" (void)
{
	int health = GetActorProperty(0,APROP_SpawnHealth);
	if(!CheckFlag(0,"BOSS") && !CheckInventory("Painkiller_GivenFear"))
	{
		GiveInventory("Painkiller_GivenFear",1);
		SetActorProperty(0,APROP_Health,(health*9)/10);
	}
}
