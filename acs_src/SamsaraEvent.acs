script "SamsaraOpen" OPEN  //623 -- SAMSARA_OPEN
{
	IsServer = 1;
	int opd, pd;
	int opdu, pdu;
	int opds, pds;

	int checkerTid = UniqueTid();
	int spawnerTid = UniqueTid();
	while(!Spawn("SamsaraIWADChecker",GetFirstPlayerCoords(0),GetFirstPlayerCoords(1),GetFirstPlayerCoords(2),spawnerTid)) { Delay(1); }

	Thing_SpawnNoFog(spawnerTid,240,0,checkerTid);

	// New iwad detection system
	// First, check for the non-Doom iwads supported natively by Zandronum
	if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Chex")
		currentGame = GAME_CHEX;
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Heretic")
		currentGame = GAME_HERETIC;
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Hexen")
		currentGame = GAME_HEXEN;
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Strife")
		currentGame = GAME_STRIFE;

	// Next, check for the non-Doom iwads that GZDoom can run natively
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Doom" && StrICmp(strparam(l:"GOTNUKER"),"You grab a NUKER! Suck on this!") == 0)
		currentGame = GAME_HACX;
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Doom" && StrICmp(strparam(l:"GOTPLASMA"),"Entropy thrower!") == 0)
		currentGame = GAME_HARMONY;
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Doom" && StrICmp(strparam(l:"OB_IMPHIT"),"You were burned by the wizard cat!") == 0)
		currentGame = GAME_ROTWB;

	// Now we check for custom iwads or TCs that we want to add compatibility for
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Doom" && StrICmp(strparam(l:"TAG_SHOTGUN"),"Steel-shot Launcher") == 0)
		currentGame = GAME_REKKR;

	// Finally, check for the Doom iwad
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Doom")
		currentGame = GAME_DOOM;

	Thing_Remove(spawnerTid);
	Thing_Remove(checkerTid);

	SetCvar("samsara_currentgame",currentGame);
	SetCvar("samsara_processedgame",1);

	//ACS_NamedExecuteAlways("samsara_RESETPLAYER_COOP",0,0,0,0);

	if (SamsaraGlobal[GLOBAL_DONEBITCHING] == 0)
	{
		if (GameType() == GAME_TITLE_MAP) { terminate; }

        str versiontext = StrParam(l:"SAMSARA_VERSIONDISPLAY");

        if (StrCmp(versiontext, "") && StrCmp(versiontext, "SAMSARA_VERSIONDISPLAY")) { HudMessage(s:versiontext; HUDMSG_FADEOUT, 93002, CR_UNTRANSLATED, 1.5, 0.265, 2.0, 0.5); }

        str mixerversiontext = StrParam(l:"SAMSARA_MIXER_VERSIONDISPLAY");

        if (StrCmp(mixerversiontext, "") && StrCmp(mixerversiontext, "SAMSARA_MIXER_VERSIONDISPLAY")) { HudMessage(s:mixerversiontext; HUDMSG_FADEOUT, 93003, CR_UNTRANSLATED, 1.5, 0.28, 2.0, 0.5); }

		if (isSinglePlayer())
		{
			if(GetCvar("samsara_cvarinfo") == 0)
			{
				/*HudMessage(s:"Reincarnation Changelist ",d:SAMSARA_CHANGELIST;
				HUDMSG_FADEOUT, 93002, CR_WHITE, 1.5, 0.2, 2.0, 0.5);*/
				HudMessage(s:HELPSTR;
				HUDMSG_PLAIN|HUDMSG_LOG|HUDMSG_ALPHA, 92712, CR_WHITE, 1.5, 0.225, 2.5, 0.0);
				HudMessage(s:HELPSTR_CL;
				HUDMSG_PLAIN|HUDMSG_LOG|HUDMSG_ALPHA, 92713, CR_WHITE, 1.5, 0.25, 2.5, 0.0);
				HudMessage(s:"\cjSee the console for \caCVAR information\c-.";
				HUDMSG_FADEOUT, 92712, CR_WHITE, 1.5, 0.305, 2.0, 0.5);
				SetCVar ("samsara_cvarinfo", 1);
				//ConsoleCommand("archivecvar samsara_cvarinfo");
			}
		}
		else
		{
			HudMessage(s:HELPSTR;
			HUDMSG_PLAIN|HUDMSG_LOG|HUDMSG_ALPHA, 92712, CR_WHITE, 1.5, 0.225, 2.5, 0.0);
			HudMessage(s:HELPSTR_CL;
			HUDMSG_PLAIN|HUDMSG_LOG|HUDMSG_ALPHA, 92713, CR_WHITE, 1.5, 0.25, 2.5, 0.0);
			HudMessage(s:"\cjSee the console for \caCVAR information\c-.";
			HUDMSG_FADEOUT, 92712, CR_WHITE, 1.5, 0.305, 2.0, 0.5);
		}

		SamsaraGlobal[GLOBAL_DONEBITCHING] = 1;
	}

	ArmorMode = middle(0, GetCVar("samsara_armormode"), ARMORMODES-1);
	CheckMapArmors();

	while (1)
	{
        if (!isZDoom())
        {
            if (!GetCVar("compat_clientssendfullbuttoninfo") && IsNetworkGame()) { ConsoleCommand("compat_clientssendfullbuttoninfo 1"); } // cannot use SetCVar with cvars defined in the source ports
        }

        for (int c = 0; c < PLAYERMAX; c++) // REOPEN doesn't exist in zandronum, so this is what we have to work with
        {
            if (!PlayerInGame(c)) { playerClasses[c] = -1; }
        }

		Delay(1);
	}
}

script "SamsaraOpenClient" OPEN CLIENTSIDE
{
	while (1)
	{
        for (int c = 0; c < PLAYERMAX; c++) // REOPEN doesn't exist in zandronum, so this is what we have to work with
        {
            if (!PlayerInGame(c)) { playerClassesClient[c] = -1; }
        }

		Delay(1);
	}
}

script "SamsaraEnter" ENTER { ACS_NamedExecuteWithResult("SamsaraSpawn"); } //611 -- SAMSARA_ENTER
script "SamsaraRespawn" RESPAWN { ACS_NamedExecuteWithResult("SamsaraSpawn", 1); } //618 -- SAMSARA_RESPAWN
script "SamsaraReturn" RETURN //613 -- SAMSARA_RETURN
{
    UnloadingNow = 0;
    ACS_NamedExecuteWithResult("SamsaraSpawn");
}

script "SamsaraSpawn" (int respawning) //624 -- SAMSARA_SPAWN
{
	if(GameType() == GAME_TITLE_MAP)
		terminate;

	int pln = PlayerNumber();
	int pcount, opcount;
	int startTime = Timer();
	int endloop;
	int canbuddha;
	int armor, oarmor, type, otype;
	int i;
	int doommode, dukemode, hexmode, wolfmode, rottmode, blakemode, eradmode, ipogmode, halflifemode, cvalue;
    int previousvalue = -1;
    int extrajumpz;
    int loadoutmode;
    int dualpickupcheck;
	int targettid;
	int bot = PlayerIsBot(pln);
	int strifeCeilingHeight = GetActorCeilingZ(0); //strife related
	int strifeLastKillCount;
	int strifeDead;
	int sigilCounter, sigilCounterPartyMode;
	int oldInstaGib;
	int pariasLastRepairTimer;
	int toPTimer;
	int speedmod;
	int XMASActive;
    str origclass = GetActorClass(0);
    int morphset;
    int respawnhealth = 100;
    bool hasfist = false, haspistol = false; // netplay hack to stop dummy weapons being given on map change

	ACS_NamedExecuteWithResult("SamsaraFirstTimeUserTutorialSystem", PlayerNumber(), 0, 0);

	if (!CheckInventory("IsSamsaraClass")) { ACS_NamedExecuteWithResult("SamsaraGameplayModCrap", respawning); terminate; }

    if (respawning)
    {
        if (isSinglePlayer() || isCoop())
        {
            SetInventory("SamsaraBaseSpawnHealth", 0);
            SetInventory("SamsaraExtraBaseSpawnHealth", 0);
            SetInventory("SamsaraExtraSpawnHealth", 0);

            if (!GetCVar("samsara_keepmaxhealth"))
            {
                SetInventory("SamsaraExtraBaseSpawnHealthDeterminant", 0);
                SetInventory("SamsaraExtraSpawnHealthDeterminant", 0);
                SetInventory("SamsaraHasMaxHealth", 0);
            }
        }
	}

    CalcPlayerSpawnHealth(); // added this here for stamina check later on

    GiveInventory("SamsaraMiscPickupDisplayBlocker", 1);

    ExecuteClassScripts(pln, 0);

	if(bot)
		ACS_NamedExecuteAlways("Samsara_BotAltClassHandler",0,pln,0,0);

    if (CheckInventory("ShrunkPlayer"))
    {
        GiveInventory("SamsaraNoPainDisabler", 1);
        GiveInventory("SamsaraNoDamageDisabler", 1);
        SetInventory("ShrunkPlayer", 0);
    }

	UnMorphActor(0,1);

	//ACS_NamedExecuteAlways("SAMSARA_RESETPLAYER_COOP",0,0,0,0);
	ServerEnterTimes[pln] = startTime;
	ACS_NamedExecuteWithResult("SamsaraSynthFire", startTime);

	ACS_NamedExecuteAlways("SamsaraEnterClient", 0, startTime,0,0);
	ACS_NamedExecuteWithResult("SamsaraWolfMove", startTime,0,0);
	ACS_NamedExecuteWithResult("SamsaraQPowers",  startTime,respawning,0);

    switch (samsaraClassNum())
    {
      case CLASS_WITCHAVEN:
          respawnhealth += CheckInventory("SamsaraWitchavenHealthIncrease");
          break;

      case CLASS_DEMONESS:
          respawnhealth = 70 + CheckInventory("Hexen2HealthAdd");
          break;
    }

    respawnhealth += CheckInventory("SamsaraExtraBaseSpawnHealth") + CheckInventory("SamsaraExtraBaseSpawnHealthDeterminant") + CheckInventory("SamsaraExtraBaseSpawnHealthPermanent");

    if (respawning && GetActorProperty(0, APROP_Health) < respawnhealth && !isDead(0) && !isLMS() && !GetCVar("samsara_lmsrules")) { SetActorProperty(0, APROP_Health, respawnhealth); }

	if (isLMS() || GetCVar("samsara_lmsrules")) { ApplyLMS(); }

	if (isSinglePlayer()) { SamsaraWepType = samsaraClassNum() + 1; }

	if (!respawning)
	{
		if(!CheckInventory("SamsaraPlayerShrinkDefaults"))
		{
			GiveInventory("SamsaraPlayerScaleX",GetActorProperty(0,APROP_ScaleX));
			GiveInventory("SamsaraPlayerScaleY",GetActorProperty(0,APROP_ScaleY));
			GiveInventory("SamsaraPlayerViewHeight",GetActorProperty(0,APROP_ViewHeight));
			GiveInventory("SamsaraPlayerShrinkDefaults",1);
		}
		if(GetActorProperty(0,APROP_ScaleX) != CheckInventory("SamsaraPlayerScaleX") || GetActorProperty(0,APROP_ScaleY) != CheckInventory("SamsaraPlayerScaleY") || GetActorProperty(0,APROP_ViewHeight) != CheckInventory("SamsaraPlayerViewHeight"))
		{
			SetActorProperty(0,APROP_ScaleX,CheckInventory("SamsaraPlayerScaleX"));
			SetActorProperty(0,APROP_ScaleY,CheckInventory("SamsaraPlayerScaleY"));
			SetActorProperty(0,APROP_ViewHeight,CheckInventory("SamsaraPlayerViewHeight"));
		}

		ACS_NamedExecuteAlways("SamsaraScheduled", 0, respawning,1,0);
	}

    HandleBackpackSpawn(respawning);
    for (i = SLOT_FIST; i <= SLOT_BFG10K; i++) { HandleSlotSpawn(i, respawning); }
	HandleUniqueSpawn(respawning);
	HandleInstagib(GetCvar("instagib") != oldInstagib);
	oldInstagib = GetCvar("instagib");

	ACS_NamedExecuteAlways("SamsaraScheduled", 0, respawning,0,0);

	switch (samsaraClassNum())
	{
	case CLASS_DOOM:
		if (!CheckInventory("SamsaraDoom64StartingUnmakerArtifactsGiven"))
		{
			if (GetCVar("samsara_unmakerartifacts") > 0) { SetInventory("SamsaraDoom64UnmakerArtifact", GetCVar("samsara_unmakerartifacts")); }
			SetInventory("SamsaraDoom64StartingUnmakerArtifactsGiven", 1);
		}

		GiveInventory("SamsaraDoomguyRailgunSpawnReloader", 1);
		if (respawning) { GiveInventory("SamsaraDoomguyStrPistolLoaded", 1); }
		break;

	case CLASS_CHEX:
		GiveInventory("SamsaraChexGigazorcherSpawnReloader", 1);
		break;

	case CLASS_HEXEN:
		if (CheckInventory("SamsaraHexenClericInvulnerabilityNonShootableActive")) { GiveInventory("SamsaraHexenClericInvulnerabilityNonShootableOff", 1); }
		if (CheckInventory("SamsaraHexenMageInvulnerabilityReflectiveActive")) { GiveInventory("SamsaraHexenMageInvulnerabilityReflectiveOff", 1); }
		break;

	case CLASS_DUKE:
		if (!respawning) { GiveInventory("DukeReady", 1); }

        if (CheckInventory("DukeSteroidsSpawnRemove"))
        {
            if (!CheckInventory("SamsaraHasInfiniteInventory"))
            {
                SetInventory("DukeSteroidsFuel", 0);
                SetInventory("DukePortSteroids", 0);
                SetInventory("DukePortSteroidsLAB", 0);
                SetInventory("DukePortSteroids64", 0);
            }
            SetInventory("DukeSteroidsSpawnRemove", 0);
        }
		break;

	case CLASS_QUAKE:
		if (!respawning && CheckInventory("Shell") < 25) { SetInventory("Shell", 25); }
		break;

    case CLASS_ROTT:
        if (respawning)
        {
            if (CheckInventory("God Hand") && !CheckInventory("PowerGodProtection")) { TakeInventory("God Hand", 1); }
        }
        break;

	case CLASS_CALEB:
		if (!respawning) { GiveInventory("CalebReady", 1); }
        SetInventory("ThrowPower", 0); // map change hack
        SetInventory("ThrowPowerBig", 0); // map change hack
		break;

    case CLASS_STRIFE:
        if (CheckInventory("StrifeguyStartingUpgradesHasBeenGiven"))
        {
            if (respawning)
            {
                if (CheckInventory("StaminaUpgradeHealth")) { ACS_NamedExecuteWithResult("SamsaraPlayerHealer"); }
                if (CheckInventory("AccuracyUpgrade2")) { SetActorProperty(0, APROP_Accuracy, CheckInventory("AccuracyUpgrade2")); }
            }
        } else {
            if (!(isLMS() || GetCVar("samsara_lmsrules")) || ((isLMS() || GetCVar("samsara_lmsrules")) && !GetCVar("samsara_lmsuniques")))
            {
                int sup = GetCVar("samsara_strifeupgrades");
                int supdone = 0;

                if (sup > 10) { sup = 10; }
                else if (sup < 0) { sup = 0; }

                while (supdone < sup)
                {
                    GiveInventory("StaminaUpgradeDamage", 10);
                    GiveInventory("AccuracyUpgrade1", 10);
                    GiveInventory("AccuracyUpgrade2", 10);

                    ACS_NamedExecuteWithResult("SamsaraPlayerSpawnHealthAdjust", 10, 1, 7, 100);
                    ACS_NamedExecuteWithResult("SamsaraPlayerHealer");

                    supdone++;
                }
            }

            GiveInventory("StrifeguyStartingUpgradesHasBeenGiven", 1);
        }

        if (!respawning)
        {
            if (GetCVar("samsara_currentgame") == GAME_STRIFE)
            {
                SetInventory("StrifeGuyInStrife", 1);
                SetInventory("BlackBirdInStrife", (isSinglePlayer() || isCoop()) && !isInvasion());
            }

            if (!GetUserCVar(pln, "samsara_cl_ballgag")) { GiveInventory("BlackBirdReady", 1); }
        }
        break;

	case CLASS_ERAD:
		if (!respawning) { GiveInventory("EleenaReady", 1); }

        // for map change/respawn
        if (CheckInventory("EradicatorPipTid1") && CheckInventory("EradicatorPipControllable") && CheckInventory("EradicatorPipAllowControl"))
        {
            SetPlayerProperty(0, false, PROP_TOTALLYFROZEN);

            HudMessage(s:""; HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN, 7198, CR_UNTRANSLATED, 0, 0, 15.0);
            HudMessage(s:""; HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN, 7199, CR_UNTRANSLATED, 0, 0, 15.0);
        }

        if (CheckInventory("EradicatorPipControllable")) { SetInventory("EradicatorPipControllable", 0); }
        if (CheckInventory("EradicatorPipTid1")) { SetInventory("EradicatorPipTid1", 0); }
        if (CheckInventory("EradicatorPipTid2")) { SetInventory("EradicatorPipTid2", 0); }
        if (CheckInventory("EradicatorPipTid3")) { SetInventory("EradicatorPipTid3", 0); }
		break;

    case CLASS_C7:
        if (!respawning)
        {
            GiveInventory("Allmap", 1);
            ACS_NamedExecuteWithResult("SamsaraMapRevealerPickup");
        }
        break;

    case CLASS_KATARN:
        ACS_NamedExecuteWithResult("DarkForces_GiveShield");
        break;

	case CLASS_SW:
		if (!respawning) { GiveInventory("LoWangReady", 1); }
		break;

	case CLASS_RR:
		if (!respawning)
		{
			GiveInventory("LeonardReady", 1);
			if(CheckInventory("BubbaGivesYouMotorcycle"))
			{
				TakeInventory("BubbaGivesYouMotorcycle",1);
				SpawnSpotFacingForced("LeonardMotorcycle",0,0);
			}
		}
		break;

    case CLASS_BITTERMAN:
        if (respawning)
        {
            if (CheckInventory("Q2Chainfist") && !CheckWeapon("Q2Chainfist")) { StopSound(0, CHAN_WEAPON); } // hack
        }
        break;

    case CLASS_BOND:
        if (CheckInventory("Goldeneye_TankWeapon") && !CheckInventory("SamsaraGoldenEyePermanentTankCannon")) { TakeInventory("Goldeneye_TankWeapon", 1); }
        break;

    case CLASS_DEUSEX:
        if (!CheckInventory("SamsaraDeusExStartingSkillsGiven"))
        {
            if (isSinglePlayer() || isCoop())
            {
                if (GetCVar("samsara_deusexstartingskills") > 0) { SetInventory("DeusEx_StartingSkills", GetCVar("samsara_deusexstartingskills")); }
            } else {
                if (GetCVar("samsara_deusexstartingskills") >= 4) { SetInventory("DeusEx_StartingSkills", 4); }
                else if (GetCVar("samsara_deusexstartingskills") >= 2) { SetInventory("DeusEx_StartingSkills", 3); }
                else { SetInventory("DeusEx_StartingSkills", 1); }
            }

            SetInventory("SamsaraDeusExStartingSkillsGiven", 1);
        }
        break;
	}

    if (respawning && (isSinglePlayer() || isCoop()))
    {
        if (GetCVar("samsara_keepmaxhealth"))
        {
            if (CheckInventory("SamsaraHasBonusStamina"))
            {
                SetActorProperty(0, APROP_Stamina, CheckInventory("SamsaraHasBonusStamina"));
                AdjustHealthOverMaxDisplay();

                ACS_NamedExecuteWithResult("SamsaraPlayerHealer"); // UpgradeStamina gives a health refill
            }
        }
        else { SetInventory("SamsaraHasBonusStamina", 0); }
    }

	if (isSinglePlayer())
	{
		GiveInventory("SPModeOn", 1);
		GiveInventory("SamsaraPVEPlayerFlagsEnabler", 1);
	}
	else if (isDeathMatch())
	{
		GiveInventory("DMModeOn", 1);
	}
	else if (isCoop())
	{
		GiveInventory("CoopModeOn", 1);
		GiveInventory("SamsaraPVEPlayerFlagsEnabler", 1);
	}

	if (isTeamGame()) { SetInventory("SamsaraCurrentTeam", GetPlayerInfo(pln, PLAYERINFO_TEAM) + 1); }

	pcount = PlayerCount();

	while (!endloop && ServerEnterTimes[pln] == startTime)
	{
		// Inventory cheatage

		if(CheckInventory("MetaCheatDetector")) { ACS_NamedExecuteWithResult("Samsara_FillInventory",0,0,0,0); }

		// Token checkers

        if (!CheckActorClass(0, origclass) && morphset != 2)
        {
            if (isSinglePlayer() || isCoop()) { GiveInventory("SamsaraPVEPlayerFlagsEnabler", 1); }

            SetActorProperty(0, APROP_Stamina, CheckInventory("SamsaraHasBonusStamina"));
            AdjustHealthOverMaxDisplay();

            morphset = 2;
        } else if (CheckActorClass(0, origclass) && morphset != 1) {
            if (isSinglePlayer() || isCoop()) { GiveInventory("SamsaraPVEPlayerFlagsEnabler", 1); }

            SetActorProperty(0, APROP_Stamina, CheckInventory("SamsaraHasBonusStamina"));
            AdjustHealthOverMaxDisplay();

            morphset = 1;
        }

        SetInventory("SamsaraHasBonusStamina", GetActorProperty(0, APROP_Stamina));

        CalcPlayerSpawnHealth();

        AdjustArmorDisplays();

        SetInventory("SamsaraHasDoubleFiringSpeed", CheckInventory("PowerDoubleFiringSpeed") || CheckInventory("RuneDoubleFiringSpeed") || CheckInventory("CustomDoubleFiringSpeed") ||
                                                    CheckInventory("PowerRage1") || CheckInventory("PowerCatacomb_RapidFire") || CheckInventory("Painkiller_DoubleFireSpeed"));

        SetInventory("SamsaraHasProsperity", CheckInventory("PowerProsperity") || CheckInventory("RuneProsperity") || CheckInventory("CustomProsperity"));

        SetInventory("SamsaraHasSpread", CheckInventory("PowerSpread") || CheckInventory("RuneSpread") || CheckInventory("CustomSpread") ||
                                         CheckInventory("PowerSpread1"));

        SetInventory("SamsaraReloadMode", GetCVar("samsara_reloadmode"));

        if (GetCVar("sv_infiniteammo") ||
            CheckInventory("PowerInfiniteAmmo") || CheckInventory("RuneInfiniteAmmo") || CheckInventory("CustomInfiniteAmmo") || // the latter two don't exist, but are there just in case
            CheckInventory("Painkiller_MagicGun_Ammo"))
        { SetInventory("SamsaraHasInfiniteAmmo", 1 + GetCVar("samsara_bottomlessmagazines")); }
        else { SetInventory("SamsaraHasInfiniteAmmo", 0); }

        bool weaponoverheating = GetCVar("samsara_weaponoverheating");

        SetInventory("SamsaraWeaponOverheatingDisabled", weaponoverheating <= 0 || (weaponoverheating == 1 && CheckInventory("SamsaraHasInfiniteAmmo")));

        SetInventory("SamsaraHasInfiniteInventory", GetCVar("sv_infiniteinventory"));

        SetInventory("SamsaraHasDisabledInventoryCooldown", CheckInventory("SamsaraHasInfiniteInventory") && GetCVar("samsara_noinventorycooldown"));

        SetInventory("SamsaraCurrentWaterLevel", GetActorProperty(0, APROP_WaterLevel));

        SetInventory("WolfenMovement", GetUserCVar(pln, "samsara_cl_wolfmove") && !GetCVar("samsara_banwolfmove"));

		if (bot && Random(0, 1024) == 0)
		{
			if (!isDead(0) && GameType() != GAME_TITLE_MAP) { PlaySound(0, "*taunt", CHAN_VOICE); }
		}

		if(CheckInventory("ShrunkPlayer"))
			GiveInventory("StepDeathLogic1",1);

        SetInventory("SamsaraBallgag", GetUserCVar(pln, "samsara_cl_ballgag") || CheckInventory("IsMorphed"));
        SetInventory("SamsaraIdleBallgag", GetUserCVar(pln, "samsara_cl_idleballgag") || CheckInventory("CompendiumOpened") || CheckInventory("IsMorphed"));

        SetInventory("SamsaraUsingSmoothAnims", GetUserCVar(pln, "samsara_cl_smoothanims"));

        SetInventory("ExpandedHud", GetUserCVar(pln, "samsara_cl_weaponhud"));

        SetInventory("SamsaraUsingNewFullscreenHUD", !GetUserCVar(pln, "samsara_cl_legacyfullscreenhud"));

        SetInventory("SamsaraBloodGunsAkimboHUDDisplay", GetCVar("samsara_bloodakimbomode"));
        SetInventory("SamsaraBloodGunsAkimboToggled", GetCVar("samsara_bloodakimbomode") >= 3 && CheckInventory("SamsaraBloodGunsAkimboToggleMemory"));

        if (GetUserCVar(pln,"samsara_cl_teamtext") && isTeamGame())
        {
            SetInventory("SamsaraTeamTextActivated", 1);
            SetInventory("SamsaraCurrentTeamIndicator", GetPlayerInfo(pln, PLAYERINFO_TEAM) + 1);
        } else {
            SetInventory("SamsaraTeamTextActivated", 0);
            SetInventory("SamsaraCurrentTeamIndicator", 0);
        }

        SetInventory("SamsaraSkulltagWeaponsAreEnabled", GetCVar("samsara_skulltagspawn") >= 1);

        SetInventory("SamsaraExtraWeaponsAreEnabled", GetCVar("samsara_extraweapons"));

        SetInventory("SamsaraReverseDualWieldFiring", GetUserCVar(pln, "samsara_cl_dualwieldswap"));

        SetInventory("SamsaraQuietFootsteps", !GetUserCVar(pln, "samsara_cl_footstepsounds") && !GetCVar("samsara_forcefootstepsounds"));

        SetInventory("SamsaraHasAllLoadoutEquipment", GetCVar("samsara_allloadoutequipment"));

		switch (samsaraClassNum())
		{
			case CLASS_DOOM:
				if (CheckInventory("SamsaraDoomguyStrRailgunScope") && !CheckWeapon(" RailGun ")) { SetInventory("SamsaraDoomguyStrRailgunScope", 0); }

				if (CheckInventory("SamsaraDoomguyStrChaingunFiringSoundCheck") && !CheckWeapon(" Chaingun "))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraDoomguyStrChaingunFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraDoomguyStrMinigunFiringSoundCheck") && !CheckWeapon(" Minigun "))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraDoomguyStrMinigunFiringSoundCheck", 0);
				}

				if ((CheckInventory("SamsaraDoom64PlasmaRifleSoundActive") || CheckInventory("SamsaraDoomguyStrPlasmaRifleReadySoundCheck")) && !CheckWeapon("Plasma Rifle"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraDoom64PlasmaRifleSoundActive", 0);
					SetInventory("SamsaraDoomguyStrPlasmaRifleReadySoundCheck", 0);
				}

				if (CheckInventory("SamsaraDoomguyStrStunnerRifleReadySoundCheck") && !CheckWeapon("Stunner Rifle"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraDoomguyStrStunnerRifleReadySoundCheck", 0);
				}

				if (CheckInventory("SamsaraDoomguyStrBFGReadySoundCheck") && !CheckWeapon("B.F.G. 9000"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraDoomguyStrBFGReadySoundCheck", 0);
				}

				doommode = GetUserCVar(pln, "samsara_cl_doommode");

                if (doommode > 2) { doommode = 2; }
                else if (doommode < 0) { doommode = 0; }

				if(doommode == 2)
				{
					if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && CheckInventory("Super Shotgun"))
					{
						GiveInventory("Automatic Shotgun", 1);
					}
					else
					{
						if(CheckWeapon("Automatic Shotgun"))
						{
							SetWeapon("Super Shotgun");
						}
						TakeInventory("Automatic Shotgun", 1);
					}

					if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && (CheckInventory(" Chaingun ") || CheckInventory(" Machine Gun "))) // loadout still checked because we haven't hit that point yet
					{
						GiveInventory(" Flamer ", 1);
					}
					else
					{
						if(CheckWeapon(" Flamer "))
						{
							SetWeapon(" Chaingun ");
						}
						TakeInventory(" Flamer ", 1);
					}

					if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && CheckInventory("Rocket Launcher"))
					{
						GiveInventory("Land Mine Layer", 1);
					}
					else
					{
						if(CheckWeapon("Land Mine Layer"))
						{
							SetWeapon("Rocket Launcher");
						}
						TakeInventory("Land Mine Layer", 1);
					}

					if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && (CheckInventory("Plasma Rifle") || CheckInventory(" Incinerator "))) // loadout still checked because we haven't hit that point yet
					{
						GiveInventory("Stunner Rifle", 1);
					}
					else
					{
						if(CheckWeapon("Stunner Rifle"))
						{
							SetWeapon("Plasma Rifle");
						}
						TakeInventory("Stunner Rifle", 1);
					}

					if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && (CheckInventory("B.F.G. 9000") || CheckInventory("B.F.G. 2704") || CheckInventory("Calamity Blade"))) // loadout still checked because we haven't hit that point yet
					{
						GiveInventory("Pyro Cannon", 1);
					}
					else
					{
						if(CheckWeapon("Pyro Cannon"))
						{
							SetWeapon("B.F.G. 9000");
						}
						TakeInventory("Pyro Cannon", 1);
					}
					SetInventory("SamsaraAlternateSoundToken", GetUserCVar(pln, "samsara_cl_strongholddoomsounds"));
				}
				else if (doommode == 1)
				{
					SetInventory("SamsaraAlternateSoundToken", 0);
				}
				else
				{
					SetInventory("SamsaraAlternateSoundToken", GetUserCVar(pln, "samsara_cl_originaldoomsounds"));
				}

				if(doommode != previousvalue || CheckInventory("Samsara_ModeWeaponChange"))
				{
                    hasfist = CheckInventory(" Fist ");

                    SetInventory(" Fist ", 1);
                    if (!hasfist) { SetInventory(" Fist ", 0); }

                    haspistol = CheckInventory(" Pistol ");

                    SetInventory(" Pistol ", 1);
                    if (!haspistol) { SetInventory(" Pistol ", 0); }

					SetInventory("SamsaraModeCounter",doommode);
					TakeInventory("Samsara_ModeWeaponChange",1);
					if (doommode >= 0)
					{
						SetInventory("DoomClassMode", doommode);

						if(doommode == 1)
						{
							GiveInventory("Doom64GuyScalar",1);
							if(CheckInventory("Doom64_IHaveUnmaker") && !CheckInventory(" Unmaker "))
								GiveInventory(" Unmaker ", 1);

							if(CheckInventory("DGStrHasAutoShotgun"))
							{
								if(CheckWeapon("Automatic Shotgun"))
									SetWeapon("Super Shotgun");
							}
							if(CheckInventory("DGStrHasFlamethrower"))
							{
								if(CheckWeapon(" Flamer "))
									SetWeapon(" Chaingun ");
							}
							if(CheckInventory("DGStrHasLandMines"))
							{
								if(CheckWeapon("Land Mine Layer"))
									SetWeapon("Rocket Launcher");
							}
							if(CheckInventory("DGStrHasStunnerRifle"))
							{
								if(CheckWeapon("Stunner Rifle"))
									SetWeapon("Plasma Rifle");
							}
							if(CheckInventory("DGStrHasPyroCannon"))
							{
								if(CheckWeapon("Pyro Cannon"))
									SetWeapon(" Unmaker ");
							}
							if(CheckInventory("DGStrHasHomingRocketLauncher"))
							{
								if(CheckWeapon("Homing Rocket Launcher"))
									SetWeapon(" Fist ");
							}
							if(CheckInventory("DGStrHasPlasmaRepeater"))
							{
								if(CheckWeapon("Plasma Repeater"))
									SetWeapon(" Fist ");
							}

							TakeInventory("Automatic Shotgun", 1);
							TakeInventory(" Flamer ", 1);
							TakeInventory("Land Mine Layer", 1);
							TakeInventory("Stunner Rifle", 1);
							TakeInventory("Pyro Cannon", 1);
							TakeInventory("Homing Rocket Launcher", 1);
							TakeInventory("Plasma Repeater", 1);
							SetInventory("SamsaraDoomguyStrWeaponPowerItem", 0);

							SetActorProperty(0,APROP_SoundClass,"Doom64Guy");
						}
						else if(doommode == 2)
						{
							if (CheckInventory("DGStrHasHomingRocketLauncher") && !CheckInventory("Homing Rocket Launcher")) { GiveInventory("Homing Rocket Launcher", 1); }

							if (CheckInventory("DGStrHasPlasmaRepeater") && !CheckInventory("Plasma Repeater")) { GiveInventory("Plasma Repeater", 1); }

							if (CheckInventory("DGStrHasWPK")) { SetInventory("SamsaraDoomguyStrWeaponPowerItem", CheckInventory("DGStrHasWPK")); }

							if(CheckInventory("Doom64_IHaveUnmaker"))
							{
								if(CheckWeapon(" Unmaker "))
								{
									if(CheckInventory("SamsaraExtraWeaponsAreEnabled"))
									{
										SetWeapon("Pyro Cannon");
									}
									else
									{
										SetWeapon("B.F.G. 9000");
									}
								}
							}

							GiveInventory("DoomGuyScalar",1);
							SetActorProperty(0,APROP_SoundClass,"Doomguy");
							TakeInventory(" Unmaker ", 0x7FFFFFFF);
						}
						else
						{
							if(CheckInventory("Doom64_IHaveUnmaker"))
							{
								if(CheckWeapon(" Unmaker "))
								{
									if (CheckInventory("SamsaraHasAllLoadoutEquipment")) { SetWeapon("B.F.G. 9000"); }
									else { GiveInventory("SamsaraAltClassWeaponSwitchHackSlot7", 1); }
								}
							}
							if(CheckInventory("DGStrHasAutoShotgun"))
							{
								if(CheckWeapon("Automatic Shotgun"))
									SetWeapon("Super Shotgun");
							}
							if(CheckInventory("DGStrHasFlamethrower"))
							{
								if(CheckWeapon(" Flamer "))
								{
									if (CheckInventory("SamsaraHasAllLoadoutEquipment")) { SetWeapon(" Chaingun "); }
									else { GiveInventory("SamsaraAltClassWeaponSwitchHackSlot4", 1); }
								}
							}
							if(CheckInventory("DGStrHasLandMines"))
							{
								if(CheckWeapon("Land Mine Layer"))
									SetWeapon("Rocket Launcher");
							}
							if(CheckInventory("DGStrHasStunnerRifle"))
							{
								if(CheckWeapon("Stunner Rifle"))
								{
									if (CheckInventory("SamsaraHasAllLoadoutEquipment")) { SetWeapon("Plasma Rifle"); }
									else { GiveInventory("SamsaraAltClassWeaponSwitchHackSlot6", 1); }
								}
							}
							if(CheckInventory("DGStrHasPyroCannon"))
							{
								if(CheckWeapon("Pyro Cannon"))
								{
									if (CheckInventory("SamsaraHasAllLoadoutEquipment")) { SetWeapon("B.F.G. 9000"); }
									else { GiveInventory("SamsaraAltClassWeaponSwitchHackSlot7", 1); }
								}
							}
							if(CheckInventory("DGStrHasHomingRocketLauncher"))
							{
								if(CheckWeapon("Homing Rocket Launcher"))
									SetWeapon(" Fist ");
							}
							if(CheckInventory("DGStrHasPlasmaRepeater"))
							{
								if(CheckWeapon("Plasma Repeater"))
									SetWeapon(" Fist ");
							}

							TakeInventory("Automatic Shotgun", 1);
							TakeInventory(" Flamer ", 1);
							TakeInventory("Land Mine Layer", 1);
							TakeInventory("Stunner Rifle", 1);
							TakeInventory("Pyro Cannon", 1);
							TakeInventory("Homing Rocket Launcher", 1);
							TakeInventory("Plasma Repeater", 1);
							SetInventory("SamsaraDoomguyStrWeaponPowerItem", 0);

							GiveInventory("DoomGuyScalar",1);
							SetActorProperty(0,APROP_SoundClass,"Doomguy");
							TakeInventory(" Unmaker ", 0x7FFFFFFF);
							}
						}
					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, doommode, pln);
					previousvalue = doommode;
				}

                loadoutmode = GetCVar("samsara_doomguy_fallbackranged") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_doomguy_fallbackranged") - 1 : GetUserCVar(pln, "samsara_cl_doomguy_fallbackranged");

                if (loadoutmode > 1) { loadoutmode = 1; }
                else if (loadoutmode < 0) { loadoutmode = 0; }

                SetInventory("SamsaraDoomOriginalLoadoutFallbackRanged", loadoutmode);

                loadoutmode = GetCVar("samsara_doomguy_slot4") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_doomguy_slot4") - 1 : GetUserCVar(pln, "samsara_cl_doomguy_slot4");

                if (loadoutmode > 1) { loadoutmode = 1; }
                else if (loadoutmode < 0) { loadoutmode = 0; }

                SetInventory("SamsaraDoomOriginalLoadoutSlot4", loadoutmode);

                loadoutmode = GetCVar("samsara_doomguy_slot6") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_doomguy_slot6") - 1 : GetUserCVar(pln, "samsara_cl_doomguy_slot6");

                if (loadoutmode > 1) { loadoutmode = 1; }
                else if (loadoutmode < 0) { loadoutmode = 0; }

                SetInventory("SamsaraDoomOriginalLoadoutSlot6", loadoutmode);

                loadoutmode = GetCVar("samsara_doomguy_slot7") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_doomguy_slot7") - 1 : GetUserCVar(pln, "samsara_cl_doomguy_slot7");

                if (loadoutmode > 2) { loadoutmode = 2; }
                else if (loadoutmode < 0) { loadoutmode = 0; }

                SetInventory("SamsaraDoomOriginalLoadoutSlot7", loadoutmode);

                if (doommode >= 1)
                {
                    if (loadoutPrevValue[pln][SLOT_PISTOL] != 0)
                    {
                        ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_PISTOL, 0, pln);
                        loadoutPrevValue[pln][SLOT_PISTOL] = 0;
                    }

                    if (loadoutPrevValue[pln][SLOT_CHAINGUN] != 0)
                    {
                        ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_CHAINGUN, 0, pln);
                        loadoutPrevValue[pln][SLOT_CHAINGUN] = 0;
                    }

                    if (loadoutPrevValue[pln][SLOT_PLASMARIFLE] != 0)
                    {
                        ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_PLASMARIFLE, 0, pln);
                        loadoutPrevValue[pln][SLOT_PLASMARIFLE] = 0;
                    }

                    if (loadoutPrevValue[pln][SLOT_BFG9000] != 0)
                    {
                        ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_BFG9000, 0, pln);
                        loadoutPrevValue[pln][SLOT_BFG9000] = 0;
                    }

                    if (CheckInventory(" Rifle "))
                    {
                        SetInventory(" Pistol ", 1);

                        if (CheckWeapon(" Rifle ") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon(" Pistol "); }

                        SetInventory(" Rifle ", 0);
                    }

                    if (CheckInventory(" Machine Gun "))
                    {
                        SetInventory(" Chaingun ", 1);

                        if (CheckWeapon(" Machine Gun ") || CheckInventory("SamsaraAltClassWeaponSwitchHackSlot4"))
                        {
                            SetWeapon(" Chaingun ");
                            SetInventory("SamsaraAltClassWeaponSwitchHackSlot4", 0);
                        }

                        SetInventory(" Machine Gun ", 0);
                    }

                    if (CheckInventory(" Incinerator "))
                    {
                        SetInventory("Plasma Rifle", 1);

                        if (CheckWeapon(" Incinerator ") || CheckInventory("SamsaraAltClassWeaponSwitchHackSlot6"))
                        {
                            SetWeapon("Plasma Rifle");
                            SetInventory("SamsaraAltClassWeaponSwitchHackSlot6", 0);
                        }

                        SetInventory(" Incinerator ", 0);
                    }

                    if (CheckInventory("B.F.G. 2704") || CheckInventory("Calamity Blade"))
                    {
                        SetInventory("B.F.G. 9000", 1);

                        if (CheckWeapon("B.F.G. 2704") || CheckWeapon("Calamity Blade") || CheckInventory("SamsaraAltClassWeaponSwitchHackSlot7"))
                        {
                            SetWeapon("B.F.G. 9000");
                            SetInventory("SamsaraAltClassWeaponSwitchHackSlot7", 0);
                        }

                        SetInventory("B.F.G. 2704", 0);
                        SetInventory("Calamity Blade", 0);
                    }
                } else {
                    if (loadoutPrevValue[pln][SLOT_PISTOL] != CheckInventory("SamsaraDoomOriginalLoadoutFallbackRanged"))
                    {
                        ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_PISTOL, CheckInventory("SamsaraDoomOriginalLoadoutFallbackRanged"), pln);
                        loadoutPrevValue[pln][SLOT_PISTOL] = CheckInventory("SamsaraDoomOriginalLoadoutFallbackRanged");
                    }

                    if (loadoutPrevValue[pln][SLOT_CHAINGUN] != CheckInventory("SamsaraDoomOriginalLoadoutSlot4"))
                    {
                        ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_CHAINGUN, CheckInventory("SamsaraDoomOriginalLoadoutSlot4"), pln);
                        loadoutPrevValue[pln][SLOT_CHAINGUN] = CheckInventory("SamsaraDoomOriginalLoadoutSlot4");
                    }

                    if (loadoutPrevValue[pln][SLOT_PLASMARIFLE] != CheckInventory("SamsaraDoomOriginalLoadoutSlot6"))
                    {
                        ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_PLASMARIFLE, CheckInventory("SamsaraDoomOriginalLoadoutSlot6"), pln);
                        loadoutPrevValue[pln][SLOT_PLASMARIFLE] = CheckInventory("SamsaraDoomOriginalLoadoutSlot6");
                    }

                    if (loadoutPrevValue[pln][SLOT_BFG9000] != CheckInventory("SamsaraDoomOriginalLoadoutSlot7"))
                    {
                        ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_BFG9000, CheckInventory("SamsaraDoomOriginalLoadoutSlot7"), pln);
                        loadoutPrevValue[pln][SLOT_BFG9000] = CheckInventory("SamsaraDoomOriginalLoadoutSlot7");
                    }

                    if (CheckInventory(" Pistol ") || CheckInventory(" Rifle "))
                    {
                        if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                        {
                            SetInventory(" Pistol ", 1);
                            SetInventory(" Rifle ", 1);
                        } else {
                            if (!CheckInventory("SamsaraDoomOriginalLoadoutFallbackRanged"))
                            {
                                SetInventory(" Pistol ", 1);

                                if (CheckWeapon(" Rifle ") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon(" Pistol "); }

                                SetInventory(" Rifle ", 0);
                            } else if (CheckInventory("SamsaraDoomOriginalLoadoutFallbackRanged")) {
                                SetInventory(" Rifle ", 1);

                                if (CheckWeapon(" Pistol ") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon(" Rifle "); }

                                SetInventory(" Pistol ", 0);
                            }
                        }
                    }

                    if (CheckInventory(" Chaingun ") || CheckInventory(" Machine Gun "))
                    {
                        if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                        {
                            SetInventory(" Chaingun ", 1);
                            SetInventory(" Machine Gun ", 1);
                        } else {
                            if (!CheckInventory("SamsaraDoomOriginalLoadoutSlot4"))
                            {
                                SetInventory(" Chaingun ", 1);

                                if (CheckWeapon(" Machine Gun ") || CheckInventory("SamsaraAltClassWeaponSwitchHackSlot4"))
                                {
                                    SetWeapon(" Chaingun ");
                                    SetInventory("SamsaraAltClassWeaponSwitchHackSlot4", 0);
                                }

                                SetInventory(" Machine Gun ", 0);
                            } else if (CheckInventory("SamsaraDoomOriginalLoadoutSlot4")) {
                                SetInventory(" Machine Gun ", 1);

                                if (CheckWeapon(" Chaingun ") || CheckInventory("SamsaraAltClassWeaponSwitchHackSlot4"))
                                {
                                    SetWeapon(" Machine Gun ");
                                    SetInventory("SamsaraAltClassWeaponSwitchHackSlot4", 0);
                                }

                                SetInventory(" Chaingun ", 0);
                            }
                        }
                    }

                    if (CheckInventory("Plasma Rifle") || CheckInventory(" Incinerator "))
                    {
                        if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                        {
                            SetInventory("Plasma Rifle", 1);
                            SetInventory(" Incinerator ", 1);
                        } else {
                            if (!CheckInventory("SamsaraDoomOriginalLoadoutSlot6"))
                            {
                                SetInventory("Plasma Rifle", 1);

                                if (CheckWeapon(" Incinerator ") || CheckInventory("SamsaraAltClassWeaponSwitchHackSlot6"))
                                {
                                    SetWeapon("Plasma Rifle");
                                    SetInventory("SamsaraAltClassWeaponSwitchHackSlot6", 0);
                                }

                                SetInventory(" Incinerator ", 0);
                            } else if (CheckInventory("SamsaraDoomOriginalLoadoutSlot6")) {
                                SetInventory(" Incinerator ", 1);

                                if (CheckWeapon("Plasma Rifle") || CheckInventory("SamsaraAltClassWeaponSwitchHackSlot6"))
                                {
                                    SetWeapon(" Incinerator ");
                                    SetInventory("SamsaraAltClassWeaponSwitchHackSlot6", 0);
                                }

                                SetInventory("Plasma Rifle", 0);
                            }
                        }
                    }

                    if (CheckInventory("B.F.G. 9000") || CheckInventory("B.F.G. 2704") || CheckInventory("Calamity Blade"))
                    {
                        if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                        {
                            SetInventory("B.F.G. 9000", 1);
                            SetInventory("B.F.G. 2704", 1);
                            SetInventory("Calamity Blade", 1);
                        } else {
                            if (!CheckInventory("SamsaraDoomOriginalLoadoutSlot7"))
                            {
                                SetInventory("B.F.G. 9000", 1);

                                if (CheckWeapon("B.F.G. 2704") || CheckWeapon("Calamity Blade") || CheckInventory("SamsaraAltClassWeaponSwitchHackSlot7"))
                                {
                                    SetWeapon("B.F.G. 9000");
                                    SetInventory("SamsaraAltClassWeaponSwitchHackSlot7", 0);
                                }

                                SetInventory("B.F.G. 2704", 0);
                                SetInventory("Calamity Blade", 0);
                            } else if (CheckInventory("SamsaraDoomOriginalLoadoutSlot7") == 1) {
                                SetInventory("B.F.G. 2704", 1);

                                if (CheckWeapon("B.F.G. 9000") || CheckWeapon("Calamity Blade") || CheckInventory("SamsaraAltClassWeaponSwitchHackSlot7"))
                                {
                                    SetWeapon("B.F.G. 2704");
                                    SetInventory("SamsaraAltClassWeaponSwitchHackSlot7", 0);
                                }

                                SetInventory("B.F.G. 9000", 0);
                                SetInventory("Calamity Blade", 0);
                            } else if (CheckInventory("SamsaraDoomOriginalLoadoutSlot7") >= 2) {
                                SetInventory("Calamity Blade", 1);

                                if (CheckWeapon("B.F.G. 9000") || CheckWeapon("B.F.G. 2704") || CheckInventory("SamsaraAltClassWeaponSwitchHackSlot7"))
                                {
                                    SetWeapon("Calamity Blade");
                                    SetInventory("SamsaraAltClassWeaponSwitchHackSlot7", 0);
                                }

                                SetInventory("B.F.G. 9000", 0);
                                SetInventory("B.F.G. 2704", 0);
                            }
                        }
                    }
                }
				break;

          case CLASS_CHEX:
            if (previousvalue != 0)
            {
                haspistol = CheckInventory("Mini-Zorcher");

                SetInventory("Mini-Zorcher", 1);
                if (!haspistol) { SetInventory("Mini-Zorcher", 0); }

                previousvalue = 0;
            }

            loadoutmode = GetCVar("samsara_chex_fallbackranged") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_chex_fallbackranged") - 1 : GetUserCVar(pln, "samsara_cl_chex_fallbackranged");

            if (loadoutmode > 1) { loadoutmode = 1; }
            else if (loadoutmode < 0) { loadoutmode = 0; }

            SetInventory("SamsaraChexLoadoutFallbackRanged", loadoutmode);
            
            if (loadoutPrevValue[pln][SLOT_PISTOL] != CheckInventory("SamsaraChexLoadoutFallbackRanged"))
            {
                ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_PISTOL, CheckInventory("SamsaraChexLoadoutFallbackRanged"), pln);
                loadoutPrevValue[pln][SLOT_PISTOL] = CheckInventory("SamsaraChexLoadoutFallbackRanged");
            }

            if (CheckInventory("Mini-Zorcher") || CheckInventory("Micro-Zorcher"))
            {
                if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                {
                    SetInventory("Mini-Zorcher", 1);
                    SetInventory("Micro-Zorcher", 1);
                } else {
                    if (!CheckInventory("SamsaraChexLoadoutFallbackRanged"))
                    {
                        SetInventory("Mini-Zorcher", 1);

                        if (CheckWeapon("Micro-Zorcher") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Mini-Zorcher"); }

                        SetInventory("Micro-Zorcher", 0);
                    } else if (CheckInventory("SamsaraChexLoadoutFallbackRanged")) {
                        SetInventory("Micro-Zorcher", 1);

                        if (CheckWeapon("Mini-Zorcher") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Micro-Zorcher"); }

                        SetInventory("Mini-Zorcher", 0);
                    }
                }
            }

            if (CheckInventory("Dual Mini-Zorchers") || CheckInventory("Dual Micro-Zorchers"))
            {
                if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                {
                    SetInventory("Dual Mini-Zorchers", 1);
                    SetInventory("Dual Micro-Zorchers", 1);
                } else {
                    if (!CheckInventory("SamsaraChexLoadoutFallbackRanged"))
                    {
                        SetInventory("Dual Mini-Zorchers", 1);

                        if (CheckWeapon("Dual Micro-Zorchers")) { SetWeapon("Dual Mini-Zorchers"); }

                        SetInventory("Dual Micro-Zorchers", 0);
                    } else if (CheckInventory("SamsaraChexLoadoutFallbackRanged")) {
                        SetInventory("Dual Micro-Zorchers", 1);

                        if (CheckWeapon("Dual Mini-Zorchers")) { SetWeapon("Dual Micro-Zorchers"); }

                        SetInventory("Dual Mini-Zorchers", 0);
                    }
                }
            }
            break;

			case CLASS_HERETIC:
                TakeInventory("SamsaraTrickyBombElfArmTimer", 1);

				SetInventory("DSparilStaffMinion", CheckInventory("DSparilStaff"));

				if (!CheckWeapon("Phoenix Rod"))
				{
					if (CheckInventory("SamsaraHereticPhoenixRodPoweredActive")) { GiveInventory("SamsaraHereticPhoenixRodPoweredPowerdownHandler", 1); }

					if (CheckInventory("SamsaraHereticPhoenixRodPoweredPlayingSound"))
					{
						StopSound(0, CHAN_WEAPON);

						SetInventory("SamsaraHereticPhoenixRodPoweredPlayingSound", 0);
					}
				}

				if(CheckInventory("TomeOfPowerCooldown") > 0 && !CheckInventory("PowerHereticTome"))
				{
					int weaponCount = CheckInventory("GotWeapon0") + CheckInventory("GotWeapon2") + CheckInventory("GotWeapon3") + CheckInventory("GotWeapon4") + CheckInventory("GotWeapon5") + CheckInventory("GotWeapon6") + CheckInventory("GotWeapon7");
					int tomeTimer = 1800;

					until(weaponCount == 0)
					{
						weaponCount--;
						tomeTimer = (tomeTimer * 2)/3;
					}

					if(CheckInventory("TomeOfPowerCooldown") > tomeTimer)
					{
						TakeInventory("TomeOfPowerCooldown", 1800);
						GiveInventory("TomeOfPowerCooldown", tomeTimer);
					}

					if(toPTimer >= 35)
					{
						toPTimer = 0;
						TakeInventory("TomeOfPowerCooldown",1);
					}

					toPTimer++;
				}
				break;

			case CLASS_WOLFEN:
				wolfmode = GetUserCVar(pln, "samsara_cl_wolfmode");

                if (wolfmode > 2) { wolfmode = 2; }
                else if (wolfmode < 0) { wolfmode = 0; }

				if(wolfmode != previousvalue || CheckInventory("Samsara_ModeWeaponChange"))
				{
                    hasfist = CheckInventory("Knife");

                    SetInventory("Knife", 1);
                    if (!hasfist) { SetInventory("Knife", 0); }

                    haspistol = CheckInventory("Luger");

                    SetInventory("Luger", 1);
                    if (!haspistol) { SetInventory("Luger", 0); }

					SetInventory("SamsaraModeCounter",wolfmode);
					TakeInventory("Samsara_ModeWeaponChange",1);
					if (wolfmode >= 0)
					{
						SetInventory("WolfenClassMode", wolfmode);

						if(wolfmode == 2)
						{
                            if (CheckInventory("Knife"))
                            {
                                SetInventory("Totenkopf_Knife", 1);

                                if (CheckWeapon("Knife")) { SetWeapon("Totenkopf_Knife"); }

                                SetInventory("Knife", 0);
                            }

                            if (CheckInventory("Wolfen_IHaveSlot1")) { SetInventory("Totenkopf_Mauser", 1); }

                            SetInventory("BJSuperKnife", 0);

                            if (CheckInventory("Totenkopf_IHaveDualMausers")) { SetInventory("Totenkopf_MauserDual", 1); }

                            if (CheckInventory("Luger"))
                            {
                                SetInventory("Totenkopf_Pistol", 1);

                                if (CheckWeapon("Luger") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Totenkopf_Pistol"); }

                                SetInventory("Luger", 0);
                            }

                            if (CheckInventory("Totenkopf_IHaveDualPistols")) { SetInventory("Totenkopf_PistolDual", 1); }

                            if (CheckInventory("Wolfen_IHaveSlot2") || CheckInventory("Totenkopf_IHaveScope"))
                            {
                                SetInventory("Totenkopf_Kar98k", 1);

                                if (CheckWeapon("Machine Gun")) { SetWeapon("Totenkopf_Kar98k"); }
                            }

                            SetInventory("Machine Gun", 0);

                            if (CheckInventory("Mauser Rifle"))
                            {
                                SetInventory("Totenkopf_STG44", 1);

                                if (CheckWeapon("Mauser Rifle")) { SetWeapon("Totenkopf_STG44"); }

                                SetInventory("Mauser Rifle", 0);
                            }

                            if (CheckInventory("Wolfen_IHaveSlot4"))
                            {
                                SetInventory("Totenkopf_MP40", 1);

                                if (CheckWeapon("  Chaingun  ")) { SetWeapon("Totenkopf_MP40"); }
                            }

                            if (CheckInventory("Wolfen_IHaveDualChainguns"))
                            {
                                SetInventory("Totenkopf_MP40", 1);

                                if (CheckWeapon("  Dual Chainguns  ")) { SetWeapon("Totenkopf_MP40"); }
                            }

                            if (CheckInventory("  Chaingun  ") || CheckInventory("  Dual Chainguns  "))
                            {
                                if (CheckWeapon("  Chaingun  ") || CheckWeapon("  Dual Chainguns  ")) { SetWeapon("Totenkopf_MP40"); }
                            }

                            SetInventory("  Chaingun  ", 0);

                            SetInventory("  Dual Chainguns  ", 0);

                            if (CheckInventory("Totenkopf_IHaveDualMP40s")) { SetInventory("Totenkopf_MP40Dual", 1); }

                            if (CheckInventory(" Rocket Launcher "))
                            {
                                SetInventory("Totenkopf_Panzerschreck", 1);

                                if (CheckWeapon(" Rocket Launcher ")) { SetWeapon("Totenkopf_Panzerschreck"); }

                                SetInventory(" Rocket Launcher ", 0);
                            }

                            if (CheckInventory(" Flamethrower "))
                            {
                                SetInventory("Totenkopf_Chaingun", 1);

                                if (CheckWeapon(" Flamethrower ")) { SetWeapon("Totenkopf_Chaingun"); }

                                SetInventory(" Flamethrower ", 0);
                            }

                            if (CheckInventory("Spear of Destiny"))
                            {
                                SetInventory("Totenkopf_Flakgun", 1);

                                if (CheckWeapon("Spear of Destiny")) { SetWeapon("Totenkopf_Flakgun"); }

                                SetInventory("Spear of Destiny", 0);
                            }

                            SetInventory("WolfExtraLife", 0);

                            if (CheckInventory("Totenkopf_IHaveFlamethrower")) { SetInventory("Totenkopf_Flamethrower", 1); }

                            SetInventory("WolfenAmmoCrate", 0);
                            SetInventory("WolfenAmmoCrateLost", 0);

                            if (CheckInventory("Totenkopf_IHaveMG42")) { SetInventory("Totenkopf_MG42", 1); }

                            if (CheckInventory("Totenkopf_IHaveScope")) { SetInventory("Totenkopf_Sniper", 1); }

							if(CheckInventory("Totenkopf_IHavePowerArmor") && (!CheckInventory("TotenkopfHasPowerArmor"))) { GiveInventory("TotenkopfHasPowerArmor", 1); }
							if(CheckInventory("Totenkopf_IAmWolverine") && (!CheckInventory("TotenkopfHasHealingOrb"))) { GiveInventory("TotenkopfHasHealingOrb", 1); }

                            SetInventory("GotWeapon0", CheckInventory("Wolfen_IHaveSlot1"));
                            SetInventory("GotWeapon2", CheckInventory("Wolfen_IHaveSlot2") || CheckInventory("Totenkopf_IHaveScope"));
                            SetInventory("GotWeapon4", CheckInventory("Wolfen_IHaveSlot4") || CheckInventory("Wolfen_IHaveDualChainguns"));

                            SetActorProperty(0, APROP_SoundClass, "TotenkopfPlayer");
						}
						else if(wolfmode <= 1)
						{
                            if (CheckInventory("Totenkopf_Knife"))
                            {
                                SetInventory("Knife", 1);

                                if (CheckWeapon("Totenkopf_Knife")) { SetWeapon("Knife"); }

                                SetInventory("Totenkopf_Knife", 0);
                            }

                            if (CheckInventory("Wolfen_IHaveSlot1"))
                            {
                                SetInventory("BJSuperKnife", 1);

                                if (CheckWeapon("Totenkopf_Mauser")) { SetWeapon("Knife"); }
                            }

                            SetInventory("Totenkopf_Mauser", 0);

                            if (CheckInventory("Totenkopf_MauserDual"))
                            {
                                if (CheckWeapon("Totenkopf_MauserDual")) { SetWeapon("Knife"); }
                            }

                            SetInventory("Totenkopf_MauserDual", 0);

                            if (CheckInventory("Totenkopf_Pistol"))
                            {
                                SetInventory("Luger", 1);

                                if (CheckWeapon("Totenkopf_Pistol") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Luger"); }

                                SetInventory("Totenkopf_Pistol", 0);
                            }

                            if (CheckInventory("Totenkopf_PistolDual"))
                            {
                                if (CheckWeapon("Totenkopf_PistolDual")) { SetWeapon("Luger"); }
                            }

                            SetInventory("Totenkopf_PistolDual", 0);

                            if (CheckInventory("Wolfen_IHaveSlot2"))
                            {
                                SetInventory("Machine Gun", 1);

                                if (CheckWeapon("Totenkopf_Kar98k")) { SetWeapon("Machine Gun"); }
                            }

                            SetInventory("Totenkopf_Kar98k", 0);

                            if (CheckInventory("Totenkopf_STG44"))
                            {
                                SetInventory("Mauser Rifle", 1);

                                if (CheckWeapon("Totenkopf_STG44")) { SetWeapon("Mauser Rifle"); }

                                SetInventory("Totenkopf_STG44", 0);
                            }

                            if (CheckInventory("Wolfen_IHaveDualChainguns")) { GiveInventory("  Dual Chainguns  ", 1); }

                            if (CheckInventory("Wolfen_IHaveSlot4"))
                            {
                                SetInventory("  Chaingun  ", 1);

                                if (CheckWeapon("Totenkopf_MP40")) { SetWeapon("  Chaingun  "); }
                            } else {
                                if (CheckWeapon("  Chaingun  ") || CheckWeapon("Totenkopf_MP40")) { SetWeapon("  Dual Chainguns  "); }

                                SetInventory("  Chaingun  ", 0);
                            }

                            SetInventory("Totenkopf_MP40", 0);

                            if (CheckInventory("Totenkopf_MP40Dual"))
                            {
                                if (CheckWeapon("Totenkopf_MP40Dual"))
                                {
                                    if (CheckInventory("  Chaingun  ")) { SetWeapon("  Chaingun  "); }
                                    else if (CheckInventory("  Dual Chainguns  ")) { SetWeapon("  Dual Chainguns  "); }
                                }
                            }

                            SetInventory("Totenkopf_MP40Dual", 0);

                            if (CheckInventory("Totenkopf_Panzerschreck"))
                            {
                                SetInventory(" Rocket Launcher ", 1);

                                if (CheckWeapon("Totenkopf_Panzerschreck")) { SetWeapon(" Rocket Launcher "); }

                                SetInventory("Totenkopf_Panzerschreck", 0);
                            }

                            if (CheckInventory("Totenkopf_Chaingun"))
                            {
                                SetInventory(" Flamethrower ", 1);

                                if (CheckWeapon("Totenkopf_Chaingun")) { SetWeapon(" Flamethrower "); }

                                SetInventory("Totenkopf_Chaingun", 0);
                            }

                            if (CheckInventory("Totenkopf_Flakgun"))
                            {
                                SetInventory("Spear of Destiny", 1);

                                if (CheckWeapon("Totenkopf_Flakgun")) { SetWeapon("Spear of Destiny"); }

                                SetInventory("Totenkopf_Flakgun", 0);
                            }

                            SetInventory("WolfExtraLife", CheckInventory("Wolfen_IHaveExtraLife"));

                            SetInventory("Totenkopf_Flamethrower", 0);

                            if (wolfmode == 1)
                            {
                                SetInventory("WolfenAmmoCrateLost", CheckInventory("Wolfen_IHaveAmmoCrate"));
                                SetInventory("WolfenAmmoCrate", 0);
                            } else {
                                SetInventory("WolfenAmmoCrate", CheckInventory("Wolfen_IHaveAmmoCrate"));
                                SetInventory("WolfenAmmoCrateLost", 0);
                            }

                            SetInventory("Totenkopf_MG42", 0);

                            if (CheckInventory("Totenkopf_Sniper"))
                            {
                                if (CheckWeapon("Totenkopf_Sniper")) { SetWeapon("Machine Gun"); }
                            }

                            SetInventory("Totenkopf_Sniper", 0);

							TakeInventory("TotenkopfHasPowerArmor", 0x7FFFFFFF);
							TakeInventory("TotenkopfHasHealingOrb", 0x7FFFFFFF);

                            SetInventory("GotWeapon0", CheckInventory("Wolfen_IHaveSlot1"));
                            SetInventory("GotWeapon2", CheckInventory("Wolfen_IHaveSlot2"));
                            SetInventory("GotWeapon4", CheckInventory("Wolfen_IHaveSlot4"));

                            SetActorProperty(0, APROP_SoundClass, "WolfenPlayer");
						}
					}
					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, wolfmode, pln);
					previousvalue = wolfmode;
				}
				break;

			case CLASS_HEXEN:
				hexmode = GetUserCVar(pln, "samsara_cl_hexclass");

                if (hexmode > 3) { hexmode = 3; }
                else if (hexmode < 0) { hexmode = 0; }

				if(hexmode != previousvalue || CheckInventory("Samsara_ModeWeaponChange"))
				{
                    hasfist = CheckInventory("Mace of Contrition");

                    SetInventory("Mace of Contrition", 1);
                    if (!hasfist) { SetInventory("Mace of Contrition", 0); }

                    haspistol = CheckInventory("Jade Wand");

                    SetInventory("Jade Wand", 1);
                    if (!haspistol) { SetInventory("Jade Wand", 0); }

					SetInventory("SamsaraModeCounter",hexmode);
					TakeInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("SamsaraAllySwitchCaller",1);
					if (hexmode > 0)
					{
						SetInventory("HexenClassMode", hexmode);
						ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, hexmode, pln);

						if(hexmode == 1)
						{
							SetActorProperty(0,APROP_Speed,1.125);
							SetActorProperty(0,APROP_SoundClass,"HexenPlayer");

                            SetInventory("Mace of Contrition", 1);

                            if (CheckWeapon("Spiked Gauntlets")) { SetWeapon("Mace of Contrition"); }

                            SetInventory("Spiked Gauntlets", 0);

                            if (CheckInventory("SamsaraHexenHasLMSPistolDisabled"))
                            {
                                if (CheckInventory("Jade Wand") || CheckInventory("Sapphire Wand") || CheckInventory("Impaler Crossbow"))
                                {
                                    if (CheckWeapon("Jade Wand") || CheckWeapon("Sapphire Wand") || CheckWeapon("Impaler Crossbow") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Mace of Contrition"); }

                                    SetInventory("Jade Wand", 0);
                                    SetInventory("Sapphire Wand", 0);
                                    SetInventory("Impaler Crossbow", 0);
                                }
                            } else {
                                if (CheckInventory("Jade Wand") || CheckInventory("Impaler Crossbow"))
                                {
                                    SetInventory("Sapphire Wand", 1);

                                    if (CheckWeapon("Jade Wand") || CheckWeapon("Impaler Crossbow") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Sapphire Wand"); }

                                    SetInventory("Jade Wand", 0);
                                    SetInventory("Impaler Crossbow", 0);
                                }
                            }

                            if (GetCVar("instagib"))
                            {
                                if (GetCVar("samsara_slotmode") == 0)
                                {
                                    SetWeapon("Mace of Contrition");

                                    SetInventory("Sapphire Wand", 0);
                                } else if (GetCVar("samsara_slotmode") == 1) {
                                    SetInventory("Sapphire Wand", 1);

                                    SetWeapon("Sapphire Wand");

                                    SetInventory("Mace of Contrition", 0);
                                } else if (GetCVar("samsara_slotmode") >= 2) {
                                    if (GetCVar("samsara_slotmode") == 2)
                                    {
                                        SetInventory("Sapphire Wand", 1);

                                        SetWeapon("Sapphire Wand");
                                    }
                                    else { SetInventory("Sapphire Wand", 0); }

                                    SetInventory("Mace of Contrition", 0);
                                }
                            }

                            if (CheckInventory("PortFlechette2") || CheckInventory("PortFlechette3"))
                            {
                                SetInventory("PortFlechette", 1);

                                SetInventory("PortFlechette2", 0);
                                SetInventory("PortFlechette3", 0);
                            }

                            if (CheckInventory("Crusader's Longbow") || CheckInventory("Javelin of Zeal"))
                            {
                                SetInventory("Frost Shards", 1);

                                if (CheckWeapon("Crusader's Longbow") || CheckWeapon("Javelin of Zeal")) { SetWeapon("Frost Shards"); }

                                SetInventory("Crusader's Longbow", 0);
                                SetInventory("Javelin of Zeal", 0);
                            }

                            if (CheckInventory("Bishop's Shortsword") || CheckInventory("Fire Blast"))
                            {
                                SetInventory("Timon's Axe", 1);

                                if (CheckWeapon("Bishop's Shortsword") || CheckWeapon("Fire Blast")) { SetWeapon("Timon's Axe"); }

                                SetInventory("Bishop's Shortsword", 0);
                                SetInventory("Fire Blast", 0);
                            }

                            if (CheckInventory("Blight Shock") || CheckInventory("Jotunn's Flail"))
                            {
                                SetInventory("Serpent Staff", 1);

                                if (CheckWeapon("Blight Shock") || CheckWeapon("Jotunn's Flail")) { SetWeapon("Serpent Staff"); }

                                SetInventory("Blight Shock", 0);
                                SetInventory("Jotunn's Flail", 0);
                            }

                            if (CheckInventory("Ice Fang") || CheckInventory("Viscerelagh"))
                            {
                                SetInventory("Hammer of Retribution", 1);

                                if (CheckWeapon("Ice Fang") || CheckWeapon("Viscerelagh")) { SetWeapon("Hammer of Retribution"); }

                                SetInventory("Ice Fang", 0);
                                SetInventory("Viscerelagh", 0);
                            }

                            if (CheckInventory("Arc of Death") || CheckInventory("Quickspell Gauntlets"))
                            {
                                SetInventory("Firestorm", 1);

                                if (CheckWeapon("Arc of Death") || CheckWeapon("Quickspell Gauntlets")) { SetWeapon("Firestorm"); }

                                SetInventory("Arc of Death", 0);
                                SetInventory("Quickspell Gauntlets", 0);
                            }

                            if (CheckInventory("SamsaraClassicPariasHasBloodscourge")) { SetInventory(" Bloodscourge ", 1); }

                            if (CheckInventory("SamsaraHexenHasSlot7"))
                            {
                                SetInventory("Wraithverge", 1);

                                if (CheckWeapon("Bloodscourge") || CheckWeapon("Quietus")) { SetWeapon("Wraithverge"); }
                            } else {
                                if (CheckWeapon("Wraithverge") || CheckWeapon("Bloodscourge") || CheckWeapon("Quietus")) { SetWeapon(" Bloodscourge "); }

                                SetInventory("Wraithverge", 0);
                            }

                            SetInventory("Bloodscourge", 0);
                            SetInventory("Quietus", 0);

                            if (CheckInventory("SamsaraClassicPariasHasSpikedGauntlet")) { SetInventory("Spiked Gauntlet", 1); }

                            SetInventory("GotWeapon7", CheckInventory("SamsaraHexenHasSlot7"));
						}
						else if(hexmode == 2)
						{
							SetActorProperty(0,APROP_Speed,0.935);
							SetActorProperty(0,APROP_SoundClass,"HexenDaedalon");

                            if (CheckInventory("SamsaraHexenHasLMSPistolDisabled")) { SetInventory("Sapphire Wand", 1); }

                            if (CheckInventory("Jade Wand") || CheckInventory("Impaler Crossbow"))
                            {
                                SetInventory("Sapphire Wand", 1);

                                if (CheckWeapon("Jade Wand") || CheckWeapon("Impaler Crossbow") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Sapphire Wand"); }

                                SetInventory("Jade Wand", 0);
                                SetInventory("Impaler Crossbow", 0);
                            }

                            if (CheckWeapon("Mace of Contrition") || CheckWeapon("Spiked Gauntlets")) { SetWeapon("Sapphire Wand"); }

                            SetInventory("Mace of Contrition", 0);
                            SetInventory("Spiked Gauntlets", 0);

                            if (GetCVar("instagib") && GetCVar("samsara_slotmode") >= 0 && GetCVar("samsara_slotmode") <= 2)
                            {
                                SetInventory("Sapphire Wand", 1);

                                SetWeapon("Sapphire Wand");
                            }

                            if (CheckInventory("PortFlechette") || CheckInventory("PortFlechette3"))
                            {
                                SetInventory("PortFlechette2", 1);

                                SetInventory("PortFlechette", 0);
                                SetInventory("PortFlechette3", 0);
                            }

                            if (CheckInventory("Crusader's Longbow") || CheckInventory("Javelin of Zeal"))
                            {
                                SetInventory("Frost Shards", 1);

                                if (CheckWeapon("Crusader's Longbow") || CheckWeapon("Javelin of Zeal")) { SetWeapon("Frost Shards"); }

                                SetInventory("Crusader's Longbow", 0);
                                SetInventory("Javelin of Zeal", 0);
                            }

                            if (CheckInventory("Bishop's Shortsword") || CheckInventory("Timon's Axe"))
                            {
                                SetInventory("Fire Blast", 1);

                                if (CheckWeapon("Bishop's Shortsword") || CheckWeapon("Timon's Axe")) { SetWeapon("Fire Blast"); }

                                SetInventory("Bishop's Shortsword", 0);
                                SetInventory("Timon's Axe", 0);
                            }

                            if (CheckInventory("Serpent Staff") || CheckInventory("Jotunn's Flail"))
                            {
                                SetInventory("Blight Shock", 1);

                                if (CheckWeapon("Serpent Staff") || CheckWeapon("Jotunn's Flail")) { SetWeapon("Blight Shock"); }

                                SetInventory("Serpent Staff", 0);
                                SetInventory("Jotunn's Flail", 0);
                            }

                            if (CheckInventory("Ice Fang") || CheckInventory("Hammer of Retribution"))
                            {
                                SetInventory("Viscerelagh", 1);

                                if (CheckWeapon("Ice Fang") || CheckWeapon("Hammer of Retribution")) { SetWeapon("Viscerelagh"); }

                                SetInventory("Ice Fang", 0);
                                SetInventory("Hammer of Retribution", 0);
                            }

                            if (CheckInventory("Firestorm") || CheckInventory("Quickspell Gauntlets"))
                            {
                                SetInventory("Arc of Death", 1);

                                if (CheckWeapon("Firestorm") || CheckWeapon("Quickspell Gauntlets")) { SetWeapon("Arc of Death"); }

                                SetInventory("Firestorm", 0);
                                SetInventory("Quickspell Gauntlets", 0);
                            }

                            if (CheckInventory("SamsaraHexenHasSlot7"))
                            {
                                SetInventory("Bloodscourge", 1);

                                if (CheckWeapon("Wraithverge") || CheckWeapon("Quietus")) { SetWeapon("Bloodscourge"); }
                            }

                            if (CheckInventory("SamsaraClassicPariasHasBloodscourge"))
                            {
                                SetInventory("Bloodscourge", 1);

                                if (CheckWeapon(" Bloodscourge ")) { SetWeapon("Bloodscourge"); }
                            }

                            if (CheckInventory("Wraithverge") || CheckInventory("Quietus") || CheckInventory(" Bloodscourge "))
                            {
                                if (CheckWeapon("Wraithverge") || CheckWeapon("Quietus") || CheckWeapon(" Bloodscourge ")) { SetWeapon("Bloodscourge"); }
                            }

                            SetInventory("Wraithverge", 0);
                            SetInventory("Quietus", 0);

                            SetInventory(" Bloodscourge ", 0);

                            if (CheckInventory("SamsaraClassicPariasHasSpikedGauntlet"))
                            {
                                if (CheckWeapon("Spiked Gauntlet")) { SetWeapon("Sapphire Wand"); }
                            }

                            SetInventory("Spiked Gauntlet", 0);

                            SetInventory("GotWeapon7", CheckInventory("SamsaraHexenHasSlot7") || CheckInventory("SamsaraClassicPariasHasBloodscourge"));
						}
						else if(hexmode == 3)
						{
							SetActorProperty(0,APROP_Speed,1.125);
							SetActorProperty(0,APROP_SoundClass,"HexenBaratus");

                            SetInventory("Spiked Gauntlets", 1);

                            if (CheckWeapon("Mace of Contrition")) { SetWeapon("Spiked Gauntlets"); }

                            SetInventory("Mace of Contrition", 0);

                            if (CheckInventory("SamsaraHexenHasLMSPistolDisabled"))
                            {
                                if (CheckInventory("Jade Wand") || CheckInventory("Sapphire Wand") || CheckInventory("Impaler Crossbow"))
                                {
                                    if (CheckWeapon("Jade Wand") || CheckWeapon("Sapphire Wand") || CheckWeapon("Impaler Crossbow") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Spiked Gauntlets"); }

                                    SetInventory("Jade Wand", 0);
                                    SetInventory("Sapphire Wand", 0);
                                    SetInventory("Impaler Crossbow", 0);
                                }
                            } else {
                                if (CheckInventory("Jade Wand") || CheckInventory("Sapphire Wand"))
                                {
                                    SetInventory("Impaler Crossbow", 1);

                                    if (CheckWeapon("Jade Wand") || CheckWeapon("Sapphire Wand") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Impaler Crossbow"); }

                                    SetInventory("Jade Wand", 0);
                                    SetInventory("Sapphire Wand", 0);
                                }
                            }

                            if (GetCVar("instagib"))
                            {
                                if (GetCVar("samsara_slotmode") == 0)
                                {
                                    SetWeapon("Spiked Gauntlets");

                                    SetInventory("Impaler Crossbow", 0);
                                } else if (GetCVar("samsara_slotmode") == 1) {
                                    SetInventory("Impaler Crossbow", 1);

                                    SetWeapon("Impaler Crossbow");

                                    SetInventory("Spiked Gauntlets", 0);
                                } else if (GetCVar("samsara_slotmode") >= 2) {
                                    if (GetCVar("samsara_slotmode") == 2)
                                    {
                                        SetInventory("Impaler Crossbow", 1);

                                        SetWeapon("Impaler Crossbow");
                                    }
                                    else { SetInventory("Impaler Crossbow", 0); }

                                    SetInventory("Spiked Gauntlets", 0);
                                }
                            }

                            if (CheckInventory("PortFlechette") || CheckInventory("PortFlechette2"))
                            {
                                SetInventory("PortFlechette3", 1);

                                SetInventory("PortFlechette", 0);
                                SetInventory("PortFlechette2", 0);
                            }

                            if (CheckInventory("Crusader's Longbow") || CheckInventory("Frost Shards"))
                            {
                                SetInventory("Javelin of Zeal", 1);

                                if (CheckWeapon("Crusader's Longbow") || CheckWeapon("Frost Shards")) { SetWeapon("Javelin of Zeal"); }

                                SetInventory("Crusader's Longbow", 0);
                                SetInventory("Frost Shards", 0);
                            }

                            if (CheckInventory("Bishop's Shortsword") || CheckInventory("Fire Blast"))
                            {
                                SetInventory("Timon's Axe", 1);

                                if (CheckWeapon("Bishop's Shortsword") || CheckWeapon("Fire Blast")) { SetWeapon("Timon's Axe"); }

                                SetInventory("Bishop's Shortsword", 0);
                                SetInventory("Fire Blast", 0);
                            }

                            if (CheckInventory("Serpent Staff") || CheckInventory("Blight Shock"))
                            {
                                SetInventory("Jotunn's Flail", 1);

                                if (CheckWeapon("Serpent Staff") || CheckWeapon("Blight Shock")) { SetWeapon("Jotunn's Flail"); }

                                SetInventory("Serpent Staff", 0);
                                SetInventory("Blight Shock", 0);
                            }

                            if (CheckInventory("Ice Fang") || CheckInventory("Viscerelagh"))
                            {
                                SetInventory("Hammer of Retribution", 1);

                                if (CheckWeapon("Ice Fang") || CheckWeapon("Viscerelagh")) { SetWeapon("Hammer of Retribution"); }

                                SetInventory("Ice Fang", 0);
                                SetInventory("Viscerelagh", 0);
                            }

                            if (CheckInventory("Firestorm") || CheckInventory("Arc of Death"))
                            {
                                SetInventory("Quickspell Gauntlets", 1);

                                if (CheckWeapon("Firestorm") || CheckWeapon("Arc of Death")) { SetWeapon("Quickspell Gauntlets"); }

                                SetInventory("Firestorm", 0);
                                SetInventory("Arc of Death", 0);
                            }

                            if (CheckInventory("SamsaraHexenHasSlot7"))
                            {
                                SetInventory("Quietus", 1);

                                if (CheckWeapon("Wraithverge") || CheckWeapon("Bloodscourge")) { SetWeapon("Quietus"); }
                            }

                            if (CheckInventory("SamsaraClassicPariasHasBloodscourge"))
                            {
                                SetInventory("Quietus", 1);

                                if (CheckWeapon(" Bloodscourge ")) { SetWeapon("Quietus"); }
                            }

                            if (CheckInventory("Wraithverge") || CheckInventory("Bloodscourge") || CheckInventory(" Bloodscourge "))
                            {
                                if (CheckWeapon("Wraithverge") || CheckWeapon("Bloodscourge") || CheckWeapon(" Bloodscourge ")) { SetWeapon("Quietus"); }
                            }

                            SetInventory("Wraithverge", 0);
                            SetInventory("Bloodscourge", 0);

                            SetInventory(" Bloodscourge ", 0);

                            if (CheckInventory("SamsaraClassicPariasHasSpikedGauntlet"))
                            {
                                if (CheckWeapon("Spiked Gauntlet")) { SetWeapon("Spiked Gauntlets"); }
                            }

                            SetInventory("Spiked Gauntlet", 0);

                            SetInventory("GotWeapon7", CheckInventory("SamsaraHexenHasSlot7") || CheckInventory("SamsaraClassicPariasHasBloodscourge"));
						}
					}
					else
					{
						SetInventory("HexenClassMode", hexmode);
						ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, hexmode, pln);

						SetActorProperty(0,APROP_Speed,1.0);
						SetActorProperty(0,APROP_SoundClass,"HexenPlayer");

                        SetInventory("Mace of Contrition", 1);

                        if (CheckWeapon("Spiked Gauntlets")) { SetWeapon("Mace of Contrition"); }

                        SetInventory("Spiked Gauntlets", 0);

                        if (CheckInventory("SamsaraHexenHasLMSPistolDisabled"))
                        {
                            if (CheckInventory("Jade Wand") || CheckInventory("Sapphire Wand") || CheckInventory("Impaler Crossbow"))
                            {
                                if (CheckWeapon("Jade Wand") || CheckWeapon("Sapphire Wand") || CheckWeapon("Impaler Crossbow") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Mace of Contrition"); }

                                SetInventory("Jade Wand", 0);
                                SetInventory("Sapphire Wand", 0);
                                SetInventory("Impaler Crossbow", 0);
                            }
                        } else {
                            if (CheckInventory("Sapphire Wand") || CheckInventory("Impaler Crossbow"))
                            {
                                SetInventory("Jade Wand", 1);

                                if (CheckWeapon("Sapphire Wand") || CheckWeapon("Impaler Crossbow") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Jade Wand"); }

                                SetInventory("Sapphire Wand", 0);
                                SetInventory("Impaler Crossbow", 0);
                            }
                        }

                        if (GetCVar("instagib"))
                        {
                            if (GetCVar("samsara_slotmode") == 0)
                            {
                                SetWeapon("Mace of Contrition");

                                SetInventory("Jade Wand", 0);
                            } else if (GetCVar("samsara_slotmode") == 1) {
                                SetInventory("Jade Wand", 1);

                                SetWeapon("Jade Wand");

                                SetInventory("Mace of Contrition", 0);
                            } else if (GetCVar("samsara_slotmode") >= 2) {
                                if (GetCVar("samsara_slotmode") == 2)
                                {
                                    SetInventory("Jade Wand", 1);

                                    SetWeapon("Jade Wand");
                                }
                                else { SetInventory("Jade Wand", 0); }

                                SetInventory("Mace of Contrition", 0);
                            }
                        }

                        if (CheckInventory("PortFlechette2") || CheckInventory("PortFlechette3"))
                        {
                            SetInventory("PortFlechette", 1);

                            SetInventory("PortFlechette2", 0);
                            SetInventory("PortFlechette3", 0);
                        }

                        if (CheckInventory("Frost Shards") || CheckInventory("Javelin of Zeal"))
                        {
                            SetInventory("Crusader's Longbow", 1);

                            if (CheckWeapon("Frost Shards") || CheckWeapon("Javelin of Zeal")) { SetWeapon("Crusader's Longbow"); }

                            SetInventory("Frost Shards", 0);
                            SetInventory("Javelin of Zeal", 0);
                        }

                        if (CheckInventory("Fire Blast") || CheckInventory("Timon's Axe"))
                        {
                            SetInventory("Bishop's Shortsword", 1);

                            if (CheckWeapon("Fire Blast") || CheckWeapon("Timon's Axe")) { SetWeapon("Bishop's Shortsword"); }

                            SetInventory("Fire Blast", 0);
                            SetInventory("Timon's Axe", 0);
                        }

                        if (CheckInventory("Blight Shock") || CheckInventory("Jotunn's Flail"))
                        {
                            SetInventory("Serpent Staff", 1);

                            if (CheckWeapon("Blight Shock") || CheckWeapon("Jotunn's Flail")) { SetWeapon("Serpent Staff"); }

                            SetInventory("Blight Shock", 0);
                            SetInventory("Jotunn's Flail", 0);
                        }

                        if (CheckInventory("Viscerelagh") || CheckInventory("Hammer of Retribution"))
                        {
                            SetInventory("Ice Fang", 1);

                            if (CheckWeapon("Viscerelagh") || CheckWeapon("Hammer of Retribution")) { SetWeapon("Ice Fang"); }

                            SetInventory("Viscerelagh", 0);
                            SetInventory("Hammer of Retribution", 0);
                        }

                        if (CheckInventory("Arc of Death") || CheckInventory("Quickspell Gauntlets"))
                        {
                            SetInventory("Firestorm", 1);

                            if (CheckWeapon("Arc of Death") || CheckWeapon("Quickspell Gauntlets")) { SetWeapon("Firestorm"); }

                            SetInventory("Arc of Death", 0);
                            SetInventory("Quickspell Gauntlets", 0);
                        }

                        if (CheckInventory("SamsaraHexenHasSlot7"))
                        {
                            SetInventory("Wraithverge", 1);

                            if (CheckWeapon("Bloodscourge") || CheckWeapon("Quietus")) { SetWeapon("Wraithverge"); }
                        }

                        if (CheckInventory("SamsaraClassicPariasHasBloodscourge"))
                        {
                            SetInventory("Wraithverge", 1);

                            if (CheckWeapon(" Bloodscourge ")) { SetWeapon("Wraithverge"); }
                        }

                        if (CheckInventory("Bloodscourge") || CheckInventory("Quietus") || CheckInventory(" Bloodscourge "))
                        {
                            if (CheckWeapon("Bloodscourge") || CheckWeapon("Quietus") || CheckWeapon(" Bloodscourge ")) { SetWeapon("Wraithverge"); }
                        }

                        SetInventory("Bloodscourge", 0);
                        SetInventory("Quietus", 0);

                        SetInventory(" Bloodscourge ", 0);

                        if (CheckInventory("SamsaraClassicPariasHasSpikedGauntlet"))
                        {
                            if (CheckWeapon("Spiked Gauntlet")) { SetWeapon("Mace of Contrition"); }
                        }

                        SetInventory("Spiked Gauntlet", 0);

                        SetInventory("GotWeapon7", CheckInventory("SamsaraHexenHasSlot7") || CheckInventory("SamsaraClassicPariasHasBloodscourge"));
					}
					previousvalue = hexmode;
				}
				break;

			case CLASS_DUKE:
				if (CheckInventory("SamsaraDuke64PlasmaCannonLoopSoundCheck") && !CheckWeapon("Devastator Weapon"))
				{
					StopSound(0, CHAN_5);

					SetInventory("SamsaraDuke64PlasmaCannonLoopSoundCheck", 0);
				}

				dukemode = GetUserCVar(pln, "samsara_cl_dukemode");

                if (dukemode > 2) { dukemode = 2; }
                else if (dukemode < 0) { dukemode = 0; }

				if(dukemode != previousvalue || CheckInventory("Samsara_ModeWeaponChange"))
				{
					SetInventory("SamsaraModeCounter",dukemode);
					TakeInventory("Samsara_ModeWeaponChange",1);
					if (dukemode >= 0)
					{
						SetInventory("DukeClassMode", dukemode);
						if(dukemode == 1)
						{
							if(CheckInventory("SamsaraDukeHasGoldenDesertEagle"))
							{
								GiveInventory("Golden Desert Eagle", 1);
							}

							if(CheckInventory("DukeHasShrinker"))
							{
								GiveInventory("Shrinker", 1);
							}

							if(CheckInventory("DukeHasExpander"))
							{
								GiveInventory("Expander", 1);
							}

                            if (CheckInventory("DukePortJetpack64")) { GiveInventory("DukePortJetpack", 1); }

                            if (CheckInventory("ItemHoloduke") || CheckInventory("ItemHoloduke64")) { SetInventory("ItemHolodukeLAB", CheckInventory("ItemHoloduke") + CheckInventory("ItemHoloduke64")); }

                            if (CheckInventory("DukePortNiVi") || CheckInventory("DukePortNiVi64")) { GiveInventory("DukePortNiViLAB", 1); }

                            if (CheckInventory("DukePortSteroids") || CheckInventory("DukePortSteroids64")) { GiveInventory("DukePortSteroidsLAB", 1); }

                            if (!CheckInventory("SamsaraDukeHasSlot4"))
                            {
                                SetInventory("GotWeapon4", 0);
                                if (CheckWeapon("Chaingun Cannon")) { SetWeapon("Golden Desert Eagle"); }
                                SetInventory("Chaingun Cannon", 0);
                            }

							SetInventory("DukePortJetpack64", 0);
							SetInventory("ItemHoloduke", 0);
							SetInventory("ItemHoloduke64", 0);
							TakeInventory("DukePortNiVi", 1);
							TakeInventory("DukePortNiVi64", 1);
							TakeInventory("DukePortSteroids", 1);
							TakeInventory("DukePortSteroids64", 1);

							SetActorProperty(0,APROP_SoundClass,"DukePlayer");
						}
						else if(dukemode == 2)
						{
							if(CheckInventory("SamsaraDukeHasGoldenDesertEagle"))
							{
                                SetInventory("GotWeapon4", 1);
                                SetInventory("Chaingun Cannon", 1);
								if(CheckWeapon("Golden Desert Eagle"))
									SetWeapon("Chaingun Cannon");
							}

							if(CheckInventory("DukeHasShrinker"))
							{
								if(CheckWeapon("Shrinker"))
									SetWeapon("Freezethrower");
							}

							if(CheckInventory("DukeHasExpander"))
							{
								if(CheckWeapon("Expander"))
									SetWeapon("Freezethrower");
							}

                            if (CheckInventory("DukePortJetpack")) { GiveInventory("DukePortJetpack64", 1); }

                            if (CheckInventory("ItemHoloduke") || CheckInventory("ItemHolodukeLAB")) { SetInventory("ItemHoloduke64", CheckInventory("ItemHoloduke") + CheckInventory("ItemHolodukeLAB")); }

                            if (CheckInventory("DukePortNiVi") || CheckInventory("DukePortNiViLAB")) { GiveInventory("DukePortNiVi64", 1); }

                            if (CheckInventory("DukePortSteroids") || CheckInventory("DukePortSteroidsLAB")) { GiveInventory("DukePortSteroids64", 1); }

							TakeInventory("Golden Desert Eagle", 1);
							SetInventory("DukePortJetpack", 0);
							TakeInventory("Shrinker", 1);
							TakeInventory("Expander", 1);
							SetInventory("ItemHoloduke", 0);
							SetInventory("ItemHolodukeLAB", 0);
							TakeInventory("DukePortNiVi", 1);
							TakeInventory("DukePortNiViLAB", 1);
							TakeInventory("DukePortSteroids", 1);
							TakeInventory("DukePortSteroidsLAB", 1);

							SetActorProperty(0,APROP_SoundClass,"Duke64Player");
						}
						else
						{
							if(CheckInventory("SamsaraDukeHasGoldenDesertEagle"))
							{
								GiveInventory("Golden Desert Eagle", 1);
							}

							if(CheckInventory("DukeHasShrinker"))
							{
								GiveInventory("Shrinker", 1);
							}

							if(CheckInventory("DukeHasExpander"))
							{
								GiveInventory("Expander", 1);
							}

                            if (CheckInventory("DukePortJetpack64")) { GiveInventory("DukePortJetpack", 1); }

                            if (CheckInventory("ItemHolodukeLAB") || CheckInventory("ItemHoloduke64")) { SetInventory("ItemHoloduke", CheckInventory("ItemHolodukeLAB") + CheckInventory("ItemHoloduke64")); }

                            if (CheckInventory("DukePortNiViLAB") || CheckInventory("DukePortNiVi64")) { GiveInventory("DukePortNiVi", 1); }

                            if (CheckInventory("DukePortSteroidsLAB") || CheckInventory("DukePortSteroids64")) { GiveInventory("DukePortSteroids", 1); }

                            if (!CheckInventory("SamsaraDukeHasSlot4"))
                            {
                                SetInventory("GotWeapon4", 0);
                                if (CheckWeapon("Chaingun Cannon")) { SetWeapon("Golden Desert Eagle"); }
                                SetInventory("Chaingun Cannon", 0);
                            }

							SetInventory("DukePortJetpack64", 0);
							SetInventory("ItemHolodukeLAB", 0);
							SetInventory("ItemHoloduke64", 0);
							TakeInventory("DukePortNiViLAB", 1);
							TakeInventory("DukePortNiVi64", 1);
							TakeInventory("DukePortSteroidsLAB", 1);
							TakeInventory("DukePortSteroids64", 1);

							SetActorProperty(0,APROP_SoundClass,"DukePlayer");
							}
						}
					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, dukemode, pln);
					previousvalue = dukemode;
				}
				break;

			case CLASS_MARATHON:
				if (!CheckWeapon(".44 Magnum Mega Class A1") && !CheckWeapon("WSTE-M5 Combat Shotgun"))
				{
					SetInventory("SamsaraLevelSwitch_DualWielding", 0);
					SetInventory("SamsaraSynthFireActive", 0);
				}

				if (CheckWeapon("KKV-7 SMG Flechette")) { TakeInventory("SMGClicked", 1); } // weapon fires for 1 tic each frame
				else { SetInventory("SMGClicked", 0); }

				if (CheckWeapon("MA-75B Assault Rifle"))
				{
					TakeInventory("AssaultFiredS", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));
					TakeInventory("AssaultClicked", 1); // weapon fires for 1 tic each frame
					TakeInventory("AssaultClicked2", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));
					GiveInventory("SamsaraMarathonRifleAltReload", 1);
					GiveInventory("SamsaraMarathonRifleAltFire", 1);
				} else {
					SetInventory("AssaultFiredS", 0);
					SetInventory("AssaultClicked", 0);
					SetInventory("AssaultClicked2", 0);
				}

				if (CheckWeapon("Alien Weapon"))
				{
					TakeInventory("AlienWeaponFired", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));
					TakeInventory("AlienWeaponFiredP", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));
					TakeInventory("AlienWeaponFiredS", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));
				} else {
					SetInventory("AlienWeaponFired", 0);
					SetInventory("AlienWeaponFiredP", 0);
					SetInventory("AlienWeaponFiredS", 0);
					SetInventory("AlienWeaponSecondarySide", 0);
				}

				if (!CheckInventory("SamsaraHasInfiniteAmmo"))
				{
					if (CheckInventory("Alien Weapon") && !CheckWeapon("Alien Weapon") && !CheckInventory("UnknownAmmo")) { TakeInventory("Alien Weapon", 1); }
					if (CheckInventory(" Alien Weapon ") && !CheckWeapon(" Alien Weapon ") && !CheckInventory("UnknownAmmo2")) { TakeInventory(" Alien Weapon ", 1); }
					if (CheckInventory("Talon Ceramic Combat Blade") && !CheckWeapon("Talon Ceramic Combat Blade") && !CheckInventory("KnifeAmmo")) { TakeInventory("Talon Ceramic Combat Blade", 1); }
				}
				break;

			case CLASS_QUAKE:
                SetInventory("SamsaraAlternateSoundToken", GetUserCVar(pln, "samsara_cl_quake1sounds"));

                bool vanillaquake = GetCVar("samsara_vanillaquake");

				SetInventory("Grenade Launcher DOE", CheckInventory("Grenade Launcher") && !vanillaquake);
				SetInventory("Nailgun DOE", CheckInventory("Nailgun") && !vanillaquake);
				SetInventory("  Rocket Launcher DOE  ", CheckInventory("  Rocket Launcher  ") && !vanillaquake);
				SetInventory("Super Nailgun DOE", CheckInventory("Super Nailgun") && !vanillaquake);
				SetInventory("Thunderbolt DOE", CheckInventory("Thunderbolt") && !vanillaquake);

				SetInventory("UsingDoEAmmo", CheckWeapon("Grenade Launcher DOE") || CheckWeapon("Nailgun DOE") || CheckWeapon("  Rocket Launcher DOE  ") || CheckWeapon("Super Nailgun DOE") || CheckWeapon("Thunderbolt DOE"));

                SetInventory("SamsaraQuakeQuadDamageDisablePlayerSound", CheckWeapon("Grenade Launcher") || CheckWeapon("Grenade Launcher DOE") ||
                                                                         CheckWeapon("Nailgun") || CheckWeapon("Nailgun DOE") ||
                                                                         CheckWeapon("  Rocket Launcher  ") || CheckWeapon("  Rocket Launcher DOE  ") ||
                                                                         CheckWeapon("Super Nailgun") || CheckWeapon("Super Nailgun DOE") ||
                                                                         CheckWeapon("Thunderbolt") || CheckWeapon("Thunderbolt DOE"));

                if (!CheckWeapon("Thunderbolt"))
                {
                    if (CheckInventory("SamsaraQuakeThunderboltLightningFiringSoundCheck"))
                    {
                        StopSound(0, CHAN_6);

                        SetInventory("SamsaraQuakeThunderboltLightningFiringSoundCheck", 0);
                    }

                    if (CheckInventory("SamsaraQuakeThunderboltLightningFiringQuadSoundCheck"))
                    {
                        StopSound(0, CHAN_7);

                        SetInventory("SamsaraQuakeThunderboltLightningFiringQuadSoundCheck", 0);
                    }
                }
				break;

			case CLASS_ROTT:
                SetInventory("SamsaraAlternateSoundToken", GetUserCVar(pln, "samsara_cl_rottsounds"));

				GiveInventory("RottDamageEnemyBeneath",1);

                if (!CheckWeapon("Excalibat") && CheckInventory("SamsaraROTTExcalibatInvulning")) { GiveInventory("SamsaraROTTExcalibatInvulnTaker", 1); }

                if (CheckInventory("God Hand") && !CheckWeapon("God Hand") && !CheckInventory("PowerGodProtection")) { TakeInventory("God Hand", 1); }

				if (CheckInventory("SamsaraROTTDarkStaffSecondaryFiringSoundCheck") && !CheckWeapon("Dark Staff"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraROTTDarkStaffSecondaryFiringSoundCheck", 0);
				}

				rottmode = GetUserCVar(pln, "samsara_cl_rottmode");

                if (rottmode > 4) { rottmode = 4; }
                else if (rottmode < 0) { rottmode = 0; }

				//only run these actions if the value changes
				if(rottmode != previousvalue)
				{
					GiveInventory("SamsaraAllySwitchCaller",1);
					SetInventory("RottMode",rottmode);

					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, rottmode, pln);
					switch(rottmode)
					{
						default:
							SetActorProperty(0,APROP_DamageFactor,0.9);
							SetActorProperty(0,APROP_ViewHeight,50.0);
							SetActorProperty(0,APROP_Speed,0.975);
							SetActorProperty(0,APROP_SoundClass,"Freely");
							break;
						case 1:
							SetActorProperty(0,APROP_DamageFactor,1.0);
							SetActorProperty(0,APROP_ViewHeight,48.0);
							SetActorProperty(0,APROP_Speed,1.0);
							SetActorProperty(0,APROP_SoundClass,"Cassatt");
							break;
						case 2:
							SetActorProperty(0,APROP_DamageFactor,1.1);
							SetActorProperty(0,APROP_ViewHeight,46.0);
							SetActorProperty(0,APROP_Speed,1.0675);
							SetActorProperty(0,APROP_SoundClass,"Barrett");
							break;
						case 3:
							SetActorProperty(0,APROP_DamageFactor,1.2);
							SetActorProperty(0,APROP_ViewHeight,44.0);
							SetActorProperty(0,APROP_Speed,1.125);
							SetActorProperty(0,APROP_SoundClass,"Ni");
							break;
						case 4:
							SetActorProperty(0,APROP_DamageFactor,0.8);
							SetActorProperty(0,APROP_ViewHeight,52.0);
							SetActorProperty(0,APROP_Speed,0.935);
							SetActorProperty(0,APROP_SoundClass,"Wendt");
							break;
					}
					previousvalue = rottmode;
				}
				break;
			case CLASS_BLAKE:
				// stupid fragile code prevention hack
				if (CheckWeapon("Rapid Assault Weapon")) { SetInventory("SamsaraBStoneCurrentAmmoUsed", 1); }
				else if (CheckWeapon("Slow Fire Protector") || CheckWeapon("Heavy Assault Weapon")) { SetInventory("SamsaraBStoneCurrentAmmoUsed", 2); }
				else if (CheckWeapon("Plasma Discharge Unit")) { SetInventory("SamsaraBStoneCurrentAmmoUsed", 3); }
				else if (CheckWeapon("Dual Neutron Disruptor") || CheckWeapon("Anti-Plasma Cannon")) { SetInventory("SamsaraBStoneCurrentAmmoUsed", 4); }
				else { SetInventory("SamsaraBStoneCurrentAmmoUsed", 0); }

				TakeInventory("SamsaraBStoneAutoChargePistolCooldown", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));

				blakemode = GetUserCVar(pln, "samsara_cl_bsaog");

                if (blakemode > 1) { blakemode = 1; }
                else if (blakemode < 0) { blakemode = 0; }

				if(blakemode != previousvalue)
				{
					SetInventory("SamsaraModeCounter",blakemode);
					if(blakemode)
					{
						GiveInventory("BlakeAOGToken", 1);
						ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, 1, pln);
					}
					else
					{
						ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, 0, pln);
						TakeInventory("BlakeAOGToken", 0x7FFFFFFF);
					}
					previousvalue = blakemode;
				}
				break;
			case CLASS_STRIFE:
				SetInventory("  Crossbow Poison  ", CheckInventory("  Crossbow  "));
				SetInventory(" Grenade Launcher WP ", CheckInventory(" Grenade Launcher "));
				SetInventory(" Grenade Launcher Gas ", CheckInventory(" Grenade Launcher "));
				SetInventory(" Mauler Torpedo ", CheckInventory(" Mauler "));

                if (CheckWeapon(" Grenade Launcher Gas ")) { SetInventory("SamsaraStrifeguyUsingAltAmmo", 2); }
                else if (CheckWeapon("  Crossbow Poison  ") || CheckWeapon(" Grenade Launcher WP ")) { SetInventory("SamsaraStrifeguyUsingAltAmmo", 1); }
                else { SetInventory("SamsaraStrifeguyUsingAltAmmo", 0); }

                if (GetCVar("samsara_currentgame") != GAME_STRIFE)
                {
                    SetInventory("StrifeSigilPiece", CheckInventory("StrifeSigilPieceCheck3") + CheckInventory("StrifeSigilPieceCheck4") + CheckInventory("StrifeSigilPieceCheck5") +
                                                     CheckInventory("StrifeSigilPieceCheck6") + CheckInventory("StrifeSigilPieceCheck7"));

                    SetInventory(" Sigil ", CheckInventory("StrifeSigilPiece") > 0);
                }

				if (!CheckInventory("SamsaraBallgag") && !CheckInventory("BlackBirdTauntCooldown") && !CheckInventory("BlackBirdInStrife"))
				{
					if (strifeCeilingHeight != GetActorCeilingZ(0) && random(0, 100) <= 1 && (!CheckInventory("DMModeOn")))
					{
						GiveInventory("BlackBirdTauntCooldown", 5);
						ACS_NamedExecuteWithResult("BlackBirdTauntCooldown");
						ACS_NamedExecuteWithResult("StrifeBlackBirdQuote", 1, pln);
					} else if(CheckInventory("KillCountAmountTrue") > strifeLastKillCount && random(0, 40) <= 3) {
						GiveInventory("BlackBirdTauntCooldown", 5);
						ACS_NamedExecuteWithResult("BlackBirdTauntCooldown");
						ACS_NamedExecuteWithResult("StrifeBlackBirdQuote", 2, pln);
					} else if (isDead(0) && strifeDead == 0 && !isCompetitiveGamemode()) {
						GiveInventory("BlackBirdTauntCooldown", 5);
						ACS_NamedExecuteWithResult("BlackBirdTauntCooldown");
						ACS_NamedExecuteWithResult("StrifeBlackBirdQuote", 5, pln);
					}
				}

				strifeDead = GetActorProperty(0,APROP_Health) <= 0;
				strifeCeilingHeight = GetActorCeilingZ(0);
				strifeLastKillCount = CheckInventory("KillCountAmountTrue");
				break;
			
			case CLASS_ERAD:
				if (CheckInventory("SamsaraEradicatorEnergyWhipFiringSoundCheck") && !CheckWeapon("EradEnergywhip"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraEradicatorEnergyWhipFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraEradicatorNitrofoggerFiringSoundCheck") && !CheckWeapon("EradNitrofogger"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraEradicatorNitrofoggerFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraEradicatorFlamethrowerFiringSoundCheck") && !CheckWeapon("EradFlamethrower"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraEradicatorFlamethrowerFiringSoundCheck", 0);
				}

				eradmode = GetUserCVar(pln, "samsara_cl_eradmode");

                if (eradmode > 3) { eradmode = 3; }
                else if (eradmode < 0) { eradmode = 0; }

				//only run these actions if the value changes
				if(eradmode != previousvalue || CheckInventory("Samsara_ModeWeaponChange"))
				{
					SetInventory("SamsaraModeCounter",eradmode);
					TakeInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("SamsaraAllySwitchCaller",1);
					if (eradmode >= 0)
					{
						SetInventory("EradMode", eradmode);

						if (eradmode == 0)
						{
							if (CheckInventory("EradRovingMine") || CheckInventory("EradMiniTankDetonator"))
							{
								SetInventory(" Arachnicator ", 1);

								if (CheckWeapon("EradRovingMine") || CheckWeapon("EradMiniTankDetonator")) { SetWeapon(" Arachnicator "); }

								SetInventory("EradRovingMine", 0);
								SetInventory("EradMiniTankDetonator", 0);
							}

							if (CheckInventory("Cluster Bomb") || CheckInventory("Pellet Bomb"))
							{
								SetInventory("Death Bomb", 1);

								if (CheckWeapon("Cluster Bomb") || CheckWeapon("Pellet Bomb")) { SetWeapon("Death Bomb"); }

								SetInventory("Cluster Bomb", 0);
								SetInventory("Pellet Bomb", 0);
							}

							if (CheckInventory("EradNitrofogger") || CheckInventory("EradFlamethrower"))
							{
								SetInventory("EradEnergywhip", 1);

								if (CheckWeapon("EradNitrofogger") || CheckWeapon("EradFlamethrower")) { SetWeapon("EradEnergywhip"); }

								SetInventory("EradNitrofogger", 0);
								SetInventory("EradFlamethrower", 0);
							}

							if (CheckInventory("Napalm Charge") || CheckInventory("Ion Sphere"))
							{
								SetInventory("Eleena Smoke Bomb", 1);

								if (CheckWeapon("Napalm Charge") || CheckWeapon("Ion Sphere")) { SetWeapon("Eleena Smoke Bomb"); }

								SetInventory("Napalm Charge", 0);
								SetInventory("Ion Sphere", 0);
							}

							SetActorProperty(0,APROP_DamageFactor,1.125);
							SetActorProperty(0,APROP_DamageMultiplier,1.0);
							SetActorProperty(0,APROP_Speed,1.125);
							extrajumpz = 8;
							SetActorProperty(0, APROP_SoundClass, "Eleena");
						} else if (eradmode == 1) {
							if (CheckInventory(" Arachnicator ") || CheckInventory("EradMiniTankDetonator"))
							{
								SetInventory("EradRovingMine", 1);

								if (CheckWeapon(" Arachnicator ") || CheckWeapon("EradMiniTankDetonator")) { SetWeapon("EradRovingMine"); }

								SetInventory(" Arachnicator ", 0);
								SetInventory("EradMiniTankDetonator", 0);
							}

							if (CheckInventory("Death Bomb") || CheckInventory("Pellet Bomb"))
							{
								SetInventory("Cluster Bomb", 1);

								if (CheckWeapon("Death Bomb") || CheckWeapon("Pellet Bomb")) { SetWeapon("Cluster Bomb"); }

								SetInventory("Death Bomb", 0);
								SetInventory("Pellet Bomb", 0);
							}

							if (CheckInventory("EradEnergywhip") || CheckInventory("EradFlamethrower"))
							{
								SetInventory("EradNitrofogger", 1);

								if (CheckWeapon("EradEnergywhip") || CheckWeapon("EradFlamethrower")) { SetWeapon("EradNitrofogger"); }

								SetInventory("EradEnergywhip", 0);
								SetInventory("EradFlamethrower", 0);
							}

							if (CheckInventory("Eleena Smoke Bomb") || CheckInventory("Ion Sphere"))
							{
								SetInventory("Napalm Charge", 1);

								if (CheckWeapon("Eleena Smoke Bomb") || CheckWeapon("Ion Sphere")) { SetWeapon("Napalm Charge"); }

								SetInventory("Eleena Smoke Bomb", 0);
								SetInventory("Ion Sphere", 0);
							}

							SetActorProperty(0,APROP_DamageFactor,1.0);
							SetActorProperty(0,APROP_DamageMultiplier,1.125);
							SetActorProperty(0,APROP_Speed,0.875);
							extrajumpz = -4;
							SetActorProperty(0, APROP_SoundClass, "Kamchak");
						} else if (eradmode == 2) {
							if (CheckInventory(" Arachnicator ") || CheckInventory("EradRovingMine"))
							{
								SetInventory("EradMiniTankDetonator", 1);

								if (CheckWeapon(" Arachnicator ") || CheckWeapon("EradRovingMine")) { SetWeapon("EradMiniTankDetonator"); }

								SetInventory(" Arachnicator ", 0);
								SetInventory("EradRovingMine", 0);
							}

							if (CheckInventory("Death Bomb") || CheckInventory("Cluster Bomb"))
							{
								SetInventory("Pellet Bomb", 1);

								if (CheckWeapon("Death Bomb") || CheckWeapon("Cluster Bomb")) { SetWeapon("Pellet Bomb"); }

								SetInventory("Death Bomb", 0);
								SetInventory("Cluster Bomb", 0);
							}

							if (CheckInventory("EradEnergywhip") || CheckInventory("EradNitrofogger"))
							{
								SetInventory("EradFlamethrower", 1);

								if (CheckWeapon("EradEnergywhip") || CheckWeapon("EradNitrofogger")) { SetWeapon("EradFlamethrower"); }

								SetInventory("EradEnergywhip", 0);
								SetInventory("EradNitrofogger", 0);
							}

							if (CheckInventory("Eleena Smoke Bomb") || CheckInventory("Napalm Charge"))
							{
								SetInventory("Ion Sphere", 1);

								if (CheckWeapon("Eleena Smoke Bomb") || CheckWeapon("Napalm Charge")) { SetWeapon("Ion Sphere"); }

								SetInventory("Eleena Smoke Bomb", 0);
								SetInventory("Napalm Charge", 0);
							}

							SetActorProperty(0,APROP_DamageFactor,1.0);
							SetActorProperty(0,APROP_DamageMultiplier,1.0);
							SetActorProperty(0,APROP_Speed,1.0);
							extrajumpz = 0;
							SetActorProperty(0, APROP_SoundClass, "DanBlaze");
						} else if (eradmode == 3) {
							if (CheckInventory("EradRovingMine") || CheckInventory("EradMiniTankDetonator"))
							{
								SetInventory(" Arachnicator ", 1);

								if (CheckWeapon("EradRovingMine") || CheckWeapon("EradMiniTankDetonator")) { SetWeapon(" Arachnicator "); }

								SetInventory("EradRovingMine", 0);
								SetInventory("EradMiniTankDetonator", 0);
							}

							if (CheckInventory("Death Bomb") || CheckInventory("Cluster Bomb"))
							{
								SetInventory("Pellet Bomb", 1);

								if (CheckWeapon("Death Bomb") || CheckWeapon("Cluster Bomb")) { SetWeapon("Pellet Bomb"); }

								SetInventory("Death Bomb", 0);
								SetInventory("Cluster Bomb", 0);
							}

							if (CheckInventory("EradEnergywhip") || CheckInventory("EradNitrofogger"))
							{
								SetInventory("EradFlamethrower", 1);

								if (CheckWeapon("EradEnergywhip") || CheckWeapon("EradNitrofogger")) { SetWeapon("EradFlamethrower"); }

								SetInventory("EradEnergywhip", 0);
								SetInventory("EradNitrofogger", 0);
							}

							if (CheckInventory("Eleena Smoke Bomb") || CheckInventory("Ion Sphere"))
							{
								SetInventory("Napalm Charge", 1);

								if (CheckWeapon("Eleena Smoke Bomb") || CheckWeapon("Ion Sphere")) { SetWeapon("Napalm Charge"); }

								SetInventory("Eleena Smoke Bomb", 0);
								SetInventory("Ion Sphere", 0);
							}

							SetActorProperty(0,APROP_DamageFactor,1.125);
							SetActorProperty(0,APROP_DamageMultiplier,1.125);
							SetActorProperty(0,APROP_Speed,1.125);
							extrajumpz = 4;
							SetActorProperty(0, APROP_SoundClass, "EMarine");
						}
					}
					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, eradmode, pln);
					previousvalue = eradmode;
				}
				break;
			
			case CLASS_RMR:
				SetInventory("SamsaraAlternateSoundToken", GetUserCVar(pln, "samsara_cl_rebelmoonrisingsounds"));

				if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && CheckInventory(" RMR Plasma Cannon "))
				{
					GiveInventory("Subestron Arm", 1);
				}
				else
				{
					if(CheckWeapon("Subestron Arm"))
					{
						SetWeapon(" RMR Plasma Cannon ");
					}
					TakeInventory("Subestron Arm", 1);
				}

                if (!CheckInventory("PowerRMRFlyAbilityHack")) { TakeInventory("PowerRMRFlyAbility", 1); } // hexen
				break;
			case CLASS_KATARN:
                if (CheckInventory("KatarnBlazeIt"))
                {
                    if (CheckInventory("KatarnFireRateUp"))
                    {
                        TakeInventory("KatarnBlazeIt", 1);
                        SetInventory("KatarnBlazeItTimer", CheckInventory("KatarnBlazeIt") / 35);
                    }
                }
                else { SetInventory("KatarnFireRateUp", 0); }
				break;
			case CLASS_POGREED:
				ipogmode = GetUserCVar(pln, "samsara_cl_ipogmode");

                if (ipogmode > 4) { ipogmode = 4; }
                else if (ipogmode < 0) { ipogmode = 0; }

				//only run these actions if the value changes
				if(ipogmode != previousvalue)
				{
					GiveInventory("SamsaraAllySwitchCaller",1);
					SetInventory("IpogMode",ipogmode);

					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, ipogmode, pln);
					switch(ipogmode)
					{
						default:
							SetActorProperty(0,APROP_SoundClass,"Mooman");
							break;
						case 1:
							SetActorProperty(0,APROP_SoundClass,"Cyborg");
							break;
						case 2:
							SetActorProperty(0,APROP_SoundClass,"Lizard");
							break;
						case 3:
							SetActorProperty(0,APROP_SoundClass,"Specimen");
							break;
						case 4:
							SetActorProperty(0,APROP_SoundClass,"Dominatrix");
							break;
					}
					previousvalue = ipogmode;
				}
				break;
			case CLASS_DISRUPTOR:
				SetInventory("SamsaraDisruptorUsingAltAmmo", (CheckWeapon(" Phase Rifle ") && CheckInventory("SamsaraDisruptorPhaseRifleMode")) || (CheckWeapon("Phase Repeater") && CheckInventory("SamsaraDisruptorPhaseRepeaterMode")) || (CheckWeapon(" Lock-on Cannon ") && CheckInventory("SamsaraDisruptorLockOnCannonMode")));

				if (CheckInventory("SamsaraDisruptorPlasmaLanceFiringSoundCheck") && !CheckWeapon(" Disruptor Plasmalance "))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraDisruptorPlasmaLanceFiringSoundCheck", 0);
				}
				break;
			case CLASS_WITCHAVEN:
				if (!CheckInventory("PowerWTSpellFlyHack")) { TakeInventory("PowerWTSpellFly", 1); } // hexen
				break;
			case CLASS_HALFLIFE:
				if (CheckInventory("HLGaussCharged") && !CheckWeapon("Gauss Cannon"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("HLGaussCharged", 0);
				}

				TakeInventory("SamsaraHalfLifeSAWReloadCooldown", 1); // reload takes 1 tic each frame

				if (CheckInventory("HLEGONSoundActive") && !CheckWeapon("E.G.O.N."))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("HLEGONSoundActive", 0);
				}

				if (CheckInventory("HLXBowIsZoomed") && !CheckWeapon("HL Crossbow")) { SetInventory("HLXBowIsZoomed", 0); }

				TakeInventory("SamsaraHalfLifeSniperReloadCooldown", 1); // reload takes 1 tic each frame

				if (CheckInventory("HLSniperIsZoomed") && !CheckWeapon("M40A1 Sniper Rifle")) { SetInventory("HLSniperIsZoomed", 0); }

				if (!CheckWeapon("HLOPBarnacle"))
				{
					if (CheckInventory("SamsaraHalfLifeBarnacleGrappleSoundLoop"))
					{
						StopSound(0, CHAN_WEAPON);

						SetInventory("SamsaraHalfLifeBarnacleGrappleSoundLoop", 0);
					}

					SetInventory("HLOPBarnacleReleaseTether", 0);
					SetInventory("HLOPBarnacleLatchedTether", 0);
					SetInventory("HLOPBarnacleTetherActive", 0);
				}

				if (!CheckInventory("SamsaraHasInfiniteAmmo"))
				{
					if (CheckInventory("SamsaraHalfLifeSnarksAvailable") && !CheckWeapon("HL Squeaks") && !CheckInventory("HLSqueakAmmo"))
					{
						TakeInventory("HL Squeaks", 1);
						SetInventory("SamsaraHalfLifeSnarksAvailable", 0);
					}
				}

				halflifemode = GetUserCVar(pln, "samsara_cl_shephardmode");

                if (halflifemode > 1) { halflifemode = 1; }
                else if (halflifemode < 0) { halflifemode = 0; }

				if(halflifemode != previousvalue || CheckInventory("Samsara_ModeWeaponChange"))
				{
                    hasfist = CheckInventory("Crowbar");

                    SetInventory("Crowbar", 1);
                    if (!hasfist) { SetInventory("Crowbar", 0); }

                    if (halflifemode != previousvalue && CheckInventory("flashlightinventory")) { ACS_NamedExecuteWithResult("HL2677"); } // only take effect on setting change

					SetInventory("SamsaraModeCounter",halflifemode);
					TakeInventory("Samsara_ModeWeaponChange",1);
					SetInventory("HalfLifeOpposingForce", halflifemode);

					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, halflifemode, pln);
					previousvalue = halflifemode;
				}

                if (CheckInventory("HalfLifeOpposingForce"))
                {
                    loadoutmode = GetCVar("samsara_shephard_fallbackmelee") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_shephard_fallbackmelee") - 1 : GetUserCVar(pln, "samsara_cl_shephard_fallbackmelee");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutFallbackMelee", loadoutmode);

                    loadoutmode = GetCVar("samsara_shephard_slot1") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_shephard_slot1") - 1 : GetUserCVar(pln, "samsara_cl_shephard_slot1");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutSlot1", loadoutmode);

                    loadoutmode = GetCVar("samsara_shephard_slot3") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_shephard_slot3") - 1 : GetUserCVar(pln, "samsara_cl_shephard_slot3");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutSlot3", loadoutmode);

                    loadoutmode = GetCVar("samsara_shephard_slot5") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_shephard_slot5") - 1 : GetUserCVar(pln, "samsara_cl_shephard_slot5");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutSlot5", loadoutmode);

                    loadoutmode = GetCVar("samsara_shephard_slot6") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_shephard_slot6") - 1 : GetUserCVar(pln, "samsara_cl_shephard_slot6");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutSlot6", loadoutmode);

                    loadoutmode = GetCVar("samsara_shephard_slot7") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_shephard_slot7") - 1 : GetUserCVar(pln, "samsara_cl_shephard_slot7");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutSlot7", loadoutmode);

                    loadoutmode = GetCVar("samsara_shephard_unique1") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_shephard_unique1") - 1 : GetUserCVar(pln, "samsara_cl_shephard_unique1");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutUnique1", loadoutmode);

                    loadoutmode = GetCVar("samsara_shephard_unique2") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_shephard_unique2") - 1 : GetUserCVar(pln, "samsara_cl_shephard_unique2");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutUnique2", loadoutmode);

                    loadoutmode = GetCVar("samsara_shephard_unique3") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_shephard_unique3") - 1 : GetUserCVar(pln, "samsara_cl_shephard_unique3");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutUnique3", loadoutmode);
                } else {
                    loadoutmode = GetCVar("samsara_freeman_fallbackmelee") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_freeman_fallbackmelee") - 1 : GetUserCVar(pln, "samsara_cl_freeman_fallbackmelee");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutFallbackMelee", loadoutmode);

                    loadoutmode = GetCVar("samsara_freeman_slot1") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_freeman_slot1") - 1 : GetUserCVar(pln, "samsara_cl_freeman_slot1");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutSlot1", loadoutmode);

                    loadoutmode = GetCVar("samsara_freeman_slot3") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_freeman_slot3") - 1 : GetUserCVar(pln, "samsara_cl_freeman_slot3");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutSlot3", loadoutmode);

                    loadoutmode = GetCVar("samsara_freeman_slot5") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_freeman_slot5") - 1 : GetUserCVar(pln, "samsara_cl_freeman_slot5");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutSlot5", loadoutmode);

                    loadoutmode = GetCVar("samsara_freeman_slot6") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_freeman_slot6") - 1 : GetUserCVar(pln, "samsara_cl_freeman_slot6");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutSlot6", loadoutmode);

                    loadoutmode = GetCVar("samsara_freeman_slot7") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_freeman_slot7") - 1 : GetUserCVar(pln, "samsara_cl_freeman_slot7");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutSlot7", loadoutmode);

                    loadoutmode = GetCVar("samsara_freeman_unique1") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_freeman_unique1") - 1 : GetUserCVar(pln, "samsara_cl_freeman_unique1");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutUnique1", loadoutmode);

                    loadoutmode = GetCVar("samsara_freeman_unique2") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_freeman_unique2") - 1 : GetUserCVar(pln, "samsara_cl_freeman_unique2");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutUnique2", loadoutmode);

                    loadoutmode = GetCVar("samsara_freeman_unique3") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_freeman_unique3") - 1 : GetUserCVar(pln, "samsara_cl_freeman_unique3");

                    if (loadoutmode > 1) { loadoutmode = 1; }
                    else if (loadoutmode < 0) { loadoutmode = 0; }

                    SetInventory("SamsaraHalfLifeLoadoutUnique3", loadoutmode);
                }

                if (loadoutPrevValue[pln][SLOT_FIST] != CheckInventory("SamsaraHalfLifeLoadoutFallbackMelee"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_FIST, CheckInventory("SamsaraHalfLifeLoadoutFallbackMelee"), pln);
                    loadoutPrevValue[pln][SLOT_FIST] = CheckInventory("SamsaraHalfLifeLoadoutFallbackMelee");
                }

                if (loadoutPrevValue[pln][SLOT_CHAINSAW] != CheckInventory("SamsaraHalfLifeLoadoutSlot1"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_CHAINSAW, CheckInventory("SamsaraHalfLifeLoadoutSlot1"), pln);
                    loadoutPrevValue[pln][SLOT_CHAINSAW] = CheckInventory("SamsaraHalfLifeLoadoutSlot1");
                }

                if (loadoutPrevValue[pln][SLOT_SUPERSHOTGUN] != CheckInventory("SamsaraHalfLifeLoadoutSlot3"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_SUPERSHOTGUN, CheckInventory("SamsaraHalfLifeLoadoutSlot3"), pln);
                    loadoutPrevValue[pln][SLOT_SUPERSHOTGUN] = CheckInventory("SamsaraHalfLifeLoadoutSlot3");
                }

                if (loadoutPrevValue[pln][SLOT_ROCKETLAUNCHER] != CheckInventory("SamsaraHalfLifeLoadoutSlot5"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_ROCKETLAUNCHER, CheckInventory("SamsaraHalfLifeLoadoutSlot5"), pln);
                    loadoutPrevValue[pln][SLOT_ROCKETLAUNCHER] = CheckInventory("SamsaraHalfLifeLoadoutSlot5");
                }

                if (loadoutPrevValue[pln][SLOT_GRENADELAUNCHER] != CheckInventory("SamsaraHalfLifeLoadoutSlot5")) // netplay hack
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_GRENADELAUNCHER, CheckInventory("SamsaraHalfLifeLoadoutSlot5"), pln);
                    loadoutPrevValue[pln][SLOT_GRENADELAUNCHER] = CheckInventory("SamsaraHalfLifeLoadoutSlot5");
                }

                if (loadoutPrevValue[pln][SLOT_PLASMARIFLE] != CheckInventory("SamsaraHalfLifeLoadoutSlot6"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_PLASMARIFLE, CheckInventory("SamsaraHalfLifeLoadoutSlot6"), pln);
                    loadoutPrevValue[pln][SLOT_PLASMARIFLE] = CheckInventory("SamsaraHalfLifeLoadoutSlot6");
                }

                if (loadoutPrevValue[pln][SLOT_RAILGUN] != CheckInventory("SamsaraHalfLifeLoadoutSlot6")) // netplay hack
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_RAILGUN, CheckInventory("SamsaraHalfLifeLoadoutSlot6"), pln);
                    loadoutPrevValue[pln][SLOT_RAILGUN] = CheckInventory("SamsaraHalfLifeLoadoutSlot6");
                }

                if (loadoutPrevValue[pln][SLOT_BFG9000] != CheckInventory("SamsaraHalfLifeLoadoutSlot7"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_BFG9000, CheckInventory("SamsaraHalfLifeLoadoutSlot7"), pln);
                    loadoutPrevValue[pln][SLOT_BFG9000] = CheckInventory("SamsaraHalfLifeLoadoutSlot7");
                }

                if (loadoutPrevValue[pln][SLOT_BFG10K] != CheckInventory("SamsaraHalfLifeLoadoutSlot7")) // netplay hack
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_BFG10K, CheckInventory("SamsaraHalfLifeLoadoutSlot7"), pln);
                    loadoutPrevValue[pln][SLOT_BFG10K] = CheckInventory("SamsaraHalfLifeLoadoutSlot7");
                }

                if (loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE1] != CheckInventory("SamsaraHalfLifeLoadoutUnique1"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOTCOUNT - 1 - SLOT_UNIQUE1, CheckInventory("SamsaraHalfLifeLoadoutUnique1"), pln);
                    loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE1] = CheckInventory("SamsaraHalfLifeLoadoutUnique1");
                }

                if (loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE2] != CheckInventory("SamsaraHalfLifeLoadoutUnique2"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOTCOUNT - 1 - SLOT_UNIQUE2, CheckInventory("SamsaraHalfLifeLoadoutUnique2"), pln);
                    loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE2] = CheckInventory("SamsaraHalfLifeLoadoutUnique2");
                }

                if (loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE3] != CheckInventory("SamsaraHalfLifeLoadoutUnique3"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOTCOUNT - 1 - SLOT_UNIQUE3, CheckInventory("SamsaraHalfLifeLoadoutUnique3"), pln);
                    loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE3] = CheckInventory("SamsaraHalfLifeLoadoutUnique3");
                }

                if (CheckInventory("Crowbar") || CheckInventory("Combat Knife"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        SetInventory("Crowbar", 1);
                        SetInventory("Combat Knife", 1);
                    } else {
                        if (!CheckInventory("SamsaraHalfLifeLoadoutFallbackMelee"))
                        {
                            SetInventory("Crowbar", 1);

                            if (CheckWeapon("Combat Knife")) { SetWeapon("Crowbar"); }

                            SetInventory("Combat Knife", 0);
                        } else if (CheckInventory("SamsaraHalfLifeLoadoutFallbackMelee")) {
                            SetInventory("Combat Knife", 1);

                            if (CheckWeapon("Crowbar")) { SetWeapon("Combat Knife"); }

                            SetInventory("Crowbar", 0);
                        }
                    }
                }

                if (CheckInventory("Hornetgun") || CheckInventory("Shock Roach"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        SetInventory("Hornetgun", 1);
                        SetInventory("Shock Roach", 1);
                    } else {
                        if (!CheckInventory("SamsaraHalfLifeLoadoutSlot1"))
                        {
                            SetInventory("Hornetgun", 1);

                            if (CheckWeapon("Shock Roach")) { SetWeapon("Hornetgun"); }

                            SetInventory("Shock Roach", 0);
                        } else if (CheckInventory("SamsaraHalfLifeLoadoutSlot1")) {
                            SetInventory("Shock Roach", 1);

                            if (CheckWeapon("Hornetgun")) { SetWeapon("Shock Roach"); }

                            SetInventory("Hornetgun", 0);
                        }
                    }
                }

                if (CheckInventory(".357 Python") || CheckInventory("Desert Eagle"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        SetInventory(".357 Python", 1);
                        SetInventory("Desert Eagle", 1);
                    } else {
                        if (!CheckInventory("SamsaraHalfLifeLoadoutSlot3"))
                        {
                            SetInventory(".357 Python", 1);

                            if (CheckWeapon("Desert Eagle")) { SetWeapon(".357 Python"); }

                            SetInventory("Desert Eagle", 0);
                        } else if (CheckInventory("SamsaraHalfLifeLoadoutSlot3")) {
                            SetInventory("Desert Eagle", 1);

                            if (CheckWeapon(".357 Python")) { SetWeapon("Desert Eagle"); }

                            SetInventory(".357 Python", 0);
                        }
                    }
                }

                if (CheckInventory(" RPG ") || CheckInventory("Spore Launcher"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        SetInventory(" RPG ", 1);
                        SetInventory("Spore Launcher", 1);
                    } else {
                        if (!CheckInventory("SamsaraHalfLifeLoadoutSlot5"))
                        {
                            SetInventory(" RPG ", 1);

                            if (CheckWeapon("Spore Launcher")) { SetWeapon(" RPG "); }

                            SetInventory("Spore Launcher", 0);
                        } else if (CheckInventory("SamsaraHalfLifeLoadoutSlot5")) {
                            SetInventory("Spore Launcher", 1);

                            if (CheckWeapon(" RPG ")) { SetWeapon("Spore Launcher"); }

                            SetInventory(" RPG ", 0);
                        }
                    }
                }

                if (CheckInventory("Gauss Cannon") || CheckInventory("M249 Squad Automatic Weapon"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        SetInventory("Gauss Cannon", 1);
                        SetInventory("M249 Squad Automatic Weapon", 1);
                    } else {
                        if (!CheckInventory("SamsaraHalfLifeLoadoutSlot6"))
                        {
                            SetInventory("Gauss Cannon", 1);

                            if (CheckWeapon("M249 Squad Automatic Weapon")) { SetWeapon("Gauss Cannon"); }

                            SetInventory("M249 Squad Automatic Weapon", 0);
                        } else if (CheckInventory("SamsaraHalfLifeLoadoutSlot6")) {
                            SetInventory("M249 Squad Automatic Weapon", 1);

                            if (CheckWeapon("Gauss Cannon")) { SetWeapon("M249 Squad Automatic Weapon"); }

                            SetInventory("Gauss Cannon", 0);
                        }
                    }
                }

                if (CheckInventory("E.G.O.N.") || CheckInventory("Displacer Cannon"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        SetInventory("E.G.O.N.", 1);
                        SetInventory("Displacer Cannon", 1);
                    } else {
                        if (!CheckInventory("SamsaraHalfLifeLoadoutSlot7"))
                        {
                            SetInventory("E.G.O.N.", 1);

                            if (CheckWeapon("Displacer Cannon")) { SetWeapon("E.G.O.N."); }

                            SetInventory("Displacer Cannon", 0);
                        } else if (CheckInventory("SamsaraHalfLifeLoadoutSlot7")) {
                            SetInventory("Displacer Cannon", 1);

                            if (CheckWeapon("E.G.O.N.")) { SetWeapon("Displacer Cannon"); }

                            SetInventory("E.G.O.N.", 0);
                        }
                    }
                }

                if (CheckInventory("SamsaraHalfLifeAcquiredUnique1"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        if (CheckInventory("SamsaraHalfLifeSnarksAvailable")) { SetInventory("HL Squeaks", 1); }
                        SetInventory("Mk 2 Grenades", 1);
                    } else {
                        if (!CheckInventory("SamsaraHalfLifeLoadoutUnique1"))
                        {
                            if (CheckInventory("SamsaraHalfLifeSnarksAvailable")) { SetInventory("HL Squeaks", 1); }

                            if (CheckWeapon("Mk 2 Grenades") && CheckInventory("HL Squeaks")) { SetWeapon("HL Squeaks"); }

                            SetInventory("Mk 2 Grenades", 0);
                        } else if (CheckInventory("SamsaraHalfLifeLoadoutUnique1")) {
                            SetInventory("Mk 2 Grenades", 1);

                            if (CheckWeapon("HL Squeaks")) { SetWeapon("Mk 2 Grenades"); }

                            SetInventory("HL Squeaks", 0);
                        }
                    }
                }

                if (CheckInventory("HL Crossbow") || CheckInventory("M40A1 Sniper Rifle"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        SetInventory("HL Crossbow", 1);
                        SetInventory("M40A1 Sniper Rifle", 1);
                    } else {
                        if (!CheckInventory("SamsaraHalfLifeLoadoutUnique2"))
                        {
                            SetInventory("HL Crossbow", 1);

                            if (CheckWeapon("M40A1 Sniper Rifle")) { SetWeapon("HL Crossbow"); }

                            SetInventory("M40A1 Sniper Rifle", 0);
                        } else if (CheckInventory("SamsaraHalfLifeLoadoutUnique2")) {
                            SetInventory("M40A1 Sniper Rifle", 1);

                            if (CheckWeapon("HL Crossbow")) { SetWeapon("M40A1 Sniper Rifle"); }

                            SetInventory("HL Crossbow", 0);
                        }
                    }
                }

                if (CheckInventory("HLOPHasBarnacleLongJump") && !GetCVar("samsara_banjetpack"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        SetInventory("SamsaraHalfLifeCanLongJump", 1);
                        SetInventory("HLOPBarnacle", 1);
                    } else {
                        if (!CheckInventory("SamsaraHalfLifeLoadoutUnique3"))
                        {
                            SetInventory("SamsaraHalfLifeCanLongJump", 1);

                            if (CheckInventory("SamsaraHalfLifeBarnacleGrappleSoundLoop"))
                            {
                                StopSound(0, CHAN_WEAPON);

                                SetInventory("SamsaraHalfLifeBarnacleGrappleSoundLoop", 0);
                            }

                            SetInventory("HLOPBarnacleReleaseTether", 0);
                            SetInventory("HLOPBarnacleLatchedTether", 0);
                            SetInventory("HLOPBarnacleTetherActive", 0);

                            SetInventory("HLOPBarnacle", 0);
                        } else if (CheckInventory("SamsaraHalfLifeLoadoutUnique3")) {
                            SetInventory("HLOPBarnacle", 1);

                            SetInventory("SamsaraHalfLifeCanLongJump", 0);
                        }
                    }
                } else {
                    SetInventory("SamsaraHalfLifeCanLongJump", 0);

                    if (CheckInventory("SamsaraHalfLifeBarnacleGrappleSoundLoop"))
                    {
                        StopSound(0, CHAN_WEAPON);

                        SetInventory("SamsaraHalfLifeBarnacleGrappleSoundLoop", 0);
                    }

                    SetInventory("HLOPBarnacleReleaseTether", 0);
                    SetInventory("HLOPBarnacleLatchedTether", 0);
                    SetInventory("HLOPBarnacleTetherActive", 0);

                    SetInventory("HLOPBarnacle", 0);
                }
				break;

			case CLASS_SW:
				if (CheckInventory("SWZoomed") && !CheckWeapon(" SWRailgun ")) { SetInventory("SWZoomed", 0); }
				break;

            case CLASS_JON:
                if (CheckInventory("SamsaraPowerSlaveFlamethrowerFiringSoundCheck") && !CheckWeapon("PSFlamethrower"))
                {
                    StopSound(0, CHAN_WEAPON);

                    SetInventory("SamsaraPowerSlaveFlamethrowerFiringSoundCheck", 0);
                }
                break;

			case CLASS_RR:
				if (CheckInventory("RZoomed") && !CheckWeapon(" Hunting Rifle With Scope ")) { SetInventory("RZoomed", 0); }

				if (CheckInventory(" RR Hunting Crossbow "))
				{
					if (CheckInventory(" Dyn 'O' Mites "))
					{
						if (CheckInventory("RocketAmmo") || CheckInventory("SamsaraHasInfiniteAmmo"))
						{
							if (!CheckInventory(" RR Dynomite Crossbow ")) { GiveInventory(" RR Dynomite Crossbow ", 1); }
						} else {
							if (CheckInventory(" RR Dynomite Crossbow ") && !CheckWeapon(" RR Dynomite Crossbow ")) { TakeInventory(" RR Dynomite Crossbow ", 1); }
						}
					} else {
						if (CheckInventory(" RR Dynomite Crossbow ")) { TakeInventory(" RR Dynomite Crossbow ", 1); }
					}

					if (CheckInventory("ChickenAmmo") || CheckInventory("SamsaraHasInfiniteAmmo"))
					{
						if (!CheckInventory(" Chicken Crossbow ")) { GiveInventory(" Chicken Crossbow ", 1); }
					} else {
						if (CheckInventory(" Chicken Crossbow ") && !CheckWeapon(" Chicken Crossbow ")) { TakeInventory(" Chicken Crossbow ", 1); }
					}
				} else {
					if (CheckInventory(" RR Dynomite Crossbow ")) { TakeInventory(" RR Dynomite Crossbow ", 1); }
					if (CheckInventory(" Chicken Crossbow ")) { TakeInventory(" Chicken Crossbow ", 1); }
				}
				break;

			case CLASS_BITTERMAN:
                SetInventory("SamsaraAlternateSoundToken", GetUserCVar(pln, "samsara_cl_quake2sounds"));

				if (CheckInventory("SamsaraQuake2ChainfistLoopSoundCheck") && !CheckWeapon("Q2Chainfist"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraQuake2ChainfistLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2ChaingunLoopSoundCheck") && !CheckWeapon("Q2Chaingun"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake2ChaingunLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2PhalanxLoopSoundCheck") && !CheckWeapon("Q2Phalanx"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake2PhalanxLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2HyperBlasterLoopSoundCheck") && !CheckWeapon("Q2HyperBlaster"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake2HyperBlasterLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2PlasmaBeamLoopSoundCheck") && !CheckWeapon("Q2PlasmaBeam"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraQuake2PlasmaBeamLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2BFG10KLoopSoundCheck") && !CheckWeapon("Q2BFG10K"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake2BFG10KLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2TrapLoopSoundCheck") && !CheckWeapon("Q2Trap"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraQuake2TrapLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2IonRipperLoopSoundCheck") && !CheckWeapon("Q2IonRipper"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake2IonRipperLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2RailgunLoopSoundCheck") && !CheckWeapon("Q2Railgun"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake2RailgunLoopSoundCheck", 0);
				}
				break;

			case CLASS_BOND:
				SetInventory("SamsaraAlternateSoundToken", GetUserCVar(pln, "samsara_cl_goldeneyesounds"));

                loadoutmode = GetCVar("samsara_bond_fallbackranged") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_bond_fallbackranged") - 1 : GetUserCVar(pln, "samsara_cl_bond_fallbackranged");

                if (loadoutmode > 3) { loadoutmode = 3; }
                else if (loadoutmode < 0) { loadoutmode = 0; }

                SetInventory("SamsaraGoldenEyeLoadoutFallbackRanged", loadoutmode);

                loadoutmode = GetCVar("samsara_bond_slot3") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_bond_slot3") - 1 : GetUserCVar(pln, "samsara_cl_bond_slot3");

                if (loadoutmode > 1) { loadoutmode = 1; }
                else if (loadoutmode < 0) { loadoutmode = 0; }

                SetInventory("SamsaraGoldenEyeLoadoutSlot3", loadoutmode);

                loadoutmode = GetCVar("samsara_bond_slot6s") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_bond_slot6s") - 1 : GetUserCVar(pln, "samsara_cl_bond_slot6s");

                if (loadoutmode > 2) { loadoutmode = 2; }
                else if (loadoutmode < 0) { loadoutmode = 0; }

                SetInventory("SamsaraGoldenEyeLoadoutSlot6S", loadoutmode);

                loadoutmode = GetCVar("samsara_bond_unique2") > 0 && !CheckInventory("SamsaraHasAllLoadoutEquipment") ? GetCVar("samsara_bond_unique2") - 1 : GetUserCVar(pln, "samsara_cl_bond_unique2");

                if (loadoutmode > 2) { loadoutmode = 2; }
                else if (loadoutmode < 0) { loadoutmode = 0; }

                SetInventory("SamsaraGoldenEyeLoadoutUnique2", loadoutmode);

                if (loadoutPrevValue[pln][SLOT_PISTOL] != CheckInventory("SamsaraGoldenEyeLoadoutFallbackRanged"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_PISTOL, CheckInventory("SamsaraGoldenEyeLoadoutFallbackRanged"), pln);
                    loadoutPrevValue[pln][SLOT_PISTOL] = CheckInventory("SamsaraGoldenEyeLoadoutFallbackRanged");
                }

                if (loadoutPrevValue[pln][SLOT_SUPERSHOTGUN] != CheckInventory("SamsaraGoldenEyeLoadoutSlot3"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_SUPERSHOTGUN, CheckInventory("SamsaraGoldenEyeLoadoutSlot3"), pln);
                    loadoutPrevValue[pln][SLOT_SUPERSHOTGUN] = CheckInventory("SamsaraGoldenEyeLoadoutSlot3");
                }

                if (loadoutPrevValue[pln][SLOT_RAILGUN] != CheckInventory("SamsaraGoldenEyeLoadoutSlot6S"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_RAILGUN, CheckInventory("SamsaraGoldenEyeLoadoutSlot6S"), pln);
                    loadoutPrevValue[pln][SLOT_RAILGUN] = CheckInventory("SamsaraGoldenEyeLoadoutSlot6S");
                }

                if (loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE2] != CheckInventory("SamsaraGoldenEyeLoadoutUnique2"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOTCOUNT - 1 - SLOT_UNIQUE2, CheckInventory("SamsaraGoldenEyeLoadoutUnique2"), pln);
                    loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE2] = CheckInventory("SamsaraGoldenEyeLoadoutUnique2");
                }

                if (CheckInventory("Goldeneye_PP7Silenced") || CheckInventory("Goldeneye_Klobb") || CheckInventory("Goldeneye_PP7SpecialIssue") ||
                    CheckInventory("Goldeneye_DD44"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        SetInventory("Goldeneye_PP7Silenced", 1);
                        SetInventory("Goldeneye_Klobb", 1);
                        SetInventory("Goldeneye_PP7SpecialIssue", 1);
                        SetInventory("Goldeneye_DD44", 1);
                    } else {
                        if (!CheckInventory("SamsaraGoldenEyeLoadoutFallbackRanged"))
                        {
                            SetInventory("Goldeneye_PP7Silenced", 1);

                            if (CheckWeapon("Goldeneye_Klobb") || CheckWeapon("Goldeneye_PP7SpecialIssue") || CheckWeapon("Goldeneye_DD44") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Goldeneye_PP7Silenced"); }

                            SetInventory("Goldeneye_Klobb", 0);
                            SetInventory("Goldeneye_PP7SpecialIssue", 0);
                            SetInventory("Goldeneye_DD44", 0);
                        } else if (CheckInventory("SamsaraGoldenEyeLoadoutFallbackRanged") == 1) {
                            SetInventory("Goldeneye_Klobb", 1);

                            if (CheckWeapon("Goldeneye_PP7Silenced") || CheckWeapon("Goldeneye_PP7SpecialIssue") || CheckWeapon("Goldeneye_DD44") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Goldeneye_Klobb"); }

                            SetInventory("Goldeneye_PP7Silenced", 0);
                            SetInventory("Goldeneye_PP7SpecialIssue", 0);
                            SetInventory("Goldeneye_DD44", 0);
                        } else if (CheckInventory("SamsaraGoldenEyeLoadoutFallbackRanged") == 2) {
                            SetInventory("Goldeneye_PP7SpecialIssue", 1);

                            if (CheckWeapon("Goldeneye_PP7Silenced") || CheckWeapon("Goldeneye_Klobb") || CheckWeapon("Goldeneye_DD44") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Goldeneye_PP7SpecialIssue"); }

                            SetInventory("Goldeneye_PP7Silenced", 0);
                            SetInventory("Goldeneye_Klobb", 0);
                            SetInventory("Goldeneye_DD44", 0);
                        } else if (CheckInventory("SamsaraGoldenEyeLoadoutFallbackRanged") >= 3) {
                            SetInventory("Goldeneye_DD44", 1);

                            if (CheckWeapon("Goldeneye_PP7Silenced") || CheckWeapon("Goldeneye_Klobb") || CheckWeapon("Goldeneye_PP7SpecialIssue") || CheckInventory("SamsaraPistolStartMapChangeHack")) { SetWeapon("Goldeneye_DD44"); }

                            SetInventory("Goldeneye_PP7Silenced", 0);
                            SetInventory("Goldeneye_Klobb", 0);
                            SetInventory("Goldeneye_PP7SpecialIssue", 0);
                        }
                    }
                }

                if (CheckInventory("Goldeneye_AutoShotgun") || CheckInventory("Goldeneye_Shotgun"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        SetInventory("Goldeneye_AutoShotgun", 1);
                        SetInventory("Goldeneye_Shotgun", 1);
                    } else {
                        if (!CheckInventory("SamsaraGoldenEyeLoadoutSlot3"))
                        {
                            SetInventory("Goldeneye_AutoShotgun", 1);

                            if (CheckWeapon("Goldeneye_Shotgun")) { SetWeapon("Goldeneye_AutoShotgun"); }

                            SetInventory("Goldeneye_Shotgun", 0);
                        } else if (CheckInventory("SamsaraGoldenEyeLoadoutSlot3")) {
                            SetInventory("Goldeneye_Shotgun", 1);

                            if (CheckWeapon("Goldeneye_AutoShotgun")) { SetWeapon("Goldeneye_Shotgun"); }

                            SetInventory("Goldeneye_AutoShotgun", 0);
                        }
                    }
                }

                if (CheckInventory("Goldeneye_Cougar") || CheckInventory("Goldeneye_SilverPP7") || CheckInventory("Goldeneye_ArabahViper"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        SetInventory("Goldeneye_Cougar", 1);
                        SetInventory("Goldeneye_SilverPP7", 1);
                        SetInventory("Goldeneye_ArabahViper", 1);
                    } else {
                        if (!CheckInventory("SamsaraGoldenEyeLoadoutSlot6S"))
                        {
                            SetInventory("Goldeneye_Cougar", 1);

                            if (CheckWeapon("Goldeneye_SilverPP7") || CheckWeapon("Goldeneye_ArabahViper")) { SetWeapon("Goldeneye_Cougar"); }

                            SetInventory("Goldeneye_SilverPP7", 0);
                            SetInventory("Goldeneye_ArabahViper", 0);
                        } else if (CheckInventory("SamsaraGoldenEyeLoadoutSlot6S") == 1) {
                            SetInventory("Goldeneye_SilverPP7", 1);

                            if (CheckWeapon("Goldeneye_Cougar") || CheckWeapon("Goldeneye_ArabahViper")) { SetWeapon("Goldeneye_SilverPP7"); }

                            SetInventory("Goldeneye_Cougar", 0);
                            SetInventory("Goldeneye_ArabahViper", 0);
                        } else if (CheckInventory("SamsaraGoldenEyeLoadoutSlot6S") >= 2) {
                            SetInventory("Goldeneye_ArabahViper", 1);

                            if (CheckWeapon("Goldeneye_Cougar") || CheckWeapon("Goldeneye_SilverPP7")) { SetWeapon("Goldeneye_ArabahViper"); }

                            SetInventory("Goldeneye_Cougar", 0);
                            SetInventory("Goldeneye_SilverPP7", 0);
                        }
                    }
                }

                if (CheckInventory("Goldeneye_SilencedD5K") || CheckInventory("Goldeneye_ZMG") || CheckInventory("Goldeneye_D5KDeutsche"))
                {
                    if (CheckInventory("SamsaraHasAllLoadoutEquipment"))
                    {
                        SetInventory("Goldeneye_SilencedD5K", 1);
                        SetInventory("Goldeneye_ZMG", 1);
                        SetInventory("Goldeneye_D5KDeutsche", 1);
                    } else {
                        if (!CheckInventory("SamsaraGoldenEyeLoadoutUnique2"))
                        {
                            SetInventory("Goldeneye_SilencedD5K", 1);

                            if (CheckWeapon("Goldeneye_ZMG") || CheckWeapon("Goldeneye_D5KDeutsche")) { SetWeapon("Goldeneye_SilencedD5K"); }

                            SetInventory("Goldeneye_ZMG", 0);
                            SetInventory("Goldeneye_D5KDeutsche", 0);
                        } else if (CheckInventory("SamsaraGoldenEyeLoadoutUnique2") == 1) {
                            SetInventory("Goldeneye_ZMG", 1);

                            if (CheckWeapon("Goldeneye_SilencedD5K") || CheckWeapon("Goldeneye_D5KDeutsche")) { SetWeapon("Goldeneye_ZMG"); }

                            SetInventory("Goldeneye_SilencedD5K", 0);
                            SetInventory("Goldeneye_D5KDeutsche", 0);
                        } else if (CheckInventory("SamsaraGoldenEyeLoadoutUnique2") >= 2) {
                            SetInventory("Goldeneye_D5KDeutsche", 1);

                            if (CheckWeapon("Goldeneye_SilencedD5K") || CheckWeapon("Goldeneye_ZMG")) { SetWeapon("Goldeneye_D5KDeutsche"); }

                            SetInventory("Goldeneye_SilencedD5K", 0);
                            SetInventory("Goldeneye_ZMG", 0);
                        }
                    }
                }

				if (CheckInventory("BondWatchDetonatorToken") && !CheckWeapon("Goldeneye_WatchDetonator")) { SetInventory("BondWatchDetonatorToken", 0); }

                if (CheckInventory("Goldeneye_Slapper") &&
                    (CheckInventory("Goldeneye_PP7Silenced") || CheckInventory("Goldeneye_Klobb") || CheckInventory("Goldeneye_PP7SpecialIssue") ||
                    CheckInventory("Goldeneye_DD44")) &&
                    CheckInventory("Goldeneye_ThrowingKnives") && CheckInventory("Goldeneye_KF7Soviet") &&
                    (CheckInventory("Goldeneye_AutoShotgun") || CheckInventory("Goldeneye_Shotgun")) &&
                    CheckInventory("Goldeneye_AR33") && CheckInventory("Goldeneye_Phantom") && CheckInventory("Goldeneye_RocketLauncher") &&
                    CheckInventory("Goldeneye_GrenadeLauncher") && CheckInventory("Goldeneye_RCP90") &&
                    (CheckInventory("Goldeneye_Cougar") || CheckInventory("Goldeneye_SilverPP7") || CheckInventory("Goldeneye_ArabahViper")) &&
                    CheckInventory("Goldeneye_Moonraker") && CheckInventory("Goldeneye_GoldenGun") && CheckInventory("Goldeneye_SniperRifle") &&
                    (CheckInventory("Goldeneye_SilencedD5K") || CheckInventory("Goldeneye_ZMG") || CheckInventory("Goldeneye_D5KDeutsche")) &&
                    (CheckInventory("Goldeneye_WatchMagnet") || CheckInventory("Goldeneye_WatchLaser") || CheckInventory("Goldeneye_WatchDetonator") ||
                    CheckInventory("Goldeneye_TimedMines") || CheckInventory("Goldeneye_ProximityMines") || CheckInventory("Goldeneye_RemoteMines")) &&
                    !CheckInventory("Goldeneye_GoldPP7"))
                {
                    GiveInventory("Goldeneye_GoldPP7", 1);
                    dualpickupcheck++;
                }

                if (CheckInventory("Goldeneye_PP7DualToken") && CheckInventory("Goldeneye_ThrowingKnivesDualToken") && CheckInventory("Goldeneye_KF7DualToken") &&
                    CheckInventory("Goldeneye_AutoShotgunDualToken") && CheckInventory("Goldeneye_AR33DualToken") && CheckInventory("Goldeneye_PhantomDualToken") &&
                    CheckInventory("Goldeneye_RocketLauncherDualToken") && CheckInventory("Goldeneye_GrenadeLauncherDualToken") && CheckInventory("Goldeneye_RCP90DualToken") &&
                    CheckInventory("Goldeneye_CougarDualToken") && CheckInventory("Goldeneye_LaserDualToken") && CheckInventory("Goldeneye_GoldenGunDualToken") &&
                    CheckInventory("Goldeneye_SniperDualToken") && CheckInventory("Goldeneye_D5KDualToken") && CheckInventory("Goldeneye_GoldPP7") &&
                    !CheckInventory("Goldeneye_GoldPP7DualToken"))
                {
                    GiveInventory("Goldeneye_GoldPP7", 1); // ammo
                    GiveInventory("Goldeneye_GoldPP7DualToken", 1);
                    dualpickupcheck += 2;
                }

                if (dualpickupcheck > 0)
                {
                    ACS_NamedExecuteWithResult("SamsaraSpecialPickupDisplayNetplayHack", 3 + dualpickupcheck - 1);
                    dualpickupcheck = 0;
                }
				break;

			case CLASS_CATACOMB:
				SetInventory("Catacomb_WeaponMode", GetUserCVar(pln, "samsara_cl_pettonweapons"));

                if (CheckInventory("Catacomb_Waves")) { GiveInventory("GotWeapon0", 1); }
                if (CheckInventory("Catacomb_XTerminators")) { GiveInventory("GotWeapon2", 1); }
                if (CheckInventory("Catacomb_Bursts")) { GiveInventory("GotWeapon3", 1); }
                if (CheckInventory("Catacomb_Zappers")) { GiveInventory("GotWeapon4", 1); }
                if (CheckInventory("Catacomb_Nukes")) { GiveInventory("GotWeapon5", 1); }
                if (CheckInventory("Catacomb_Bolts")) { GiveInventory("GotWeapon6", 1); }

				if (CheckInventory("Catacomb_Waves"))
				{
					if (!CheckInventory("Catacomb_WavesQuickSpell")) { GiveInventory("Catacomb_WavesQuickSpell", 1); }
				} else {
					if (CheckInventory("Catacomb_WavesQuickSpell") && !CheckWeapon("Catacomb_WavesQuickSpell") && !CheckInventory("SamsaraHasInfiniteAmmo")) { TakeInventory("Catacomb_WavesQuickSpell", 1); }
				}

				if (CheckInventory("Catacomb_XTerminators"))
				{
					if (!CheckInventory("Catacomb_XTerminatorsQuickSpell")) { GiveInventory("Catacomb_XTerminatorsQuickSpell", 1); }
				} else {
					if (CheckInventory("Catacomb_XTerminatorsQuickSpell") && !CheckWeapon("Catacomb_XTerminatorsQuickSpell") && !CheckInventory("SamsaraHasInfiniteAmmo")) { TakeInventory("Catacomb_XTerminatorsQuickSpell", 1); }
				}

				if (CheckInventory("Catacomb_Bursts"))
				{
					if (!CheckInventory("Catacomb_BurstsQuickSpell")) { GiveInventory("Catacomb_BurstsQuickSpell", 1); }
				} else {
					if (CheckInventory("Catacomb_BurstsQuickSpell") && !CheckWeapon("Catacomb_BurstsQuickSpell") && !CheckInventory("SamsaraHasInfiniteAmmo")) { TakeInventory("Catacomb_BurstsQuickSpell", 1); }
				}

				if (CheckInventory("Catacomb_Zappers"))
				{
					if (!CheckInventory("Catacomb_ZappersQuickSpell")) { GiveInventory("Catacomb_ZappersQuickSpell", 1); }
				} else {
					if (CheckInventory("Catacomb_ZappersQuickSpell") && !CheckWeapon("Catacomb_ZappersQuickSpell") && !CheckInventory("SamsaraHasInfiniteAmmo")) { TakeInventory("Catacomb_ZappersQuickSpell", 1); }
				}

				if (CheckInventory("Catacomb_Nukes"))
				{
					if (!CheckInventory("Catacomb_NukesQuickSpell")) { GiveInventory("Catacomb_NukesQuickSpell", 1); }
				} else {
					if (CheckInventory("Catacomb_NukesQuickSpell") && !CheckWeapon("Catacomb_NukesQuickSpell") && !CheckInventory("SamsaraHasInfiniteAmmo")) { TakeInventory("Catacomb_NukesQuickSpell", 1); }
				}

				if (CheckInventory("Catacomb_Bolts"))
				{
					if (!CheckInventory("Catacomb_BoltsQuickSpell")) { GiveInventory("Catacomb_BoltsQuickSpell", 1); }
				} else {
					if (CheckInventory("Catacomb_BoltsQuickSpell") && !CheckWeapon("Catacomb_BoltsQuickSpell") && !CheckInventory("SamsaraHasInfiniteAmmo")) { TakeInventory("Catacomb_BoltsQuickSpell", 1); }
				}
				break;

			case CLASS_PAINKILLER:
				if (CheckInventory("Painkiller_Zoomed") && !CheckWeapon("Painkiller_Boltgun")) { SetInventory("Painkiller_Zoomed", 0); }

				if (CheckInventory("SamsaraPainkillerPainkillerPrimaryFiringSoundCheck") && !CheckWeapon("Painkiller_Painkiller"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraPainkillerPainkillerPrimaryFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraPainkillerRifleSecondaryFiringSoundCheck") && !CheckWeapon("Painkiller_Rifle"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraPainkillerRifleSecondaryFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraPainkillerRocketLauncherSecondaryFiringSoundCheck") && !CheckWeapon("Painkiller_RocketLauncher"))
				{
					StopSound(0, CHAN_5);
					StopSound(0, CHAN_6);

					SetInventory("SamsaraPainkillerRocketLauncherSecondaryFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraPainkillerElectrodriverSecondaryFiringSoundCheck") && !CheckWeapon("Painkiller_Electrodriver"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraPainkillerElectrodriverSecondaryFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraPainkillerDemonMorphLoopSoundCheck") && !CheckWeapon("Painkiller_DemonMorph"))
				{
					StopSound(0, CHAN_7);

					SetInventory("SamsaraPainkillerDemonMorphLoopSoundCheck", 0);
				}
				break;

			case CLASS_UNREAL:
				SetInventory("SamsaraAlternateSoundToken", GetUserCVar(pln, "samsara_cl_unrealsounds"));

				if (CheckInventory("Unreal_ZoomedIn") && !CheckWeapon("Unreal_Rifle")) { SetInventory("Unreal_ZoomedIn", 0); }

				if (CheckInventory("SamsaraUnrealStingerPrimaryFiringSoundCheck") && !CheckWeapon("Unreal_Stinger"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraUnrealStingerPrimaryFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraUnrealMinigunFiringSoundCheck") && !CheckWeapon("Unreal_Minigun"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraUnrealMinigunFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraUnrealGESBioRifleSecondaryChargingSoundCheck") && !CheckWeapon("Unreal_GESBioRifle"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraUnrealGESBioRifleSecondaryChargingSoundCheck", 0);
				}

				if (CheckInventory("SamsaraUnrealCARiflePrimaryFiringSoundCheck") && !CheckWeapon("Unreal_Duster"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraUnrealCARiflePrimaryFiringSoundCheck", 0);
				}

				TakeInventory("SamsaraUnrealCARifleSecondaryCooldown", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));

				if (CheckWeapon("Unreal_Duster")) { GiveInventory("SamsaraUnrealCARifleAltFire", 1); }
				break;

			case CLASS_RTCW:
				SetInventory("SamsaraAlternateSoundToken", GetUserCVar(pln, "samsara_cl_rtcwsounds"));

				if (CheckInventory("RTCW_Scoped") && !CheckWeapon("RTCW_Mauser") && !CheckWeapon("RTCW_FG42") && !CheckWeapon("RTCW_Snooper")) { SetInventory("RTCW_Scoped", 0); }

				if (!CheckWeapon("RTCW_Flamethrower"))
				{
					if (CheckInventory("SamsaraRTCWFlamethrowerFiringSoundCheck"))
					{
						StopSound(0, CHAN_WEAPON);

						SetInventory("SamsaraRTCWFlamethrowerFiringSoundCheck", 0);
					}

					if (CheckInventory("SamsaraRTCWFlamethrowerNozzleIdleSoundCheck"))
					{
						StopSound(0, CHAN_6);

						SetInventory("SamsaraRTCWFlamethrowerNozzleIdleSoundCheck", 0);
					}
				}

                if (CheckInventory("RTCW_HasAlliedCrate"))
                {
                    // flipped because order is handled the opposite in hexen (this also affects netplay OUTSIDE of hexen ???)
                    if ((IsNetworkGame() && GetCVar("samsara_currentgame") != GAME_HEXEN) || GetCVar("samsara_currentgame") == GAME_HEXEN)
                    {
                        if (CheckInventory("RTCW_StG44") && !CheckInventory("RTCW_BAR")) { ACS_NamedExecuteWithResult("SamsaraSpecialPickupDisplayNetplayHack", 6); }
                        if (CheckInventory("RTCW_K43") && !CheckInventory("RTCW_M1Garand")) { ACS_NamedExecuteWithResult("SamsaraSpecialPickupDisplayNetplayHack", 7); }
                        if (CheckInventory("RTCW_MG42") && !CheckInventory("RTCW_Browning")) { ACS_NamedExecuteWithResult("SamsaraSpecialPickupDisplayNetplayHack", 8); }
                    } else {
                        if (CheckInventory("RTCW_MG42") && !CheckInventory("RTCW_Browning")) { ACS_NamedExecuteWithResult("SamsaraSpecialPickupDisplayNetplayHack", 8); }
                        if (CheckInventory("RTCW_K43") && !CheckInventory("RTCW_M1Garand")) { ACS_NamedExecuteWithResult("SamsaraSpecialPickupDisplayNetplayHack", 7); }
                        if (CheckInventory("RTCW_StG44") && !CheckInventory("RTCW_BAR")) { ACS_NamedExecuteWithResult("SamsaraSpecialPickupDisplayNetplayHack", 6); }
                    }

                    if (CheckInventory("RTCW_StG44") && !CheckInventory("RTCW_BAR")) { GiveInventory("RTCW_BAR", 1); }
                    if (CheckInventory("RTCW_K43") && !CheckInventory("RTCW_M1Garand")) { GiveInventory("RTCW_M1Garand", 1); }
                    if (CheckInventory("RTCW_MG42") && !CheckInventory("RTCW_Browning")) { GiveInventory("RTCW_Browning", 1); }
                }
				break;

			case CLASS_QUAKE3:
				SetInventory("SamsaraAlternateSoundToken", GetUserCVar(pln, "samsara_cl_quake3sounds"));

				if (CheckInventory("SamsaraQuake3GauntletFiringSoundCheck") && !CheckWeapon("Q3Gauntlet"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake3GauntletFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake3LightningGunLoopSoundCheck") && !CheckWeapon("Q3LightningGun"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake3LightningGunLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake3BFG10KLoopSoundCheck") && !CheckWeapon("Q3BFG10K"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake3BFG10KLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake3ChaingunLoopSoundCheck") && !CheckWeapon("Q3Chaingun"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake3ChaingunLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake3RailgunLoopSoundCheck") && !CheckWeapon("Q3Railgun"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake3RailgunLoopSoundCheck", 0);
				}
				break;

			case CLASS_DEUSEX:
				if (CheckInventory("DeusEx_Zoomed") && !CheckWeapon("DeusEx_SniperRifle")) { SetInventory("DeusEx_Zoomed", 0); }

				if (!CheckInventory("SamsaraHasInfiniteAmmo"))
				{
					if (CheckInventory("DeusEx_LAW") && !CheckWeapon("DeusEx_LAW") && !CheckInventory("DeusEx_LAWAmmo")) { TakeInventory("DeusEx_LAW", 1); }
				}
				break;

			default:
                if (cvalue != 1)
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, 0, pln);
                    for (i = 0; i < SLOTCOUNT + UNIQUECOUNT; i++) { ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, i, 0, pln); }
                    cvalue = 1;
                }
				break;
		}

        if (previousvalue == -1) { previousvalue = 0; } // just in case

        SetInventory("SamsaraIsPlayingInZandronum", !isZDoom());

        SetInventory("SamsaraUsingVerticalSpread", IsZDoom() && GetUserCVar(pln, "vertspread") && !GetCVar("sv_novertspread"));

        SetInventory("DoomNoBFGAim", (GetCVar("sv_nobfgaim") && isZDoom()) || (!GetCVar("sv_bfgfreeaim") && !isZDoom()));

        SetInventory("SamsaraImprovedDoomguyBalance", GetCVar("samsara_doomguybalance") == 1 || (GetCVar("samsara_doomguybalance") >= 2 && GetCVar("samsara_mixerloaded")));

        SetInventory("SamsaraUsingAbsolutionUnmaker", GetCVar("samsara_absolutionunmaker"));

        SetInventory("SamsaraRecoilIsDisabled", CheckSamsaraRecoilSettings(pln));

        bool noflashes = GetUserCVar(pln, "samsara_cl_noflashes");

        SetInventory("PickupFlashesAreDisabled", noflashes == 1 || noflashes >= 3);
        SetInventory("WeaponFlashesAreDisabled", noflashes >= 2);

        SetInventory("ChexClassicLaz", GetCVar("samsara_classiclaz"));

        //SetInventory("RJingModeOn", GetCVar("samsara_allcanrj")); // "Maybe someday..."

        SetInventory("PistolModeOn", GetCVar("samsara_pistolammo"));

        SetInventory("QuakeModeOn", GetCVar("samsara_vanillaquake"));

        SetInventory("Painkiller_NoDemonMorph", GetCVar("samsara_nodemonmorph"));

        SetInventory("Painkiller_NoTarotCardLimit", GetCVar("samsara_notarotcardlimit"));

        SetInventory("DeusEx_MovementPenaltyEnabled", GetCVar("samsara_deusexmovementpenalty"));

        SetInventory("SamsaraAlliesAreBanned", GetCVar("samsara_banallies"));

        bool dukesoundboard = GetCVar("samsara_dukesoundboard");

        SetInventory("Soundboard - Boss Kill", dukesoundboard);
        SetInventory("Soundboard - Deathmatch Kill", dukesoundboard);
        SetInventory("Soundboard - Dukematch Kill", dukesoundboard);
        SetInventory("Soundboard - Boss Sight", dukesoundboard);
        SetInventory("Soundboard - Enemy Kill", dukesoundboard);
        SetInventory("Soundboard - Boot Kill", dukesoundboard);
        SetInventory("Soundboard - Gib Kill", dukesoundboard);
        SetInventory("Soundboard - Weapon Acquired", dukesoundboard);
        SetInventory("Soundboard - Level Intro", dukesoundboard);
        SetInventory("Soundboard - Idle Taunt", dukesoundboard);
        SetInventory("Soundboard - Critical Heal", dukesoundboard);
        SetInventory("Soundboard - Death Taunt", dukesoundboard);
        SetInventory("Soundboard - Doug Huggem", dukesoundboard);

        SetInventory("DukeLegacyVoices", GetUserCVar(pln, "samsara_cl_legacydukevoices"));

        SetInventory("SamsaraHasPermaWeaponLevel2", GetCVar("samsara_permaweaponlevel2"));

		HandleAmmoCapacities(0);
		HandleBans();
		HandleBuffCVars();

        for (i = 1; i <= 100; i++)
        {
            str actortotake = StrParam(s:"SAMSARAPATCH_CUSTOMWEAPON_NAME", d:i);
            actortotake = StrParam(l:actortotake);

            if (StrCmp(actortotake, "") && StrCmp(actortotake, StrParam(s:"SAMSARAPATCH_CUSTOMWEAPON_NAME", d:i))) { TakeInventory(actortotake, INTMAX); }
            else { break; }
        }

		TakeInventory("WeaponGetYaaaay",  1);
		TakeInventory("WeaponGetYaaaay2", 1);
		//if (GetCvar("samsara_lmsrules") == 0) { ConvertClassWeapons(-1); } seems pointless to have this, but will leave commented for now
		TakeInventory("SamsaraPistolStartMapChangeHack", 1);
        TakeInventory("SamsaraMiscPickupDisplayBlocker", 1);

        // just in case
        SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 0);
        SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
        SetInventory("SamsaraMiscPickupDisplayExtraDropped1", 0);

        if (!isZDoom() && GetCVar("samsara_banmorphovum") && CheckInventory("SamsaraCorvusArtiEgg"))
        {
            for (i = 0; i < CheckInventory("SamsaraCorvusArtiEgg"); i++)
            {
                if (!CheckInventory("Grim Ballista") || (CheckInventory("Grim Ballista") && CheckInventory("Shell") < GetAmmoCapacity("Shell")))
                {
                    Print(l:"CORVUSMORPHOVUMDISABLED2");
                    GiveInventory("Grim Ballista", 1);
                }
                else { Print(l:"CORVUSMORPHOVUMDISABLED1"); }
            }

            SetInventory("SamsaraCorvusArtiEgg", 0);
        }

        if (GetCVar("samsara_banjetpack") && (CheckInventory("DukePortJetpack") || CheckInventory("DukePortJetpack64")))
        {
            if (!(CheckInventory("DukePortSteroids") || CheckInventory("DukePortSteroidsLAB") || CheckInventory("DukePortSteroids64")) || CheckInventory("DukeSteroidsFuel") < 100)
            {
                SetInventory("DukeSteroidsActive", 0);
                SetInventory("DukeSteroidsSpawnRemove", 0);
                TakeInventory("DukeSteroidsSpeed", 1);
                TakeInventory("DukeSteroidsDamage", 1);
                GiveInventory("DukeSteroidsFuel", 100);

                if (CheckInventory("DukeClassMode") >= 2)
                {
                    Print(l:"DUKEJETPACKDISABLED4");
                    GiveInventory("DukePortSteroids64", 1);
                } else if (CheckInventory("DukeClassMode") == 1) {
                    Print(l:"DUKEJETPACKDISABLED3");
                    GiveInventory("DukePortSteroidsLAB", 1);
                } else {
                    Print(l:"DUKEJETPACKDISABLED2");
                    GiveInventory("DukePortSteroids", 1);
                }
            }
            else { Print(l:"DUKEJETPACKDISABLED1"); }

            if (CheckInventory("DukeFlying"))
            {
                PlaySound(0, "duke/jetpackoff", CHAN_ITEM);
                GiveInventory("DukeJetpackIdleSoundStopper", 1);
                SetInventory("DukeFlying", 0);
                TakeInventory("DukePetjack", 1);
            }

            SetInventory("DukeJetpackFuel", 0);
            SetInventory("DukePortJetpack", 0);
            SetInventory("DukePortJetpack64", 0);
        }

        if (GetCVar("samsara_banjetpack") && (CheckInventory("RMRJetPack") || CheckInventory("PowerRMRFlyAbility") || CheckInventory("PowerRMRFlyAbilityHack")))
        {
            int oxyrecmax = 3;

            for (i = 0; i < CheckInventory("RMRJetPack"); i++)
            {
                if (CheckInventory("RMROxygenRecycler") < oxyrecmax ||
                    (GetCVar("samsara_cl_maxedinventoryhealthpickup") >= 2 && (GetActorProperty(0, APROP_Health) < ACS_NamedExecuteWithResult("SamsaraPlayerHealer", -1) || ACS_NamedExecuteWithResult("SamsaraPlayerOxygenAdjuster", 0, -1))) ||
                    GetCVar("samsara_nohealthcap"))
                {
                    if ((CheckInventory("RMROxygenRecycler") >= oxyrecmax && GetCVar("samsara_cl_maxedinventoryhealthpickup") >= 2 && (GetActorProperty(0, APROP_Health) < ACS_NamedExecuteWithResult("SamsaraPlayerHealer", -1) || ACS_NamedExecuteWithResult("SamsaraPlayerOxygenAdjuster", 0, -1))) ||
                        GetCVar("samsara_nohealthcap"))
                    {
                        Print(l:"RMRJETPACKDISABLED3");
                        ACS_NamedExecuteWithResult("SamsaraPlayerHealer", 100);
                        ACS_NamedExecuteWithResult("SamsaraPlayerOxygenAdjuster", 1, -1);
                    } else {
                        Print(l:"RMRJETPACKDISABLED2");
                        GiveInventory("RMROxygenRecycler", 1);
                    }
                }
                else { Print(l:"RMRJETPACKDISABLED1"); }
            }

            SetInventory("RMRJetPack", 0);
            SetInventory("PowerRMRFlyAbility", 0);
            SetInventory("PowerRMRFlyAbilityHack", 0);
        }

        if (GetCVar("samsara_banjetpack") && (CheckInventory("PowerWTSpellFly") || CheckInventory("PowerWTSpellFlyHack")))
        {
            SetInventory("PowerWTSpellFly", 0);
            SetInventory("PowerWTSpellFlyHack", 0);
        }

		for (i = 0; i < ACCURACYCOUNT; i++)
		{
			if (CheckInventory("DoomZerkCounter") > i && !CheckInventory(DoomAccuracyZerks[i]))
			{
				GiveInventory(DoomAccuracyZerks[i], 1);
			}
		}

        if (GetCVar("samsara_currentgame") != GAME_STRIFE)
        {
            if (samsaraClassNum() != CLASS_STRIFE)
            {
				sigilCounterPartyMode = CheckInventory("GotWeapon3") + CheckInventory("GotWeapon4") + CheckInventory("GotWeapon5") + CheckInventory("GotWeapon6") + CheckInventory("GotWeapon7");

                if (samsaraClassNum() == CLASS_CALEB) { sigilCounterPartyMode = CheckInventory("GotWeapon3") + CheckInventory("GotWeapon4") + CheckInventory("GotWeapon5") + CheckInventory("GotWeapon6") + (CheckInventory("LifeLeech") || CheckInventory("StopFromPickingTurrets_")); }

				if (GetCVar("samsara_sigilmode"))
				{
					for (i = 0; i < SIGILCOUNT; i++)
					{
						if (sigilCounterPartyMode == i + 1) { SetInventory("StrifeSigilPiece", i + 1); }
						SetInventory(SpectralTogglers[i], sigilCounterPartyMode == i + 1);
					}
				} else {
					SetInventory("StrifeSigilPiece", 0);

					for (i = 0; i < SIGILCOUNT; i++) { SetInventory(SpectralTogglers[i], 0); }
				}
            }
        } else {
            if ((isSinglePlayer() || isCoop()) && !isInvasion()) { sigilCounter = SamsaraGlobal[2] + SamsaraGlobal[3] + SamsaraGlobal[4] + SamsaraGlobal[5] + SamsaraGlobal[6]; }
            else { sigilCounter = CheckInventory("SigilSplinter1Temp") + CheckInventory("SigilSplinter2Temp") + CheckInventory("SigilSplinter3Temp") + CheckInventory("SigilSplinter4Temp") + CheckInventory("SigilSplinter5Temp"); }

            for (i = 0; i < SIGILCOUNT; i++)
            {
                if (((isSinglePlayer() || isCoop()) && !isInvasion() && SamsaraGlobal[GLOBAL_SIGILBASE + i + 1]) || ((!(isSinglePlayer() || isCoop()) || isInvasion()) && CheckInventory(SigilSplinters[i][1])))
                {
                    if (CheckWeapon("Sigil"))
                    {
                        if (CheckInventory(" Sigil ")) { SetWeapon(" Sigil "); } // specific to strifeguy
                        else if (CheckInventory(ClassHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][SLOT_FIST][SamsaraEquipmentLoadout[SLOT_FIST]])) { SetWeapon(ClassHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][SLOT_FIST][SamsaraEquipmentLoadout[SLOT_FIST]]); }
                        else { SetWeapon(ClassHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][SLOT_PISTOL][SamsaraEquipmentLoadout[SLOT_PISTOL]]); }
                    }

                    if (!CheckInventory(SigilSplinters[i][0]))
                    {
                        SetInventory(SigilSplinters[i][0], 1);

                        if (samsaraClassNum() == CLASS_STRIFE)
                        {
                            if (CheckInventory("StrifeSigilPiece") < sigilCounter)
                            {
                                SetInventory("StrifeSigilPiece", sigilCounter);
                                SetInventory("StrifeSigilPiecePreferred", sigilCounter);
                                GiveInventory(" Sigil ", 1);

                                ACS_NamedExecuteAlways("SamsaraClientMiscPickup", 0, 23, -1, 0);
                            }
                        } else {
                            for (int a = 0; a < SIGILCOUNT; a++) { SetInventory(SpectralTogglers[a], 0); }

                            SetInventory("StrifeSigilPiece", sigilCounter);
                            SetInventory(SpectralTogglers[sigilCounter - 1], 1);
                        }
                    }
                }
            }
        }

		// triggers buddha mode when Original/Lost Missions Blazko has an extra life
		if (CheckInventory("WolfExtraLife") && !canbuddha) { SetPlayerProperty(0, 1, 16); }
		if (!CheckInventory("WolfExtraLife") && canbuddha) { SetPlayerProperty(0, 0, 16); }
		canbuddha = CheckInventory("WolfExtraLife");

		oarmor = armor;
		otype = type;
		armor = CheckInventory("BasicArmor");
		type = GetArmorInfo(0);

		if (oarmor > armor && StrRight(otype, 8) == "Marathon" && !UnloadingNow)
		{
			if (samsaraClassNum() == CLASS_MARATHON)
			{
				ActivatorSound("marathon/shieldhit", 127);
				FadeRange(255, 255, 255, 0.4, 0, 0, 0, 0.0, 8.0 / 35);
			}
			else
			{
				ActivatorSound("samsara/shieldhit", 127);
				FadeRange(255, 255, 0, min(0.5, (oarmor - armor) * 0.015), 0, 0, 0, 0.0, min(35.0, 1.5 * (oarmor - armor)) / 35);
			}
		}

        int okeys = CheckInventory("SamsaraKeysAcquired");

        SetInventory("SamsaraKeysAcquired", CheckInventory("BlueCard") + CheckInventory("YellowCard") + CheckInventory("RedCard") + // Doom
                                            CheckInventory("BlueSkull") + CheckInventory("YellowSkull") + CheckInventory("RedSkull") +
                                            CheckInventory("ChexBlueCard") + CheckInventory("ChexYellowCard") + CheckInventory("ChexRedCard") + // Chex Quest
                                            CheckInventory("BlueFlemKey") + CheckInventory("YellowFlemKey") + CheckInventory("RedFlemKey") + // Chex Quest 3
                                            CheckInventory("KeyGreen") + CheckInventory("KeyBlue") + CheckInventory("KeyYellow") + // Heretic
                                            CheckInventory("KeySteel") + CheckInventory("KeyCave") + CheckInventory("KeyAxe") + // Hexen
                                            CheckInventory("KeyFire") + CheckInventory("KeyEmerald") + CheckInventory("KeyDungeon") +
                                            CheckInventory("KeySilver") + CheckInventory("KeyRusted") + CheckInventory("KeyHorn") +
                                            CheckInventory("KeySwamp") + CheckInventory("KeyCastle") +
                                            CheckInventory("BaseKey") + CheckInventory("GovsKey") + CheckInventory("Passcard") + // Strife
                                            CheckInventory("IDBadge") + CheckInventory("PrisonKey") + CheckInventory("SeveredHand") +
                                            CheckInventory("Power1Key") + CheckInventory("Power2Key") + CheckInventory("Power3Key") +
                                            CheckInventory("GoldKey") + CheckInventory("IDCard") + CheckInventory("SilverKey") +
                                            CheckInventory("OracleKey") + CheckInventory("MilitaryID") + CheckInventory("OrderKey") +
                                            CheckInventory("WarehouseKey") + CheckInventory("BrassKey") + CheckInventory("RedCrystalKey") +
                                            CheckInventory("BlueCrystalKey") + CheckInventory("ChapelKey") + CheckInventory("CatacombKey") +
                                            CheckInventory("SecurityKey") + CheckInventory("CoreKey") + CheckInventory("MaulerKey") +
                                            CheckInventory("FactoryKey") + CheckInventory("MineKey") + CheckInventory("NewKey5") +
                                            CheckInventory("PrisonPass"));

        if (CheckInventory("SamsaraKeysAcquired") > okeys && (isSinglePlayer() || isCoop()))
        {
            if (CheckInventory("SamsaraHeroMusicHalfLifeActive") && !CheckInventory("HalfLifeMusicPlayingToken")) { GiveInventory("HLMusicKey", 1); }
        }

		/*
		 * Jumping and miscellaneous shit
		 */

		switch (samsaraClassNum())
		{
		case CLASS_HEXEN:
			int boosted, damagefactor, damagefactormod;
			if(CheckInventory("HexenClassMode")>0)
			{
				damagefactormod = 0.8;
				if(CheckInventory("HexenClassMode")==1)
				{
					boosted = false;
					damagefactor = GetActorProperty(0,APROP_DamageFactor);
					SetActorProperty(0,APROP_DamageFactor,1.0);
				}
				else if(CheckInventory("HexenClassMode")==2)
				{
					if(!isCoop() && !isSinglePlayer())
						GiveInventory("DaedalonInRangeBroadcastDM",1);
					else
						GiveInventory("DaedalonInRangeBroadcast",1);
					if(!CheckInventory("DaedalonInRange"))
					{
						if(!boosted) { damagefactor = GetActorProperty(0,APROP_DamageFactor); boosted = true; SetActorProperty(0,APROP_DamageFactor,FixedMul(damagefactor,damagefactormod)); }
					}
					else
					{
						ACS_NamedExecuteWithResult("SamsaraDecorate",40);
						boosted = false;
						SetActorProperty(0,APROP_DamageFactor,1.0);
					}
				}
				else if(CheckInventory("HexenClassMode")==3)
				{
					if(ACS_NamedExecuteWithResult("SAMSARA_BARATUSRANGECHECK")==1)
					{
						if(!boosted) { damagefactor = GetActorProperty(0,APROP_DamageFactor); boosted = true; SetActorProperty(0,APROP_DamageFactor,FixedMul(damagefactor,damagefactormod)); }
					}
					else
					{
						boosted = false;
						SetActorProperty(0,APROP_DamageFactor,1.0);
					}
				}
			}
			else
			{
				if(IsSinglePlayer() || IsCoop())
				{
					if(timer() > pariasLastRepairTimer + 35)
					{
						pariasLastRepairTimer = timer();
						GiveInventory("PariasArmorRepair",1);
					}
				}
				boosted = false;
				damagefactor = GetActorProperty(0,APROP_DamageFactor);
				SetActorProperty(0,APROP_DamageFactor,1.0);
			}
			break;

		case CLASS_MARATHON:
			if (GetCVar("samsara_nocustomgravity"))
			{
				SetActorProperty(0, APROP_Gravity, 1.0);
				SetActorProperty(0, APROP_Mass, 100);
				SetInventory("SamsaraIncreasedFallingDamageMode", 0);
			} else {
				SetActorProperty(0, APROP_Gravity, 0.15);
				SetActorProperty(0, APROP_Mass, 220);
				SetInventory("SamsaraIncreasedFallingDamageMode", 1);
			}
			break;

		case CLASS_QUAKE:
			if (GetCVar("samsara_nocustomgravity"))
			{
				SetActorProperty(0, APROP_Gravity, 1.0);
				SetActorProperty(0, APROP_Mass, 100);
				SetInventory("SamsaraIncreasedFallingDamageMode", 0);
			} else {
				SetActorProperty(0, APROP_Gravity, 0.75);
				SetActorProperty(0, APROP_Mass, 100);
				SetInventory("SamsaraIncreasedFallingDamageMode", 2);
			}
			break;

		case CLASS_ERAD:
			if (GetCVar("samsara_nocustomgravity"))
			{
				SetActorProperty(0, APROP_Gravity, 1.0);
				SetActorProperty(0, APROP_Mass, 100);
				SetInventory("SamsaraIncreasedFallingDamageMode", 0);
			} else {
				SetActorProperty(0, APROP_Gravity, 0.68);
				SetActorProperty(0, APROP_Mass, 100);
				SetInventory("SamsaraIncreasedFallingDamageMode", 3);
			}
			break;

		case CLASS_DEMONESS:
			if (GetCVar("samsara_nocustomgravity")) { SetActorProperty(0, APROP_Gravity, 1.0); }
			SetActorProperty(0, APROP_Mass, 100);
			SetInventory("SamsaraIncreasedFallingDamageMode", 0);
			break;

		default:
			SetActorProperty(0, APROP_Gravity, 1.0);
			SetActorProperty(0, APROP_Mass, 100);
			SetInventory("SamsaraIncreasedFallingDamageMode", 0);
			break;
		}

        if (CheckInventory("ForceNormalGravity"))
        {
            SetActorProperty(0, APROP_Gravity, 1.0);
            SetActorProperty(0, APROP_Mass, 100);
            SetInventory("SamsaraIncreasedFallingDamageMode", 0);
        } else if (CheckInventory("ForceSOGravity")) {
            SetActorProperty(0, APROP_Gravity, 0.15);
            SetActorProperty(0, APROP_Mass, 220);
            SetInventory("SamsaraIncreasedFallingDamageMode", 1);
        } else if (CheckInventory("ForceRangerGravity")) {
            SetActorProperty(0, APROP_Gravity, 0.75);
            SetActorProperty(0, APROP_Mass, 100);
            SetInventory("SamsaraIncreasedFallingDamageMode", 2);
        } else if (CheckInventory("ForceEleenaGravity")) {
            SetActorProperty(0, APROP_Gravity, 0.68);
            SetActorProperty(0, APROP_Mass, 100);
            SetInventory("SamsaraIncreasedFallingDamageMode", 3);
        } else if (CheckInventory("ForceDemonessGravity")) {
            SetActorProperty(0, APROP_Gravity, 0.8125);
            SetActorProperty(0, APROP_Mass, 100);
            SetInventory("SamsaraIncreasedFallingDamageMode", 0);
        }

        SetInventory("SamsaraIncreasedFallingDamage", CheckInventory("SamsaraIncreasedFallingDamageMode") == 1);
        SetInventory("SamsaraIncreasedFallingDamage2", CheckInventory("SamsaraIncreasedFallingDamageMode") == 2);
        SetInventory("SamsaraIncreasedFallingDamage3", CheckInventory("SamsaraIncreasedFallingDamageMode") >= 3);

        if (CheckWeapon("RedneckMotorcycle") || CheckInventory("ShrunkPlayer") || CheckInventory("IsMorphed")) { i = 0; }
        else if (samsaraClassNum() == CLASS_HEXEN) { i = JumpZFromHeight(41 + GetCVar("samsara_jumpmod"), GetActorProperty(0, APROP_Gravity)); }
        else if (samsaraClassNum() == CLASS_MARATHON && !GetCVar("samsara_nocustomgravity")) { i = JumpZFromHeight(38 + GetCVar("samsara_jumpmod"), GetActorProperty(0, APROP_Gravity)); }
        else if (samsaraClassNum() == CLASS_QUAKE && !GetCVar("samsara_nocustomgravity")) { i = JumpZFromHeight(36 + GetCVar("samsara_jumpmod"), GetActorProperty(0, APROP_Gravity)); }
        else if (samsaraClassNum() == CLASS_ERAD && !GetCVar("samsara_nocustomgravity")) { i = JumpZFromHeight(36 + extrajumpz + GetCVar("samsara_jumpmod"), GetActorProperty(0, APROP_Gravity)); }
        else if (samsaraClassNum() == CLASS_DEUSEX && !GetCVar("samsara_nocustomgravity")) { i = JumpZFromHeight(FixedMul(36 + GetCVar("samsara_jumpmod"), 1.0 + (CheckInventory("DeusEx_Augmentation_SpeedEnhancement") * CheckInventory("DeusEx_Augmentation_SpeedEnhancementToken") * 0.2)), GetActorProperty(0, APROP_Gravity)); }
        else { i = JumpZFromHeight(32 + GetCVar("samsara_jumpmod"), GetActorProperty(0, APROP_Gravity)); }

		// Hexen requires an increased jumping height
		if (isZDoom() && GetCvar("samsara_currentgame") == GAME_HEXEN && samsaraClassNum() != CLASS_HEXEN) { GiveInventory("SamsaraIncreasedJumpHeightForHexen", 1); }
		else { TakeInventory("SamsaraIncreasedJumpHeightForHexen", 0x7FFFFFFF); }

		// Strife requires a decreased step height
		if (GetCvar("samsara_currentgame") == GAME_STRIFE) { SetActorProperty(0, APROP_MaxStepHeight, 16.0); }

        if (CheckInventory("PowerHighJump1") && !GetCVar("LockHighJumpHeightChanges")) { SetActorProperty(0, APROP_JumpZ, max(FixedMul(i, FixedDiv(GetUserCVar(pln, "HighJumpRuneHeight"), 8.0)), 0)); } // multi runes compatibility
        else { SetActorProperty(0, APROP_JumpZ, max(i, 0)); }

		//This is ACS, so we can get away with this

		if((timer() % 15) == 0) XMASActive = ACS_NamedExecuteWithResult("Samsara_XMAS_XmasTextures",XMASActive);

        SetInventory("StopBreakingEverything_Bomb", 0);
        SetInventory("StopBreakingEverything_Quad", 0);

		//if (isDead(0)) { endloop = 1; }

        int autohealthreshold = getMaxHealth(0);

        if (autohealthreshold < 250 && CheckInventory("SamsaraHasProsperity")) { autohealthreshold = 250; }

        if (!GetCVar("sv_disableautohealth") && !isDead(0) &&
            GetActorProperty(0, APROP_Health) <= (GetUserCVar(pln, "samsara_cl_autoinventoryhealth") > 100 ? autohealthreshold : GetUserCVar(pln, "samsara_cl_autoinventoryhealth")))
        { AutoUseHealth(PlayerClass(pln), GetUserCVar(pln, "samsara_cl_autoinventoryhealth") > 100 ? autohealthreshold : GetUserCVar(pln, "samsara_cl_autoinventoryhealth")); }

        if (!isDead(0) && !CheckInventory("BasicArmor") && GetUserCVar(pln, "samsara_cl_autoinventoryarmor"))
        {
            // these are ordered by SavePercent. however, if a player has different armors of the same SavePercent, but with different SaveAmount values,
            // the armor with the higher SaveAmount will take priority, not the latest armor you stored. pretty much no easy way to recreate exact behavior.

            if (CheckInventory("StrifeArmorPack3ArmorMarathonInventory")) { UseInventory("StrifeArmorPack3ArmorMarathonInventory"); } // 100, 200
            else if (CheckInventory("StrifeArmorPack1ArmorMarathonInventory")) { UseInventory("StrifeArmorPack1ArmorMarathonInventory"); } // 100, 100
            else if (CheckInventory("StrifeArmorPack3ArmorQuakePlusTier2ActiveInventory")) { UseInventory("StrifeArmorPack3ArmorQuakePlusTier2ActiveInventory"); } // 90, 250
            else if (CheckInventory("StrifeArmorPack3ArmorQuakeTier2ActiveInventory")) { UseInventory("StrifeArmorPack3ArmorQuakeTier2ActiveInventory"); } // 80, 200
            else if (CheckInventory("StrifeArmorPack3ArmorQuakePlusTier2InactiveInventory")) { UseInventory("StrifeArmorPack3ArmorQuakePlusTier2InactiveInventory"); } // 80, 200
            else if (CheckInventory("StrifeArmorPack3ArmorHereticInventory")) { UseInventory("StrifeArmorPack3ArmorHereticInventory"); } // 75, 200
            else if (CheckInventory("StrifeArmorPack3ArmorQuakeTier2InactiveInventory")) { UseInventory("StrifeArmorPack3ArmorQuakeTier2InactiveInventory"); } // 60, 150
            else if (CheckInventory("StrifeArmorPack1ArmorQuakePlusInventory")) { UseInventory("StrifeArmorPack1ArmorQuakePlusInventory"); } // 60, 150
            else if (CheckInventory("StrifeArmorPack3ArmorNormalInventory")) { UseInventory("StrifeArmorPack3ArmorNormalInventory"); } // 50, 200
            else if (CheckInventory("StrifeArmorPack1ArmorHereticInventory")) { UseInventory("StrifeArmorPack1ArmorHereticInventory"); } // 50, 100
            else if (CheckInventory("StrifeArmorPack1ArmorNormalInventory")) { UseInventory("StrifeArmorPack1ArmorNormalInventory"); } // 33, 100
            else if (CheckInventory("StrifeArmorPack1ArmorQuakeInventory")) { UseInventory("StrifeArmorPack1ArmorQuakeInventory"); } // 30, 100
        }

        if (CheckInventory("ROTTNetNoWeapon") && !CheckWeapon("ROTTNetNoWeapon")) { SetWeapon("ROTTNetNoWeapon"); }
        else if (CheckInventory("ChokeMe") && !CheckWeapon("ChokeMe")) { SetWeapon("ChokeMe"); }

		Delay(1);

		opcount = pcount;
		pcount  = PlayerCount();
	}
}

script "SamsaraTurkeyPuncher" ENTER //677
{
    int delayTics = GetCVar("samsara_superturboturkeyfrequency");

    if (delayTics <= 0) { delayTics = 1; }

	Delay(delayTics);

	if (GetCvar("samsara_superturboturkeypuncher3000") > 0)
	{
		GiveInventory("ChickenModeOn",1);
		
		switch (GetCvar("samsara_superturboturkeypuncher3000"))
		{
			case 3:
				str ChickenClass = "SuperFriendlyChicken";

				if (!random(0, 15))
				{
					ChickenClass = "AssaultFriendlyChicken";

					if (!random(0, 2)) { ChickenClass = "ExplosiveFriendlyChicken"; }
				}
				break;

			case 2:
				ChickenClass = "SuperDMChicken";

				if (!random(0, 15))
				{
					ChickenClass = "AssaultChicken";

					if (!random(0, 2)) { ChickenClass = "ExplosiveChicken"; }
				}
				break;
			
			case 1:
				ChickenClass = "SuperCoopChicken";

				if (!random(0, 15))
				{
					ChickenClass = "AssaultChicken";

					if (!random(0, 2)) { ChickenClass = "ExplosiveChicken"; }
				}
				break;
		}

		do
		{
		   delay(1);
		   int x = GetActorX(0) + random(-128.0, 128.0);
		   int y = GetActorY(0) + random(-128.0, 128.0);
		   int z = GetActorCeilingZ(0) - 38.0;
		   int angle = GetActorAngle(0) >> 8;
		}
		until (Spawn(ChickenClass, x, y, z, 0, angle));


		if (GetCvar("samsara_superturboturkeylimit") > 0)
		{
			if(CheckInventory("ChickenKillCount") >= (GetCvar("samsara_superturboturkeylimit")))
			{
				SetFont("BIGFONT");
				HudMessageBold(n:0,s:" \cjhit the kill limit!";
				HUDMSG_PLAIN, 0, CR_WHITE, 0.5, 0.2, 5.0);
				if(CheckInventory("ChickenKillCount") < (GetCvar("samsara_superturboturkeylimit")))
				{
					TakeInventory("ChickenKillCount",999); }
					Delay(35*5);
					Exit_Normal(0);
				}
		}

	}
	else { TakeInventory("ChickenModeOn",999); }
	restart;
}

/*script 678 (int respawning)
{
	int punchdrunkloop;
	//punchdrunkloop = 0;

	print(s:"678 is being called");
	if (!respawning)
	{
		if (!punchdrunkloop)
		{ delay(15);
		  print(s:"punchdrunkloop 0 is being called");
		  punchdrunkloop = 1; }
		else
		{ HandlePunchdrunk(respawning);
		print(s:"handlepunchdrunk is being called");
		HandleInstagib(respawning); }
	}
	delay(1);
	restart;
}*/

script "SamsaraSynthFire" (int startTime) //607 -- SAMSARA_SYNTHFIRE
{
    int pln = PlayerNumber();

    while (ServerEnterTimes[pln] == startTime)
    {
        SetInventory("SamsaraSynthFireReload", !isDead(0) && !CheckInventory("CompendiumOpened") && keyDown(BT_RELOAD));
        SetInventory("SamsaraSynthFireZoom", !isDead(0) && !CheckInventory("CompendiumOpened") && keyDown(BT_ZOOM));
        SetInventory("SamsaraSynthFireLeft", !isDead(0) && !CheckInventory("CompendiumOpened") && keyDown(BT_ATTACK));
        SetInventory("SamsaraSynthFireRight", !isDead(0) && !CheckInventory("CompendiumOpened") && keyDown(BT_ALTATTACK));

        if (isDead(0))
        {
            SetInventory("SamsaraSynthFireLeftPress", 0);
            SetInventory("SamsaraSynthFireRightPress", 0);
        } else {
            if (!CheckInventory("CompendiumOpened"))
            {
                if (keyPressed(BT_ATTACK)) { SetInventory("SamsaraSynthFireLeftPress", 1); }
                if (keyPressed(BT_ALTATTACK)) { SetInventory("SamsaraSynthFireRightPress", 1); }
            }
        }

        Delay(1);
    }

    SetInventory("SamsaraSynthFireReload", 0);
    SetInventory("SamsaraSynthFireZoom", 0);
    SetInventory("SamsaraSynthFireLeft", 0);
    SetInventory("SamsaraSynthFireRight", 0);
    SetInventory("SamsaraSynthFireLeftPress", 0);
    SetInventory("SamsaraSynthFireRightPress", 0);
}

script "SamsaraConfirmClass" (int which) { SetResultValue(SamsaraWepType == which); } //206 -- SAMSARA_CONFIRMCLASS

script "SamsaraWolfMove" (void) //673 -- SAMSARA_WOLFMOVE
{
	int pln = PlayerNumber();
	int realspeed = GetActorProperty(0, APROP_Speed);
	int forward, side, angle;
	int forwardx, forwardy, sidex, sidey;
	int velx, vely, velz;
	int startTime = Timer();

	WolfenEnterTimes[pln] = startTime;

	while (WolfenEnterTimes[pln] == startTime)
	{
		if (UnloadingNow)
		{
			if (GetActorProperty(0, APROP_Speed) == 0)
			{
				SetActorProperty(0, APROP_Speed, realspeed);
			}
			break;
		}

		if (!CheckInventory("CanWolfMovement")) { break; }

		if(CheckInventory("ShrunkPlayer"))
		{
			Delay(1);
			continue;
		}

		if (!CheckInventory("WolfenMovement"))
		{
			if (GetActorProperty(0, APROP_Speed) == 0) { SetActorProperty(0, APROP_Speed, realspeed); }

            SetInventory("WolfMoving", 0);

			Delay(1);
			continue;
		}

		if (isDead(0))
		{
			SetActorProperty(0, APROP_Speed, realspeed);
			velx = 0;
			vely = 0;
			velz = 0;
		}
		else
		{
			if (WolfenEnterTimes[pln] != startTime) { break; }
			SetActorProperty(0, APROP_Speed, 0);

			if(GetPlayerInput(-1,INPUT_FORWARDMOVE) != 0)
				forward = sign(GetPlayerInput(-1,INPUT_FORWARDMOVE));

			forward *= SPEED_FORWARD;

			if(GetPlayerInput(-1,INPUT_SIDEMOVE) != 0)
				side	= sign(GetPlayerInput(-1,INPUT_SIDEMOVE));

			if(KeyDown_Any(BT_STRAFE))
			{
				if(GetPlayerInput(-1,INPUT_YAW) != 0)
					side	= -sign(GetPlayerInput(-1,INPUT_YAW));
				}

			side	*= SPEED_SIDE;

			angle   = GetActorAngle(0);

			forwardx = cos(angle) * (forward / ((CheckInventory("IsMorphed") * 2) + 1));
			forwardy = sin(angle) * (forward / ((CheckInventory("IsMorphed") * 2) + 1));

			sidex = cos(angle-0.25) * (side / ((CheckInventory("IsMorphed") * 2) + 1));
			sidey = sin(angle-0.25) * (side / ((CheckInventory("IsMorphed") * 2) + 1));

			velx = forwardx + sidex;
			vely = forwardy + sidey;
			velz = sin(-GetActorPitch(0)) * (forward / ((CheckInventory("IsMorphed") * 2) + 1));

			forward = 0;
			side = 0;
		}

        bool isRunning = (!GetCVar("cl_run") && keyDown(BT_SPEED)) || (GetCVar("cl_run") && !keyDown(BT_SPEED));

        if (!isRunning)
        {
            velx /= 2;
            vely /= 2;
            velz /= 2;
        }

        if (isCrouching(28.0))
        {
            velx /= 2;
            vely /= 2;
            velz /= 2;
        }

        SetInventory("WolfMoving", velx != 0 || vely != 0 || velz != 0);

		if (GetActorProperty(0, APROP_WaterLevel) >= 1 || CheckInventory("PowerFlight") || CheckInventory("PowerSamsaraFlight") || GetActorProperty(0, APROP_Gravity) == 0.0)
		{
			SetActorVelocity(0, velx, vely, velz, 0, 0);
		}
		else
		{
			if (GetCVar("samsara_cl_wolfmovebob"))
			{
				SetActorVelocity(0, velx, vely, GetActorVelZ(0), 0, 1);
			}
			else
			{
				SetActorVelocity(0, velx, vely, GetActorVelZ(0), 0, 0);
			}
		}

		Delay(1);
	}

	if (GetActorProperty(0, APROP_Speed) == 0)
	{
		SetActorProperty(0, APROP_Speed, realspeed);
	}
}

script "SamsaraEnterClient" (void) clientside //521 -- SAMSARA_ENTER_CLIENT
{
	int execInt, oExecInt, execStr;
	int class, oClass;
	int pln = PlayerNumber();
	int i, j;
	int startTime = Timer();

	// Comment out this line for zdoom
	int cpln = ConsolePlayerNumber();

	ClientEnterTimes[pln] = startTime;

	execInt = 0; oExecInt = 0;

	//if (GetCVar("samsara_cl_exists") != SAMSARA_CL_VERSION) {}

    ExecuteClassScripts(pln, 1);

	for (i = 0; i < RESCOUNT; i++)
	{
		ACS_NamedExecuteAlways("SamsaraResonate", 0, i, 16, 0);
	}

	//Log(s:"Client ", n:pln+1, s:"\c- (", d:pln, s:") has spawned (startTime is ", d:startTime, s:")");

	while (ClientEnterTimes[pln] == startTime)
	{
		oClass = class;
		class  = samsaraClassNum();

		// Also this line
		if (cpln != pln) { Delay(1); continue; }

		SamsaraClientClass = class+1;

		if (oClass != class) { SamsaraItemFlash = Timer(); }

		//seems unnecessary
		for (i = 0; i < SLOTCOUNT; i++)
		{
			j = SamsaraClientWeps[i];
			SamsaraClientWeps[i] = HasClassWeapon(class, i, 1);

			if (j != SamsaraClientWeps[i]) { SamsaraClientWepFlashes[i] = Timer(); }
		}

		if (IsServer)
		{
			array_wolfmove[pln]	 = !!GetCVar("samsara_cl_wolfmove");
			array_smoothAnim[pln]   = !!GetCVar("samsara_cl_smoothanims");
			array_ballgag[pln]	  = !!GetCVar("samsara_cl_ballgag");
			array_weaponBar[pln]	= !!GetCVar("samsara_cl_weaponhud");
			array_pickupswitch[pln] = !!GetCVar("switchonpickup");
		}
		else
		{
			oExecInt = execInt;
			execInt = SamsaraClientVars();

			/*if (execInt != oExecInt)
			{
				execStr = StrParam(s:"pukename -", s:"SamsaraPuke", s:" ", d:execInt, s:" ", d:pln);
				//ConsoleCommand(execStr);
			}*/
		}

		SetInventory("HoldingFist", CheckWeapon(ClassWeapons[PlayerClass(pln)][0][0]));
		SetInventory("HoldingWeapon0", CheckWeapon(ClassWeapons[PlayerClass(pln)][1][0]));
		SetInventory("HoldingPistol", CheckWeapon(ClassWeapons[PlayerClass(pln)][2][0]));
		SetInventory("HoldingWeapon2", CheckWeapon(ClassWeapons[PlayerClass(pln)][3][0]));
		SetInventory("HoldingWeapon3", CheckWeapon(ClassWeapons[PlayerClass(pln)][4][0]));
		SetInventory("HoldingWeapon4", CheckWeapon(ClassWeapons[PlayerClass(pln)][5][0]));
		SetInventory("HoldingWeapon5", CheckWeapon(ClassWeapons[PlayerClass(pln)][6][0]));
		SetInventory("HoldingWeapon6", CheckWeapon(ClassWeapons[PlayerClass(pln)][7][0]));
		SetInventory("HoldingWeapon7", CheckWeapon(ClassWeapons[PlayerClass(pln)][8][0]));
		SetInventory("HoldingWeapon4Skulltag", CheckWeapon(ClassWeapons[PlayerClass(pln)][9][0]));
		SetInventory("HoldingWeapon5Skulltag", CheckWeapon(ClassWeapons[PlayerClass(pln)][10][0]));
		SetInventory("HoldingWeapon6Skulltag", CheckWeapon(ClassWeapons[PlayerClass(pln)][11][0]));
		SetInventory("HoldingWeapon7Skulltag", CheckWeapon(ClassWeapons[PlayerClass(pln)][12][0]));

		If(GetUserCvar(ConsolePlayerNumber(),"samsara_cl_MerryChristmasSnow") && GetCvar("samsara_MerryChristmas") && (timer() % 15) == 0)
			ACS_NamedExecuteWithResult("Samsara_XMAS_SnowCreator");

		Delay(1);
	}
	//Log(s:"Client ", n:pln+1, s:"\c- (", d:pln, s:") has left spawn (", d:startTime, s:" vs. ", d:ClientEnterTimes[pln], s:")");
}

script "SAMSARA_CLIENT_ALTERNATIVECLASS" (int set, int pln) CLIENTSIDE
{
	int cpln = ConsolePlayerNumber();
	if (cpln != pln) { terminate; }

	SamsaraAlternativeClass = set;
}

script "SAMSARA_CLIENT_CLASSLOADOUT" (int slot, int set, int pln) CLIENTSIDE
{
	int cpln = ConsolePlayerNumber();
	if (cpln != pln) { terminate; }

	SamsaraEquipmentLoadout[slot] = set;
}

script "SAMSARA_BARATUSRANGECHECK" (void)
{
	int x = GetActorX(0);	int y = GetActorY(0);	int z = GetActorZ(0);
	if(CheckInventory("HexenClassMode")==3)
	{
		if(SetActivator(0,AAPTR_PLAYER_GETTARGET))
		{
			if((ClassifyActor(0) & ACTOR_MONSTER) || (ClassifyActor(0) & ACTOR_PLAYER))
			{
				int monx = GetActorX(0);	int mony = GetActorY(0);	int monz = GetActorZ(0);
				int vectorx = monx - x;
				int vectory = mony - y;
				int vectorz = monz - z;
				int length = magnitudeThree_f(vectorx,vectory,vectorz);
				if(abs(length) < 128.0) { SetResultValue(1); terminate; } //when returning in other languages, the method would end, this is here for good measure
			}
		}
	}
	SetResultValue(0);

}

script "SamsaraDisconnect" (int player) DISCONNECT
{
    playerClasses[player] = -1;

    for (int i = 0; i < SLOTCOUNT + UNIQUECOUNT; i++) { loadoutPrevValue[player][i] = 0; }
}

script "SamsaraDisconnectClient" (int pln) DISCONNECT CLIENTSIDE //522 -- SAMSARA_DISCONNECT_CLIENT
{
	// Comment out these lines for zdoom
	int cpln = ConsolePlayerNumber();
	if (cpln != pln) { terminate; }

	DisconnectClassScripts(pln);
	SamsaraAlternativeClass = 0;
    for (int i = 0; i < SLOTCOUNT + UNIQUECOUNT; i++) { SamsaraEquipmentLoadout[i] = 0; }
	SamsaraClientClass  = 0;
	SamsaraItemFlash	= Timer();
    playerClassesClient[pln] = -1;
}

script "SamsaraPuke" (int values, int pln) net //226 - SAMSARA_PUKE
{
	array_wolfmove[pln]	 = values & 1;
	array_smoothAnim[pln]   = values & 2;
	array_ballgag[pln]	  = values & 4;
	array_weaponBar[pln]	= values & 8;
	array_pickupswitch[pln] = values & 16;
}

script "SamsaraDeath" DEATH //619 -- SAMSARA_DEATH
{
	int pln = PlayerNumber();
	int i;
	
	for (i = 0; i < DEATHREMOVECOUNT; i++) { TakeInventory(DeathRemove[i], 0x7FFFFFFF); }

	switch (PlayerClass(pln))
	{
	case CLASS_DOOM:
		int deadtimer = 0;

		while (isDead(0))
		{
			if (CheckInventory("DoomClassMode") == 1) // Doom 64
			{
				if (deadtimer >= 1050)
				{
					ACS_NamedExecuteWithResult("SamsaraDoom64DeathMessage", Random(1, 12));
					deadtimer = 0;
				}

				deadtimer++;
			} else { // Original/Stronghold
				if (deadtimer > 0) { deadtimer = 0; }
			}

			Delay(1);
		}
		break;

	case CLASS_DUKE:
        GiveInventory("DukeJetpackIdleSoundStopper", 1);

		Delay(20);

		if (isDead(0))
		{
			SetHudSize(400, 300, 0);

			if (IsSinglePlayer() && !GetCVar("sv_singleplayerrespawn")) { HudMessage(l:"DUKEDEADMESSAGERESTART"; HUDMSG_PLAIN, 1024, CR_LIGHTBLUE, 200.4, 9.1, 1.067); }
			else { HudMessage(l:"DUKEDEADMESSAGERESPAWN"; HUDMSG_PLAIN, 1024, CR_LIGHTBLUE, 200.4, 9.1, 1.067); }

			Delay(15);

			GiveInventory("DukeDeathTaunt", 1);
		}

		while (isDead(0))
		{
			SetHudSize(400, 300, 0);

			if (IsSinglePlayer() && !GetCVar("sv_singleplayerrespawn")) { HudMessage(l:"DUKEDEADMESSAGERESTART"; HUDMSG_PLAIN, 1024, CR_LIGHTBLUE, 200.4, 9.1, 2100); }
			else { HudMessage(l:"DUKEDEADMESSAGERESPAWN"; HUDMSG_PLAIN, 1024, CR_LIGHTBLUE, 200.4, 9.1, 2100); }

			Delay(1);
		}
		break;

	case CLASS_BLAKE:
		SetInventory("SamsaraBStoneAutoChargePistolCooldown", 0);
		break;

	case CLASS_CALEB:
		SetInventory("CalebLighterReadyDummy", 0);
		SetInventory("SawedOffCheck", 0);
		SetInventory("TommyCounter", 0);
		SetInventory("ThrowPower", 0);
		SetInventory("ThrowPowerBig", 0);
		SetInventory("TNT2", 0);
		SetInventory("SprayCan2", 0);
		SetInventory("RemoveVodoo", 0);
		SetInventory("CalebUsingTNT", 0);
		SetInventory("UsingPitchFork", 0);
		break;

	case CLASS_HALFLIFE:
		SetInventory("SamsaraHalfLifeSAWReloadCooldown", 0);
		SetInventory("SamsaraHalfLifeSniperReloadCooldown", 0);
		break;

	case CLASS_RR:
		Delay(20);

		if (isDead(0))
		{
			SetHudSize(400, 300, 0);

			HudMessage(l:"LEONARDDEADMESSAGE"; HUDMSG_PLAIN, 1024, CR_WHITE, 200.4, 9.1, 1.067);

			Delay(15);

			GiveInventory("LeonardDeathTaunt", 1);
		}

		while (isDead(0))
		{
			SetHudSize(400, 300, 0);

			HudMessage(l:"LEONARDDEADMESSAGE"; HUDMSG_PLAIN, 1024, CR_WHITE, 200.4, 9.1, 2100);

			Delay(1);
		}
		break;

	case CLASS_UNREAL:
		SetInventory("SamsaraUnrealCARifleSecondaryCooldown", 0);
		break;

	case CLASS_RTCW:
		if (isSinglePlayer() && !GetCVar("sv_singleplayerrespawn"))
		{
			LocalAmbientSound("RTCW/GameOver", 127);
			SetHudSize(640, 480, 0);
			HudMessage(l:"RTCW_GAMEOVER"; HUDMSG_FADEOUT, 578, CR_WHITE, 320.0, 360.0, 3.0, 0.2);

			while (isDead(0) && isSinglePlayer() && !GetCVar("sv_singleplayerrespawn"))
			{
				LocalSetMusic(""); // don't let any music changes occur while dead

				Delay(1);
			}

			// OK, so you don't die.
			LocalSetMusic("*");
		}
		break;
	}
}

script "SamsaraDoom64DeathMessage" (int randmsg) CLIENTSIDE
{
	int pln = PlayerNumber(); // ensure only the activator gets the messages
	int cpln = ConsolePlayerNumber();

	str deathmsg = StrParam(s:"DOOM64MOCKPLAYER", d:randmsg);

	if (pln == cpln) { Log(l:deathmsg); }
}

script "SamsaraGameplayModCrap" (int respawning)
{
	int pln = PlayerNumber();
	int startTime = Timer();
	int endloop;
	int i;
	int sigilCounter;

	while (!endloop && ServerEnterTimes[pln] == startTime)
	{
		SetCvar("samsara_moddedgame", true);
		HandleBuffCVars();

        for (i = 1; i <= 100; i++)
        {
            str actortotake = StrParam(s:"SAMSARAPATCH_CUSTOMWEAPON_NAME", d:i);
            actortotake = StrParam(l:actortotake);

            if (StrCmp(actortotake, "") && StrCmp(actortotake, StrParam(s:"SAMSARAPATCH_CUSTOMWEAPON_NAME", d:i))) { TakeInventory(actortotake, INTMAX); }
            else { break; }
        }

        if (GetCVar("samsara_currentgame") == GAME_STRIFE)
        {
            if ((isSinglePlayer() || isCoop()) && !isInvasion()) { sigilCounter = SamsaraGlobal[2] + SamsaraGlobal[3] + SamsaraGlobal[4] + SamsaraGlobal[5] + SamsaraGlobal[6]; }
            else { sigilCounter = CheckInventory("SigilSplinter1Temp") + CheckInventory("SigilSplinter2Temp") + CheckInventory("SigilSplinter3Temp") + CheckInventory("SigilSplinter4Temp") + CheckInventory("SigilSplinter5Temp"); }

            for (i = 0; i < SIGILCOUNT; i++)
            {
                if (((isSinglePlayer() || isCoop()) && !isInvasion() && SamsaraGlobal[GLOBAL_SIGILBASE + i + 1]) || ((!(isSinglePlayer() || isCoop()) || isInvasion()) && CheckInventory(SigilSplinters[i][1])))
                {
                    if (!CheckInventory(SigilSplinters[i][0]))
                    {
                        SetInventory(SigilSplinters[i][0], 1);

                        for (int a = 0; a < SIGILCOUNT; a++) { SetInventory(SpectralTogglers[a], 0); }

                        SetInventory("StrifeSigilPiece", sigilCounter);
                        SetInventory(SpectralTogglers[sigilCounter - 1], 1);
                    }
                }
            }
        }

		// Hexen requires an increased jumping height
		if (isZDoom() && GetCvar("samsara_currentgame") == GAME_HEXEN && samsaraClassNum() != CLASS_HEXEN) { GiveInventory("SamsaraIncreasedJumpHeightForHexen", 1); }
		else { TakeInventory("SamsaraIncreasedJumpHeightForHexen", 0x7FFFFFFF); }

		// Strife requires a decreased step height
		if (GetCvar("samsara_currentgame") == GAME_STRIFE) { SetActorProperty(0, APROP_MaxStepHeight, 16.0); }

		Delay(1);
	}
}

script "HandleInstagibWeapons" (void)
{
	int classnum = samsaraClassNum();

	if (CheckInventory("SWClass"))
	{
		TakeInventory("SWKatana",1);
	}

	switch(GetCvar("samsara_slotmode"))
	{
		case 0:
			// Special cases where the class doesn't have a fist.
			if (CheckInventory("BlakeClass") ||
				CheckInventory("C7Class") ||
				CheckInventory("CatacombClass") ||
				CheckInventory("DescentClass")) {
				GiveInventory(ClassWeapons[classnum][2][0],1);
			}
			else {
                if (CheckInventory("WolfenClass") && CheckInventory("WolfenClassMode") == 2) { GiveInventory("Totenkopf_Knife", 1); }
                else if (CheckInventory("HexenClass") && CheckInventory("HexenClassMode") == 3) { GiveInventory("Spiked Gauntlets", 1); }
                else if (CheckInventory("HexenClass") && CheckInventory("HexenClassMode") == 2) { GiveInventory("Sapphire Wand", 1); }
				else { GiveInventory(ClassWeapons[classnum][0][0],1); }

				if (CheckInventory("SWClass"))
				{
					GiveInventory("SWKatana",1);
				}
			}
			break;
		case 1:
            if (CheckInventory("WolfenClass") && CheckInventory("WolfenClassMode") == 2) { GiveInventory("Totenkopf_Pistol", 1); }
            else if (CheckInventory("HexenClass") && CheckInventory("HexenClassMode") == 3) { GiveInventory("Impaler Crossbow", 1); }
            else if (CheckInventory("HexenClass") && CheckInventory("HexenClassMode") >= 1) { GiveInventory("Sapphire Wand", 1); }
			else { GiveInventory(ClassWeapons[classnum][2][0],1); }
			break;
		case 2:
			// Special cases where the class has either an upgrade for another weapon
			// or otherwise can't equip their Slot I. The first case involves non-Totenkopf
			// Blazkowicz getting a knife for the upgrade and the rest will get their pistols.
			if ((CheckInventory("WolfenClass") && (CheckInventory("WolfenClassMode")) <= 1)) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("WitchavenClass") ||
                CheckInventory("RMRClass")) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
            else if (CheckInventory("HexenClass") && CheckInventory("HexenClassMode") == 3) { GiveInventory("Impaler Crossbow", 1); }
            else if (CheckInventory("HexenClass") && CheckInventory("HexenClassMode") >= 1) { GiveInventory("Sapphire Wand", 1); }
			else if ((CheckInventory("HexenClass") && !CheckInventory("HexenClassMode")) ||
				CheckInventory("BlakeClass") ||
				CheckInventory("StrifeClass") ||
				CheckInventory("POGreedClass") ||
				CheckInventory("DisruptorClass")) {
				GiveInventory(ClassWeapons[classnum][2][0],1);
			}
			GiveInventory("SamsaraSlotOnePickup",1);
			break;
		case 3:
			GiveInventory("SamsaraSlotTwoPickup",1);
			break;
		case 4:
			GiveInventory("SamsaraSlotThreePickup",1);
			break;
		case 5:
			GiveInventory("SamsaraSlotFourPickup",1);
			break;
		case 6:
			GiveInventory("SamsaraSlotFourSkulltagPickup",1);
			break;
		case 7:
			GiveInventory("SamsaraSlotFivePickup",1);
			break;
		case 8:
			GiveInventory("SamsaraSlotFiveSkulltagPickup",1);
			break;
		case 9:
			GiveInventory("SamsaraSlotSixPickup",1);
			break;
		case 10:
			GiveInventory("SamsaraSlotSixSkulltagPickup",1);
			break;
		case 11:
			if (CheckInventory("PainkillerClass"))
			{
				GiveInventory("SamsaraSlotFourPickup",1);
			}
				GiveInventory("SamsaraSlotSevenPickup",1);
			break;
		case 12:
			if (CheckInventory("PainkillerClass"))
			{
				GiveInventory("SamsaraSlotFourPickup",1);
			}
				GiveInventory("SamsaraSlotSevenSkulltagPickup",1);
			break;
		case 13:
			// Special cases involving the Uniques are a bit more involved, but
			// ultimatly managable. Basically, if it's an upgrade to an existing
			// weapon or an inventory item, just give them the Slot IV.
			if (CheckInventory("DoomguyClass") && (CheckInventory("DoomClassMode")) <= 1) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("CMClass")) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("ChexClass") ||
				(CheckInventory("WolfenClass") && (CheckInventory("WolfenClassMode")) <= 1) ||
				CheckInventory("HexenClass") ||
				CheckInventory("DukeClass") ||
				CheckInventory("BlakeClass") ||
				CheckInventory("StrifeClass") ||
				CheckInventory("EradClass") ||
				CheckInventory("C7Class") ||
				CheckInventory("RMRClass") ||
				CheckInventory("SWClass") ||
				CheckInventory("KatarnClass") ||
				CheckInventory("POGreedClass") ||
				CheckInventory("DisruptorClass") ||
				CheckInventory("WitchavenClass") ||
				CheckInventory("Hexen2Class") ||
				CheckInventory("CatacombClass") ||
				CheckInventory("PainkillerClass")) {
				GiveInventory("SamsaraSlotFourPickup",1);
			}
			GiveInventory("SamsaraUniquePickup1",1);
			break;
		case 14:
			// Special cases involving the Unique 2.
			if (CheckInventory("DoomguyClass") && (CheckInventory("DoomClassMode")) <= 1) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("CMClass")) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("CorvusClass") ||
				(CheckInventory("WolfenClass") && (CheckInventory("WolfenClassMode")) <= 1) ||
				CheckInventory("HexenClass") ||
				CheckInventory("DukeClass") ||
				CheckInventory("BlakeClass") ||
				CheckInventory("CalebClass") ||
				CheckInventory("StrifeClass") ||
				CheckInventory("EradClass") ||
				CheckInventory("C7Class") ||
				CheckInventory("RMRClass") ||
				CheckInventory("KatarnClass") ||
				CheckInventory("POGreedClass") ||
				CheckInventory("DisruptorClass") ||
				CheckInventory("WitchavenClass") ||
				CheckInventory("Hexen2Class") ||
				CheckInventory("CatacombClass") ||
				CheckInventory("PainkillerClass")) {
				GiveInventory("SamsaraSlotFourPickup",1);
			}
			else if (CheckInventory("SWClass")) {
				GiveInventory("SamsaraSlotFivePickup",1);
			}
			else if (CheckInventory("RRClass")) {
				GiveInventory("SamsaraSlotTwoPickup",1);
			}
			GiveInventory("SamsaraUniquePickup2",1);
			break;
		case 15:
			// Special cases involving the Unique 3.
			if (CheckInventory("DoomguyClass") && (CheckInventory("DoomClassMode")) <= 1) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("DoomguyClass") && (CheckInventory("DoomClassMode")) == 2) {
				GiveInventory("SamsaraSlotFourPickup",1);
			}
			else if (CheckInventory("CMClass")) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("CorvusClass") ||
				(CheckInventory("WolfenClass") && (CheckInventory("WolfenClassMode")) <= 1) ||
				CheckInventory("HexenClass") ||
				CheckInventory("BlakeClass") ||
				CheckInventory("StrifeClass") ||
				CheckInventory("EradClass") ||
				CheckInventory("C7Class") ||
				CheckInventory("RMRClass") ||
				CheckInventory("SWClass") ||
				CheckInventory("KatarnClass") ||
				CheckInventory("POGreedClass") ||
				CheckInventory("DisruptorClass") ||
				CheckInventory("WitchavenClass") ||
				CheckInventory("HalfLifeClass") ||
				CheckInventory("Hexen2Class") ||
				CheckInventory("CatacombClass") ||
				CheckInventory("PainkillerClass")) {
				GiveInventory("SamsaraSlotFourPickup",1);
			}
			else if (CheckInventory("RRClass")) {
				GiveInventory("SamsaraSlotTwoPickup",1);
			}
			else if (CheckInventory("DescentClass")) {
				GiveInventory(ClassWeapons[classnum][2][0],1);
			}
			GiveInventory("SamsaraUniquePickup3",1);
			break;
	}

	if(GetCvar("samsara_instagibspread") >= 1) {
		GiveInventory("SpreadRune",1);
	}

	// I'm so sorry for the else if statements, but the instagib code in Zandronum
	// and the different loadouts for each class and altclass required this ugly-looking function
}

script "SamsaraUnloading" UNLOADING //203
{
	int i;
	UnloadingNow = 1;
	//Use these to unfreeze players. Since it's unloading, it shouldn't hurt anything...
	SetPlayerProperty(1,0,PROP_TOTALLYFROZEN);
	SetPlayerProperty(1,0,PROP_FROZEN);

	for (i = 0; i < UNLOADCOUNT; i++) { TakeInventory(UnloadRemove[i], 0x7FFFFFFF); }
}

script "SamsaraPlayerOxygenFakeInvulnCheck" ENTER
{
    while (true)
    {
        int aircapacity = 35 * 20; // usually the maximum

        if (CheckInventory("PowerFakeInvulnerable") || CheckInventory("PowerFakeInvulnerableCleric") || CheckInventory("PowerFakeInvulnerableMage") ||
            CheckInventory("PowerFakeInvulnerableFighter") || CheckInventory("QuakePentagram") || CheckInventory("PowerGodProtection") ||
            CheckInventory("PowerDogProtection") || CheckInventory("Painkiller_IronWill_Protection") || CheckInventory("PainkillerDemonMorphInvulnerability"))
        { SetAirSupply(PlayerNumber(), aircapacity); }

        Delay(1);
    }
}
