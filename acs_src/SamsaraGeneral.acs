//======================================================================================================================
//										General Scripts that don't serve one set purpose
//======================================================================================================================

//SCRIPTS
//200:
//201: Check if SP/DM/co-op for the Tome of Power/Morph Ovum.
//202: Cooldown for Tome of Power.
//203: Take away all the shit on level ending!
//204: Boss monologues.
//205: Cooldown for Duke's taunts.
//207: Flechette cooldown.
//208: Buddha mode for B.J.'s Extra Life.
//209: Activate Send Full Button Info and activate sv_banjetpack/sv_lmslife/sv_lmsult.
//212: Displaying text.
//214: Duke Jetpack/Visor fuel draining.
//901-902: I'm pretty sure Synert is a wizard, too.
//224: Doomguy's vanilla animations. By Ijon Tichy, transcribed by Llewellyn.
//225: Weapon bar. By Ijon Tichy, transcribed by Llewellyn.

script "SamsaraDecorate" (int choice, int arg1, int arg2) //215 - SAMSARA_DECORATE
{
	int result;
	int i, j, k;
	int x, y, z;
	int pln = PlayerNumber();
    str ammotype = "Placeholder";

	switch (choice)
	{
	case 1:
		if (arg1 >= 1) { result = CheckFlag(0, "TOSSED"); } // dropped by actor
		else { result = CheckFlag(0, "DROPPED"); } // dropped by actor OR spawned by ACS/summon cheats
		break;

	case 2:
		if (CheckInventory("WolfenMovement") && !isDead(0)) { SetActorState(0, "Spawn"); }
		break;

	case 3:
		result = !(GetCVar("sv_itemrespawn") || GetCVar("sv_weaponstay"));
		break;

	case 4:
		result = isInvasion() || !(isCoop() || isSinglePlayer());
		break;

	case 5:
        if (arg1 >= 1) // get discharge amount
        {
            SetActivatorToTarget(0);

            result = CheckInventory("SamsaraWeaponDischargeAmount");
        } else { // set discharge amount
            switch (arg2)
            {
              case 0: // Thunderbolt (Lightning Mode)
                ammotype = "Cell";
                break;

              case 1: // Thunderbolt (Plasma Mode)
                ammotype = "PlasmaCell";
                break;

              case 2: // Shock Roach
                ammotype = "ShockRoachAmmo";
                break;
            }

            if (CheckInventory("SamsaraHasInfiniteAmmo")) { SetInventory("SamsaraWeaponDischargeAmount", GetAmmoCapacity(ammotype)); }
            else { SetInventory("SamsaraWeaponDischargeAmount", CheckInventory(ammotype)); }
        }
        break;

	case 6:
		result = GetCVar("skulltag");
		break;

    case 7:
        if (arg2 != 1) { GiveQuad(arg1); }
        else
        {
            if (isLMS() || GetCVar("samsara_lmsrules"))
            {
                if (GetCVar("samsara_permaquad")) { GiveInventory("QuadDamageItem", 1); }
                break;
            }

            GiveQuad(arg1);

            if (GetCVar("samsara_permaquad")) { GiveInventory("QuadDamageItem", 1); }
        }
        break;

	case 8:
		if (GetCVar("samsara_runninginzdoom")) { result = GetCVar("samsara_zd_expparticles"); }
		else { result = GetUserCVar(ConsolePlayerNumber(), "samsara_cl_expparticles"); }

		if (result == 0) { result = 100; } // default

		if (result > 0)
		{
			result = max(0, result);

			result *= max(arg1, 1);
			result /= max(arg2, 1);

			GiveInventory("QuakeExplosionCounter", result);
		}
		break;

    case 9:
        switch (samsaraClassNum())
        {
          case CLASS_ROTT:
            if (CheckInventory("RottMissiles") < 15)
            {
                SetInventory("RottMissiles", 15);
                result = 1;
            }
            break;

          case CLASS_CATACOMB:
            if (CheckInventory("Catacomb_Zappers") < 6)
            {
                SetInventory("Catacomb_Zappers", 6);
                result = 1;
            }
            break;

          default:
            if (CheckInventory("Clip") < 50)
            {
                SetInventory("Clip", 50);
                result = 1;
            }
            break;
        }
        break;

	case 10:
		TakeInventory("QuakeExplosionCounter", arg1);
		result = CheckInventory("QuakeExplosionCounter");
		break;

    case 11:
        if (CheckInventory("DukeLegacyVoices")) { LocalAmbientSound("duke/old_mpdeath", 127); }
        else { LocalAmbientSound("duke/mpdeath", 127); }
        break;

    case 12:
        LocalAmbientSound("Leonard/MPDeath", 127);
        break;

    case 13:
        HandleAmmoCapacities(arg1);
        break;

	case 14:
		result = isCompetitiveGameMode();
		break;

	case 15:
		SetActorProperty(0, APROP_Speed, percFloat(arg1, arg2));
		break;

	case 16:
		SetHudSize(400, 300, 0);

		if (IsSinglePlayer() && !GetCVar("sv_singleplayerrespawn")) { HudMessage(l:"DUKEDEADMESSAGERESTART"; HUDMSG_PLAIN, 1024, CR_LIGHTBLUE, 200.4, 9.1, 1.75); }
		else { HudMessage(l:"DUKEDEADMESSAGERESPAWN"; HUDMSG_PLAIN, 1024, CR_LIGHTBLUE, 200.4, 9.1, 1.75); }

		Delay(15);

		GiveInventory("DukeDeathTaunt", 1);
		break;

	case 17:
		if (arg1) { result = GetCVar("samsara_permault"); }
		else { result = GetCVar("sv_weaponstay"); }
		break;

	case 19:
		result = isLMS();
		break;

	case 20:
		result = GetCVar("samsara_moddedgame");
		break;

	case 21:
		if(GetCVar("samsara_ammomultiply") > 1)
		{
			int multitoken = GetCVar("samsara_ammomultiply");
			GiveInventory("MultiplyToken", multitoken);
		}
		break;

	case 22:
		result = GetCVar("samsara_nohealthcap");
		break;

	case 23:
		GiveInventory("TimeBombPause", 1);
		Delay(arg1);
		TakeInventory("TimeBombPause", 1);
		break;

	case 25:
		if (GameType() == GAME_NET_COOPERATIVE)
		{ AmbientSound("quake/invisannouncer",127); }
		else
		{ LocalAmbientSound("quake/invisannouncer",127); }
		break;

	case 26:
		if (CheckInventory("PowerInvisibility") == 0)
		{ GiveInventory("PowerInvisibility",1); }
		else
		{ TakeInventory("PowerInvisibility",1);
		delay(1);
		GiveInventory("PowerShadow",1);
		delay(1);
		GiveInventory("PowerShadow",1); }
		break;

	case 27:
		result = GetCVar("samsara_currentgame") == GAME_STRIFE;
		break;

	case 28:
		result = GetCVar("samsara_currentgame") != GAME_DOOM;
		break;

	case 29:
		result = GetCVar("instagib");
		break;

	case 30:
		if (GetCVar("samsara_runninginzdoom") == 1)
		{
			result = GetCVar("samsara_zd_bloodyhell");
			//log(s:"ZDoom ",i:result);
		} else {
			result = GetCVar("samsara_cl_bloodyhell");
			//log(s:"Zandro ",i:result);
		}
		break;

	case 32:
		result = GetCVar("samsara_nohealth") || GetCVar("sv_nohealth");
		break;

	case 33:
		result = GetCVar("samsara_vanillaquake");
		break;

	case 34:
        if (!CheckInventory("SamsaraBallgag") && !CheckInventory("EleenaTauntCooldown"))
        {
            switch (CheckInventory("EradMode"))
            {
                default: break;
                case 0: LocalAmbientSound("Eleena/Suicide", 127); break;
            }

            GiveInventory("EleenaTauntCooldown",5);
            ACS_NamedExecuteAlways("EleenaTauntCooldown",0,0);
        }
        break;

	case 35:
		SetResultValue(pln);
		break;

	case 36: //we're kinda stuck with this, for now
		if(arg1 == 2)
			result = GetCVar("samsara_microwavepop");

		else
			{
				if(arg2 == 0)
					result = SpawnForced("RPGExplosion", GetActorX(0), GetActorY(0), GetActorZ(0) + (GetActorProperty(0,APROP_Height) * 2), 0, 0);
				else
					result = SpawnForced("RPGExplosion", GetActorX(0), GetActorY(0), GetActorZ(0) + (GetActorProperty(0,APROP_Height) / 2), 0, 0);
			}

		GiveInventory("Duke64ExpanderBell",1);
		break;

	case 37:
		SetHudSize(400, 300, 0);

		HudMessage(l:"LEONARDDEADMESSAGE"; HUDMSG_PLAIN, 1024, CR_WHITE, 200.4, 9.1, 1.75);

		Delay(15);

		GiveInventory("LeonardDeathTaunt", 1);
		break;

	case 38:
		if(CheckInventory("GeneratedMonsterToken") == 1)
		{
			if (GetCVar("samsara_zscriptready") >= 1) { GiveInventory("SamsaraCountKillDisablerZS", 1); }
			else { GiveInventory("SamsaraCountKillDisabler", 1); }
		}
		break;

	case 39:
		SetActorProperty(0,APROP_Renderstyle,STYLE_NORMAL);
		break;

	case 40:
		Delay(3);
		TakeInventory("DaedalonInRange",1);
		break;

	case 41:
		Thing_ChangeTid(0,UniqueTid());
		break;

	case 42:
		if (arg1)
		{
			if (MapArmors[0] == -1) { CheckMapArmors(); }
			SetArmorMode();

			if (MapArmors[ARMOR_YELLOW] == 1) { i = 1; }
			else { i = 0; }

			result = i;
		} else {
			SetArmorMode();

			result = ArmorMode;
		}
		break;
	case 43:
		result = onLiquid(0);
		break;

	case 44:
		result = GetCVar("samsara_cl_berserkswitch");
		break;

	case 45:
		result = GetCVar("samsara_runninginzandro") && GetCVar("samsara_banmorphovum");
		break;

	case 46:
		result = SinglePlayer();
		break;

	case 47:
		result = GetCVar("samsara_fullradiusdmg");
		break;

	case 48:
		result = GetCVar("samsara_nopainkillercorpseremoval");
		break;

	case 49:
		result = GetCVar("samsara_currentgame");
		break;

	case 50:
		result = GetCVar("samsara_mixerloaded");
		break;

	case 51:
		result = GetCVar("samsara_noarmorcap");
		break;

	case 52:
		if (arg1 > 1)
		{
			if (GetCVar("samsara_pdwtak_fulldamagedistance") > GetCVar("samsara_pdwtak_distance")) { result = GetCVar("samsara_pdwtak_distance"); }
			else if (GetCVar("samsara_pdwtak_fulldamagedistance") < 0) { result = 0; }
			else { result = GetCVar("samsara_pdwtak_fulldamagedistance"); }
		}
		else if (arg1 == 1) { result = GetCVar("samsara_pdwtak_distance"); }
		else { result = GetCVar("samsara_pdwtak_damage"); }
		break;

	case 53:
		result = MapRevealerPickedUp;
		break;

	case 54:
		result = GetCVar("samsara_descentflight");
		break;

	case 55:
		result = GetCVar("samsara_extralifeteleport");
		break;

	case 56:
		result = GetCVar("samsara_banrottgodmode");
		break;

	case 57:
		result = GetCVar("samsara_cl_autoinventoryhealth");
		break;

    case 58:
        LocalAmbientSound("Painkiller/Pickup/Soul", 127);
        break;

    case 59:
        result = GetCVar("samsara_bloodakimbomode");
        break;

    case 60:
        result = GetCVar("samsara_absolutionunmaker");
        break;

    case 61:
        result = GetCVar("samsara_lifeleechdrain");
        break;

    case 62:
        result = GetCVar("samsara_hlexplosivebolts");
        break;

    case 63:
        result = GetCVar("samsara_banjetpack");
        break;

    case 64:
        result = GetCVar("samsara_permaquad");
        break;

    case 65:
        result = GetCVar("samsara_dualpickup");
        break;

    case 66:
        result = GetCVar("samsara_extraweapons");
        break;

    case 67:
        result = GetCVar("samsara_hlgaussjump");
        break;

    case 68:
        result = GetCVar("samsara_bombwalls");
        break;

    case 69:
        switch (arg1)
        {
          case 0:
            result = GetCVar("samsara_cl_maxedinventoryhealthpickup");
            break;

          case 1:
            result = GetCVar("samsara_cl_maxedinventoryarmorpickup");
            break;

          default:
            break;
        }
        break;

    case 70:
        result = CheckFlag(0, "INVULNERABLE") ||
                 CheckInventory("PowerFakeInvulnerable") || CheckInventory("PowerFakeInvulnerableCleric") || CheckInventory("PowerFakeInvulnerableMage") ||
                 CheckInventory("PowerFakeInvulnerableFighter") || CheckInventory("QuakePentagram") || CheckInventory("PowerGodProtection") ||
                 CheckInventory("PowerDogProtection") || CheckInventory("Painkiller_IronWill_Protection") || CheckInventory("PainkillerDemonMorphInvulnerability");
        break;
	}

	SetResultValue(result);
}

script "SamsaraClientDecorate" (int which, int a1, int a2) clientside //212 -- SAMSARA_CLIENT_DECORATE
{
	int i, j, k;
	int x, y, z;
	int result;
	int bloodyHellCVar;

	SetFont("SMALLFONT");
	switch (which)
	{
    case 1:
        if (a1 >= 2)
        {
            if (isSinglePlayer() || isFreeForAll()) { Print(l:"MYSTICAMBITINCANTFAIL_FIGHTER1"); }
            else { Print(l:"MYSTICAMBITINCANTFAIL_FIGHTER2"); }
        } else if (a1 == 1) {
            if (isSinglePlayer() || isFreeForAll()) { Print(l:"MYSTICAMBITINCANTFAIL_MAGE1"); }
            else { Print(l:"MYSTICAMBITINCANTFAIL_MAGE2"); }
        } else {
            if (isSinglePlayer() || isFreeForAll()) { Print(l:"MYSTICAMBITINCANTFAIL_CLERIC1"); }
            else { Print(l:"MYSTICAMBITINCANTFAIL_CLERIC2"); }
        }
        break;

	case 2:
		Print(s:"");
		break;

	case 3:
		SetHudSize(400, 300, 0);
		Hudmessage(l:"FOOTENGAGED";
		HUDMSG_PLAIN,1024,CR_LIGHTBLUE,200.4,9.1,1.0);
		break;

	case 4:
		// [tv50] can't use while, otherwise the cpln isn't acquired I guess?
		// [tv50] in any case, it won't work. at least, not to my knowledge

		//while (true)
		//{
			bool cvarenabled = false;

			if (GetCVar("samsara_runninginzdoom")) { cvarenabled = GetCVar("samsara_zd_noadditivepickups"); }
			else { cvarenabled = GetUserCVar(ConsolePlayerNumber(), "samsara_cl_noadditivepickups"); }

			if (cvarenabled)
			{
				SetActorProperty(0, APROP_RenderStyle, STYLE_Normal);
				SetActorProperty(0, APROP_Alpha, itof(a1)/100);
			} else {
				SetActorProperty(0, APROP_RenderStyle, STYLE_Add);
				SetActorProperty(0, APROP_Alpha, itof(a2)/100);
			}

			//Delay(35);
		//}
		break;

	case 7:
		Print(l:"ALREADYFLYING");
		break;

	case 8:
		Print(l:"TXT_NEEDMAP");
		break;

	case 9:
		x = GetActorX(0); y = GetActorY(0); z = GetActorZ(0);
		i = GetActorPitch(0);
		j = GetActorAngle(0);
		k = unusedTID(4000, 14000);

		z += itof(cond(keyDown(BT_CROUCH), random(10, 14), random(30, 34)));
		Spawn("GauntletSparks", x + FixedMul(cos(i), 16 * cos(j)), y + FixedMul(cos(i), 16 * sin(j)), z - (16 * sin(i)), k);
		SetActorVelocity(k, GetActorVelX(0), GetActorVelY(0), GetActorVelZ(0), 0,0);
		break;

	case 10:
		if (GetCVar("samsara_runninginzdoom") == 1) { bloodyHellCVar = GetCvar("samsara_zd_bloodyhell"); }
		else { bloodyHellCVar = GetUserCvar(ConsolePlayerNumber(), "samsara_cl_bloodyhell"); }

		if ((StrICmp(strparam(l:"NASHGOREMNU_HELPTEXT_MISC_UNINSTALL"),"Safely deactivates NashGore NEXT.") == 0) && (GetCVar("samsara_zscriptready") == 2))
		{
			bloodyHellCVar = 0;
		}

		switch (bloodyHellCVar)
		{
			case BLOODYHELL_SONIC:			SetActorState(0,"XDeathSonic"); break;
			case BLOODYHELL_FOODFIGHT:		SetActorState(0,"XDeathFoodfight"); break;
			case BLOODYHELL_COMIC:			SetActorState(0,"XDeathComic"); break;
			case BLOODYHELL_HAPPYFUN:		SetActorState(0,"XDeathHappyfun"); break;
			case BLOODYHELL_VANILLA:		break;
			case BLOODYHELL_NASHGORE:		SetActorState(0,"XDeathNashgore"); break;
			case BLOODYHELL_NASHGORE2D:		SetActorState(0,"XDeathNashgore2D"); break;
			case BLOODYHELL_BRUTAL:			SetActorState(0,"XDeathBrutal"); break;
			case BLOODYHELL_BRUTAL2D:		SetActorState(0,"XDeathBrutal2D"); break;
			case BLOODYHELL_NIGHTMARE:		SetActorState(0,StrParam(s: "XDeathNightmare", d: random(1,2))); break;
			case BLOODYHELL_NIGHTMARE2D:	SetActorState(0,StrParam(s: "XDeathNightmare2D", d: random(1,2))); break;
			case BLOODYHELL_BOLOGNESE:		SetActorState(0,"XDeathBolognese"); break;
			case BLOODYHELL_KETCHUP:		SetActorState(0,"XDeathKetchup"); break;
			case BLOODYHELL_TREMOR:			SetActorState(0,"XDeathTremor"); break;
			case BLOODYHELL_DBT:			SetActorState(0,StrParam(s: "XDeathDBThanatos", d: random(1,4))); break;
			case BLOODYHELL_SMOOTH:			SetActorState(0,"XDeathSmooth"); break;
		}
		break;

	case 11:
		if (GetCVar("samsara_runninginzdoom") == 1) { bloodyHellCVar = GetCvar("samsara_zd_bloodyhell"); }
		else { bloodyHellCVar = GetUserCvar(ConsolePlayerNumber(), "samsara_cl_bloodyhell"); }

		if ((StrICmp(strparam(l:"NASHGOREMNU_HELPTEXT_MISC_UNINSTALL"),"Safely deactivates NashGore NEXT.") == 0) && (GetCVar("samsara_zscriptready") == 2))
		{
			bloodyHellCVar = 0;
		}

		switch (bloodyHellCVar)
		{
			case BLOODYHELL_SONIC:			SetActorState(0,"DeathSonic"); break;
			case BLOODYHELL_FOODFIGHT:		SetActorState(0,"DeathFoodfight"); break;
			case BLOODYHELL_COMIC:			SetActorState(0,"DeathComic"); break;
			case BLOODYHELL_HAPPYFUN:		SetActorState(0,"DeathHappyfun"); break;
			case BLOODYHELL_VANILLA:		break;
			case BLOODYHELL_NASHGORE:		SetActorState(0,"DeathNashgore"); break;
			case BLOODYHELL_NASHGORE2D:		SetActorState(0,"DeathNashgore2D"); break;
			case BLOODYHELL_BRUTAL:			SetActorState(0,"DeathBrutal"); break;
			case BLOODYHELL_BRUTAL2D:		SetActorState(0,"DeathBrutal2D"); break;
			case BLOODYHELL_NIGHTMARE:		SetActorState(0,StrParam(s: "DeathNightmare", d: random(1,6))); break;
			case BLOODYHELL_NIGHTMARE2D:	SetActorState(0,StrParam(s: "DeathNightmare2D", d: random(1,6))); break;
			case BLOODYHELL_BOLOGNESE:		SetActorState(0,"DeathBolognese"); break;
			case BLOODYHELL_KETCHUP:		SetActorState(0,"DeathKetchup"); break;
			case BLOODYHELL_TREMOR:			SetActorState(0,"DeathTremor"); break;
			case BLOODYHELL_DBT:			SetActorState(0,"DeathDBThanatos"); break;
			case BLOODYHELL_SMOOTH:			SetActorState(0,"DeathSmooth"); break;
		}
		break;

	case 12:
		//Many players won't use this option, so it's best to check default to cut back on if statements
		if (GetCVar("samsara_runninginzdoom") == 1) { bloodyHellCVar = GetCvar("samsara_zd_bloodyhell"); }
		else { bloodyHellCVar = GetUserCvar(ConsolePlayerNumber(), "samsara_cl_bloodyhell"); }

		if ((StrICmp(strparam(l:"NASHGOREMNU_HELPTEXT_MISC_UNINSTALL"),"Safely deactivates NashGore NEXT.") == 0) && (GetCVar("samsara_zscriptready") == 2))
		{
			bloodyHellCVar = 0;
		}

		if (CheckActorClass(0,"Switchable_FlyingBlood_NonViolent"))
		{
			switch (bloodyHellCVar)
			{
				case BLOODYHELL_SONIC:		SetActorState(0,"SpawnSonic"); break;
				case BLOODYHELL_FOODFIGHT:	SetActorState(0,"SpawnFoodfight"); break;
				case BLOODYHELL_COMIC:		SetActorState(0,"SpawnComic"); break;
				case BLOODYHELL_HAPPYFUN:	SetActorState(0,GetBloodStateModifier("SpawnHappyfun", a1)); break;
				default:					SetActorState(0,GetBloodStateModifier("SpawnNormal", a1)); break;
			}
		}
		else
		{
			switch (bloodyHellCVar)
			{
				case BLOODYHELL_SONIC:			SetActorState(0,"SpawnSonic"); break;
				case BLOODYHELL_FOODFIGHT:		SetActorState(0,"SpawnFoodfight"); break;
				case BLOODYHELL_COMIC:			SetActorState(0,"SpawnComic"); break;
				case BLOODYHELL_HAPPYFUN:		SetActorState(0,GetBloodStateModifier("SpawnHappyfun", a1)); break;
				case BLOODYHELL_VANILLA:		SetActorState(0,GetBloodStateModifier("SpawnNormal", a1)); break;
				case BLOODYHELL_NASHGORE:		SetActorState(0,GetBloodStateModifier("SpawnNashgore", a1)); break;
				case BLOODYHELL_NASHGORE2D:		SetActorState(0,GetBloodStateModifier("SpawnNashgore2D", a1)); break;
				case BLOODYHELL_BRUTAL:			SetActorState(0,"SpawnBrutal"); break;
				case BLOODYHELL_BRUTAL2D:		SetActorState(0,"SpawnBrutal2D"); break;
				case BLOODYHELL_NIGHTMARE:		SetActorState(0,GetBloodStateModifier("SpawnNightmare", a1)); break;
				case BLOODYHELL_NIGHTMARE2D:	SetActorState(0,GetBloodStateModifier("SpawnNightmare2D", a1)); break;
				case BLOODYHELL_BOLOGNESE:		SetActorState(0,"SpawnBolognese"); break;
				case BLOODYHELL_KETCHUP:		SetActorState(0,"SpawnKetchup"); break;
				case BLOODYHELL_TREMOR:			SetActorState(0,GetBloodStateModifier("SpawnTremor", a1)); break;
				case BLOODYHELL_DBT:			SetActorState(0,"SpawnDBThanatos"); break;
				case BLOODYHELL_SMOOTH:			SetActorState(0,GetBloodStateModifier("SpawnSmooth", a1)); break;
			}
		}
		break;

	case 13:
		if (GetCVar("samsara_runninginzdoom") == 1)
		{
			result = GetCVar("samsara_zd_bloodypersistent");
		} else {
			result = GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodypersistent");
		}
		break;

	case 14:
		if (GetCVar("samsara_runninginzdoom") == 1)
			result = GetCVar("samsara_cl_dukemode");

		else
			result = GetUserCVar(ConsolePlayerNumber(), "samsara_cl_dukemode");

		break;
	case 15:
		if (GetCVar("samsara_runninginzdoom") == 1) { bloodyHellCVar = GetCvar("samsara_zd_bloodyhell"); }
		else { bloodyHellCVar = GetUserCvar(ConsolePlayerNumber(), "samsara_cl_bloodyhell"); }

		if ((StrICmp(strparam(l:"NASHGOREMNU_HELPTEXT_MISC_UNINSTALL"),"Safely deactivates NashGore NEXT.") == 0) && (GetCVar("samsara_zscriptready") == 2))
		{
			bloodyHellCVar = 0;
		}

		switch (bloodyHellCVar)
		{
			case BLOODYHELL_SONIC:			SetActorState(0,"CrashSonic"); break;
			case BLOODYHELL_FOODFIGHT:		SetActorState(0,"CrashFoodfight"); break;
			case BLOODYHELL_COMIC:			SetActorState(0,"CrashComic"); break;
			case BLOODYHELL_HAPPYFUN:		SetActorState(0,"CrashHappyfun"); break;
			case BLOODYHELL_VANILLA:		break;
			case BLOODYHELL_NASHGORE:		SetActorState(0,"CrashNashgore"); break;
			case BLOODYHELL_NASHGORE2D:		SetActorState(0,"CrashNashgore2D"); break;
			case BLOODYHELL_BRUTAL:			SetActorState(0,"CrashBrutal"); break;
			case BLOODYHELL_BRUTAL2D:		SetActorState(0,"CrashBrutal2D"); break;
			case BLOODYHELL_NIGHTMARE:		SetActorState(0,"CrashNightmare"); break;
			case BLOODYHELL_NIGHTMARE2D:	SetActorState(0,"CrashNightmare2D"); break;
			case BLOODYHELL_BOLOGNESE:		SetActorState(0,"CrashBolognese"); break;
			case BLOODYHELL_KETCHUP:		SetActorState(0,"CrashKetchup"); break;
			case BLOODYHELL_TREMOR:			SetActorState(0,"CrashTremor"); break;
			case BLOODYHELL_DBT:			SetActorState(0,"CrashDBThanatos"); break;
			case BLOODYHELL_SMOOTH:			SetActorState(0,"CrashSmooth"); break;
		}
		break;
	case 16:
		if (GetCVar("samsara_runninginzdoom") == 1) { bloodyHellCVar = GetCvar("samsara_zd_bloodyhell"); }
		else { bloodyHellCVar = GetUserCvar(ConsolePlayerNumber(), "samsara_cl_bloodyhell"); }

		if ((StrICmp(strparam(l:"NASHGOREMNU_HELPTEXT_MISC_UNINSTALL"),"Safely deactivates NashGore NEXT.") == 0) && (GetCVar("samsara_zscriptready") == 2))
		{
			bloodyHellCVar = 0;
		}

		switch (bloodyHellCVar)
		{
			case BLOODYHELL_SONIC:			SetActorState(0,"DeathSonic"); break;
			case BLOODYHELL_FOODFIGHT:		SetActorState(0,"DeathFoodfight"); break;
			case BLOODYHELL_COMIC:			SetActorState(0,"DeathComic"); break;
			case BLOODYHELL_HAPPYFUN:		SetActorState(0,"DeathHappyfun"); break;
			case BLOODYHELL_VANILLA:		SetActorState(0,"DeathVanilla"); break;
			case BLOODYHELL_NASHGORE:		SetActorState(0,"DeathNashgore"); break;
			case BLOODYHELL_NASHGORE2D:		SetActorState(0,"DeathNashgore2D"); break;
			case BLOODYHELL_BRUTAL:			SetActorState(0,"DeathBrutal"); break;
			case BLOODYHELL_BRUTAL2D:		SetActorState(0,"DeathBrutal2D"); break;
			case BLOODYHELL_NIGHTMARE:		SetActorState(0,StrParam(s: "DeathNightmare", d: random(1,6))); break;
			case BLOODYHELL_NIGHTMARE2D:	SetActorState(0,StrParam(s: "DeathNightmare2D", d: random(1,6))); break;
			case BLOODYHELL_BOLOGNESE:		SetActorState(0,"DeathBolognese"); break;
			case BLOODYHELL_KETCHUP:		SetActorState(0,"DeathKetchup"); break;
			case BLOODYHELL_TREMOR:			SetActorState(0,"DeathTremor"); break;
			case BLOODYHELL_DBT:			SetActorState(0,"DeathDBThanatos"); break;
			case BLOODYHELL_SMOOTH:			SetActorState(0,"DeathSmooth"); break;
		}
		break;

    case 17:
        if (a1 >= 11) { Print(l:"HOURGLASSCOOLDOWN"); }
        else if (a1 == 10) { Print(l:"HEXEN2TOMECOOLDOWN"); }
        else if (a1 == 9) { Print(l:"BEACONCOOLDOWN"); }
        else if (a1 == 8) { Print(l:"GUNSAKIMBOCOOLDOWN"); }
        else if (a1 == 7) { Print(l:"QUADCOOLDOWN"); }
        else if (a1 == 6) { Print(l:"HOLOCOOLDOWN"); }
        else if (a1 == 5) { Print(l:"DSCOOLDOWN"); }
        else if (a1 == 4) { Print(l:"DORCOOLDOWN"); }
        else if (a1 == 3) { Print(l:"FLECCOOLDOWNFIGHTER"); }
        else if (a1 == 2) { Print(l:"FLECCOOLDOWNMAGE"); }
        else if (a1 == 1) { Print(l:"FLECCOOLDOWNCLERIC"); }
        else { Print(l:"TOMECOOLDOWN"); }
        break;

    case 18:
        if (a1 >= 4) { Print(l:"HEXEN2TOMEPPW"); }
        else if (a1 == 3) { Print(l:"DFSUPERCHARGEPPW"); }
        else if (a1 == 2) { Print(l:"ENHANCEMENTCHIPPPW"); }
        else if (a1 == 1) { Print(l:"TOMEPPW"); }
        else { Print(l:"STRWEAPONPOWERUPKITPPW"); }
        break;

    case 19:
        if (a1 >= 1) { Print(l:"WITCHAVENSPELLDISABLED"); }
        else { Print(l:"WITCHAVENSPELLNOAMMO"); }
        break;
	}

	SetResultValue(result);
}

//======================================================================================================================
//												Hotkey Scripts
//======================================================================================================================

int SamsaraOriginalSlotDelays[CLASSCOUNT][MAXMODES] =
{
	{ 9, 9, 9 },
	{ 9 },
	{ 9 },
	{ 0, 0, 0 },
	{ 9, 9, 9 },
	{ 9, 9, 9 },
	{ 9 },
	{ 0 },
	{ 9, 9, 9, 9, 9 },
	{ 0, 0 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 0 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 0, 0 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 0 },
	{ 0 },
	{ 9 },
	{ 9 },
	{ 5 },
	{ 12 },
	{ 9 },
};

script "Samsara_WeaponHotkeys" (int mode)
{
    int pln = PlayerNumber();

    int loadout = 0;

    switch (mode)
    {
      case 0: loadout = SLOT_FIST; break;
      case 1: loadout = SLOT_CHAINSAW; break;
      case 2: loadout = SLOT_PISTOL; break;
      case 3: loadout = SLOT_SHOTGUN; break;
      case 4: loadout = SLOT_SUPERSHOTGUN; break;
      case 5: loadout = SLOT_CHAINGUN; break;
      case 6: loadout = SLOT_ROCKETLAUNCHER; break;
      case 7: loadout = SLOT_PLASMARIFLE; break;
      case 8: loadout = SLOT_BFG9000; break;
      case 9: loadout = SLOTCOUNT - 1 - SLOT_UNIQUE1; break;
      case 10: loadout = SLOTCOUNT - 1 - SLOT_UNIQUE2; break;
      case 11: loadout = SLOTCOUNT - 1 - SLOT_UNIQUE3; break;
      case 12: loadout = SLOT_MINIGUN; break;
      case 13: loadout = SLOT_GRENADELAUNCHER; break;
      case 14: loadout = SLOT_RAILGUN; break;
      case 15: loadout = SLOT_BFG10K; break;
    }

    if (!SetWeapon(ClassHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][SamsaraEquipmentLoadout[loadout]])) { UseInventory(ClassHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][SamsaraEquipmentLoadout[loadout]]); }
}

Script "Samsara_OriginalSlots" (int mode)
{
	if(CheckInventory("SamsaraOriginalKeySwitcheroo")) terminate;
	GiveInventory("SamsaraOriginalKeySwitcheroo",1);

	int pln = PlayerNumber();
	int switchAttempts = 0;
	if (mode != CheckInventory("SamsaraOriginalSlotCounter")) SetInventory("SamsaraOriginalKeyCounter", 0);
	str nextWeapon = OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][CheckInventory("SamsaraOriginalKeyCounter")];
	if (StrLen(nextweapon) == 0) { SetInventory("SamsaraOriginalKeyCounter", 0); nextWeapon = OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][CheckInventory("SamsaraOriginalKeyCounter")]; }
	GiveInventory("SamsaraOriginalKeyCounter", 1);

	switch(PlayerClass(pln))
	{
		default:
			SetInventory("SamsaraOriginalSlotCounter", mode);
			until(SetWeapon(nextweapon) || switchAttempts >= 10)
			{
				switchAttempts++;
				nextWeapon = OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][CheckInventory("SamsaraOriginalKeyCounter")];
				if (StrLen(nextweapon) == 0) { SetInventory("SamsaraOriginalKeyCounter", 0); nextWeapon = OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][CheckInventory("SamsaraOriginalKeyCounter")]; }
				else { GiveInventory("SamsaraOriginalKeyCounter", 1); }
			}
			break;
		case CLASS_HALFLIFE:
			TakeInventory("SamsaraOriginalKeyCounter", 1);
			ACS_NamedExecuteWithResult("Samsara_DoHLWeaponSwitch",mode,pln);
			break;
		case CLASS_DESCENT:
			SetInventory("SamsaraOriginalSlotCounter", mode);
			switch(mode)
			{
				default:
					TakeInventory("DescentSecondaryKeySwitcher",1);
					until(SetWeapon(nextweapon) || switchAttempts >= 10)
					{
						switchAttempts++;
						nextWeapon = OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][CheckInventory("SamsaraOriginalKeyCounter")];
						if (StrLen(nextweapon) == 0) { SetInventory("SamsaraOriginalKeyCounter", 0); nextWeapon = OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][CheckInventory("SamsaraOriginalKeyCounter")]; }
						else { GiveInventory("SamsaraOriginalKeyCounter", 1); }
					}
					break;
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
					GiveInventory("DescentSecondaryKeySwitcher",1);
					until(SetWeapon(nextweapon) || switchAttempts >= 10)
					{
						switchAttempts++;
						nextWeapon = OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][CheckInventory("SamsaraOriginalKeyCounter")];
						if (StrLen(nextweapon) == 0) { SetInventory("SamsaraOriginalKeyCounter", 0); nextWeapon = OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][CheckInventory("SamsaraOriginalKeyCounter")]; }
						else { GiveInventory("SamsaraOriginalKeyCounter", 1); }
					}
					break;
			}
			break;
	}

	//Log(d:CheckInventory("SamsaraOriginalSlotCounter"), s:" ", d:CheckInventory("SamsaraOriginalKeyCounter"), s:" ", s:OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][CheckInventory("SamsaraOriginalSlotCounter")][CheckInventory("SamsaraOriginalKeyCounter")]);

	Delay(SamsaraOriginalSlotDelays[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")]);

	TakeInventory("DescentSecondaryKeySwitcher",1);
	SetInventory("SamsaraOriginalKeySwitcheroo", 0);
}

str HLWeaponGraphics[2][10][10] =
{
	{
		{ "HPKUP00", "HPKUP00", "HPKUP20", "", "", "", "", "", "", "" },
		{ "HPKUP01", "HPKUP12", "HPKUP12", "", "", "", "", "", "", "" },
		{ "HPKUP13", "HPKUP14", "HPKUP16", "", "", "", "", "", "", "" },
		{ "HPKUP17", "HPKUP18", "HPKUP19", "HPKUP20", "", "", "", "", "", "" },
		{ "HPKUP15", "HPKUP15", "", "", "", "", "", "", "", "" },
		{ "HPKUP18", "HPKUP19", "HPKUP16", "", "", "", "", "", "", "" },
		{ "HPKUP17", "HPKUP20", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
	},
	{
		{ "OPFSL11", "OPFSL11", "OPFSL00", "", "", "", "", "", "", "" },
		{ "OPFSL10", "OPFSL02", "OPFSL02", "", "", "", "", "", "", "" },
		{ "OPFSL04", "OPFSL03", "OPFSL08", "", "", "", "", "", "", "" },
		{ "OPFSL05", "OPFSL06", "OPFSL07", "OPFSL01", "", "", "", "", "", "" },
		{ "OPFSL09", "OPFSL09", "", "", "", "", "", "", "", "" },
		{ "OPFSL06", "OPFSL07", "OPFSL08", "", "", "", "", "", "", "" },
		{ "OPFSL05", "OPFSL01", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
	},
};

script "Samsara_DoHLWeaponSwitch" (int mode, int pln)
{
	int switchTimer;

	if (mode != CheckInventory("SamsaraOriginalSlotCounter"))
	{
		SetInventory("SamsaraOriginalKeyCounter",0);
		SetInventory("HLOriginalKeySwitcherOpen",0);
	}

	SetInventory("SamsaraOriginalSlotCounter", mode);

    if (CheckInventory("HLOriginalKeySwitcherOpen"))
    {
        LocalAmbientSound("halflife/weaponmove", 127);
        GiveInventory("SamsaraOriginalKeyCounter", 1);
    } else {
        LocalAmbientSound("halflife/weaponselect", 127);
        GiveInventory("HLOriginalKeySwitcherOpen", 1);
    }

	if(strlen(OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][CheckInventory("SamsaraOriginalSlotCounter")][CheckInventory("SamsaraOriginalKeyCounter")]) == 0)
		SetInventory("SamsaraOriginalKeyCounter", 0);

	//Keep it from selecting invalid weapons
	int attempts;
	int startingCounter = CheckInventory("SamsaraOriginalKeyCounter");
	until(CheckInventory(OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][CheckInventory("SamsaraOriginalSlotCounter")][CheckInventory("SamsaraOriginalKeyCounter")]))
	{
		attempts++;
		if(attempts > 10) { SetInventory("SamsaraOriginalKeyCounter", startingCounter); terminate; }
		GiveInventory("SamsaraOriginalKeyCounter", 1);

		if(strlen(OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][CheckInventory("SamsaraOriginalSlotCounter")][CheckInventory("SamsaraOriginalKeyCounter")]) == 0)
		SetInventory("SamsaraOriginalKeyCounter", 0);
	}

	GiveInventory("HLOriginalKeySwitcher",1);
	int currentSwitch = CheckInventory("HLOriginalKeySwitcher");
	int startingMode = CheckInventory("SamsaraModeCounter");


	while(switchTimer < 35 && CheckInventory("SamsaraModeCounter") == startingMode)
	{
		int heightOffset = (32 + 144 * (CheckInventory("ExpandedHud") && GetCVAR("screenblocks") <= 10)) * 1.0;
		if(CheckInventory("HLOriginalKeySwitcher") != currentSwitch)
			terminate;

		SetHudSize(1280,960,1);
		for(int a = 0; a < 7; a++)
		{
			SetFont(strparam(s:CheckInventory("SamsaraModeCounter") == 0 ? "HWMSLOT" : "OPFWM",d:a+1));
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,32100+a,0,((a*24.0)+(mode<a)*152.0)+0.1,heightOffset,0.0,0.5);
			int validWeapon = 0;
			for(int b = 0; b < 5; b++)
			{
				if(strlen(OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][a][b]) > 0 && CheckInventory(OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][a][b]))
				{
					if(mode == a)
					{
						if(b == CheckInventory("SamsaraOriginalKeyCounter"))
						{
							SetFont(CheckInventory("SamsaraModeCounter") == 0 ? "HLWPNSL0" : "OPWPNSL0");
							HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,32229,0,((a*24.0)+(mode<a)*152.0)+0.1,heightOffset+((validWeapon+1)*48.0)-12.0,0.0,0.5);
							SetFont(strparam(s:HLWeaponGraphics[CheckInventory("SamsaraModeCounter")][a][b],s:"H"));
							HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,32200+(10*a)+validWeapon,0,((a*24.0)+(mode<a)*152.0)+0.1,heightOffset+((validWeapon+1)*48.0)-12.0,0.0,0.5);
						}
						else
						{
							SetFont(strparam(s:HLWeaponGraphics[CheckInventory("SamsaraModeCounter")][a][b],s:"N"));
							HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,32200+(10*a)+validWeapon,0,((a*24.0)+(mode<a)*152.0)+0.1,heightOffset+((validWeapon+1)*48.0)-12.0,0.0,0.5);
						}
					}
					else
					{
						SetFont(CheckInventory("SamsaraModeCounter") == 0 ? "HWMSLOT" : "OPFWMB");
						HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,32200+(10*a)+validWeapon,0,((a*24.0)+(mode<a)*152.0)+0.1,heightOffset+((validWeapon+1)*24.0),0.0,0.5);
					}
					validWeapon++;
				}
			}
		}

		//PrintBold(s:OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][CheckInventory("SamsaraOriginalSlotCounter")][CheckInventory("SamsaraOriginalKeyCounter")]);
		if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ATTACK)
		{
			LocalAmbientSound("halflife/weaponpick",127);
			SetWeapon(OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][CheckInventory("SamsaraOriginalSlotCounter")][CheckInventory("SamsaraOriginalKeyCounter")]);
			TakeInventory("HLOriginalKeySwitcher",65536);
			TakeInventory("HLOriginalKeySwitcherOpen",65536);
			break;
		}
		Delay(1);
		switchTimer++;

		if(switchTimer == 10) SetInventory("SamsaraOriginalKeySwitcheroo", 0);
	}
	TakeInventory("HLOriginalKeySwitcherOpen",65536);
	TakeInventory("HLOriginalKeySwitcher",65536);
	RemoveMessages(32100,32110);
	RemoveMessages(32200,32290);
}

// Until Zandronum doesn't crash with the old keybindings in KEYCONF, this will be required, I'm afraid

script "Samsara_Keybinds" (int button) NET
{
	int pln = PlayerNumber(); // ensure only the activator gets the messages
	int cpln = ConsolePlayerNumber();

	int cvarsetting = 0;
	int mode = 0;
	int arg2 = -1;

	switch (button)
	{
	case 1:
		SetCVar("samsara_cl_smoothanims", !GetCVar("samsara_cl_smoothanims"));
		mode = GetCVar("samsara_cl_smoothanims");
		break;

	case 2:
		SetCVar("samsara_cl_wolfmove", !GetCVar("samsara_cl_wolfmove"));
		mode = GetCVar("samsara_cl_wolfmove");
		break;

	case 3:
		SetCVar("samsara_cl_ballgag", !GetCVar("samsara_cl_ballgag"));
		mode = GetCVar("samsara_cl_ballgag");
		break;

	case 4:
		SetCVar("samsara_cl_weaponhud", !GetCVar("samsara_cl_weaponhud"));
		mode = GetCVar("samsara_cl_weaponhud");
		break;

	case 5:
		SetCVar("samsara_cl_moremessages", !GetCVar("samsara_cl_moremessages"));
		mode = GetCVar("samsara_cl_moremessages");
		break;

	case 6:
		SetCVar("samsara_cl_printpickup", !GetCVar("samsara_cl_printpickup"));
		mode = GetCVar("samsara_cl_printpickup");
		break;

	case 7:
		SetCVar("samsara_cl_norecoil", !GetCVar("samsara_cl_norecoil"));
		mode = GetCVar("samsara_cl_norecoil");
		break;

	case 8:
		if (GetCVar("samsara_cl_heromusic") >= 3) { cvarsetting = 0; }
		else if (GetCVar("samsara_cl_heromusic") <= 0) { cvarsetting = 1; }
		else { cvarsetting = GetCVar("samsara_cl_heromusic") + 1; }

		SetCVar("samsara_cl_heromusic", cvarsetting);

		mode = GetCVar("samsara_cl_heromusic");
		break;

	case 9:
		if (GetCVar("samsara_cl_pickupmode") >= 2) { cvarsetting = 0; }
		else if (GetCVar("samsara_cl_pickupmode") <= 0) { cvarsetting = 1; }
		else { cvarsetting = GetCVar("samsara_cl_pickupmode") + 1; }

		SetCVar("samsara_cl_pickupmode", cvarsetting);

		mode = GetCVar("samsara_cl_pickupmode");
		break;

	case 10:
		if (PlayerIsSpectator(pln) > 0) { break; }

		switch (samsaraClassNum())
		{
		case CLASS_DOOM:
			if (GetCVar("samsara_cl_doommode") >= 2) { cvarsetting = 0; }
			else if (GetCVar("samsara_cl_doommode") <= 0) { cvarsetting = 1; }
			else { cvarsetting = GetCVar("samsara_cl_doommode") + 1; }

			SetCVar("samsara_cl_doommode", cvarsetting);
			mode = GetCVar("samsara_cl_doommode");
			arg2 = CLASS_DOOM;
			break;

		case CLASS_WOLFEN:
			if (GetCVar("samsara_cl_wolfmode") >= 2) { cvarsetting = 0; }
			else if (GetCVar("samsara_cl_wolfmode") <= 0) { cvarsetting = 1; }
			else { cvarsetting = GetCVar("samsara_cl_wolfmode") + 1; }

			SetCVar("samsara_cl_wolfmode", cvarsetting);
			mode = GetCVar("samsara_cl_wolfmode");
			arg2 = CLASS_WOLFEN;
			break;

		case CLASS_HEXEN:
			if (GetCVar("samsara_cl_hexclass") >= 3) { cvarsetting = 0; }
			else if (GetCVar("samsara_cl_hexclass") <= 0) { cvarsetting = 1; }
			else { cvarsetting = GetCVar("samsara_cl_hexclass") + 1; }

			SetCVar("samsara_cl_hexclass", cvarsetting);
			mode = GetCVar("samsara_cl_hexclass");
			arg2 = CLASS_HEXEN;
			break;

		case CLASS_DUKE:
			if (GetCVar("samsara_cl_dukemode") >= 2) { cvarsetting = 0; }
			else if (GetCVar("samsara_cl_dukemode") <= 0) { cvarsetting = 1; }
			else { cvarsetting = GetCVar("samsara_cl_dukemode") + 1; }

			SetCVar("samsara_cl_dukemode", cvarsetting);
			mode = GetCVar("samsara_cl_dukemode");
			arg2 = CLASS_DUKE;
			break;

		case CLASS_ROTT:
			if (GetCVar("samsara_cl_rottmode") >= 4) { cvarsetting = 0; }
			else if (GetCVar("samsara_cl_rottmode") <= 0) { cvarsetting = 1; }
			else { cvarsetting = GetCVar("samsara_cl_rottmode") + 1; }

			SetCVar("samsara_cl_rottmode", cvarsetting);
			mode = GetCVar("samsara_cl_rottmode");
			arg2 = CLASS_ROTT;
			break;

		case CLASS_BLAKE:
			SetCVar("samsara_cl_bsaog", !GetCVar("samsara_cl_bsaog"));
			mode = GetCVar("samsara_cl_bsaog");
			arg2 = CLASS_BLAKE;
			break;

		case CLASS_ERAD:
			if (GetCVar("samsara_cl_eradmode") >= 3) { cvarsetting = 0; }
			else if (GetCVar("samsara_cl_eradmode") <= 0) { cvarsetting = 1; }
			else { cvarsetting = GetCVar("samsara_cl_eradmode") + 1; }

			SetCVar("samsara_cl_eradmode", cvarsetting);
			mode = GetCVar("samsara_cl_eradmode");
			arg2 = CLASS_ERAD;
			break;

		case CLASS_POGREED:
			if (GetCVar("samsara_cl_ipogmode") >= 4) { cvarsetting = 0; }
			else if (GetCVar("samsara_cl_ipogmode") <= 0) { cvarsetting = 1; }
			else { cvarsetting = GetCVar("samsara_cl_ipogmode") + 1; }

			SetCVar("samsara_cl_ipogmode", cvarsetting);
			mode = GetCVar("samsara_cl_ipogmode");
			arg2 = CLASS_POGREED;
			break;

		case CLASS_HALFLIFE:
			SetCVar("samsara_cl_shephardmode", !GetCVar("samsara_cl_shephardmode"));

			mode = GetCVar("samsara_cl_shephardmode");
			arg2 = CLASS_HALFLIFE;
			break;

		default:
			break;
		}
		break;

	case 11:
		SetCVar("samsara_cl_idleballgag", !GetCVar("samsara_cl_idleballgag"));
		mode = GetCVar("samsara_cl_idleballgag");
		break;

	}

	ACS_NamedExecuteWithResult("Samsara_Keybinds_Messages", button, mode, arg2);
}

script "Samsara_Keybinds_Messages" (int button, int mode, int arg2) CLIENTSIDE
{
	int pln = PlayerNumber(); // ensure only the activator gets the messages
	int cpln = ConsolePlayerNumber();

	str modestring = "Default";

	switch (button)
	{
	case 1:
		if (mode >= 1) { modestring = "Smooth"; }
		else { modestring = "Vanilla"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_smoothanims", mode);
			Log(s:"\cgWeapon Animations: ", s:"\ck", s:modestring);
		}
		break;

	case 2:
		if (mode >= 1) { modestring = "On"; }
		else { modestring = "Off"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_wolfmove", mode);
			Log(s:"\cgWolfenstein Style Movement: ", s:"\ck", s:modestring);
		}
		break;

	case 3:
		if (mode >= 1) { modestring = "Off"; }
		else { modestring = "On"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_ballgag", mode);
			Log(s:"\cgCharacter Talk: ", s:"\ck", s:modestring);
		}
		break;

	case 4:
		if (mode >= 1) { modestring = "On"; }
		else { modestring = "Off"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_weaponhud", mode);
			Log(s:"\cgWeapon HUD Bar: ", s:"\ck", s:modestring);
		}
		break;

	case 5:
		if (mode >= 1) { modestring = "On"; }
		else { modestring = "Off"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_moremessages", mode);
			Log(s:"\cgExtra Pickup Messages: ", s:"\ck", s:modestring);
		}
		break;

	case 6:
		if (mode >= 1) { modestring = "Print"; }
		else { modestring = "Log"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_printpickup", mode);
			Log(s:"\cgPickup Message Mode: ", s:"\ck", s:modestring);
		}
		break;

	case 7:
		if (mode >= 1) { modestring = "Off"; }
		else { modestring = "On"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_norecoil", mode);
			Log(s:"\cgWeapon Recoil: ", s:"\ck", s:modestring);
		}
		break;

	case 8:
		if (mode >= 3) { modestring = "QC:DE"; }
		else if (mode == 2) { modestring = "Game Override"; }
		else if (mode == 1) { modestring = "Class"; }
		else { modestring = "Off"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_heromusic", mode);
			Log(s:"\cgHero Music: ", s:"\ck", s:modestring);
		}
		break;

	case 9:
		if (mode >= 2) { modestring = "Class-Specific"; }
		else if (mode == 1) { modestring = "Hybrid"; }
		else { modestring = "Old-Style"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_pickupmode", mode);
			Log(s:"\cgPickup Graphics: ", s:"\ck", s:modestring);
		}
		break;

	case 10:
		if (PlayerIsSpectator(pln) > 0)
		{
			if (pln == cpln) { Log(s:"This cannot be used while spectating."); }
			terminate;
		}

		switch (arg2)
		{
		case CLASS_DOOM:
			if (mode >= 2) { modestring = "Stronghold"; }
			else if (mode == 1) { modestring = "Doom 64"; }
			else { modestring = "Original"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_doommode", mode);
				Log(s:"\cgDoom Character: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_WOLFEN:
			if (mode >= 2) { modestring = "Castle Totenkopf SDL"; }
			else if (mode == 1) { modestring = "Lost Missions"; }
			else { modestring = "Original"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_wolfmode", mode);
				Log(s:"\cgWolfenstein 3D Character: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_HEXEN:
			if (mode >= 3) { modestring = "Baratus"; }
			else if (mode == 2) { modestring = "Daedolon"; }
			else if (mode == 1) { modestring = "Parias (Classic)"; }
			else { modestring = "Parias (Reincarnation)"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_hexclass", mode);
				Log(s:"\cgHexen I Character: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_DUKE:
			if (mode >= 2) { modestring = "Duke Nukem 64"; }
			else if (mode == 1) { modestring = "Life's a Beach"; }
			else { modestring = "Original"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_dukemode", mode);
				Log(s:"\cgDuke Nukem 3D Character: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_ROTT:
			if (mode >= 4) { modestring = "Doug Wendt"; }
			else if (mode == 3) { modestring = "Lorelei Ni"; }
			else if (mode == 2) { modestring = "Thi Barrett"; }
			else if (mode == 1) { modestring = "Taradino Cassatt"; }
			else { modestring = "Ian Paul Freeley"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_rottmode", mode);
				Log(s:"\cgROTT: H.U.N.T. Team Member: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_BLAKE:
			if (mode >= 1) { modestring = "Aliens of Gold"; }
			else { modestring = "Planet Strike"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_bsaog", mode);
				Log(s:"\cgBlake Stone Weapon Skins: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_ERAD:
			if (mode >= 3) { modestring = "Alliance Commando"; }
			else if (mode == 2) { modestring = "Dan Blaze"; }
			else if (mode == 1) { modestring = "Kamchak"; }
			else { modestring = "Eleena Brynstaarl"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_eradmode", mode);
				Log(s:"\cgEradicator Character: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_POGREED:
			if (mode >= 4) { modestring = "Theola Nom"; }
			else if (mode == 3) { modestring = "Specimen 7"; }
			else if (mode == 2) { modestring = "Xith"; }
			else if (mode == 1) { modestring = "Tobias Locke"; }
			else { modestring = "Aldus Kaden"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_ipogmode", mode);
				Log(s:"\cgIPOG: A.V.C. Team Member: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_HALFLIFE:
			if (mode >= 1) { modestring = "Adrian Shephard"; }
			else { modestring = "Gordon Freeman"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_shephardmode", mode);
				Log(s:"\cgHalf-Life Character: ", s:"\ck", s:modestring);
			}
			break;

		default:
			if (pln == cpln) { Log(s:"This character has no alternative modes."); }
			terminate;
		}
		break;

	case 11:
		if (mode >= 1) { modestring = "Off"; }
		else { modestring = "On"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_idleballgag", mode);
			Log(s:"\cgCharacter Idle Talk: ", s:"\ck", s:modestring);
		}
		break;

	default:
		if (pln == cpln) { Log(s:"Invalid setting."); }
		terminate;
	}
}

//For our unique keys to be consolidated
Script "Samsara_UniqueKeys" (int key) net
{
	int pln = PlayerNumber();
	switch(PlayerClass(pln))
	{
		case CLASS_CALEB:
            if (!isDead(0))
            {
                if (CheckInventory("SamsaraBloodGunsAkimboToggleMemory")) { TakeInventory("SamsaraBloodGunsAkimboToggleMemory", 1); }
                else { GiveInventory("SamsaraBloodGunsAkimboToggleMemory", 1); }
            }
			break;
		case CLASS_ERAD:
            if (!isDead(0))
            {
                if (CheckInventory("EradicatorPipAllowControl")) { TakeInventory("EradicatorPipAllowControl", 1); }
                else { GiveInventory("EradicatorPipAllowControl", 1); }
            }
			break;
		case CLASS_C7:
			ACS_NamedExecuteWithResult("Corridor7ActivateVisor");
			break;
		case CLASS_DISRUPTOR:
			ACS_NamedExecuteWithResult("DisruptorPsionics",key);
			break;
		case CLASS_HALFLIFE:
			ACS_NamedExecuteWithResult("HL2677",0,0,0);
			break;
		case CLASS_RR:
			if(key == 0)
			{
				if ((timer() > CheckInventory("LeonardPissTimer") + 10500 || !CheckInventory("LeonardPissTimer")) && !isDead(0))
				{
					SetInventory("LeonardPissTimer",timer());
					if(GetActorProperty(0,APROP_Health) < 90)
						SetActorProperty(0,APROP_Health,GetActorProperty(0,APROP_Health)+2);
					else if(GetActorProperty(0,APROP_Health) < 100)
						SetActorProperty(0,APROP_Health,100);

					Playsound(0,"Leonard/Pee",CHAN_6,1.0,0,ATTN_NORM);
				}
			}
			else if(key == 1)
			{
				if ((timer() > CheckInventory("LeonardYeeHawTimer") + 105 || !CheckInventory("LeonardYeeHawTimer")) && GetActorProperty(0, APROP_Health) < 100 && !isDead(0))
				{
					SetInventory("LeonardYeeHawTimer",timer());
					Playsound(0,"Leonard/Taunt7",CHAN_VOICE,1.0,0,ATTN_NORM);
					SetActorProperty(0,APROP_Health,GetActorProperty(0,APROP_Health)+1);
				}
			}
			break;
		case CLASS_BOND:
			ACS_NamedExecuteWithResult("BondActivateWatch",0,0,0);
			break;
		case CLASS_PAINKILLER:
			if(key == 1)
				ACS_NamedExecuteWithResult("Painkiller_BlackTarot_Initiate",0,0,0,0);
			else
				ACS_NamedExecuteWithResult("Painkiller_GoldTarot_Activate",0,0,0,0);
			break;
		case CLASS_UNREAL:
			ACS_NamedExecuteWithResult("Unreal_RevertUpgrade",0,0,0);
			break;
		case CLASS_RTCW:
			ACS_NamedExecuteWithResult("RTCW_Kick",0,0,0);
			break;
		case CLASS_DESCENT:
			if (isZDoom() && (GetCVar("samsara_zscriptready") == 2) && GetCVar("samsara_descentflight") >= 2 && !CheckInventory("DescentGuidedController") && !CheckInventory("CompendiumOpened") && !isDead(0)) { GiveInventory("DescentRollToken", 1); }
			break;
		case CLASS_DEUSEX:
			if(key == 1)
				ACS_NamedExecuteWithResult("DeusEx_Augmentations_Initiate");
			else
				ACS_NamedExecuteWithResult("DeusEx_Augmentations_QuickSwitch");
			break;
	}
}

//======================================================================================================================
//													Get Settings
//======================================================================================================================

script "SamsaraGetSettings" (void) NET //676 -- SAMSARA_GETSETTINGS
{
    int noHealthCap, noArmorCap;
	int lmsHP = GetCVar("samsara_lmshealth"), lmsArmor = GetCVar("samsara_lmsarmor");
    int lmsArmorTier = 1 + GetCVar("samsara_lmsarmortier");
	int lmsUlt = GetCVar("samsara_lmsbfg9000"), lmsUltSkulltag = GetCVar("samsara_lmsbfg10k");
	int lmsUnique;
	int ultStay, highLow;
    int pdwtakDamage = GetCVar("samsara_pdwtak_damage"), pdwtakDistance = GetCVar("samsara_pdwtak_distance"), pdwtakFullDamageDistance = GetCVar("samsara_pdwtak_fulldamagedistance");

	if (GetCVar("samsara_nohealthcap")) { noHealthCap = "on"; }
	else { noHealthCap = "off"; }

	if (GetCVar("samsara_noarmorcap")) { noArmorCap = "on"; }
	else { noArmorCap = "off"; }

    if (lmsHP < 0) { lmsHP = 0; }

    if (lmsArmor < 0) { lmsArmor = 0; }

    if (lmsArmorTier > 5) { lmsArmorTier = 5; }
    else if (lmsArmorTier < 1) { lmsArmorTier = 1; }

	if (GetCVar("samsara_lmsuniques")) { lmsUnique = "\cdwith"; }
	else { lmsUnique = "\cgwithout"; }

	if (GetCVar("samsara_lmsbfg9000")) { lmsUlt = "\cdwith"; }
	else { lmsUlt = "\cgwithout"; }

	if (GetCVar("samsara_lmsbfg10k")) { lmsUltSkulltag = "\cdwith"; }
	else { lmsUltSkulltag = "\cgwithout"; }

	if (GetCVar("samsara_permault")) { ultStay = "\cdstay"; }
	else { ultStay = "\cado not stay"; }

	if (GetCVar("samsara_jumpmod") < 0) { highLow = "\calower"; }
	else { highLow = "\cfhigher"; }

    if (pdwtakDamage < 0) { pdwtakDamage = 0; }

    if (pdwtakDistance < 0) { pdwtakDistance = 0; }

    if (pdwtakFullDamageDistance > pdwtakDistance) { pdwtakFullDamageDistance = pdwtakDistance; }
    else if (pdwtakFullDamageDistance < 0) { pdwtakFullDamageDistance = 0; }

	SetHudSize(640, 480, 1);

	if (isLMS() || GetCVar("samsara_lmsrules"))
	{
		HudMessage(s:"You spawn with \ca", d:lmsHP, s:" extra health\c- and \cd", d:lmsArmor, s:" armor (tier ", d:lmsArmorTier, s:")", s:"\c-.";
			HUDMSG_FADEOUT, 6761, CR_WHITE, 50.1, 80.0, 3.0, 1.0);

		HudMessage(s:"You spawn ", s:lmsUnique, s:"\c- your uniques, ", s:lmsUlt, s:"\c- your Slot VII, and ", s:lmsUltSkulltag, s:"\c- your Slot VIIS.";
			HUDMSG_FADEOUT, 6762, CR_WHITE, 50.1, 96.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Slot VII/VIIS pickups ", s:ultStay, s:"\c- on pickup", s:"\c-.";
			HUDMSG_FADEOUT, 6761, CR_WHITE, 50.1, 80.0, 3.0, 1.0);

		HudMessage(s:"Armor mode is \cf", s:ArmorModeNames[ArmorMode], s:"\c-.";
			HUDMSG_FADEOUT, 6762, CR_WHITE, 50.1, 96.0, 3.0, 1.0);
	}

	if (GetCVar("samsara_jumpmod"))
	{
		HudMessage(s:"You jump \cn", d:abs(GetCVar("samsara_jumpmod")), s:"\c- units ", s:highLow, s:"\c- than normal.";
				HUDMSG_FADEOUT, 6763, CR_WHITE, 50.1, 112.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Jumping is \cbnormal", s:"\c-.";
				HUDMSG_FADEOUT, 6763, CR_WHITE, 50.1, 112.0, 3.0, 1.0);
	}

	HudMessage(s:"Your running speed is \cf", s:SpeedModeNames[GetCVar("samsara_speedmod") + 6], s:"\c-.";
		HUDMSG_FADEOUT, 6764, CR_WHITE, 50.1, 128.0, 3.0, 1.0);


	if (GetCVar("samsara_banjetpack"))
	{
		HudMessage(s:"Flight items are \cgbanned", s:"\c-.";
				HUDMSG_FADEOUT, 6765, CR_WHITE, 50.1, 144.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Flight items are \cdallowed", s:"\c-.";
				HUDMSG_FADEOUT, 6765, CR_WHITE, 50.1, 144.0, 3.0, 1.0);
	}

	if (GetCVar("samsara_banwolfmove"))
	{
		HudMessage(s:"Wolfenstein Style movement is \cgbanned", s:"\c-.";
				HUDMSG_FADEOUT, 6766, CR_WHITE, 50.1, 160.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Wolfenstein Style movement is \cdallowed", s:"\c-.";
				HUDMSG_FADEOUT, 6766, CR_WHITE, 50.1, 160.0, 3.0, 1.0);
	}

	if (GetCVar("samsara_nocustomgravity"))
	{
		HudMessage(s:"Custom gravities are \cadisabled", s:"\c-.";
				HUDMSG_FADEOUT, 6767, CR_WHITE, 50.1, 176.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Custom gravities are \cdenabled", s:"\c-.";
				HUDMSG_FADEOUT, 6767, CR_WHITE, 50.1, 176.0, 3.0, 1.0);
	}

	if (GetCVar("samsara_reloadmode") == 3)
	{
		HudMessage(s:"Reloading is \cdenabled", s:"\c-.", s:" Some classes are able to reload manually.";
				HUDMSG_FADEOUT, 6768, CR_WHITE, 50.1, 192.0, 3.0, 1.0);
	}
	else if (GetCVar("samsara_reloadmode") == 2)
	{
		HudMessage(s:"Reloading is \cdenabled", s:"\c-.", s:" Some classes are unable to reload manually.";
				HUDMSG_FADEOUT, 6768, CR_WHITE, 50.1, 192.0, 3.0, 1.0);
	}
	else if (GetCVar("samsara_reloadmode") == 1)
	{
		HudMessage(s:"Reloading is \cadisabled", s:"\c-.", s:" Weapons with single shot magazines perform reload animations.";
				HUDMSG_FADEOUT, 6768, CR_WHITE, 50.1, 192.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Reloading is \cadisabled", s:"\c-.", s:" Weapons with single shot magazines do not perform reload animations.";
				HUDMSG_FADEOUT, 6768, CR_WHITE, 50.1, 192.0, 3.0, 1.0);
	}

	if (GetCVar("samsara_bottomlessmagazines"))
	{
		HudMessage(s:"Bottomless magazines are \cdenabled", s:"\c-.";
				HUDMSG_FADEOUT, 6769, CR_WHITE, 50.1, 208.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Bottomless magazines are \cadisabled", s:"\c-.";
				HUDMSG_FADEOUT, 6769, CR_WHITE, 50.1, 208.0, 3.0, 1.0);
	}

	HudMessage(s:"Shotgun/Chainsaw/Unique/Backpack start: \cd", d:GetCVar("samsara_shotgunstart"), s:"\c- / \ca", d:GetCvar("samsara_chainsawstart"), s:"\c- / \cn", d:GetCvar("samsara_uniquestart"), s:"\c- / \cf", d:GetCvar("samsara_backpackstart");
			HUDMSG_FADEOUT, 6774, CR_WHITE, 50.1, 288.0, 3.0, 1.0);

	HudMessage(s:"PDWTAK explosions deal \cf", d:pdwtakDamage, s:" damage\c- across \ck", d:pdwtakDistance, s:" map units", s:"\c- (full damage applied in \ci", d:pdwtakFullDamageDistance, s:" map units", s:"\c-).";
			HUDMSG_FADEOUT, 6770, CR_WHITE, 50.1, 224.0, 3.0, 1.0);

	HudMessage(s:"PPW Mode is ", s:cond(GetCVar("samsara_permaweaponlevel2"), "\cdon\c-.", "\caoff\c-.");
			HUDMSG_FADEOUT, 6771, CR_WHITE, 50.1, 240.0, 3.0, 1.0);

	HudMessage(s:"STTP3K Mode is ", s:cond(GetCVar("samsara_superturboturkeypuncher3000"), "\cdon\c-.", "\caoff\c-.");
			HUDMSG_FADEOUT, 6772, CR_WHITE, 50.1, 256.0, 3.0, 1.0);

	HudMessage(s:"Limitless Health/Armor is \ca", s:noHealthCap, s:"\c- / \cd", s:noArmorCap, s:"\c-.";
			HUDMSG_FADEOUT, 6773, CR_WHITE, 50.1, 272.0, 3.0, 1.0);
}

//======================================================================================================================
//													Kill Count
//======================================================================================================================

//Replace this script and inject code into it for other tcs when actors die. Override 1 is for base samsara monsters. Override 2 is shrunk actors to get their parent.
Script "Samsara_KillCount" (int override)
{
	if(!(ClassifyActor(0) & ACTOR_MONSTER))
		terminate;

	int HasXDeath;
	int isBoss = CheckFlag(0,"BOSS");

	if(isZDoom())
		HasXDeath = CheckActorState(0,"XDeath",1);
	else
		HasXDeath = 1;

	if(SpawnForced("StrongHoldLoaded",0,0,0,0))
		ACS_NamedExecuteWithResult("Stronghold_KillCount",0,0,0,0);

	int noblood = CheckFlag(0,"NOBLOOD");
	int health;
	int currentHealth = GetActorProperty(0, APROP_Health);
	int experience = GetCVar("samsara_experiencegain");
	int healthtokens = CheckInventory("ShrunkMasterHealthTokens");

	if(healthtokens == 0)
		health = GetActorProperty(0, APROP_SpawnHealth);
	else
		health = healthtokens;

	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);

	//eww
	if(GetCVar("samsara_pinataparty"))
	{
		if(!GetCvar("samsara_merrychristmas"))
			ACS_NamedExecuteAlways("Samsara_PinataHandler",0,health,GetActorProperty(0,APROP_Radius)>>16,GetActorProperty(0,APROP_Height)>>16);
		else
		{
			int presentTid = UniqueTid();
			int presentScale = 0.25 + ((health >= 200) * 0.175) + ((health >= 1000) * 0.175) + ((health >= 2500) * 0.175) + ((health >= 5000) * 0.175);
			SpawnForced("XmasGift",x,y,z,presentTid);
			ThrustThing(random(0,256),random(1,2),0,presentTid);
			ThrustThingZ(presentTid,random(4,8),0,0);
			SetActorProperty(presentTid,APROP_Health,health);
			SetActorProperty(presentTid,APROP_Accuracy,GetActorProperty(0,APROP_Radius)>>16);
			SetActorProperty(presentTid,APROP_Score,GetActorProperty(0,APROP_Height)>>16);
			SetActorProperty(presentTid,APROP_ScaleX,presentScale);
			SetActorProperty(presentTid,APROP_ScaleY,presentScale);
			SetActorProperty(presentTid,APROP_Mass,1+CheckFlag(0,"FRIENDLY"));
			Thing_ChangeTid(presentTid,0);
		}
	}

	if(CheckInventory("Painkiller_DamageCredit") && ((CheckFlag(0, "BOSS") == false) && CheckFlag(0, "NOBLOOD") == false && CheckFlag(0, "NODECAL") == false) && (!CheckInventory("IsSamsaraClass"))) ACS_NamedExecuteWithResult("Painkiller_MonsterKill",0,0,0);

    if (GetCVar("samsara_pdwtak_monsters") && GetCVar("samsara_pdwtak_distance") > 0)
    {
        if (GetCVar("samsara_pdwtak_damage") > 0) { GiveActorInventory(ActivatorTID(), "InvPeopleDie", 1); }

        if (isBoss) { SpawnForced("BossesDieWhenTheyAreKilled", x, y, z); }
        else { SpawnForced("MonstersDieWhenTheyAreKilled", x, y, z); }
    }

	SetActivatorToTarget(0);
	
	int tempTid = UniqueTid();
	int activator = ActivatorTid();
	Thing_ChangeTid(0,tempTid);
	if(!SetActivator(0,AAPTR_FRIENDPLAYER))
		SetActivator(tempTid);
	Thing_ChangeTid(tempTid,activator);

	if(override != 1)
		GiveInventory("KillCount", 1);

	if(CheckInventory("Hexen2Class"))
	{
		int chance = (0.05+((CheckInventory("Hexen2Level")-4)*0.03));
		if(chance > 0.2)
			chance = 0.2;

		GiveInventory("Hexen2Experience", FixedMul((health*2.5)>>16,(1.0+(0.05*CheckInventory("Hexen2Wisdom"))))*(1+(PlayerCount()/4))*(experience)/2);

		if(random(0.0,1.0) <= chance && !noblood)
			SpawnForced("Hexen2SoulSphere",x,y,z,0,0);
	}

	if(CheckInventory("WitchavenClass"))
		GiveInventory("WTExperience", health*(1+(PlayerCount()/4))*(experience)/2);

	if(CheckInventory("StrifeClass") && !CheckInventory("BlackBirdTauntCooldown"))
	{
		if(isBoss)
			GiveInventory("BlackBirdBossKill",1);
		else if(HasXDeath && currentHealth < -health && random(0,20) <= 3)
		{
			GiveInventory("BlackBirdXDeath",1);
		}
	}
}

//======================================================================================================================
//													Bot Alt Class
//======================================================================================================================

Script "Samsara_BotAltClassHandler" (int playernum)
{
	str playername;
	switch(PlayerClass(playernum))
	{
		case 0:
			playername = GetUserCvarString(playernum,"name");
			if(StrCmp(playername,"Doom 64 Guy") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_doommode",1);
			}
			if(StrCmp(playername,"Doomguy (Stronghold)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_doommode",2);
			}
			break;
		case 3:
			playername = GetUserCvarString(playernum,"name");
			if(StrCmp(playername,"B.J. Blazkowicz (Lost)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_wolfmode",1);
			}
			if(StrCmp(playername,"B.J. Blazkowicz (Totenkopf)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_wolfmode",2);
			}
			break;
		case 4:
			playername = GetUserCvarString(playernum,"name");
			if(StrCmp(playername,"Parias (Classic)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_hexclass",1);
			}
			if(StrCmp(playername,"Daedolon") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_hexclass",2);
			}
			if(StrCmp(playername,"Baratus") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_hexclass",3);
			}
			break;
		case 5:
			playername = GetUserCvarString(playernum,"name");
			if(StrCmp(playername,"Duke Nukem (Beach)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_dukemode",1);
			}
			if(StrCmp(playername,"Duke Nukem (DN64)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_dukemode",2);
			}
			break;
		case 8:
			playername = GetUserCvarString(playernum,"name");
			if(StrCmp(playername,"Taradino Cassatt") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_rottmode",1);
			}
			if(StrCmp(playername,"Thi Barrett") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_rottmode",2);
			}
			if(StrCmp(playername,"Lorelei Ni") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_rottmode",3);
			}
			if(StrCmp(playername,"Doug Wendt") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_rottmode",4);
			}
			break;
		case 9:
			playername = GetUserCvarString(playernum,"name");
			if(StrCmp(playername,"Blake Stone (Planet Strike)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_bsaog",1);
			}
			break;
		
		case 12:
			playername = GetUserCvarString(playernum,"name");
			if(StrCmp(playername,"Kamchak") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_eradmode",1);
			}
			if(StrCmp(playername,"Dan Blaze") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_eradmode",2);
			}
			if(StrCmp(playername,"Alliance Commando") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_eradmode",3);
			}
			break;
		
		case 16:
			playername = GetUserCvarString(playernum,"name");
			if(StrCmp(playername,"Tobias Locke") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_ipogmode",1);
			}
			if(StrCmp(playername,"Xith") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_ipogmode",2);
			}
			if(StrCmp(playername,"Specimen 7") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_ipogmode",3);
			}
			if(StrCmp(playername,"Theola Nom") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_ipogmode",4);
			}
			break;
		case 19:
			playername = GetUserCvarString(playernum,"name");
			if(StrCmp(playername,"Shephard") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_shephardmode",1);
			}
			break;
		case 27:
			SetUserCVar(playernum, "samsara_cl_pettonweapons", 1); // allow primary fire with bot

			/*while(GetActorProperty(0,APROP_Health) > 0)
			{
				int randomweapon = random(0,5);
				switch(randomweapon)
				{
					case 0:
						SetWeapon("Catacomb_WavesQuickSpell");
						break;
					case 1:
						SetWeapon("Catacomb_XTerminatorsQuickSpell");
						break;
					case 2:
						SetWeapon("Catacomb_BurstsQuickSpell");
						break;
					case 3:
						SetWeapon("Catacomb_ZappersQuickSpell");
						break;
					case 4:
						SetWeapon("Catacomb_NukesQuickSpell");
						break;
					case 5:
						SetWeapon("Catacomb_BoltsQuickSpell");
						break;
				}
				Delay(17);
			}*/
			break;
	}
}

//======================================================================================================================
//													Lasers
//======================================================================================================================

Script "Samsara_Laser" (int type, int space, int height) clientside
{
	int t, i, k = 0, l, angle, pitch, x, y, z, tx, ty, tz, vx, vy, vz, mag, magI, horz;
	str segment;
	switch(type)
	{
		case 1:
			segment = "Hexen2ForceCubeMissileSegment1";
			break;
		case 2:
			segment = "Hexen2ForceCubeMissileSegment2";
			break;
		case 3:
			segment = "Hexen2ForceCubeMissileSegment3";
			break;
		case 4:
			segment = "Hexen2ForceCubeMissileSegment4";
			break;
		case 5:
			segment = "Hexen2ForceCubeMissileSegment5";
			break;
		case 6:
			i = space;
			segment = "Hexen2TempestStaffPoweredLightningSegment";
			break;
		case 7:
			segment = "Hexen2FamineBeamSegment";
			break;
		case 8:
			segment = "TentacleProjectileSegment";
			break;
		case 9:
			horz = -11;
			i = 28;
			segment = "LaserProjectileSegment";
			break;
		case 10:
			horz = -2;
			i = 16;
			segment = "LaserProjectileSegment";
			break;
		case 11:
			horz = 2;
			i = 16;
			segment = "LaserProjectileSegment";
			break;
		case 12:
			i = 16;
			segment = "TentacleProjectileSegment";
			break;
		case 13:
			horz = 24;
			i = 64;
			segment = "WidowBeamProjectileSegment";
			break;
		case 14:
			i = space;
			segment = "LGBeam";
			break;
		case 15:
			segment = "Hexen2MedusaGazeSegment1";
			break;
	}


	int newtid = UniqueTid();

	tx = GetActorX(0); ty = GetActorY(0); tz = GetActorZ(0);

	SetActivatorToTarget(0);

	int xoff = sin(GetActorAngle(0)) * horz;
	int yoff = cos(GetActorAngle(0)) * horz;

	x = GetActorX(0) + xoff;
	y = GetActorY(0) + yoff;
	z = GetActorZ(0) + height*1.0;

	int vectorx = tx - x;
	int vectory = ty - y;
	int vectorz = tz - z;
	angle = VectorAngle(vectorx, vectory);

	int length = magnitudeTwo(vectorx>>16,vectory>>16);
	pitch = VectorAngle(length<<16, vectorz);

	vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
	vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
	magI = ftoi(mag);
	for (i = i; i < magI; i += space)
	{
		SpawnForced(segment, x+(vx*i), y+(vy*i), z+(vz*i), newtid);
		SetActorPitch(newtid, pitch);
		SetActorAngle(newtid, angle);
		if(i % 1500 == 0)
			Delay(1);
	}
}

//======================================================================================================================
//													Inventory Reset
//======================================================================================================================

Script "Samsara_ResetInventory" (void)
{
	int pln = PlayerNumber();
	ClearInventory();
	TakeInventory("SamsaraLesserTomeInventory", INTMAX);
	TakeInventory("SamsaraLesserTomeInventoryRaven", INTMAX);
	TakeInventory("SamsaraTeleportPickupInventory", INTMAX);
	TakeInventory("SamsaraTeleportPickupInventoryHeretic", INTMAX);
	TakeInventory("SamsaraTeleportPickupInventoryHexen1", INTMAX);
	TakeInventory("SamsaraFlightPickupInventory", INTMAX);
	TakeInventory("SamsaraFlightPickupInventoryRaven", INTMAX);
	TakeInventory("SamsaraSpeedBootsPickupInventory", INTMAX);
	TakeInventory("SamsaraSpeedBootsPickupInventoryRaven", INTMAX);
	TakeInventory("SamsaraTeleportOtherPickupInventory", INTMAX);
	TakeInventory("SamsaraTeleportOtherPickupInventoryRaven", INTMAX);
    TakeInventory("SamsaraMedPatchInventory", INTMAX);
    TakeInventory("SamsaraMedicalKitInventory", INTMAX);
    TakeInventory("SamsaraSurgeryKitInventory", INTMAX);
    TakeInventory("SamsaraShadowArmorInventory", INTMAX);
    TakeInventory("SamsaraEnvironmentalSuitInventory", INTMAX);
    TakeInventory("SamsaraScannerInventory", INTMAX);

	TakeInventory("GotWeapon0", INTMAX);
	TakeInventory("GotWeapon1", INTMAX);
	TakeInventory("GotWeapon2", INTMAX);
	TakeInventory("GotWeapon3", INTMAX);
	TakeInventory("GotWeapon4", INTMAX);
	TakeInventory("GotWeapon5", INTMAX);
	TakeInventory("GotWeapon6", INTMAX);
	TakeInventory("GotWeapon7", INTMAX);
	TakeInventory("KillCountBar", INTMAX);
	TakeInventory("AllyCellPhone", INTMAX);
	TakeInventory("SamsaraSlotIGiven", INTMAX);
	TakeInventory("SamsaraSlotIIGiven", INTMAX);
	TakeInventory("SamsaraSlotIIIGiven", INTMAX);
	TakeInventory("SamsaraSlotIVGiven", INTMAX);
	TakeInventory("SamsaraSlotIVSGiven", INTMAX);
	TakeInventory("SamsaraSlotVGiven", INTMAX);
	TakeInventory("SamsaraSlotVSGiven", INTMAX);
	TakeInventory("SamsaraSlotVIGiven", INTMAX);
	TakeInventory("SamsaraSlotVISGiven", INTMAX);
	TakeInventory("SamsaraSlotVIIGiven", INTMAX);
	TakeInventory("SamsaraSlotVIISGiven", INTMAX);
	TakeInventory("SamsaraBackpackGiven", INTMAX);
	TakeInventory("SamsaraBackpacksInInventory", INTMAX);
	TakeInventory("SamsaraBaseSpawnHealth", INTMAX);
	TakeInventory("SamsaraExtraBaseSpawnHealth", INTMAX);
	TakeInventory("SamsaraExtraBaseSpawnHealthDeterminant", INTMAX);
	TakeInventory("SamsaraExtraBaseSpawnHealthPermanent", INTMAX);
	TakeInventory("SamsaraExtraSpawnHealth", INTMAX);
	TakeInventory("SamsaraExtraSpawnHealthDeterminant", INTMAX);
	TakeInventory("SamsaraExtraSpawnHealthPermanent", INTMAX);
	TakeInventory("SamsaraHasMaxHealth", INTMAX);
	TakeInventory("SamsaraHasMaxArmor", INTMAX);
	switch(PlayerClass(pln))
	{
		case CLASS_DOOM:
			TakeInventory(" Chainsaw ", INTMAX);
			TakeInventory(" Shotgun ", INTMAX);
			TakeInventory("Super Shotgun", INTMAX);
			TakeInventory("Automatic Shotgun", INTMAX);
			TakeInventory(" Chaingun ", INTMAX);
            SetInventory("SamsaraDoom64ChaingunSoundChannelCount", 0);
			TakeInventory(" Machine Gun ", INTMAX);
			TakeInventory(" Flamer ", INTMAX);
			TakeInventory(" Minigun ", INTMAX);
			TakeInventory("Rocket Launcher", INTMAX);
			TakeInventory("Land Mine Layer", INTMAX);
			TakeInventory( " GrenadeLauncher ", INTMAX);
			TakeInventory("Plasma Rifle", INTMAX);
			TakeInventory(" Incinerator ", INTMAX);
			TakeInventory("Stunner Rifle", INTMAX);
			TakeInventory(" RailGun ", INTMAX);
			TakeInventory("B.F.G. 9000", INTMAX);
			TakeInventory("B.F.G. 2704", INTMAX);
			TakeInventory("Calamity Blade", INTMAX);
			TakeInventory(" Unmaker ", INTMAX);
            SetInventory("SamsaraDoom64UnmakerSoundChannelCount", 0);
			TakeInventory("Pyro Cannon", INTMAX);
			TakeInventory(" BFG10K ", INTMAX);
			TakeInventory("PowerStrength", 1);
			TakeInventory("SamsaraDoom64UnmakerArtifact", INTMAX);
			TakeInventory("Homing Rocket Launcher", INTMAX);
			TakeInventory("Plasma Repeater", INTMAX);
			TakeInventory("SamsaraDoomguyStrWeaponPowerItem", INTMAX);
			TakeInventory("DGStrHasAutoShotgun", INTMAX);
			TakeInventory("DGHasChaingun", INTMAX);
			TakeInventory("DGStrHasFlamethrower", INTMAX);
			TakeInventory("DGHasMinigun", INTMAX);
			TakeInventory("DGHasRocketLauncher", INTMAX);
			TakeInventory("DGStrHasLandMines", INTMAX);
			TakeInventory("DGHasGrenadeLauncher", INTMAX);
			TakeInventory("DGHasPlasmaRifle", INTMAX);
			TakeInventory("DGStrHasStunnerRifle", INTMAX);
			TakeInventory("DGHasRailGun", INTMAX);
			TakeInventory("DGHasBFG9000", INTMAX);
			TakeInventory("Doom64_IHaveUnmaker", INTMAX);
			TakeInventory("DGStrHasPyroCannon", INTMAX);
			TakeInventory("DGHasBFG10K", INTMAX);
			SetInventory("SamsaraDoom64StartingUnmakerArtifactsGiven", 0);
			TakeInventory("DGStrHasHomingRocketLauncher", INTMAX);
			TakeInventory("DGStrHasPlasmaRepeater", INTMAX);
			TakeInventory("DGStrHasWPK", INTMAX);

			GiveInventory(" Pistol ", 1);
			GiveInventory(" Fist ", 1);
			GiveInventory("DoomguyClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetInventory("DoomguyStrASGClip", 20);
			SetInventory("DoomguyRailgunClip", 4);
			SetInventory("SamsaraDoomguyStrPistolLoaded", 0);
			SetWeapon(" Pistol ");
			break;

		case CLASS_CHEX:
			TakeInventory("Super Bootspork", INTMAX);
			TakeInventory("Dual Mini-Zorchers", INTMAX);
			TakeInventory("Dual Micro-Zorchers", INTMAX);
			TakeInventory("Large Zorcher", INTMAX);
			TakeInventory("Super Large Zorcher", INTMAX);
			TakeInventory("Rapid Zorcher", INTMAX);
			TakeInventory("Ultra Rapid Zorcher", INTMAX);
			TakeInventory("Zorch Propulsor", INTMAX);
			TakeInventory("Zorch Launcher", INTMAX);
			TakeInventory("Phasing Zorcher", INTMAX);
			TakeInventory("Gigazorcher 2100", INTMAX);
			TakeInventory("LAZ Device", INTMAX);
			TakeInventory("Liquid Zorcher", INTMAX);
			TakeInventory("Chain-Lightning Zorcher", INTMAX);

			GiveInventory("Mini-Zorcher", 1);
			GiveInventory(" Bootspoon ", 1);
			GiveInventory("ChexClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetInventory("ChexGigazorcherClip", 4);
			SetWeapon("Mini-Zorcher");
			break;

		case CLASS_HERETIC:
			TakeInventory("Gauntlets of the Necromancer", INTMAX);
			TakeInventory(" Firemace ", INTMAX);
			TakeInventory("Ethereal Crossbow", INTMAX);
			TakeInventory("Dragon Claw", INTMAX);
			TakeInventory("Phoenix Rod", INTMAX);
			TakeInventory("Hellstaff", INTMAX);
			TakeInventory("DSparilStaff", INTMAX);
			TakeInventory("DSparilStaffMinion", INTMAX);
			TakeInventory("Grim Ballista", INTMAX);
			TakeInventory("SamsaraCorvusArtiEgg", INTMAX);
			TakeInventory("PortQuartzFlask", INTMAX);
			TakeInventory("PortSuperHealth", INTMAX);
			TakeInventory("CorvusMegasphere", INTMAX);
			TakeInventory("PortGhostly", INTMAX);
			TakeInventory("PortRingInvuln", INTMAX);
			TakeInventory("PortTorch", INTMAX);
			TakeInventory("PortTome", INTMAX);
			TakeInventory("TomeOfPowerCooldown", INTMAX);
			TakeInventory("SamsaraFullInvisibilityInventoryHeretic", INTMAX);
			TakeInventory("SamsaraTimeFreezeInventoryHeretic", INTMAX);
			TakeInventory("SamsaraDefenseBoosterInventoryHeretic", INTMAX);
			TakeInventory("SamsaraDamageBoosterInventoryHeretic", INTMAX);

			GiveInventory("Elven Wand", 1);
			GiveInventory(" Staff ", 1);
			GiveInventory("CorvusClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("PermaTimeBomb", 1);
			GiveInventory("PermaRemoteBomb", 1);
			GiveInventory("PermaProxyBomb", 1);
			SetWeapon("Elven Wand");
			break;

		case CLASS_WOLFEN:
			TakeInventory("BJSuperKnife", INTMAX);
			TakeInventory("Totenkopf_Mauser", INTMAX);
			SetInventory("Wolfen_IHaveSlot1", 0);
			TakeInventory("Totenkopf_MauserDual", INTMAX);
			SetInventory("Totenkopf_IHaveDualMausers", 0);
			TakeInventory("Totenkopf_PistolDual", INTMAX);
			SetInventory("Totenkopf_IHaveDualPistols", 0);
			TakeInventory("Machine Gun", INTMAX);
			TakeInventory("Totenkopf_Kar98k", INTMAX);
			SetInventory("Wolfen_IHaveSlot2", 0);
			TakeInventory("Mauser Rifle", INTMAX);
			TakeInventory("Totenkopf_STG44", INTMAX);
			SetInventory("Wolfen_IHaveSlot3", 0);
			TakeInventory("Totenkopf_STGFiredOnce", INTMAX);
			TakeInventory("  Chaingun  ", INTMAX);
			TakeInventory("Totenkopf_MP40", INTMAX);
			SetInventory("Wolfen_IHaveSlot4", 0);
			TakeInventory("Totenkopf_MP40Dual", INTMAX);
			SetInventory("Totenkopf_IHaveDualMP40s", 0);
			TakeInventory("  Dual Chainguns  ", INTMAX);
			SetInventory("Wolfen_IHaveDualChainguns", 0);
			TakeInventory(" Rocket Launcher ", INTMAX);
			TakeInventory("Totenkopf_Panzerschreck", INTMAX);
			SetInventory("Wolfen_IHaveSlot5", 0);
			TakeInventory(" Flamethrower ", INTMAX);
			TakeInventory("Totenkopf_Chaingun", INTMAX);
			SetInventory("Wolfen_IHaveSlot6", 0);
			TakeInventory("Spear of Destiny", INTMAX);
			TakeInventory("Totenkopf_Flakgun", INTMAX);
			SetInventory("Wolfen_IHaveSlot7", 0);
			TakeInventory("WolfExtraLife", INTMAX);
			SetInventory("Wolfen_IHaveExtraLife", 0);
			TakeInventory("Totenkopf_Flamethrower", INTMAX);
			SetInventory("Totenkopf_IHaveFlamethrower", 0);
			SetInventory("Totenkopf_FlameThrowerFuel", 0);
			TakeInventory("WolfenAmmoCrate", INTMAX);
			TakeInventory("WolfenAmmoCrateLost", INTMAX);
			SetInventory("Wolfen_IHaveAmmoCrate", 0);
			TakeInventory("Totenkopf_MG42", INTMAX);
			SetInventory("Totenkopf_IHaveMG42", 0);
			TakeInventory("Totenkopf_Sniper", INTMAX);
			SetInventory("Totenkopf_IHaveScope", 0);
			SetInventory("TotenkopfSecretCounter", 0);
			TakeInventory("TotenkopfPowerArmorPickup", INTMAX);
			TakeInventory("TotenkopfHasPowerArmor", INTMAX);
			SetInventory("Totenkopf_IHavePowerArmor", 0);
			TakeInventory("TotenkopfHealingOrbHealer", INTMAX);
			TakeInventory("TotenkopfHasHealingOrb", INTMAX);
			SetInventory("Totenkopf_IAmWolverine", 0);

			GiveInventory("Luger", 1);
			GiveInventory("Knife", 1);
			GiveInventory("WolfenClass", 1);
			GiveInventory("CanWolfMovement", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Luger");
			break;

		case CLASS_HEXEN:
			TakeInventory("SamsaraHexenSpikedGauntletsHitCounter", INTMAX);
            SetInventory("SamsaraHexenHasLMSPistolDisabled", 0);
			TakeInventory("PortFlechette", INTMAX);
			TakeInventory("PortFlechette2", INTMAX);
			TakeInventory("PortFlechette3", INTMAX);
			TakeInventory("PortQuartzFlask", INTMAX);
			TakeInventory("PortSuperHealth", INTMAX);
			TakeInventory("PortMysticAmbit", INTMAX);
			TakeInventory("SamsaraHexenDiscOfRepulsion", INTMAX);
			TakeInventory("SamsaraHexenDarkServant", INTMAX);
			TakeInventory("Serpent Staff", INTMAX);
			TakeInventory("Blight Shock", INTMAX);
			TakeInventory("Jotunn's Flail", INTMAX);
			TakeInventory(" Bloodscourge ", INTMAX);
			TakeInventory("Spiked Gauntlet", INTMAX);
			SetInventory("SamsaraHexenHasSlot7", 0);
			SetInventory("SamsaraClassicPariasHasBloodscourge", 0);
			SetInventory("SamsaraClassicPariasHasSpikedGauntlet", 0);
			TakeInventory("Ice Fang", INTMAX);
			TakeInventory("Viscerelagh", INTMAX);
			TakeInventory("Hammer of Retribution", INTMAX);
			TakeInventory("Crusader's Longbow", INTMAX);
			TakeInventory("Frost Shards", INTMAX);
			TakeInventory("Javelin of Zeal", INTMAX);
			TakeInventory("Bishop's Shortsword", INTMAX);
			TakeInventory("Fire Blast", INTMAX);
			TakeInventory("Timon's Axe", INTMAX);
			TakeInventory("Firestorm", INTMAX);
			TakeInventory("Arc of Death", INTMAX);
			TakeInventory("Quickspell Gauntlets", INTMAX);
			TakeInventory("SamsaraHexenQuickspellGauntletsMeleeHitCount", INTMAX);
			TakeInventory("SamsaraHexenQuickspellGauntletsRangedFrame", INTMAX);
			TakeInventory("Wraithverge", INTMAX);
			TakeInventory("Bloodscourge", INTMAX);
			TakeInventory("Quietus", INTMAX);
			TakeInventory("PortGhostly2", INTMAX);
			TakeInventory("PortIconDefender", INTMAX);
			TakeInventory("PortTorch", INTMAX);
			TakeInventory("PortKraterOfMight", INTMAX);

			GiveInventory("Jade Wand", 1);
			GiveInventory("Mace of Contrition", 1);
			GiveInventory("HexenClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Jade Wand");
			break;

		case CLASS_DUKE:
			TakeInventory("Pipebombs", INTMAX);
			TakeInventory("Chaingun Cannon", INTMAX);
			SetInventory("SamsaraDukeHasSlot4", 0);
			TakeInventory("Golden Desert Eagle", INTMAX);
            SetInventory("SamsaraDukeHasGoldenDesertEagle", 0);
			TakeInventory("DukePortJetpack", INTMAX);
			TakeInventory("DukePortJetpack64", INTMAX);
			SetInventory("DukeJetpackFuel", 0);
			TakeInventory("DukePetjack", INTMAX);
			TakeInventory("DukeBootserk", INTMAX);
			TakeInventory("DukePortNiVi", INTMAX);
			TakeInventory("DukePortNiViLAB", INTMAX);
			TakeInventory("DukePortNiVi64", INTMAX);
			SetInventory("DukeVisionFuel", 0);
			TakeInventory("ItemHoloduke", INTMAX);
			TakeInventory("ItemHolodukeLAB", INTMAX);
			TakeInventory("ItemHoloduke64", INTMAX);
			TakeInventory("DukePortSteroids", INTMAX);
			TakeInventory("DukePortSteroidsLAB", INTMAX);
			TakeInventory("DukePortSteroids64", INTMAX);
			SetInventory("DukeSteroidsFuel", 0);
			TakeInventory("DukeSteroidsActive", INTMAX);
			TakeInventory("DukeSteroidsSpawnRemove", INTMAX);
			TakeInventory("DukeSteroidsSpeed", INTMAX);
			TakeInventory("DukeSteroidsDamage", INTMAX);
			TakeInventory("  Shotgun  ", INTMAX);
			TakeInventory("Explosive Shotgun", INTMAX);
			TakeInventory("Chaingun Cannon", INTMAX);
			TakeInventory("RPG", INTMAX);
			TakeInventory("Freezethrower", INTMAX);
			TakeInventory("Devastator Weapon", INTMAX);
			TakeInventory("Shrinker", INTMAX);
			TakeInventory("DukeHasShrinker", INTMAX);
			TakeInventory("Expander", INTMAX);
			TakeInventory("DukeHasExpander", INTMAX);
			TakeInventory("Duke64UsingDumDums", INTMAX);
			TakeInventory("Duke64UsingExplosiveShells", INTMAX);
			TakeInventory("Duke64UsingHeatSeeking", INTMAX);
			TakeInventory("Duke64UsingShrinker", INTMAX);

			GiveInventory("Glock 17", 1);
			GiveInventory("DukeGoldEagleReload", 8);
			GiveInventory("Mighty Boot", 1);
			GiveInventory("DukeClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Glock 17");
			break;

		case CLASS_MARATHON:
			TakeInventory("CanDualPistols", INTMAX);
			TakeInventory("KKV-7 SMG Flechette", INTMAX);
			TakeInventory("WSTE-M5 Combat Shotgun", INTMAX);
			TakeInventory("CanDualShotties", INTMAX);
			TakeInventory("Fusion Pistol", INTMAX);
			TakeInventory("MA-75B Assault Rifle", INTMAX);
			TakeInventory("SPNKR-XP SSM Launcher", INTMAX);
			TakeInventory("TOZT-7 Napalm Unit", INTMAX);
			TakeInventory("SPNKR-25 Auto Cannon", INTMAX);
			TakeInventory("ONI-71 Wave Motion Cannon", INTMAX);
			TakeInventory("Alien Weapon", INTMAX);
			TakeInventory(" Alien Weapon ", INTMAX);
			TakeInventory("Talon Ceramic Combat Blade", INTMAX);
			TakeInventory("Tech.50 Pacifier", INTMAX);

			GiveInventory(".44 Magnum Mega Class A1", 1);
			GiveInventory("Steel Knuckles", 1);
			SetInventory("Shell", 20);
			SetInventory("RocketAmmo", 10);
			SetInventory("Cell", 50);
			GiveInventory("MarathonClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("MagnumBullet", 8);
			GiveInventory("MagnumBulletRight", 8);
			GiveInventory("SmgBullet", 32);
			GiveInventory("Tech50Ammo", 3);
			GiveInventory("WastemShell", 2);
			GiveInventory("WastemShellRight", 2);
			GiveInventory("FusionBullet", 20);
			GiveInventory("RifleBullet", 52);
			GiveInventory("GrenadeInClip", 7);
			GiveInventory("SpankerAmmo", 2);
			GiveInventory("NapalmInTank", 210);
			GiveInventory("Spanker2Ammo", 7);
			GiveInventory("WMCAmmo", 8);
			GiveInventory("MortarAmmo", 3);
			SetInventory("UnknownAmmo", 0);
			SetInventory("UnknownAmmo2", 0);
			SetInventory("KnifeAmmo", 0);
			SetWeapon(".44 Magnum Mega Class A1");
			break;

		case CLASS_QUAKE:
            SetInventory("QSG_FiredOnce", 0);
			TakeInventory("Laser Cannon", INTMAX);
			TakeInventory("Nailgun", INTMAX);
			TakeInventory("Nailgun DOE", INTMAX);
			TakeInventory("QuadDamageItem", INTMAX);
			TakeInventory("Thunderbolt", INTMAX);
			TakeInventory("Thunderbolt DOE", INTMAX);
			TakeInventory("Rocket Powered Impaler", INTMAX);
			TakeInventory("Mjolnir", INTMAX);
			TakeInventory("Double Shotgun", INTMAX);
			TakeInventory("Grenade Launcher", INTMAX);
			TakeInventory("Grenade Launcher DOE", INTMAX);
			TakeInventory("  Rocket Launcher  ", INTMAX);
			TakeInventory("  Rocket Launcher DOE  ", INTMAX);
			TakeInventory("Super Nailgun", INTMAX);
			TakeInventory("Super Nailgun DOE", INTMAX);
			TakeInventory("Rocket Powered Impaler", INTMAX);
			TakeInventory("Clip", INTMAX);
			TakeInventory("LavaNails", INTMAX);
			TakeInventory("MultiRocketAmmo", INTMAX);
			TakeInventory("PlasmaCell", INTMAX);

			GiveInventory("QuakeClass", 1);
			GiveInventory("Single Shotgun", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetInventory("Shell", 25);
			GiveInventory("Axe", 1);
			SetWeapon("Single Shotgun");
			break;

		case CLASS_ROTT:
			TakeInventory("HeatSeeker", INTMAX);
			TakeInventory("Double Pistols", INTMAX);
			TakeInventory("Bazooka", INTMAX);
			TakeInventory("MP40", INTMAX);
			TakeInventory("RoTTM60", INTMAX);
			TakeInventory(" Firebomb ", INTMAX);
			TakeInventory("Doomstick", INTMAX);
			TakeInventory("DrunkMissiles", INTMAX);
			TakeInventory("FlameWall", INTMAX);
			TakeInventory("Split Missile", INTMAX);
			TakeInventory("Excalibat", INTMAX);
			TakeInventory("Dark Staff", INTMAX);
            SetInventory("SamsaraROTTDarkStaffSecondaryFiredCount", 0);
			TakeInventory("God Hand", INTMAX);
			TakeInventory("Doggie", INTMAX);
			TakeInventory("Clip", INTMAX);

			GiveInventory("RottClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("RPistol", 1);
			GiveInventory("RottKnife", 1);
			GiveInventory("DisplayMenu", 1);
			SetWeapon("RPistol");
			break;

		case CLASS_BLAKE:
			TakeInventory("BlakeSuperAutoCharge", INTMAX);
			TakeInventory("Slow Fire Protector", INTMAX);
			TakeInventory("Heavy Assault Weapon", INTMAX);
			TakeInventory("Rapid Assault Weapon", INTMAX);
			//TakeInventory("Gatling Fusion Devastator", INTMAX);
			TakeInventory("Plasma Discharge Unit", INTMAX);
			TakeInventory("Dual Neutron Disruptor", INTMAX);
			TakeInventory("Anti-Plasma Cannon", INTMAX);
			TakeInventory("BlakeRefill", INTMAX);
			TakeInventory("BlakeShield", INTMAX);

			GiveInventory("BlakeClass", 1);
			GiveInventory("Auto Charge Pistol", 1);
			GiveInventory("CanWolfMovement", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Auto Charge Pistol");
			break;

		case CLASS_CALEB:
			TakeInventory("Dynamite", INTMAX);
			TakeInventory("Flaregun", INTMAX);
			TakeInventory("Sawedoff", INTMAX);
			TakeInventory("Tommygun", INTMAX);
			TakeInventory("BloodGreaseGun", INTMAX);
			TakeInventory("NapalmLauncher", INTMAX);
			TakeInventory("BloodProximityTNT", INTMAX);
			TakeInventory("BloodRemoteTNT", INTMAX);
			TakeInventory("TeslaCannon", INTMAX);
			TakeInventory("BloodFlamethrower", INTMAX);
			TakeInventory("LifeLeech", INTMAX);
			TakeInventory("BloodNaturomDemonto", INTMAX);
			TakeInventory("PowerSamsaraBloodGunsAkimboHub", INTMAX);
			TakeInventory("SamsaraBloodGunsAkimboInventory", INTMAX);
			TakeInventory("SamsaraBloodGunsAkimboToggleMemory", INTMAX);
			TakeInventory("SamsaraBloodGunsAkimboToggled", INTMAX);
			TakeInventory("VoodooDoll", INTMAX);
			TakeInventory("SprayCan", INTMAX);
			TakeInventory("Flaregun2", INTMAX);
			TakeInventory("BeastVision", INTMAX);
			SetInventory("CalebVisionFuel", 0);
			TakeInventory("CalebDoctorsBag",INTMAX);

			GiveInventory("CalebClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("   Revolver   ", 1);
			GiveInventory("Pitchfork", 1);
			SetWeapon("   Revolver   ");
			break;

		case CLASS_STRIFE:
			TakeInventory(" Sigil ", INTMAX);
			TakeInventory("StrifeSigilPiece", INTMAX);
			TakeInventory("StrifeSigilPieceCheck3", INTMAX);
			TakeInventory("StrifeSigilPieceCheck4", INTMAX);
			TakeInventory("StrifeSigilPieceCheck5", INTMAX);
			TakeInventory("StrifeSigilPieceCheck6", INTMAX);
			TakeInventory("StrifeSigilPieceCheck7", INTMAX);
			TakeInventory("StrifeBeaconItem5", INTMAX);
			TakeInventory("  Crossbow  ", INTMAX);
			TakeInventory("  Crossbow Poison  ", INTMAX);
			TakeInventory("Mini Missile Launcher", INTMAX);
			TakeInventory("Assault Gun", INTMAX);
			TakeInventory(" Grenade Launcher ", INTMAX);
			TakeInventory(" Grenade Launcher WP ", INTMAX);
			TakeInventory(" Grenade Launcher Gas ", INTMAX);
			TakeInventory("Flame Thrower", INTMAX);
			TakeInventory(" Mauler ", INTMAX);
			TakeInventory(" Mauler Torpedo ", INTMAX);
			TakeInventory("Sigil", INTMAX);
			TakeInventory("StrifeSigilPiecePreferred",INTMAX);
			TakeInventory("StrifePortMedikit",INTMAX);
			TakeInventory("StrifeStimpack2",INTMAX);
			TakeInventory("StrifeSurgeryKit2",INTMAX);
			TakeInventory("PortShadowArmor",INTMAX);
			TakeInventory("PortEnviSuit",INTMAX);
			TakeInventory("StrifeguyStartingUpgradesHasBeenGiven", INTMAX);
			TakeInventory("StaminaUpgradeDamage", INTMAX);
			TakeInventory("StaminaUpgradeHealth", INTMAX);
			TakeInventory("AccuracyUpgrade1", INTMAX);
			TakeInventory("AccuracyUpgrade2", INTMAX);

			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("StrifeClass", 1);
			GiveInventory("Punch Dagger", 1);
			GiveInventory("   Pistol   ", 1);
			SetWeapon("   Pistol   ");
			break;

		case CLASS_ERAD:
			TakeInventory("SamsaraEradicatorLaserEnhancedAttackSwitch", INTMAX);
			TakeInventory("SamsaraEradicatorKamchakPhotonPulseAttackSwitch", INTMAX);
			TakeInventory(" Arachnicator ", INTMAX);
			TakeInventory("EradRovingMine", INTMAX);
			TakeInventory("EradMiniTankDetonator", INTMAX);
			TakeInventory("  Sonic Shock  ", INTMAX);
			TakeInventory("Death Bomb", INTMAX);
			TakeInventory("Cluster Bomb", INTMAX);
			TakeInventory("Pellet Bomb", INTMAX);
            SetInventory("SamsaraEradicatorPelletBombEnhancedFiredCount", 0);
			TakeInventory("  Dart Cannon  ", INTMAX);
			TakeInventory("EradEnergywhip", INTMAX);
			TakeInventory("EradNitrofogger", INTMAX);
			TakeInventory("EradFlamethrower", INTMAX);
			TakeInventory("    Missile Launcher    ", INTMAX);
			TakeInventory("Eleena Smoke Bomb", INTMAX);
			TakeInventory("Napalm Charge", INTMAX);
			TakeInventory("Ion Sphere", INTMAX);
			TakeInventory(" Plasma Ball ", INTMAX);
			TakeInventory(" Eradicator Enhancement Chip ", INTMAX);
			TakeInventory(" EvilBuddy ", INTMAX);

			GiveInventory("EradClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("  Claw  ", 1);
			GiveInventory("  Ripper Disc  ", 1);
			SetWeapon("  Ripper Disc  ");
			break;

		case CLASS_C7:
			TakeInventory("M24CAW", INTMAX);
			TakeInventory("M343Vulcan", INTMAX);
			TakeInventory("AssaultShotgun", INTMAX);
			TakeInventory("AlienDualBlaster", INTMAX);
			TakeInventory("AlienPlasmaRifle", INTMAX);
			TakeInventory("AlienAssaultCannon", INTMAX);
			TakeInventory("AlienDisintegrator", INTMAX);
			TakeInventory("SuperVulcan", INTMAX);
			TakeInventory("C7VisorActive",INTMAX);

			GiveInventory("Taser", 1);
			GiveInventory("CanWolfMovement", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("C7Class", 1);
			SetWeapon("Taser");
			break;

		case CLASS_RMR:
			TakeInventory("RMROxygenRecycler", INTMAX);
			TakeInventory("SamsaraRMRDirtsharkUpgrade", INTMAX);
			TakeInventory("ACR Laser Rifle", INTMAX);
			TakeInventory("ACR ADD-ON", INTMAX);
			TakeInventory("Cyclops Particle Accelerator", INTMAX);
			TakeInventory("RMR Grenade Launcher", INTMAX);
			TakeInventory("RMR Railgun", INTMAX);
			TakeInventory(" RMR Plasma Cannon ", INTMAX);
			TakeInventory("Subestron Arm", INTMAX);
			TakeInventory("Estron Ball", INTMAX);
			TakeInventory("RMRJetPack", INTMAX);

			GiveInventory("Dirtshark", 1);
			GiveInventory(" Laser Pistol ", 1);
			GiveInventory("RMRClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon(" Laser Pistol ");
			break;

		case CLASS_KATARN:
			TakeInventory("Thermal Detonator", INTMAX);
			TakeInventory("Stormtrooper Rifle", INTMAX);
			TakeInventory("Fusion Cutter", INTMAX);
            SetInventory("SamsaraDarkForcesFusionCutterBarrel", 0);
            SetInventory("SamsaraDarkForcesFusionCutterFiredOnce", 0);
			TakeInventory("Imperial Repeater", INTMAX);
			TakeInventory("DLT-19 Heavy Blaster Rifle", INTMAX);
			TakeInventory("Mortar Gun", INTMAX);
			TakeInventory("I.M. Mines", INTMAX);
			TakeInventory("Concussion Rifle", INTMAX);
			TakeInventory("Czerka Adventurer", INTMAX);
			TakeInventory("Assault Cannon", INTMAX);
			TakeInventory("Wookie Bowcaster", INTMAX);
			TakeInventory("DFSuperCharge", INTMAX);
            SetInventory("KatarnBlazeIt", 0);
            SetInventory("KatarnBlazeItTimer", 0);
            SetInventory("KatarnFireRateUp", 0);
			TakeInventory("Palandrix Stun Gauntlets", INTMAX);

			GiveInventory("  Fist_2x5  ", 1);
			GiveInventory("Bryar Pistol", 1);
			GiveInventory("KatarnStarterShield", 1);
			GiveInventory("KatarnClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Bryar Pistol");
			break;

		case CLASS_POGREED:
			TakeInventory("IPOGGrenadeToken", INTMAX);
			TakeInventory(" Toxic Mutant Gun ", INTMAX);
			TakeInventory(" Plasma Shotgun ", INTMAX);
			TakeInventory(" Aldus Flamethrower ", INTMAX);
			TakeInventory(" Fast Chaingun ", INTMAX);
			TakeInventory(" Fast Rocket Launcher ", INTMAX);
			TakeInventory(" Laser Cannon ", INTMAX);
			TakeInventory(" Super Plasma Annihilator ", INTMAX);
			TakeInventory(" Lizard Crossbow ", INTMAX);
			TakeInventory("PGSuperTazer", INTMAX);
			TakeInventory("PGUltraTazer", INTMAX);
			TakeInventory("IPOGTimeBombItem", INTMAX);
			TakeInventory("IPOGProximityMineItem", INTMAX);
			TakeInventory("IPOGCloneItem", INTMAX);
			TakeInventory("MedTube", INTMAX);
			TakeInventory("ShieldCharge", INTMAX);
			TakeInventory("IPOGReversoPill", INTMAX);

			GiveInventory("POGreedClass", 1);
			GiveInventory(" Tazer ", 1);
			GiveInventory(" Aldus Pistol ", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon(" Aldus Pistol ");
			break;

		case CLASS_DISRUPTOR:
			TakeInventory("SamsaraDisruptorHas18mmAuto", INTMAX);
			TakeInventory(" Phase Rifle ", INTMAX);
			SetInventory("SamsaraDisruptorPhaseRifleMode", 0);
			TakeInventory(" AM Blaster ", INTMAX);
			SetInventory("SamsaraDisruptorAMBlasterSide", 0);
			TakeInventory("Phase Repeater", INTMAX);
			SetInventory("SamsaraDisruptorPhaseRepeaterMode", 0);
			TakeInventory(" Lock-on Cannon ", INTMAX);
			SetInventory("SamsaraDisruptorLockOnCannonMode", 0);
			TakeInventory(" AM Cyclone ", INTMAX);
			TakeInventory(" Disruptor Zodiac ", INTMAX);
			TakeInventory(" Disruptor Plasmalance ", INTMAX);
			TakeInventory("DisruptorPSIEnergy", INTMAX);
			TakeInventory("DisruptorPSICooldown", INTMAX);
			TakeInventory("DisruptorEnergyBall", INTMAX);
			TakeInventory("DisruptorTeraBall", INTMAX);
			TakeInventory("DisruptorPsionicSelected", INTMAX);

			GiveInventory(" 18mm Semi ", 1);
			GiveInventory("Disruptor Fist", 1);
			GiveInventory("DisruptorClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("DisruptorDrain", 1);
			GiveInventory("DisruptorHealPSI", 1);
			GiveInventory("DisruptorPSIEnergy", 10);
			SetWeapon(" 18mm Semi ");
			break;

		case CLASS_WITCHAVEN:
			TakeInventory("WTFallbackMeleeClip", INTMAX);
			TakeInventory("WTFistClip", INTMAX);
			TakeInventory("WTAttackClip", INTMAX);
			TakeInventory("WTSlotIClip", INTMAX);
			TakeInventory("WTSlotIIClip", INTMAX);
			TakeInventory("WTSlotIIIClip", INTMAX);
			TakeInventory("WTSlotIVClip", INTMAX);
			TakeInventory("WTSlotVClip", INTMAX);
			TakeInventory("WTSlotVIIClip", INTMAX);
			TakeInventory("WTShieldTrigger", INTMAX);
			TakeInventory("WTShieldUsed", INTMAX);
			TakeInventory("WTWeaponActive", INTMAX);
			TakeInventory("WTShieldDisable", INTMAX);
			TakeInventory("WTShieldCounter", INTMAX);
			TakeInventory("WTShieldWaiting", INTMAX);
			TakeInventory("WTShieldActive", INTMAX);
			TakeInventory("WTSpellCounter", INTMAX);
			TakeInventory("WTCastingSpell", INTMAX);
			TakeInventory("WTHalberdHold", INTMAX);
			TakeInventory("WTBowUpgrade", INTMAX);
			TakeInventory("WTSwordUpgrade", INTMAX);
			TakeInventory("WTFistActive", INTMAX);
			TakeInventory("WTFistAttack", INTMAX);
			TakeInventory("Shortsword", INTMAX);
			TakeInventory("Battle Axe", INTMAX);
			TakeInventory("Ice Halberd", INTMAX);
			TakeInventory("Fire Mace", INTMAX);
			TakeInventory("Broad Sword", INTMAX);
			TakeInventory("Frozen Two-Hand Sword", INTMAX);
			TakeInventory("Pike Axe", INTMAX);
			TakeInventory("WTHealthPhial", INTMAX);
			TakeInventory("WTInvisibilityPhial", INTMAX);
			TakeInventory("WTFireProofPhial", INTMAX);
			
			if (GetCvar("samsara_pistolstart") >= 2 && CheckInventory("PistolStartEnabled"))
			{
				SetInventory("WTExperience", 0);
				SetInventory("WTLevel", 1);
				SetInventory("SamsaraWitchavenHealthIncrease", 0);
			}

			GiveInventory("Bow and Arrows", 1);
			GiveInventory("Witchaven_Dagger", 1);
			GiveInventory("Spellbook", 1);
			GiveInventory("WitchavenClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Bow and Arrows");
			break;

		case CLASS_HALFLIFE:
			TakeInventory("Hornetgun", 1);
			TakeInventory("Shock Roach", 1);
			TakeInventory("Assault Shotgun", 1);
			TakeInventory(".357 Python", 1);
			TakeInventory("Desert Eagle", 1);
			TakeInventory("HLDeagleLaserActivated", 1);
			TakeInventory("HLDeagleLaserMemory", 1);
			TakeInventory("MP5", 1);
			TakeInventory(" RPG ", 1);
			TakeInventory("SamsaraHalfLifeRPGLaserActivated", 1);
			TakeInventory("SamsaraHalfLifeRPGNotLoaded", 1);
			TakeInventory("Spore Launcher", 1);
			TakeInventory("Gauss Cannon", 1);
			TakeInventory("M249 Squad Automatic Weapon", 1);
			SetInventory("HLSawSkipFire", 0);
			TakeInventory("E.G.O.N.", 1);
			TakeInventory("Displacer Cannon", 1);
			TakeInventory("SamsaraHalfLifeAcquiredUnique1", 1);
			TakeInventory("HL Squeaks", 1);
            SetInventory("HLSqueakAmmo", 0);
			TakeInventory("SamsaraHalfLifeSnarksAvailable", 1);
			TakeInventory("Mk 2 Grenades", 1);
			TakeInventory("HL Crossbow", 1);
			TakeInventory("M40A1 Sniper Rifle", 1);
			TakeInventory("HLOPHasBarnacleLongJump", 1);
			TakeInventory("SamsaraHalfLifeCanLongJump", 1);
			TakeInventory("HLOPBarnacleReleaseTether", 1);
			TakeInventory("HLOPBarnacleLatchedTether", 1);
			TakeInventory("HLOPBarnacleTetherActive", 1);
			TakeInventory("HLOPBarnacle", 1);

			GiveInventory("9mm Pistol", 1);
			GiveInventory("Crowbar", 1);
			GiveInventory("HalfLifeClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetInventory("Clip", 80);
			SetInventory("Shell", 15);
			SetInventory("RocketAmmo", 5);
			GiveInventory("FlashLightAmmo", 4200);
			SetInventory("SamsaraFlashLightAmmoDisplay", CheckInventory("FlashLightAmmo") / 35);
			GiveInventory("HL9mmCounter", 17);
			GiveInventory("HornetGunAmmo", 8);
			GiveInventory("ShockRoachAmmo", 10);
			GiveInventory("HLShotgunCounter", 8);
			GiveInventory("HLPythonCounter", 6);
			GiveInventory("HLDeagleCounter", 7);
			GiveInventory("HLMP5Counter", 50);
			GiveInventory("HLRPGCounter", 1);
			GiveInventory("HLSporeCounter", 10);
			GiveInventory("HLSAWCounter", 100);
			GiveInventory("HLXBowAmmoCounter", 5);
			GiveInventory("HLSniperCounter", 5);
			GiveInventory("SamsaraHalfLifeRPGLaserMemory", 1);
			SetWeapon("9mm Pistol");
			break;

		case CLASS_SW:
            SetInventory("SWRiotMode", 0);
            SetInventory("UziAmountCheck", 0);
            SetInventory("UziCheck", 0);
            SetInventory("GotNuke", 0);
            SetInventory("SWGuardianHeadMode", 0);
			TakeInventory("SWGasGrenade", 5);
			TakeInventory("HeatSeekingCard", 2);
			TakeInventory("HeatSeekerCharge", 5);

			GiveInventory("SWShuriken", 1);
			GiveInventory("SWKatana", 1);
			GiveInventory("SWFists", 1);
			GiveInventory("SWClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetInventory("SWUziClip", 50);
			SetInventory("SWUziClipDual", 50);
			SetWeapon("SWShuriken");
			break;

		case CLASS_CM:
			TakeInventory("CybermageMedkit", INTMAX);
			TakeInventory("usingmagicfisttype", INTMAX);
			TakeInventory("MagicMode1", INTMAX);
			TakeInventory("MagicMode2", INTMAX);
			TakeInventory("MagicMode3", INTMAX);
			TakeInventory("MagicMode4", INTMAX);
			TakeInventory("CMDarklightFoil", 1);
			TakeInventory("CMFusionGun", 1);
			TakeInventory("CMBlastRifle", 1);
			TakeInventory("CMSMG", 1);
			TakeInventory("CMRocketGun", 1);
			TakeInventory("CMHVBMG", 1);
			TakeInventory("CMPlasmaGun", 1);

			GiveInventory("CMLaserPistol", 1);
			GiveInventory("MagicFist", 1);
			GiveInventory("CMClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("MagicMode0", 1);
			SetWeapon("CMLaserPistol");
			break;

		case CLASS_JON:
            SetInventory("SamsaraPowerSlaveMacheteFireAnim", 0);
			TakeInventory(" Anubis Mine ", 1);
			TakeInventory("ExShotgun", 1);
			TakeInventory("PSFlamethrower", 1);
			TakeInventory("PSM60", 1);
			TakeInventory("PSCobraStaff", 1);
			TakeInventory("Sacred Manacle", 1);
			TakeInventory(" Mummy Staff ", 1);
			TakeInventory("Ring of Ra", 1);
			TakeInventory("EyeOfSiaItem_EX",INTMAX);
			TakeInventory("DivineScarab_Ex",INTMAX);
			TakeInventory("LighterofGumercindo_EX",INTMAX);

			GiveInventory("PSMagnum", 1);
			SetInventory("PSMagnumReload", 6);
			SetInventory("PSShotgunReload", 8);
			SetInventory("PSM60Reload", 99);
			GiveInventory("PSMachete", 1);
			GiveInventory("JonClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("PSMagnum");
			break;

		case CLASS_RR:
			TakeInventory("RRCowPie",INTMAX);
			TakeInventory("RRBubbaBeer",INTMAX);
			TakeInventory("RRCheapasswhiskey",INTMAX);
			TakeInventory("RRDrunkAmount",INTMAX);
			TakeInventory("RRFoodAmount",INTMAX);

			GiveInventory(" .454 Casull Pistol ", 1);
			SetInventory("LeonardPistolReload", 6);
			GiveInventory(" RR Crowbar ", 1);
			GiveInventory("RRClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon(" .454 Casull Pistol ");
			break;

		case CLASS_BITTERMAN:
			TakeInventory("Q2Silencer", INTMAX);
			TakeInventory("Q2EnvironmentSuit", INTMAX);
			TakeInventory("Q2Invulnerability", INTMAX);
			TakeInventory("Q2QuadDamage", INTMAX);
			TakeInventory("Q2DualFireDamage", INTMAX);
			TakeInventory("Q2DoubleDamage", INTMAX);
			TakeInventory("Q2Machinegun", INTMAX);
			TakeInventory("Q2Shotgun", INTMAX);
			TakeInventory("Q2SuperShotgun", INTMAX);
			TakeInventory("Q2Chaingun", INTMAX);
            TakeInventory("SamsaraQuake2ChaingunFiredCount", INTMAX);
			TakeInventory("Q2ETFRifle", INTMAX);
			TakeInventory("Q2RocketLauncher", INTMAX);
			TakeInventory("Q2Phalanx", INTMAX);
			TakeInventory("Q2HyperBlaster", INTMAX);
			TakeInventory("Q2PlasmaBeam", INTMAX);
            TakeInventory("SamsaraQuake2PlasmaBeamFiredCount", INTMAX);
			TakeInventory("Q2BFG10K", INTMAX);
			TakeInventory("Q2Trap", INTMAX);
			TakeInventory("Q2Railgun", INTMAX);
			TakeInventory("Q2IonRipper", INTMAX);
			TakeInventory("Q2GrenadeLauncher", INTMAX);

			GiveInventory("Q2Blaster", 1);
			GiveInventory("BittermanClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Q2Blaster");
			break;

		case CLASS_DEMONESS:
			TakeInventory("PortQuartzFlask3", INTMAX);
			TakeInventory("PortSuperHealth3", INTMAX);
			TakeInventory("PortGhostly2", INTMAX);
			TakeInventory("PortIconDefender2", INTMAX);
			TakeInventory("PortTorch3", INTMAX);
			TakeInventory("PortKraterOfMight2", INTMAX);
			TakeInventory("Hexen2TomeOfPower", INTMAX);
			TakeInventory("Hexen2ForceCube", INTMAX);

			if (GetCvar("samsara_pistolstart") >= 2 && CheckInventory("PistolStartEnabled"))
			{
				SetInventory("Hexen2Level", 1);
				SetInventory("Hexen2Experience", 0);
				SetInventory("Hexen2Intelligence", Random(9, 13));
				SetInventory("Hexen2Wisdom", Random(11, 14));
				SetInventory("Hexen2Dexterity", Random(9, 13));
				SetInventory("Hexen2Strength", Random(11, 14));
				SetInventory("Hexen2BlueManaAdd", 0);
				SetInventory("Hexen2GreenManaAdd", 0);
				SetInventory("Hexen2HealthAdd", 0);
			}

			GiveInventory("Hexen2BloodFire", 1);
			GiveInventory("Hexen2Sickle", 1);
			GiveInventory("Hexen2Class", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Hexen2BloodFire");
			break;

		case CLASS_BOND:
			TakeInventory("BondZoomAmount", INTMAX);
			SetInventory("SamsaraGoldenEyeKlobbConsumeAmmo", 0);
			TakeInventory("Goldeneye_PP7DualToken", INTMAX);
			TakeInventory("Goldeneye_ThrowingKnives", INTMAX);
			TakeInventory("Goldeneye_ThrowingKnivesDualToken", INTMAX);
			TakeInventory("Goldeneye_KF7Soviet", INTMAX);
            SetInventory("SamsaraGoldenEyeKF7SingleSkipFire", 0);
            SetInventory("SamsaraGoldenEyeKF7DualSkipFire", 0);
			TakeInventory("Goldeneye_KF7DualToken", INTMAX);
			TakeInventory("Goldeneye_AutoShotgun", INTMAX);
			TakeInventory("Goldeneye_Shotgun", INTMAX);
			TakeInventory("Goldeneye_AutoShotgunDualToken", INTMAX);
			TakeInventory("Goldeneye_AR33", INTMAX);
            SetInventory("SamsaraGoldenEyeAR33SingleSkipFire", 0);
            SetInventory("SamsaraGoldenEyeAR33DualSkipFire", 0);
			TakeInventory("Goldeneye_AR33DualToken", INTMAX);
			TakeInventory("Goldeneye_Phantom", INTMAX);
            SetInventory("SamsaraGoldenEyePhantomSingleSkipFire", 0);
            SetInventory("SamsaraGoldenEyePhantomDualSkipFire", 0);
			TakeInventory("Goldeneye_PhantomDualToken", INTMAX);
			TakeInventory("Goldeneye_RocketLauncher", INTMAX);
			TakeInventory("Goldeneye_RocketLauncherDualToken", INTMAX);
			TakeInventory("Goldeneye_GrenadeLauncher", INTMAX);
			TakeInventory("Goldeneye_GrenadeLauncherDualToken", INTMAX);
			TakeInventory("Goldeneye_RCP90", INTMAX);
            SetInventory("SamsaraGoldenEyeRCP90SingleSkipFire", 0);
            SetInventory("SamsaraGoldenEyeRCP90DualSkipFire", 0);
			TakeInventory("Goldeneye_RCP90DualToken", INTMAX);
			TakeInventory("Goldeneye_Cougar", INTMAX);
			TakeInventory("Goldeneye_SilverPP7", INTMAX);
			TakeInventory("Goldeneye_ArabahViper", INTMAX);
			TakeInventory("Goldeneye_HasCougar", INTMAX);
			TakeInventory("Goldeneye_CougarDualToken", INTMAX);
			TakeInventory("Goldeneye_Moonraker", INTMAX);
			TakeInventory("Goldeneye_LaserDualToken", INTMAX);
			TakeInventory("Goldeneye_GoldenGun", INTMAX);
			TakeInventory("Goldeneye_GoldenGunDualToken", INTMAX);
			TakeInventory("Goldeneye_SniperRifle", INTMAX);
			SetInventory("SamsaraGoldenEyeSniperRifleConsumeAmmo", 0);
			TakeInventory("Goldeneye_SniperDualToken", INTMAX);
			TakeInventory("Goldeneye_SilencedD5K", INTMAX);
            SetInventory("SamsaraGoldenEyeSilencedD5KSingleSkipFire", 0);
            SetInventory("SamsaraGoldenEyeSilencedD5KDualSkipFire", 0);
			TakeInventory("Goldeneye_ZMG", INTMAX);
            SetInventory("SamsaraGoldenEyeZMGSingleSkipFire", 0);
            SetInventory("SamsaraGoldenEyeZMGDualSkipFire", 0);
			TakeInventory("Goldeneye_D5KDeutsche", INTMAX);
            SetInventory("SamsaraGoldenEyeD5KSingleSkipFire", 0);
            SetInventory("SamsaraGoldenEyeD5KDualSkipFire", 0);
			TakeInventory("Goldeneye_D5KDualToken", INTMAX);
			TakeInventory("Goldeneye_WatchMagnet", INTMAX);
			TakeInventory("Goldeneye_WatchLaser", INTMAX);
			TakeInventory("Goldeneye_WatchDetonator", INTMAX);
			TakeInventory("Goldeneye_TimedMines", INTMAX);
			TakeInventory("Goldeneye_ProximityMines", INTMAX);
			TakeInventory("Goldeneye_RemoteMines", INTMAX);
			TakeInventory("Goldeneye_GoldPP7", INTMAX);
			TakeInventory("Goldeneye_GoldPP7DualToken", INTMAX);
			TakeInventory("Goldeneye_PermanentTankCannon", INTMAX);
			TakeInventory("Goldeneye_TankWeapon", INTMAX);

			GiveInventory("BondClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("Goldeneye_PP7Silenced", 1);
			GiveInventory("Goldeneye_Slapper", 1);
			GiveInventory("Goldeneye_PP7SilencedMagazine", 7);
			GiveInventory("Goldeneye_PP7SilencedDualMagazine", 7);
			GiveInventory("Goldeneye_KlobbMagazine", 20);
			GiveInventory("Goldeneye_KlobbDualMagazine", 20);
			GiveInventory("Goldeneye_PP7Magazine", 7);
			GiveInventory("Goldeneye_PP7DualMagazine", 7);
			GiveInventory("Goldeneye_DD44Magazine", 8);
			GiveInventory("Goldeneye_DD44DualMagazine", 8);
			GiveInventory("Goldeneye_KF7Magazine", 30);
			GiveInventory("Goldeneye_KF7DualMagazine", 30);
			GiveInventory("Goldeneye_AutoShotgunMagazine", 5);
			GiveInventory("Goldeneye_AutoShotgunDualMagazine", 5);
			GiveInventory("Goldeneye_ShotgunMagazine", 5);
			GiveInventory("Goldeneye_ShotgunDualMagazine", 5);
			GiveInventory("Goldeneye_AR33Magazine", 30);
			GiveInventory("Goldeneye_AR33DualMagazine", 30);
			GiveInventory("Goldeneye_PhantomMagazine", 50);
			GiveInventory("Goldeneye_PhantomDualMagazine", 50);
			GiveInventory("Goldeneye_RocketLauncherMagazine", 1);
			GiveInventory("Goldeneye_RocketLauncherDualMagazine", 1);
			GiveInventory("Goldeneye_GrenadeLauncherMagazine", 6);
			GiveInventory("Goldeneye_GrenadeLauncherDualMagazine", 6);
			GiveInventory("Goldeneye_RCP90Magazine", 80);
			GiveInventory("Goldeneye_RCP90DualMagazine", 80);
			GiveInventory("Goldeneye_CougarMagazine", 6);
			GiveInventory("Goldeneye_CougarDualMagazine", 6);
			GiveInventory("Goldeneye_SilverPP7Magazine", 7);
			GiveInventory("Goldeneye_SilverPP7DualMagazine", 7);
			GiveInventory("Goldeneye_ArabahViperMagazine", 7);
			GiveInventory("Goldeneye_ArabahViperDualMagazine", 7);
			GiveInventory("Goldeneye_GoldenGunMagazine", 1);
			GiveInventory("Goldeneye_GoldenGunDualMagazine", 1);
			GiveInventory("Goldeneye_SniperMagazine", 8);
			GiveInventory("Goldeneye_SniperDualMagazine", 8);
			GiveInventory("Goldeneye_D5KSilencedMagazine", 30);
			GiveInventory("Goldeneye_D5KSilencedDualMagazine", 30);
			GiveInventory("Goldeneye_ZMGMagazine", 32);
			GiveInventory("Goldeneye_ZMGDualMagazine", 32);
			GiveInventory("Goldeneye_D5KMagazine", 30);
			GiveInventory("Goldeneye_D5KDualMagazine", 30);
			GiveInventory("Goldeneye_GoldPP7Magazine", 7);
			GiveInventory("Goldeneye_GoldPP7DualMagazine", 7);
			GiveInventory("Goldeneye_TankMagazine", 1);
			SetWeapon("Goldeneye_PP7Silenced");
			break;

		case CLASS_CATACOMB:
			TakeInventory("Catacomb_SmallHealthPotion", INTMAX);
			TakeInventory("Catacomb_LargeHealthPotion", INTMAX);
			TakeInventory("Catacomb_Waves", INTMAX);
			TakeInventory("Catacomb_WavesQuickSpell", INTMAX);
			TakeInventory("Catacomb_XTerminators", INTMAX);
			TakeInventory("Catacomb_XTerminatorsQuickSpell", INTMAX);
			TakeInventory("Catacomb_Bursts", INTMAX);
			TakeInventory("Catacomb_BurstsQuickSpell", INTMAX);
			TakeInventory("Catacomb_Zappers", INTMAX);
			TakeInventory("Catacomb_ZappersQuickSpell", INTMAX);
			TakeInventory("Catacomb_Nukes", INTMAX);
			TakeInventory("Catacomb_NukesQuickSpell", INTMAX);
			TakeInventory("Catacomb_Bolts", INTMAX);
			TakeInventory("Catacomb_BoltsQuickSpell", INTMAX);
			TakeInventory("Catacomb_AtomicQuickspell", INTMAX);
			TakeInventory("PowerCatacomb_SpreadShot", INTMAX);
			TakeInventory("PowerCatacomb_FireRing", INTMAX);
			TakeInventory("PowerCatacomb_BounceShot", INTMAX);
			TakeInventory("PowerCatacomb_RapidFire", INTMAX);
			TakeInventory("Catacomb_Hourglass", INTMAX);
			TakeInventory("Catacomb_HourglassCooldown", INTMAX);

			GiveInventory("Catacomb3D_MagicMissile", 1);
			GiveInventory("CatacombClass", 1);
			GiveInventory("CanWolfMovement", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Catacomb3D_MagicMissile");
			break;

		case CLASS_PAINKILLER:
			TakeInventory("Painkiller_SoulCatcher", INTMAX);
			//TakeInventory("Painkiller_SoulKeeper", INTMAX);
			TakeInventory("Painkiller_GoldMagnet", INTMAX);
			TakeInventory("Painkiller_SoulRedeemer", INTMAX);
			TakeInventory("Painkiller_DarkSoul", INTMAX);
			TakeInventory("Painkiller_Blessing", INTMAX);
			TakeInventory("Painkiller_Replenish", INTMAX);
			TakeInventory("Painkiller_Forgiveness", INTMAX);
			TakeInventory("Painkiller_Mercy", INTMAX);
			TakeInventory("Painkiller_LastBreath", INTMAX);
			TakeInventory("Painkiller_HealthStealer", INTMAX);
			TakeInventory("Painkiller_HealthRegeneration", INTMAX);
			TakeInventory("Painkiller_ArmorRegeneration", INTMAX);
			TakeInventory("Painkiller_Fear", INTMAX);
			TakeInventory("Painkiller_666Ammo", INTMAX);
			TakeInventory("Painkiller_Speed", INTMAX);
			TakeInventory("Painkiller_Dexterity", INTMAX);
			TakeInventory("Painkiller_Fury", INTMAX);
			TakeInventory("Painkiller_Rage", INTMAX);
			TakeInventory("Painkiller_Confusion", INTMAX);
			TakeInventory("Painkiller_Endurance", INTMAX);
			TakeInventory("Painkiller_IronWill", INTMAX);
			TakeInventory("Painkiller_Haste", INTMAX);
			TakeInventory("Painkiller_DoubleHaste", INTMAX);
			TakeInventory("Painkiller_TripleHaste", INTMAX);
			TakeInventory("Painkiller_TimeBonus", INTMAX);
			TakeInventory("Painkiller_DoubleTimeBonus", INTMAX);
			TakeInventory("Painkiller_WeaponModifier", INTMAX);
			TakeInventory("Painkiller_MagicGun", INTMAX);
			TakeInventory("Painkiller_TheSceptre", INTMAX);
			TakeInventory("Painkiller_DemonMorphCard", INTMAX);
			TakeInventory("Painkiller_Rebirth", INTMAX);
			TakeInventory("Painkiller_Stakegun", INTMAX);
			TakeInventory("Painkiller_Shotgun", INTMAX);
			TakeInventory("Painkiller_Boltgun", INTMAX);
			TakeInventory("Painkiller_Rifle", INTMAX);
			SetInventory("SamsaraPainkillerRifleSecondaryFiredOnce", 0);
			TakeInventory("Painkiller_RocketLauncher", INTMAX);
			TakeInventory("Painkiller_Electrodriver", INTMAX);
			TakeInventory("Painkiller_GoldAmount", 999999);
			SetInventory("Painkiller_GoldGiven", 0);
			SetInventory("Clip", 0);

			SetInventory("Shell", 20);
			SetInventory("Cell", 25);
			GiveInventory("Painkiller_Painkiller", 1);
			GiveInventory("PainkillerClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Painkiller_Painkiller");
			break;

		case CLASS_UNREAL:
			TakeInventory("UDPistolUpgrade", INTMAX);
			TakeInventory("UnrealDoUpgradeRevert", INTMAX);
			TakeInventory("UnrealRevertDirection", INTMAX);
			TakeInventory("UDPistolUpgradePreferred", INTMAX);
			TakeInventory("Unreal_RazorJack", INTMAX);
			TakeInventory("Unreal_ASMDShockRifle", INTMAX);
			TakeInventory("Unreal_FlakCannon", INTMAX);
			TakeInventory("Unreal_Stinger", INTMAX);
			TakeInventory("Unreal_EightBall", INTMAX);
			TakeInventory("Unreal_Minigun", INTMAX);
			TakeInventory("Unreal_Redeemer", INTMAX);
			TakeInventory("Unreal_QuadShot", INTMAX);
			TakeInventory("Unreal_GESBioRifle", INTMAX);
			TakeInventory("Unreal_Rifle", INTMAX);
			TakeInventory("Unreal_Duster", INTMAX);

			GiveInventory("Unreal_DispersionPistol", 1);
			GiveInventory("Unreal_AutoMag", 1);
			SetInventory("DPistolAmmo", 60);
			SetInventory("UnrealAutomagClip", 20);
			GiveInventory("UnrealClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Unreal_AutoMag");
			break;

		case CLASS_RTCW:
			TakeInventory("RTCW_LugerSilencerAttached", INTMAX);
			TakeInventory("RTCW_Grenade", INTMAX);
			TakeInventory("RTCW_MP40", INTMAX);
			TakeInventory("RTCW_Mauser", INTMAX);
			TakeInventory("RTCW_FG42", INTMAX);
			TakeInventory("RTCW_StG44", INTMAX);
			TakeInventory("RTCW_StG44Alt", INTMAX);
			TakeInventory("RTCW_Panzerfaust", INTMAX);
			TakeInventory("RTCW_K43", INTMAX);
			SetInventory("RTCW_K43GrenadeModeSelected", 0);
			SetInventory("RTCW_M1GarandGrenadeModeSelected", 0);
			TakeInventory("RTCW_Venom", INTMAX);
			TakeInventory("RTCW_MG42", INTMAX);
			TakeInventory("RTCW_TeslaGun", INTMAX);
			TakeInventory("RTCW_Flamethrower", INTMAX);
			TakeInventory("RTCW_Sten", INTMAX);
			TakeInventory("RTCW_Winchester", INTMAX);
			TakeInventory("RTCW_HasAlliedCrate", INTMAX);
			TakeInventory("RTCW_Colt", INTMAX);
			TakeInventory("RTCW_ColtDualWield", INTMAX);
			SetInventory("RTCW_ColtFiredLeft", 0);
			SetInventory("SamsaraRTCWColtDualFireState", 0);
			TakeInventory("RTCW_Pineapple", INTMAX);
			TakeInventory("RTCW_Thompson", INTMAX);
			TakeInventory("RTCW_Snooper", INTMAX);
			TakeInventory("RTCW_BAR", INTMAX);
			TakeInventory("RTCW_M1Garand", INTMAX);
			TakeInventory("RTCW_Browning", INTMAX);

			GiveInventory("RTCW_Knife", 1);
			GiveInventory("RTCW_Luger", 1);
			GiveInventory("RTCW_LugerMagazine", 8);
			GiveInventory("RTCW_MP40Magazine", 32);
			GiveInventory("RTCW_MauserMagazine", 10);
			GiveInventory("RTCW_FG42Magazine", 20);
			GiveInventory("RTCW_StG44Magazine", 30);
			GiveInventory("RTCW_PanzerfaustMagazine", 1);
			GiveInventory("RTCW_K43Magazine", 10);
			GiveInventory("RTCW_K43Grenade", 1);
			GiveInventory("RTCW_VenomMagazine", 500);
			GiveInventory("RTCW_MG42Magazine", 150);
			GiveInventory("RTCW_StenMagazine", 32);
			GiveInventory("RTCW_ShotgunMagazine", 6);
			GiveInventory("RTCW_ColtMagazine", 8);
			GiveInventory("RTCW_ColtMagazine2", 8);
			GiveInventory("RTCW_ThompsonMagazine", 30);
			GiveInventory("RTCW_SnooperMagazine", 5);
			GiveInventory("RTCW_BARMagazine", 20);
			GiveInventory("RTCW_M1GarandMagazine", 8);
			GiveInventory("RTCW_M1GarandGrenade", 1);
			GiveInventory("RTCW_BrowningMagazine", 150);
			GiveInventory("RTCWClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("RTCW_Luger");
			break;

		case CLASS_QUAKE3:
			SetInventory("SamsaraQuake3MachinegunFireAnim", 0);
			SetInventory("SamsaraQuake3MachinegunFiredOnce", 0);
			TakeInventory("Q3GrenadeLauncher", INTMAX);
			TakeInventory("Q3Shotgun", INTMAX);
			TakeInventory("Q3Nailgun", INTMAX);
			TakeInventory("Q3LightningGun", INTMAX);
			TakeInventory("Q3LightningGunConsumeAmmo", INTMAX);
			TakeInventory("Q3HeavyMachineGun", INTMAX);
			TakeInventory("SamsaraQuake3HeavyMachinegunSkipFlash", INTMAX);
			TakeInventory("SamsaraQuake3HeavyMachinegunFiredOnce", INTMAX);
			TakeInventory("Q3RocketLauncher", INTMAX);
			TakeInventory("Q3Plasmagun", INTMAX);
			SetInventory("SamsaraQuake3PlasmaGunFireAnim", 0);
			TakeInventory("Q3BFG10K", INTMAX);
			TakeInventory("Q3Chaingun", INTMAX);
			TakeInventory("Q3ChaingunConsumeAmmo", INTMAX);
			TakeInventory("Q3Railgun", INTMAX);
			TakeInventory("Q3ProximityLauncher", INTMAX);
			TakeInventory("Q3GrenadeLauncherAmmo", INTMAX);
			TakeInventory("Q3ChaingunAmmo", INTMAX);

			GiveInventory("Q3Gauntlet", 1);
			GiveInventory("Q3Machinegun", 1);
			GiveInventory("Q3Class", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Q3Machinegun");
			break;

		case CLASS_DESCENT:
			TakeInventory("DescentSuperLaser", INTMAX);
			TakeInventory("DescentQuadLaser", INTMAX);
			TakeInventory("DescentSmartMissile", INTMAX);
			TakeInventory("DescentVulcan", INTMAX);
            SetInventory("SamsaraDescentVulcanFiredCount", 0);
			TakeInventory("DescentConcussionMissile", INTMAX);
			TakeInventory("DescentGauss", INTMAX);
			TakeInventory("DescentHomingMissile", INTMAX);
			TakeInventory("DescentSpreadFire", INTMAX);
			TakeInventory("DescentGuidedMissile", INTMAX);
			TakeInventory("DescentFusion", INTMAX);
            SetInventory("SamsaraDescentFusionSoundChannelCount", 0);
			TakeInventory("DescentMegaMissile", INTMAX);
			TakeInventory("DescentHelix", INTMAX);
            SetInventory("DescentHelixRotation", 0);
			TakeInventory("DescentMercuryMissile", INTMAX);
			TakeInventory("DescentOmega", INTMAX);
            SetInventory("SamsaraDescentOmegaSoundChannelCount", 0);
			TakeInventory("DescentShakerMissile", INTMAX);
			TakeInventory("DescentPlasma", INTMAX);
			TakeInventory("DescentPhoenix", INTMAX);
			TakeInventory("DescentLaserLevel", INTMAX);

			GiveInventory("DescentLaser", 1);
			GiveInventory("DescentWeapon", 1);
			GiveInventory("DescentWeaponPadUp", 1);
			GiveInventory("DescentWeaponPadDown", 1);
			GiveInventory("DescentClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetInventory("DescentPrimaryCounter", 0);
			SetInventory("DescentSecondaryCounter", 0);
            SetInventory("DescentPrimarySwitcher", 0);
            SetInventory("DescentMissileSwitcher", 0);
			SetWeapon("DescentLaser");
			break;

		case CLASS_DEUSEX:
			TakeInventory("DeusEx_MiniCrossbow", INTMAX);
			TakeInventory("DeusEx_Shotgun", INTMAX);
			TakeInventory("DeusEx_AssaultShotgun", INTMAX);
			TakeInventory("DeusEx_AssaultRifle", INTMAX);
			TakeInventory("DeusEx_GEPGun", INTMAX);
			TakeInventory("DeusEx_FlameThrower", INTMAX);
			TakeInventory("DeusEx_MJ12PlasmaRifle", INTMAX);
			TakeInventory("DeusEx_LAW", INTMAX);
			TakeInventory("DeusEx_SniperRifle", INTMAX);
			TakeInventory("DeusEx_NanoSword", INTMAX);
			TakeInventory("DeusEx_StealthPistol", INTMAX);
			TakeInventory("DeusEx_LAM", INTMAX);
			TakeInventory("DeusEx_RiotProd", INTMAX);
			TakeInventory("DeusEx_GEPGunEquipped", INTMAX);
			TakeInventory("DeusEx_FlameThrowerEquipped", INTMAX);
			TakeInventory("DeusEx_PREquipped", INTMAX);
			TakeInventory("DeusEx_LAWEquipped", INTMAX);
			SetInventory("SamsaraDeusExMiniXBowAmmoType", 0);
			SetInventory("SamsaraDeusExShotgunAmmoType", 0);
			SetInventory("SamsaraDeusExAssaultShotgunAmmoType", 0);
			SetInventory("SamsaraDeusExAssaultRifleAmmoType", 0);
			SetInventory("SamsaraDeusExGEPGunAmmoType", 0);
			SetInventory("SamsaraDeusExPlasmaRifleAmmoType", 0);

			if (GetCvar("samsara_pistolstart") >= 2 && CheckInventory("PistolStartEnabled"))
			{
				TakeInventory("DeusEx_LowTechSkill", 4);
				TakeInventory("DeusEx_PistolSkill", 4);
				TakeInventory("DeusEx_RifleSkill", 4);
				TakeInventory("DeusEx_HeavyWeaponSkill", 4);
				TakeInventory("DeusEx_MedicineSkill", 4);
				TakeInventory("DeusEx_EnviroSkill", 4);
				TakeInventory("DeusEx_PistolPoints", 99999);
				TakeInventory("DeusEx_RiflePoints", 99999);
				TakeInventory("DeusEx_HeavyWeaponPoints", 99999);
				TakeInventory("DeusEx_LowTechPoints", 99999);
				TakeInventory("DeusEx_MedicinePoints", 99999);
				TakeInventory("DeusEx_EnviroPoints", 99999);
				SetInventory("SamsaraDeusExStartingSkillsGiven", 0);
			}

			if (GetCvar("samsara_pistolstart") >= 2 && CheckInventory("PistolStartEnabled"))
			{
				SetAmmoCapacity("DeusEx_GlockMagazine", 4);
				SetAmmoCapacity("DeusEx_MiniXBowMagazine", 6);
				SetAmmoCapacity("DeusEx_ShotgunMagazine", 4);
				SetAmmoCapacity("DeusEx_AssShotgunMagazine", 12);
				SetAmmoCapacity("DeusEx_AssaultGunMagazine", 30);
				SetAmmoCapacity("DeusEx_FlameThrowerMagazine", 100);
				SetAmmoCapacity("DeusEx_PlasmaRifleMagazine", 16);
				SetAmmoCapacity("DeusEx_SniperMagazine", 6);
				SetAmmoCapacity("DeusEx_StealthMagazine", 7);
			}

			GiveInventory("DeusEx_GlockMagazine", GetAmmoCapacity("DeusEx_GlockMagazine"));
			GiveInventory("DeusEx_MiniXBowMagazine", GetAmmoCapacity("DeusEx_MiniXBowMagazine"));
			GiveInventory("DeusEx_ShotgunMagazine", GetAmmoCapacity("DeusEx_ShotgunMagazine"));
			GiveInventory("DeusEx_AssShotgunMagazine", GetAmmoCapacity("DeusEx_AssShotgunMagazine"));
			GiveInventory("DeusEx_AssaultGunMagazine", GetAmmoCapacity("DeusEx_AssaultGunMagazine"));
			GiveInventory("DeusEx_GEPGunMagazine", GetAmmoCapacity("DeusEx_GEPGunMagazine"));
			GiveInventory("DeusEx_FlameThrowerMagazine", GetAmmoCapacity("DeusEx_FlameThrowerMagazine"));
			GiveInventory("DeusEx_PlasmaRifleMagazine", GetAmmoCapacity("DeusEx_PlasmaRifleMagazine"));
			GiveInventory("DeusEx_SniperMagazine", GetAmmoCapacity("DeusEx_SniperMagazine"));
			GiveInventory("DeusEx_StealthMagazine", GetAmmoCapacity("DeusEx_StealthMagazine"));

			if (GetCvar("samsara_pistolstart") >= 2 && CheckInventory("PistolStartEnabled"))
			{
				SetAmmoCapacity("DeusEx_GlockSpread", 120);
				SetAmmoCapacity("DeusEx_XBowSpread", 40);
				SetAmmoCapacity("DeusEx_SawedOffSpread", 90);
				SetAmmoCapacity("DeusEx_ShotgunSpread", 140);
				SetAmmoCapacity("DeusEx_AssaultGunSpread", 64);
				SetAmmoCapacity("DeusEx_PlasmaRifleSpread", 90);
				SetAmmoCapacity("DeusEx_StealthSpread", 115);
			}

			TakeInventory("DeusEx_GlockSpread", 120);
			TakeInventory("DeusEx_XBowSpread", 40);
			TakeInventory("DeusEx_SawedOffSpread", 90);
			TakeInventory("DeusEx_ShotgunSpread", 140);
			TakeInventory("DeusEx_AssaultGunSpread", 64);
			TakeInventory("DeusEx_PlasmaRifleSpread", 90);
			TakeInventory("DeusEx_StealthSpread", 115);

			TakeInventory("DeusEx_Augmentation_CombatStrength", 4);
			TakeInventory("DeusEx_Augmentation_MicrofibralMuscle", 4);
			TakeInventory("DeusEx_Augmentation_SpeedEnhancement", 4);
			TakeInventory("DeusEx_Augmentation_RunSilent", 4);
			TakeInventory("DeusEx_Augmentation_BallisticProtection", 4);
			TakeInventory("DeusEx_Augmentation_EMPShield", 4);
			TakeInventory("DeusEx_Augmentation_Cloak", 4);
			TakeInventory("DeusEx_Augmentation_Repulsor", 4);
			TakeInventory("DeusEx_Augmentation_EnergyShield", 4);
			TakeInventory("DeusEx_Augmentation_EnvironmentalResistance", 4);
			TakeInventory("DeusEx_Augmentation_Regeneration", 4);
			TakeInventory("DeusEx_Augmentation_Maintenance", 4);
			TakeInventory("DeusEx_Augmentation_PowerRecirculator", 4);
			TakeInventory("DeusEx_Augmentation_RechargeableBattery", 4);
			TakeInventory("DeusEx_Augmentation_SpyDrone", 4);
			TakeInventory("DeusEx_Augmentation_AggressiveDefenseSystem", 4);
			TakeInventory("DeusEx_Augmentation_VisionEnhancement", 4);
			TakeInventory("DeusEx_Augmentation_Targeting", 4);
			TakeInventory("DeusEx_Augmentation_ArmsSlot",1);
			TakeInventory("DeusEx_Augmentation_LegsSlot",1);
			TakeInventory("DeusEx_Augmentation_Subdermal1Slot",1);
			TakeInventory("DeusEx_Augmentation_Subdermal2Slot",1);
			TakeInventory("DeusEx_Augmentation_Torso1Slot",1);
			TakeInventory("DeusEx_Augmentation_Torso2Slot",1);
			TakeInventory("DeusEx_Augmentation_Torso3Slot",1);
			TakeInventory("DeusEx_Augmentation_CranialSlot",1);
			TakeInventory("DeusEx_Augmentation_EyeSlot",1);
			TakeInventory("DeusEx_AugmentationUpgradeCannister",99);
			TakeInventory("DeusEx_AugmentationBioEnergyCell",99);

			GiveInventory("DeusEx_Augmentation_InfoLink",1);
			GiveInventory("DeusEx_Augmentation_IFF",1);
			GiveInventory("DeusEx_Augmentation_Light",1);

			GiveInventory("DeusEx_CombatKnife", 1);
			GiveInventory("DeusEx_10mmPistol", 1);
			GiveInventory("DeusExClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("DeusEx_10mmPistol");
			break;
	}
}

script "Samsara_FillInventory" (void)
{
	int a, b;
	int pClass = PlayerClass(PlayerNumber());
	str weapon, ammo1, ammo2;

	GiveInventory("GotWeapon0", 1);
	GiveInventory("GotWeapon2", 1);
	GiveInventory("GotWeapon3", 1);
	GiveInventory("GotWeapon4", 1);
	GiveInventory("GotWeapon5", 1);
	GiveInventory("GotWeapon6", 1);
	GiveInventory("GotWeapon7", 1);
	TakeInventory("MetaCheatDetector",1);

    if (!CheckInventory("SamsaraBackpacksInInventory")) { GiveInventory("SamsaraBackpacksInInventory", 1); }

	for(a = 0; a < SLOTCOUNT; a++)
	{
		weapon = ClassWeapons[pClass][a][0];
		ammo1 = ClassWeapons[pClass][a][1];
		ammo2 = ClassWeapons[pClass][a][2];
		if(strlen(weapon) > 0) { for(b = 0; b < 256; b++) { GiveInventory(weapon,1); } }
		if(strlen(ammo1) > 0) { for(b = 0; b < 1024; b++) { GiveInventory(ammo1,1); } }
		if(strlen(ammo2) > 0) { for(b = 0; b < 1024; b++) { GiveInventory(ammo2,1); } }
	}
	for(a = 0; a < UNIQUECOUNT; a++)
	{
		weapon = ClassUniques[pClass][a*2];
		ammo1 = ClassUniques[pClass][(a*2)+1];
		if(strlen(weapon) > 0) { for(b = 0; b < 256; b++) { GiveInventory(weapon,1); } }
		if(strlen(ammo1) > 0) { for(b = 0; b < 1024; b++) { GiveInventory(ammo1,1); } }
	}

	SetInventory("SigilInventoryWeapon1",0);
	SetInventory("SigilInventoryWeapon2",0);
	SetInventory("SigilInventoryWeapon3",0);
	SetInventory("SigilInventoryWeapon4",0);
	SetInventory("SigilInventoryWeapon5",0);

	switch(pClass)
	{
		default: break;

		case CLASS_DOOM:
			GiveInventory("SamsaraDoom64UnmakerArtifact",3);
			GiveInventory("DGStrHasAutoShotgun",1);
			GiveInventory("DGHasChaingun",1);
			GiveInventory("DGStrHasFlamethrower",1);
			GiveInventory("DGHasMinigun",1);
			GiveInventory("DGHasRocketLauncher",1);
			GiveInventory("DGStrHasLandMines",1);
			GiveInventory("DGHasGrenadeLauncher",1);
			GiveInventory("DGHasPlasmaRifle",1);
			GiveInventory("DGStrHasStunnerRifle",1);
			GiveInventory("DGHasRailGun",1);
			GiveInventory("DGHasBFG9000",1);
			GiveInventory("Doom64_IHaveUnmaker",1);
			GiveInventory("DGStrHasPyroCannon",1);
			GiveInventory("DGHasBFG10K",1);
			GiveInventory("DGStrHasHomingRocketLauncher",1);
			GiveInventory("DGStrHasPlasmaRepeater",1);
			GiveInventory("DGStrHasWPK",3);
			break;

		case CLASS_HERETIC:
			GiveInventory("PortQuartzFlask",16);
			GiveInventory("PortSuperHealth",5);
			GiveInventory("PortTorch",16);
			GiveInventory("PortGhostly",16);
			GiveInventory("PortRingInvuln",16);
			GiveInventory("CorvusMegasphere",16);
			GiveInventory("SamsaraSpeedBootsPickupInventoryRaven", 16);
			GiveInventory("SamsaraFullInvisibilityInventoryHeretic", 16);
			GiveInventory("SamsaraTimeFreezeInventoryHeretic", 16);
			GiveInventory("SamsaraDefenseBoosterInventoryHeretic", 16);
			GiveInventory("SamsaraDamageBoosterInventoryHeretic", 16);
			TakeInventory("TomeOfPowerCooldown",65536);
			TakeInventory("LesserTomeCooldown",65536);
			break;

		case CLASS_WOLFEN:
			GiveInventory("TotenkopfSecretCounter",30);
			GiveInventory("Totenkopf_IHaveDualPistols",1);
			GiveInventory("Wolfen_IHaveSlot1",1);
			GiveInventory("Totenkopf_IHaveDualMausers",1);
			GiveInventory("Wolfen_IHaveSlot2",1);
			GiveInventory("Wolfen_IHaveSlot3",1);
			GiveInventory("Wolfen_IHaveSlot4",1);
			GiveInventory("Totenkopf_IHaveDualMP40s",1);
			GiveInventory("Wolfen_IHaveDualChainguns",1);
			GiveInventory("Wolfen_IHaveSlot5",1);
			GiveInventory("Wolfen_IHaveSlot6",1);
			GiveInventory("Wolfen_IHaveSlot7",1);
			GiveInventory("Wolfen_IHaveExtraLife",9);
			GiveInventory("Totenkopf_IHaveFlamethrower",1);
			if (CheckInventory("WolfenClassMode") == 1) { GiveInventory("WolfenAmmoCrateLost", 9); }
			GiveInventory("Wolfen_IHaveAmmoCrate",9);
			GiveInventory("Totenkopf_IHaveMG42",1);
			GiveInventory("Totenkopf_IHaveScope",1);
			if (CheckInventory("WolfenClassMode") == 2 && !CheckInventory("Totenkopf_IHavePowerArmor")) { GiveInventory("TotenkopfPowerArmor", 1); }
			GiveInventory("Totenkopf_IHavePowerArmor",1);
			if (CheckInventory("WolfenClassMode") == 2 && !CheckInventory("Totenkopf_IAmWolverine")) { GiveInventory("TotenkopfHealingOrb", 1); }
			GiveInventory("Totenkopf_IAmWolverine",1);
			break;

		case CLASS_HEXEN:
			GiveInventory("AllyCellphone",1);
            SetInventory("SamsaraHexenHasLMSPistolDisabled", 0);
			GiveInventory("SamsaraHexenHasSlot7", 1);
			GiveInventory("SamsaraClassicPariasHasBloodscourge", 1);
			GiveInventory("SamsaraClassicPariasHasSpikedGauntlet", 1);
			TakeInventory("FlechetteCooldown",65536);
			TakeInventory("Flechette2Cooldown",65536);
			TakeInventory("Flechette3Cooldown",65536);
			TakeInventory("SamsaraDiscOfRepulsionCooldown",65536);
			TakeInventory("SamsaraDarkServantCooldown",65536);
			GiveInventory("PortQuartzFlask",16);
			GiveInventory("PortSuperHealth",5);
			GiveInventory("PortKraterOfMight",3);
			GiveInventory("PortTorch",16);
			GiveInventory("PortIconDefender",16);
			GiveInventory("SamsaraSpeedBootsPickupInventoryRaven", 16);
			break;

		case CLASS_DUKE:
			if (CheckInventory("DukeClassMode") >= 2) { GiveInventory("DukePortNiVi64", 1); }
			else if (CheckInventory("DukeClassMode") == 1) { GiveInventory("DukePortNiViLAB", 1); }
			else { GiveInventory("DukePortNiVi", 1); }
			GiveInventory("DukeVisionFuel", 100);
			if (CheckInventory("DukeClassMode") >= 2) { GiveInventory("ItemHoloduke64", 3); }
			else if (CheckInventory("DukeClassMode") == 1) { GiveInventory("ItemHolodukeLAB", 3); }
			else { GiveInventory("ItemHoloduke", 3); }
			if (CheckInventory("DukeClassMode") >= 2) { GiveInventory("DukePortSteroids64", 1); }
			else if (CheckInventory("DukeClassMode") == 1) { GiveInventory("DukePortSteroidsLAB", 1); }
			else { GiveInventory("DukePortSteroids", 1); }
			GiveInventory("DukeSteroidsFuel", 100);
			SetInventory("DukeSteroidsActive", 0);
			SetInventory("DukeSteroidsSpawnRemove", 0);
			TakeInventory("DukeSteroidsSpeed", 1);
			TakeInventory("DukeSteroidsDamage", 1);
			GiveInventory("DukeHasShrinker", 999);
			GiveInventory("DukeHasExpander", 999);
			SetInventory("SamsaraDukeHasSlot4", 1);
			GiveInventory("SamsaraDukeHasGoldenDesertEagle", 999);
			break;

		case CLASS_MARATHON:
			GiveInventory("CanDualPistols",1);
			GiveInventory("CanDualShotties",1);
			break;

		case CLASS_QUAKE:
			SetInventory("QuakeQuadTimer", 0);
			SetInventory("SamsaraQuadDamageCooldownDisplay", 0);
			GiveQuad(1050);
			if (GetCVar("samsara_permaquad")) { GiveInventory("QuadDamageItem", 1); }
			break;

		case CLASS_ROTT:
			GiveInventory("AllyCellphone",1);
			break;

		case CLASS_CALEB:
			GiveInventory("BeastVision",1);
			GiveInventory("CalebVisionFuel", 100);
			GiveInventory("CalebDoctorsBag",100);
			TakeInventory("ThrowPower",65536);
			TakeInventory("ThrowPowerBig",65536);
			break;

		case CLASS_STRIFE:
			TakeInventory("StrifeGrenadeLauncher2",1);
			GiveInventory("StrifePortMedikit",15);
			GiveInventory("StrifeStimpack2",15);
			GiveInventory("StrifeSurgeryKit2",5);
			GiveInventory("PortShadowArmor",2);
			//GiveInventory("PortEnviSuit",5);

            if (GetCVar("samsara_currentgame") == GAME_STRIFE)
            {
                int sigilcounter;

                if ((isSinglePlayer() || isCoop()) && !isInvasion()) { sigilCounter = SamsaraGlobal[2] + SamsaraGlobal[3] + SamsaraGlobal[4] + SamsaraGlobal[5] + SamsaraGlobal[6]; }
                else { sigilCounter = CheckInventory("SigilSplinter1Temp") + CheckInventory("SigilSplinter2Temp") + CheckInventory("SigilSplinter3Temp") + CheckInventory("SigilSplinter4Temp") + CheckInventory("SigilSplinter5Temp"); }

                if (sigilCounter <= 0) { SetInventory(" Sigil ", 0); }
            } else {
                GiveInventory("StrifeSigilPiece", 5);
                GiveInventory("StrifeSigilPieceCheck3", 1);
                GiveInventory("StrifeSigilPieceCheck4", 1);
                GiveInventory("StrifeSigilPieceCheck5", 1);
                GiveInventory("StrifeSigilPieceCheck6", 1);
                GiveInventory("StrifeSigilPieceCheck7", 1);
                GiveInventory("StrifeSigilPiecePreferred", 5);
                GiveInventory(" Sigil ", 1);
            }
			break;

		case CLASS_ERAD:
			GiveInventory("AllyCellphone",1);
			break;

		case CLASS_RMR:
			GiveInventory("RMROxygenRecycler",3);
			break;

		case CLASS_POGREED:
			GiveInventory("AllyCellphone",1);
			GiveInventory("Medtube",20);
			GiveInventory("IPOGReversoPill",1);
			break;

		case CLASS_DISRUPTOR:
			TakeInventory("DisruptorEnergyBall", INTMAX);
			GiveInventory("DisruptorTeraBall",1);
            if (CheckInventory("DisruptorPsionicSelected") == 2) { SetInventory("DisruptorPsionicSelected", 3); }
			break;

		case CLASS_WITCHAVEN:
			GiveInventory("WTHealthPhial",10);
			GiveInventory("WTInvisibilityPhial",10);
			GiveInventory("WTFireProofPhial",10);
			GiveInventory("WTStrengthPhial",10);
			GiveInventory("WTExperience",60000);
			break;

		case CLASS_HALFLIFE:
            GiveInventory("FlashLightAmmo", 4200);
            GiveInventory("SamsaraHalfLifeAcquiredUnique1", 1);
            GiveInventory("SamsaraHalfLifeSnarksAvailable", 1);
			break;

		case CLASS_SW:
			GiveInventory("SWNuke",1);
			GiveInventory("HeatSeekerCharge", 5);
			GiveInventory("HeatSeekingCard", 2);
			GiveInventory("SWGasGrenade", 5);
			GiveInventory("UziAmountCheck", 1);
			break;

		case CLASS_CM:
			GiveInventory("CybermageMedkit",15);
			break;

		case CLASS_JON:
			GiveInventory("EyeOfSiaItem_EX",3);
			GiveInventory("DivineScarab_Ex",2);
			GiveInventory("LighterofGumercindo_EX",6);
			break;

		case CLASS_RR:
			GiveInventory("RRCowPie",6);
			GiveInventory("RRBubbaBeer",6);
			GiveInventory("RRCheapasswhiskey",100);
			GiveInventory("AllyCellphone",1);
			break;

		case CLASS_BITTERMAN:
			GiveInventory("Q2QuadDamage",1);
			GiveInventory("Q2DualFireDamage",2);
			GiveInventory("Q2DoubleDamage",2);
			GiveInventory("Q2Invulnerability",2);
			GiveInventory("Q2Silencer",2);
			break;

		case CLASS_DEMONESS:
			GiveInventory("PortQuartzFlask3",16);
			GiveInventory("PortGhostly2",16);
			GiveInventory("PortTorch3",16);
			GiveInventory("PortIconDefender2",16);
			GiveInventory("PortSuperHealth3",5);
			GiveInventory("PortSuperHealth3",5);
			GiveInventory("PortKraterOfMight2",3);
			GiveInventory("Hexen2Experience",17343000);
			break;

		case CLASS_BOND:
			GiveInventory("Goldeneye_ThrowingKnivesDualToken",1);
			GiveInventory("Goldeneye_PP7DualToken",1);
			GiveInventory("Goldeneye_KF7DualToken",1);
			GiveInventory("Goldeneye_AutoShotgunDualToken",1);
			GiveInventory("Goldeneye_AR33DualToken",1);
			GiveInventory("Goldeneye_PhantomDualToken",1);
			GiveInventory("Goldeneye_RocketLauncherDualToken",1);
			GiveInventory("Goldeneye_GrenadeLauncherDualToken",1);
			GiveInventory("Goldeneye_RCP90DualToken",1);
			GiveInventory("Goldeneye_HasCougar",1);
			GiveInventory("Goldeneye_CougarDualToken",1);
			GiveInventory("Goldeneye_LaserDualToken",1);
			GiveInventory("Goldeneye_GoldenGunDualToken",1);
			GiveInventory("Goldeneye_SniperDualToken",1);
			GiveInventory("Goldeneye_D5KDualToken",1);
			GiveInventory("Goldeneye_GoldPP7",1);
			GiveInventory("Goldeneye_GoldPP7DualToken",1);
			GiveInventory("SamsaraGoldenEyePermanentTankCannon", 1);
			GiveInventory("AllyCellphone",1);
			break;

		case CLASS_CATACOMB:
			GiveInventory("Catacomb_SmallHealthPotion",99);
			GiveInventory("Catacomb_LargeHealthPotion",99);
			GiveInventory("Catacomb_Hourglass",1);
			TakeInventory("Catacomb_HourglassCooldown",180);
			break;

		case CLASS_PAINKILLER:
			GiveInventory("Painkiller_GoldAmount", 999999);
			break;

		case CLASS_UNREAL:
            if (CheckInventory("UDPistolUpgrade") < 4)
            {
                SetInventory("UDPistolUpgrade", 4);
				SetInventory("UDPistolUpgradePreferred", 4);
                GiveInventory("UnrealRevertDirection", 1);
            }
            break;

		case CLASS_DESCENT:
			PlaySound(0, "Descent/Cheater", CHAN_ITEM);
			GiveInventory("DescentQuadLaser", 1);
			GiveInventory("DescentLaserLevel", 5);
			if(CheckInventory("DescentPrimaryCounter")==0)
				GiveInventory("DescentPrimaryCounter",1);
			break;

		case CLASS_DEUSEX:
			GiveInventory("DeusEx_LowTechSkill", 4);
			GiveInventory("DeusEx_PistolSkill", 4);
			GiveInventory("DeusEx_RifleSkill", 4);
			GiveInventory("DeusEx_HeavyWeaponSkill", 4);
			GiveInventory("DeusEx_MedicineSkill", 4);
			GiveInventory("DeusEx_EnviroSkill", 4);
			SetAmmoCapacity("DeusEx_GlockMagazine", 12);
			SetAmmoCapacity("DeusEx_MiniXBowMagazine", 14);
			SetAmmoCapacity("DeusEx_ShotgunMagazine", 8);
			SetAmmoCapacity("DeusEx_AssShotgunMagazine", 24);
			SetAmmoCapacity("DeusEx_AssaultGunMagazine", 70);
			SetAmmoCapacity("DeusEx_FlameThrowerMagazine", 200);
			SetAmmoCapacity("DeusEx_PlasmaRifleMagazine", 32);
			SetAmmoCapacity("DeusEx_SniperMagazine", 14);
			SetAmmoCapacity("DeusEx_StealthMagazine", 19);
			GiveInventory("DeusEx_GlockMagazine", 12);
			GiveInventory("DeusEx_MiniXBowMagazine", 14);
			GiveInventory("DeusEx_ShotgunMagazine", 8);
			GiveInventory("DeusEx_AssShotgunMagazine", 24);
			GiveInventory("DeusEx_AssaultGunMagazine", 70);
			GiveInventory("DeusEx_FlameThrowerMagazine", 200);
			GiveInventory("DeusEx_PlasmaRifleMagazine", 32);
			GiveInventory("DeusEx_SniperMagazine", 14);
			GiveInventory("DeusEx_StealthMagazine", 19);
			GiveInventory("DeusEx_Augmentation_CombatStrength",4);
			GiveInventory("DeusEx_Augmentation_MicrofibralMuscle",4);
			GiveInventory("DeusEx_Augmentation_SpeedEnhancement",4);
			GiveInventory("DeusEx_Augmentation_RunSilent",4);
			GiveInventory("DeusEx_Augmentation_BallisticProtection",4);
			GiveInventory("DeusEx_Augmentation_EMPShield",4);
			GiveInventory("DeusEx_Augmentation_Cloak",4);
			GiveInventory("DeusEx_Augmentation_Repulsor",4);
			GiveInventory("DeusEx_Augmentation_EnergyShield",4);
			GiveInventory("DeusEx_Augmentation_EnvironmentalResistance",4);
			GiveInventory("DeusEx_Augmentation_Regeneration",4);
			GiveInventory("DeusEx_Augmentation_Maintenance",4);
			GiveInventory("DeusEx_Augmentation_PowerRecirculator",4);
			GiveInventory("DeusEx_Augmentation_RechargeableBattery",4);
			GiveInventory("DeusEx_Augmentation_SpyDrone",4);
			GiveInventory("DeusEx_Augmentation_AggressiveDefenseSystem",4);
			GiveInventory("DeusEx_Augmentation_VisionEnhancement",4);
			GiveInventory("DeusEx_Augmentation_Targeting",4);
			GiveInventory("DeusEx_Augmentation_InfoLink",1);
			GiveInventory("DeusEx_Augmentation_IFF",1);
			GiveInventory("DeusEx_Augmentation_Light",1);
			GiveInventory("DeusEx_AugmentationUpgradeCannister",99);
			GiveInventory("DeusEx_AugmentationBioEnergyCell",99);
			if(!CheckInventory("DeusEx_Augmentation_ArmsSlot")) GiveInventory("DeusEx_Augmentation_ArmsSlot",1);
			if(!CheckInventory("DeusEx_Augmentation_LegsSlot")) GiveInventory("DeusEx_Augmentation_LegsSlot",1);
			if(!CheckInventory("DeusEx_Augmentation_Subdermal1Slot")) GiveInventory("DeusEx_Augmentation_Subdermal1Slot",1);
			if(!CheckInventory("DeusEx_Augmentation_Subdermal2Slot")) GiveInventory("DeusEx_Augmentation_Subdermal2Slot",1);
			if(!CheckInventory("DeusEx_Augmentation_Torso1Slot")) GiveInventory("DeusEx_Augmentation_Torso1Slot",1);
			if(!CheckInventory("DeusEx_Augmentation_Torso2Slot")) GiveInventory("DeusEx_Augmentation_Torso2Slot",1);
			if(!CheckInventory("DeusEx_Augmentation_Torso3Slot")) GiveInventory("DeusEx_Augmentation_Torso3Slot",1);
			if(!CheckInventory("DeusEx_Augmentation_CranialSlot")) GiveInventory("DeusEx_Augmentation_CranialSlot",1);
			if(!CheckInventory("DeusEx_Augmentation_EyeSlot")) GiveInventory("DeusEx_Augmentation_EyeSlot",1);
			SetAmmoCapacity("DeusEx_GlockSpread", 45);
			SetAmmoCapacity("DeusEx_XBowSpread", 25);
			SetAmmoCapacity("DeusEx_SawedOffSpread", 30);
			SetAmmoCapacity("DeusEx_ShotgunSpread", 0);
			SetAmmoCapacity("DeusEx_AssaultGunSpread", 0);
			SetAmmoCapacity("DeusEx_PlasmaRifleSpread", 42);
			SetAmmoCapacity("DeusEx_StealthSpread", 25);
			break;
	}

    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 0);
    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", 0);

	GiveInventory("Samsara_ModeWeaponChange",1);
}

//======================================================================================================================
//							Map Inventory - For weapons to advanced for generic pickup code
//======================================================================================================================

script "Samsara_GiveCustomSlot" (int slot, int dropped, int startmode)
{
    // Result value
    int result = 0;

    // Current IWAD
    int currentiwad = GetCVar("samsara_currentgame");

    // Player number and player class
    int pln = PlayerNumber();
    int classnum = samsaraClassNum();

    // Alternate class
    int altclasschoice = 0;

    switch (classnum)
    {
      default:
        break;

      case CLASS_DOOM:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_doommode") : CheckInventory("DoomClassMode");

        if (altclasschoice > 2) { altclasschoice = 2; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      case CLASS_WOLFEN:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_wolfmode") : CheckInventory("WolfenClassMode");

        if (altclasschoice > 2) { altclasschoice = 2; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      case CLASS_HEXEN:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_hexclass") : CheckInventory("HexenClassMode");

        if (altclasschoice > 3) { altclasschoice = 3; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      case CLASS_DUKE:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_dukemode") : CheckInventory("DukeClassMode");

        if (altclasschoice > 2) { altclasschoice = 2; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      /*case CLASS_ROTT:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_rottmode") : CheckInventory("RottMode");

        if (altclasschoice > 4) { altclasschoice = 4; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;*/

      /*case CLASS_BLAKE:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_bsaog") : CheckInventory("BlakeAOGToken");

        if (altclasschoice > 1) { altclasschoice = 1; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;*/

      case CLASS_ERAD:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_eradmode") : CheckInventory("EradMode");

        if (altclasschoice > 3) { altclasschoice = 3; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      /*case CLASS_POGREED:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_ipogmode") : CheckInventory("IpogMode");

        if (altclasschoice > 4) { altclasschoice = 4; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;*/

      case CLASS_HALFLIFE:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_shephardmode") : CheckInventory("HalfLifeOpposingForce");

        if (altclasschoice > 1) { altclasschoice = 1; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;
    }

    // Loadout
    int loadoutchoice = 0;

    switch (classnum)
    {
      default:
        break;

      case CLASS_DOOM:
        switch (altclasschoice)
        {
          default: // Doom 64/Stronghold
            break;

          case 0: // Original
            switch (slot)
            {
              default:
                break;

              case SLOT_PISTOL:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_doomguy_fallbackranged") > 0 ? GetCVar("samsara_doomguy_fallbackranged") - 1 : GetUserCVar(pln, "samsara_cl_doomguy_fallbackranged"); }
                else { loadoutchoice = CheckInventory("SamsaraDoomOriginalLoadoutFallbackRanged"); }
                break;

              case SLOT_CHAINGUN:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_doomguy_slot4") > 0 ? GetCVar("samsara_doomguy_slot4") - 1 : GetUserCVar(pln, "samsara_cl_doomguy_slot4"); }
                else { loadoutchoice = CheckInventory("SamsaraDoomOriginalLoadoutSlot4"); }
                break;

              case SLOT_PLASMARIFLE:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_doomguy_slot6") > 0 ? GetCVar("samsara_doomguy_slot6") - 1 : GetUserCVar(pln, "samsara_cl_doomguy_slot6"); }
                else { loadoutchoice = CheckInventory("SamsaraDoomOriginalLoadoutSlot6"); }
                break;

              case SLOT_BFG9000:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_doomguy_slot7") > 0 ? GetCVar("samsara_doomguy_slot7") - 1 : GetUserCVar(pln, "samsara_cl_doomguy_slot7"); }
                else { loadoutchoice = CheckInventory("SamsaraDoomOriginalLoadoutSlot7"); }
                break;
            }
            break;
        }
        break;

      case CLASS_CHEX:
        switch (slot)
        {
          default:
            break;

          case SLOT_PISTOL:
            if (startmode != 0) { loadoutchoice = GetCVar("samsara_chex_fallbackranged") > 0 ? GetCVar("samsara_chex_fallbackranged") - 1 : GetUserCVar(pln, "samsara_cl_chex_fallbackranged"); }
            else { loadoutchoice = CheckInventory("SamsaraChexLoadoutFallbackRanged"); }
            break;
        }
        break;

      case CLASS_HALFLIFE:
        switch (altclasschoice)
        {
          default:
            break;

          case 0: // Gordon Freeman
            switch (slot)
            {
              default:
                break;

              case SLOT_FIST:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_freeman_fallbackmelee") > 0 ? GetCVar("samsara_freeman_fallbackmelee") - 1 : GetUserCVar(pln, "samsara_cl_freeman_fallbackmelee"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutFallbackMelee"); }
                break;

              case SLOT_CHAINSAW:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_freeman_slot1") > 0 ? GetCVar("samsara_freeman_slot1") - 1 : GetUserCVar(pln, "samsara_cl_freeman_slot1"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutSlot1"); }
                break;

              case SLOT_SUPERSHOTGUN:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_freeman_slot3") > 0 ? GetCVar("samsara_freeman_slot3") - 1 : GetUserCVar(pln, "samsara_cl_freeman_slot3"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutSlot3"); }
                break;

              case SLOT_ROCKETLAUNCHER:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_freeman_slot5") > 0 ? GetCVar("samsara_freeman_slot5") - 1 : GetUserCVar(pln, "samsara_cl_freeman_slot5"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutSlot5"); }
                break;

              case SLOT_PLASMARIFLE:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_freeman_slot6") > 0 ? GetCVar("samsara_freeman_slot6") - 1 : GetUserCVar(pln, "samsara_cl_freeman_slot6"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutSlot6"); }
                break;

              case SLOT_BFG9000:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_freeman_slot7") > 0 ? GetCVar("samsara_freeman_slot7") - 1 : GetUserCVar(pln, "samsara_cl_freeman_slot7"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutSlot7"); }
                break;
            }
            break;

          case 1: // Adrian Shephard
            switch (slot)
            {
              default:
                break;

              case SLOT_FIST:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_shephard_fallbackmelee") > 0 ? GetCVar("samsara_shephard_fallbackmelee") - 1 : GetUserCVar(pln, "samsara_cl_shephard_fallbackmelee"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutFallbackMelee"); }
                break;

              case SLOT_CHAINSAW:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_shephard_slot1") > 0 ? GetCVar("samsara_shephard_slot1") - 1 : GetUserCVar(pln, "samsara_cl_shephard_slot1"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutSlot1"); }
                break;

              case SLOT_SUPERSHOTGUN:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_shephard_slot3") > 0 ? GetCVar("samsara_shephard_slot3") - 1 : GetUserCVar(pln, "samsara_cl_shephard_slot3"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutSlot3"); }
                break;

              case SLOT_ROCKETLAUNCHER:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_shephard_slot5") > 0 ? GetCVar("samsara_shephard_slot5") - 1 : GetUserCVar(pln, "samsara_cl_shephard_slot5"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutSlot5"); }
                break;

              case SLOT_PLASMARIFLE:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_shephard_slot6") > 0 ? GetCVar("samsara_shephard_slot6") - 1 : GetUserCVar(pln, "samsara_cl_shephard_slot6"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutSlot6"); }
                break;

              case SLOT_BFG9000:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_shephard_slot7") > 0 ? GetCVar("samsara_shephard_slot7") - 1 : GetUserCVar(pln, "samsara_cl_shephard_slot7"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutSlot7"); }
                break;
            }
            break;
        }
        break;

      case CLASS_BOND:
        switch (slot)
        {
          default:
            break;

          case SLOT_PISTOL:
            if (startmode != 0) { loadoutchoice = GetCVar("samsara_bond_fallbackranged") > 0 ? GetCVar("samsara_bond_fallbackranged") - 1 : GetUserCVar(pln, "samsara_cl_bond_fallbackranged"); }
            else { loadoutchoice = CheckInventory("SamsaraGoldenEyeLoadoutFallbackRanged"); }
            break;

          case SLOT_SUPERSHOTGUN:
            if (startmode != 0) { loadoutchoice = GetCVar("samsara_bond_slot3") > 0 ? GetCVar("samsara_bond_slot3") - 1 : GetUserCVar(pln, "samsara_cl_bond_slot3"); }
            else { loadoutchoice = CheckInventory("SamsaraGoldenEyeLoadoutSlot3"); }
            break;

          case SLOT_RAILGUN:
            if (startmode != 0) { loadoutchoice = GetCVar("samsara_bond_slot6s") > 0 ? GetCVar("samsara_bond_slot6s") - 1 : GetUserCVar(pln, "samsara_cl_bond_slot6s"); }
            else { loadoutchoice = CheckInventory("SamsaraGoldenEyeLoadoutSlot6S"); }
            break;
        }
        break;
    }

    bool completeloadout = startmode != 0 ? GetCVar("samsara_allloadoutequipment") : CheckInventory("SamsaraHasAllLoadoutEquipment");

    // Extra weapons setting
    bool usingextraweapons = startmode != 0 ? GetCVar("samsara_extraweapons") : CheckInventory("SamsaraExtraWeaponsAreEnabled");

    // Weapon stay setting
    bool weaponstay = slot == SLOT_BFG9000 || slot == SLOT_BFG10K ? GetCVar("samsara_permault") : GetCVar("sv_weaponstay");

    // Last pickup map coordinates initialization
    bool setcoords = false; // might rename this to setdualcoords
    int maxDistance = 80;
    int invokerX = GetActorX(0) >> 16;
    int invokerY = GetActorY(0) >> 16;
    int invokerZ = GetActorZ(0) >> 16;
    int inventoryX, inventoryY, inventoryZ;

    // Last pickup timer initialization
    bool settimer = false; // might rename this to setdualtimer
    bool setammotimer = false;

    // Inventory check
    bool hasweapon = false;
    bool hasdualtoken = false;

    // Ammo halver for equipment dropped by dead monsters (only necessary for ammo types not used in the array)
    int tossedammo = dropped >= 2 ? 2 : 1;

    // Hack for tossed pickups multiplying ammo capacity by 4 for checking (see SamsaraGiveWeapon in SamsaraPickup.acs) (not necessary for ammo types not used in the array)
    int tosseddiv = dropped >= 2 && !GetCVar("samsara_noammocap") ? 4 : 1;

    // Extra ammo on first pickup in Doom deathmatch (amount * 5 / 2)
    bool dmextraammo = !isSinglePlayer() && !isCoop() && (currentiwad == GAME_DOOM || currentiwad == GAME_CHEX) && !GetCVar("sv_noextraammo");

    // Dual wield pickup mode checks
    int dualpickupmode = GetCVar("samsara_dualpickup");
    bool duallimiting = startmode == 0 && (dualpickupmode <= 0 || (dualpickupmode >= 4 && (isSinglePlayer() || isCoop()) && !isInvasion() && dropped <= 0 && weaponstay));
    bool duallimited = false;
    bool dualgiveboth = startmode <= -1 || dualpickupmode == 3 || (dualpickupmode >= 4 && (!(isSinglePlayer() || isCoop()) || isInvasion()));
    bool dualreqcheck = true;

    // Default durations to wait until next pickup (weaponstay only)
    int pickuptimer = 35 * 60;
    int dualpickuptimer = 35 * 30;
    int ammopickuptimer = 35 * 30;

    // Start everything
    switch (classnum)
    {
      default:
        result = -1;
        break;

      case CLASS_DOOM:
        switch (altclasschoice)
        {
          default:
            result = -1;
            break;

          case 0: // Original
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_PISTOL:
                hasweapon = CheckInventory(" Pistol ") || CheckInventory(" Rifle ");

                if (loadoutchoice <= 0 || completeloadout) // Pistol
                {
                    if (!hasweapon)
                    {
                        GiveInventory(" Pistol ", 1);
                        result = 1;
                    }
                }

                if (loadoutchoice >= 1 || completeloadout) // Rifle
                {
                    if (!hasweapon)
                    {
                        GiveInventory(" Rifle ", 1);
                        result = 1;
                    }
                }
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Super Shotgun"))
                {
                    GiveInventory("Super Shotgun", 1);
                    GiveInventory("Shell", dmextraammo ? 8 / tossedammo * 5 / 2 : 8 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 8 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }

                if (startmode != 0) { result = 1; } // allow giving tokens specific to altclass switching at all times in LMS or equipment start

                if (result == 1) { GiveInventory("DGStrHasAutoShotgun", 1); }
                break;

              case SLOT_CHAINGUN:
                hasweapon = CheckInventory(" Chaingun ") || CheckInventory(" Machine Gun ");

                if (loadoutchoice <= 0 || completeloadout) // Chaingun
                {
                    if (!hasweapon)
                    {
                        GiveInventory(" Chaingun ", 1);
                        GiveInventory("Clip", dmextraammo ? 20 / tossedammo * 5 / 2 : 20 / tossedammo);
                        result = 1;
                    } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                        GiveInventory("Clip", 20 / tossedammo);
                        result = 1;
                    }

                    if (startmode <= -1 || startmode >= 2) { GiveInventory("Clip", GetAmmoCapacity("Clip")); }
                }

                if (loadoutchoice >= 1 || completeloadout) // Machine Gun
                {
                    if (!hasweapon)
                    {
                        GiveInventory(" Machine Gun ", 1);
                        GiveInventory("Clip", dmextraammo ? 20 / tossedammo * 5 / 2 : 20 / tossedammo);
                        result = 1;
                    } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                        GiveInventory("Clip", 20 / tossedammo);
                        result = 1;
                    }

                    if (startmode <= -1 || startmode >= 2) { GiveInventory("Clip", GetAmmoCapacity("Clip")); }
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGHasChaingun", 1);
                    GiveInventory("DGStrHasFlamethrower", 1);
                }
                break;

              case SLOT_ROCKETLAUNCHER:
                if (!CheckInventory("Rocket Launcher"))
                {
                    GiveInventory("Rocket Launcher", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 2 * 5 / 2 : 2);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 2);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGHasRocketLauncher", 1);
                    GiveInventory("DGStrHasLandMines", 1);
                }
                break;

              case SLOT_PLASMARIFLE:
                hasweapon = CheckInventory("Plasma Rifle") || CheckInventory(" Incinerator ");

                if (loadoutchoice <= 0 || completeloadout) // Plasma Rifle
                {
                    if (!hasweapon)
                    {
                        GiveInventory("Plasma Rifle", 1);
                        GiveInventory("Cell", dmextraammo ? 40 / tossedammo * 5 / 2 : 40 / tossedammo);
                        result = 1;
                    } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                        GiveInventory("Cell", 40 / tossedammo);
                        result = 1;
                    }

                    if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
                }

                if (loadoutchoice >= 1 || completeloadout) // Incinerator
                {
                    if (!hasweapon)
                    {
                        GiveInventory(" Incinerator ", 1);
                        GiveInventory("Cell", dmextraammo ? 80 / tossedammo * 5 / 2 : 80 / tossedammo); // 20 fuel = 40 cells, doubled to bring it more in line with plasma. adjust if needed
                        result = 1;
                    } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                        GiveInventory("Cell", 80 / tossedammo);
                        result = 1;
                    }

                    if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGHasPlasmaRifle", 1);
                    GiveInventory("DGStrHasStunnerRifle", 1);
                }
                break;

              case SLOT_BFG9000:
                hasweapon = CheckInventory("B.F.G. 9000") || CheckInventory("B.F.G. 2704") || CheckInventory("Calamity Blade");

                if (loadoutchoice <= 0 || completeloadout) // B.F.G. 9000
                {
                    if (!hasweapon)
                    {
                        GiveInventory("B.F.G. 9000", 1);
                        GiveInventory("Cell", dmextraammo ? 40 / tossedammo * 5 / 2 : 40 / tossedammo);
                        result = 1;
                    } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                        GiveInventory("Cell", 40 / tossedammo);
                        result = 1;
                    }

                    if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
                }

                if (loadoutchoice == 1 || completeloadout) // B.F.G. 2704
                {
                    if (!hasweapon)
                    {
                        GiveInventory("B.F.G. 2704", 1);
                        GiveInventory("Cell", dmextraammo ? 40 / tossedammo * 5 / 2 : 40 / tossedammo);
                        result = 1;
                    } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                        GiveInventory("Cell", 40 / tossedammo);
                        result = 1;
                    }

                    if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
                }

                if (loadoutchoice >= 2 || completeloadout) // Calamity Blade
                {
                    if (!hasweapon)
                    {
                        GiveInventory("Calamity Blade", 1);
                        GiveInventory("Cell", dmextraammo ? 80 / tossedammo * 5 / 2 : 80 / tossedammo); // 20 fuel = 40 cells, doubled to bring it more in line with bfg. adjust if needed
                        result = 1;
                    } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                        GiveInventory("Cell", 80 / tossedammo);
                        result = 1;
                    }

                    if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGHasBFG9000", 1);
                    GiveInventory("Doom64_IHaveUnmaker", 1);
                    GiveInventory("DGStrHasPyroCannon", 1);
                }
                break;

              case SLOT_MINIGUN:
                if (!CheckInventory(" Minigun "))
                {
                    GiveInventory(" Minigun ", 1);
                    GiveInventory("Clip", dmextraammo ? 20 * 5 / 2 : 20);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 20);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGHasMinigun", 1); }
                break;

              case SLOT_GRENADELAUNCHER:
                if (!CheckInventory(" GrenadeLauncher "))
                {
                    GiveInventory(" GrenadeLauncher ", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 2 * 5 / 2 : 2);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 2);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGHasGrenadeLauncher", 1); }
                break;

              case SLOT_RAILGUN:
                if (!CheckInventory(" RailGun "))
                {
                    GiveInventory(" RailGun ", 1);
                    GiveInventory("Cell", dmextraammo ? 40 * 5 / 2 : 40);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGHasRailGun", 1); }
                break;

              case SLOT_BFG10K:
                if (!CheckInventory(" BFG10K "))
                {
                    GiveInventory(" BFG10K ", 1);
                    GiveInventory("Cell", dmextraammo ? 40 * 5 / 2 : 40);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGHasBFG10K", 1); }
                break;
            }
            break;

          case 1: // Doom 64
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Super Shotgun"))
                {
                    GiveInventory("Super Shotgun", 1);
                    GiveInventory("Shell", dmextraammo ? 8 / tossedammo * 5 / 2 : 8 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 8 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGStrHasAutoShotgun", 1); }
                break;

              case SLOT_CHAINGUN:
                if (!CheckInventory(" Chaingun "))
                {
                    GiveInventory(" Chaingun ", 1);
                    GiveInventory("Clip", dmextraammo ? 20 / tossedammo * 5 / 2 : 20 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 20 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Clip", GetAmmoCapacity("Clip")); }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGHasChaingun", 1);
                    GiveInventory("DGStrHasFlamethrower", 1);
                }
                break;

              case SLOT_ROCKETLAUNCHER:
                if (!CheckInventory("Rocket Launcher"))
                {
                    GiveInventory("Rocket Launcher", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 2 * 5 / 2 : 2);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 2);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGHasRocketLauncher", 1);
                    GiveInventory("DGStrHasLandMines", 1);
                }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory("Plasma Rifle"))
                {
                    GiveInventory("Plasma Rifle", 1);
                    GiveInventory("Cell", dmextraammo ? 40 / tossedammo * 5 / 2 : 40 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGHasPlasmaRifle", 1);
                    GiveInventory("DGStrHasStunnerRifle", 1);
                }
                break;

              case SLOT_BFG9000:
                if (!CheckInventory("B.F.G. 9000"))
                {
                    GiveInventory("B.F.G. 9000", 1);
                    GiveInventory("Cell", dmextraammo ? 40 / tossedammo * 5 / 2 : 40 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }

                if (!CheckInventory(" Unmaker "))
                {
                    GiveInventory(" Unmaker ", 1);
                    GiveInventory("Cell", dmextraammo ? 40 / tossedammo * 5 / 2 : 40 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGHasBFG9000", 1);
                    GiveInventory("Doom64_IHaveUnmaker", 1);
                    GiveInventory("DGStrHasPyroCannon", 1);

                    if (startmode == 0)
                    {
                        SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 1);
                        SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                        SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                    }
                }
                break;

              case SLOT_MINIGUN:
                if (!CheckInventory(" Minigun "))
                {
                    GiveInventory(" Minigun ", 1);
                    GiveInventory("Clip", dmextraammo ? 20 * 5 / 2 : 20);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 20);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGHasMinigun", 1); }
                break;

              case SLOT_GRENADELAUNCHER:
                if (!CheckInventory(" GrenadeLauncher "))
                {
                    GiveInventory(" GrenadeLauncher ", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 2 * 5 / 2 : 2);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 2);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGHasGrenadeLauncher", 1); }
                break;

              case SLOT_RAILGUN:
                if (!CheckInventory(" RailGun "))
                {
                    GiveInventory(" RailGun ", 1);
                    GiveInventory("Cell", dmextraammo ? 40 * 5 / 2 : 40);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGHasRailGun", 1); }
                break;

              case SLOT_BFG10K:
                if (!CheckInventory(" BFG10K "))
                {
                    GiveInventory(" BFG10K ", 1);
                    GiveInventory("Cell", dmextraammo ? 40 * 5 / 2 : 40);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGHasBFG10K", 1); }
                break;
            }
            break;

          case 2: // Stronghold
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Super Shotgun"))
                {
                    GiveInventory("Super Shotgun", 1);
                    GiveInventory("Shell", dmextraammo ? 8 / tossedammo * 5 / 2 : 8 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 8 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }

                if (usingextraweapons)
                {
                    if (!CheckInventory("Automatic Shotgun"))
                    {
                        GiveInventory("Automatic Shotgun", 1);
                        GiveInventory("Shell", dmextraammo ? 20 / tossedammo * 5 / 2 : 20 / tossedammo);
                        result = 1;
                    } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                        GiveInventory("Shell", 20 / tossedammo);
                        result = 1;
                    }

                    if (startmode <= -1 || startmode >= 2) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGStrHasAutoShotgun", 1);

                    if (startmode == 0 && usingextraweapons)
                    {
                        SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 5);
                        SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                        SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                    }
                }
                break;

              case SLOT_CHAINGUN:
                if (!CheckInventory(" Chaingun "))
                {
                    GiveInventory(" Chaingun ", 1);
                    GiveInventory("Clip", dmextraammo ? 20 / tossedammo * 5 / 2 : 20 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 20 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Clip", GetAmmoCapacity("Clip")); }

                if (usingextraweapons)
                {
                    if (!CheckInventory(" Flamer "))
                    {
                        GiveInventory(" Flamer ", 1);
                        GiveInventory("DoomguyStrGas", dmextraammo ? 48 / tossedammo * 5 / 2 : 48 / tossedammo);
                        result = 1;
                    } else if (CheckInventory("DoomguyStrGas") < GetAmmoCapacity("DoomguyStrGas") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                        GiveInventory("DoomguyStrGas", 48 / tossedammo);
                        result = 1;
                    }

                    if (startmode <= -1 || startmode >= 2) { GiveInventory("DoomguyStrGas", GetAmmoCapacity("DoomguyStrGas")); }
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGHasChaingun", 1);
                    GiveInventory("DGStrHasFlamethrower", 1);

                    if (startmode == 0 && usingextraweapons)
                    {
                        SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 6);
                        SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                        SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                    }
                }
                break;

              case SLOT_ROCKETLAUNCHER:
                if (!CheckInventory("Rocket Launcher"))
                {
                    GiveInventory("Rocket Launcher", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 2 * 5 / 2 : 2);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 2);
                    result = 1;
                }

                if (usingextraweapons)
                {
                    if (!CheckInventory("Land Mine Layer"))
                    {
                        GiveInventory("Land Mine Layer", 1);
                        GiveInventory("DoomguyStrMines", dmextraammo ? 5 / tossedammo * 5 / 2 : 5 / tossedammo);
                        result = 1;
                    } else if (CheckInventory("DoomguyStrMines") < GetAmmoCapacity("DoomguyStrMines") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                        GiveInventory("DoomguyStrMines", 5 / tossedammo);
                        result = 1;
                    }

                    if (startmode <= -1 || startmode >= 2) { GiveInventory("DoomguyStrMines", GetAmmoCapacity("DoomguyStrMines")); }
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGHasRocketLauncher", 1);
                    GiveInventory("DGStrHasLandMines", 1);

                    if (startmode == 0 && usingextraweapons)
                    {
                        SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 7);
                        SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                        SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                    }
                }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory("Plasma Rifle"))
                {
                    GiveInventory("Plasma Rifle", 1);
                    GiveInventory("Cell", dmextraammo ? 40 / tossedammo * 5 / 2 : 40 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }

                if (usingextraweapons)
                {
                    if (!CheckInventory("Stunner Rifle"))
                    {
                        GiveInventory("Stunner Rifle", 1);
                        GiveInventory("Cell", dmextraammo ? 40 / tossedammo * 5 / 2 : 40 / tossedammo);
                        result = 1;
                    } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                        GiveInventory("Cell", 40 / tossedammo);
                        result = 1;
                    }

                    if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGHasPlasmaRifle", 1);
                    GiveInventory("DGStrHasStunnerRifle", 1);

                    if (startmode == 0 && usingextraweapons)
                    {
                        SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 8);
                        SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                        SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                    }
                }
                break;

              case SLOT_BFG9000:
                if (!CheckInventory("B.F.G. 9000"))
                {
                    GiveInventory("B.F.G. 9000", 1);
                    GiveInventory("Cell", dmextraammo ? 40 / tossedammo * 5 / 2 : 40 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }

                if (usingextraweapons)
                {
                    if (!CheckInventory("Pyro Cannon"))
                    {
                        GiveInventory("Pyro Cannon", 1);
                        GiveInventory("DoomguyStrGas", dmextraammo ? 48 / tossedammo * 5 / 2 : 48 / tossedammo);
                        result = 1;
                    } else if (CheckInventory("DoomguyStrGas") < GetAmmoCapacity("DoomguyStrGas") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                        GiveInventory("DoomguyStrGas", 48 / tossedammo);
                        result = 1;
                    }

                    if (startmode <= -1 || startmode >= 2) { GiveInventory("DoomguyStrGas", GetAmmoCapacity("DoomguyStrGas")); }
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGHasBFG9000", 1);
                    GiveInventory("Doom64_IHaveUnmaker", 1);
                    GiveInventory("DGStrHasPyroCannon", 1);

                    if (startmode == 0 && usingextraweapons)
                    {
                        SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 9);
                        SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                        SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                    }
                }
                break;

              case SLOT_MINIGUN:
                if (!CheckInventory(" Minigun "))
                {
                    GiveInventory(" Minigun ", 1);
                    GiveInventory("Clip", dmextraammo ? 20 * 5 / 2 : 20);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 20);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGHasMinigun", 1); }
                break;

              case SLOT_GRENADELAUNCHER:
                if (!CheckInventory(" GrenadeLauncher "))
                {
                    GiveInventory(" GrenadeLauncher ", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 2 * 5 / 2 : 2);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 2);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGHasGrenadeLauncher", 1); }
                break;

              case SLOT_RAILGUN:
                if (!CheckInventory(" RailGun "))
                {
                    GiveInventory(" RailGun ", 1);
                    GiveInventory("Cell", dmextraammo ? 40 * 5 / 2 : 40);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGHasRailGun", 1); }
                break;

              case SLOT_BFG10K:
                if (!CheckInventory(" BFG10K "))
                {
                    GiveInventory(" BFG10K ", 1);
                    GiveInventory("Cell", dmextraammo ? 60 * 5 / 2 : 60);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 60);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("DGHasBFG10K", 1); }
                break;
            }
            break;
        }
        break;

      case CLASS_CHEX:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_PISTOL:
            hasweapon = CheckInventory("Mini-Zorcher") || CheckInventory("Micro-Zorcher");

            if (loadoutchoice <= 0 || completeloadout) // Mini-Zorcher
            {
                if (!hasweapon)
                {
                    GiveInventory("Mini-Zorcher", 1);
                    result = 1;
                }
            }

            if (loadoutchoice >= 1 || completeloadout) // Micro-Zorcher
            {
                if (!hasweapon)
                {
                    GiveInventory("Micro-Zorcher", 1);
                    result = 1;
                }
            }
            break;
        }
        break;

      case CLASS_WOLFEN:
        switch (altclasschoice)
        {
          default:
            result = -1;
            break;

          case 0: // Original
          case 1: // Lost Missions
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_FIST:
                if (!CheckInventory("Knife"))
                {
                    GiveInventory("Knife", 1);
                    result = 1;
                }
                break;

              case SLOT_CHAINSAW:
                if (!CheckInventory("BJSuperKnife"))
                {
                    GiveInventory("BJSuperKnife", 1);

                    if (!CheckInventory("Totenkopf_IHaveDualMausers") && dualgiveboth) { GiveInventory("Totenkopf_IHaveDualMausers", 1); }

                    if (duallimiting) { GiveInventory("Totenkopf_MauserLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot1", 1); }

                if (setcoords)
                {
                    SetInventory("Totenkopf_MauserPickedUpX", invokerX + 65536);
                    SetInventory("Totenkopf_MauserPickedUpY", invokerY + 65536);
                    SetInventory("Totenkopf_MauserPickedUpZ", invokerZ + 65536);
                }

                if (settimer) { SetInventory("Totenkopf_MauserLastPickupTime", Timer() + dualpickuptimer); }
                break;

              case SLOT_PISTOL:
                if (!CheckInventory("Luger"))
                {
                    GiveInventory("Luger", 1);
                    result = 1;
                }
                break;

              case SLOT_SHOTGUN:
                if (!CheckInventory("Machine Gun"))
                {
                    GiveInventory("Machine Gun", 1);
                    GiveInventory("Clip", dmextraammo ? 20 / tossedammo * 5 / 2 : 20 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 20 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Clip", GetAmmoCapacity("Clip")); }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot2", 1); }
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Mauser Rifle"))
                {
                    GiveInventory("Mauser Rifle", 1);
                    GiveInventory("Clip", dmextraammo ? 20 / tossedammo * 5 / 2 : 20 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 20 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Clip", GetAmmoCapacity("Clip")); }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot3", 1); }
                break;

              case SLOT_CHAINGUN:
                duallimited = duallimiting && CheckInventory("Totenkopf_MP40LevelLimiter");

                if (!CheckInventory("  Chaingun  "))
                {
                    GiveInventory("  Chaingun  ", 1);
                    GiveInventory("Clip", dmextraammo ? 20 * 5 / 2 : 20);

                    if (!CheckInventory("Wolfen_IHaveDualChainguns")) // we don't have totenkopf's single MP40 stored
                    {
                        if (!CheckInventory("Totenkopf_IHaveDualMP40s") && dualgiveboth) { GiveInventory("Totenkopf_IHaveDualMP40s", 1); }

                        if (duallimiting) { GiveInventory("Totenkopf_MP40LevelLimiter", 1); }

                        if (dropped <= 0 && startmode == 0 && weaponstay)
                        {
                            setcoords = true;
                            settimer = true;
                        }
                    } else if (!CheckInventory("Totenkopf_IHaveDualMP40s") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) { // we have totenkopf's single MP40 stored; exploit preventing measure
                        if (dualpickupmode == 1)
                        {
                            inventoryX = CheckInventory("Totenkopf_MP40PickedUpX") - 65536;
                            inventoryY = CheckInventory("Totenkopf_MP40PickedUpY") - 65536;
                            inventoryZ = CheckInventory("Totenkopf_MP40PickedUpZ") - 65536;

                            dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                        }
                        else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Totenkopf_MP40LastPickupTime"); }

                        if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                        {
                            GiveInventory("Totenkopf_IHaveDualMP40s", 1);

                            if (duallimiting) { GiveInventory("Totenkopf_MP40LevelLimiter", 1); }

                            if (dropped <= 0 && startmode == 0 && weaponstay)
                            {
                                setcoords = true;
                                settimer = true;
                            }
                        }
                    }

                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 20);

                    if (!CheckInventory("Totenkopf_IHaveDualMP40s") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1)))
                    {
                        GiveInventory("Totenkopf_IHaveDualMP40s", 1);

                        if (duallimiting) { GiveInventory("Totenkopf_MP40LevelLimiter", 1); }

                        if (dropped <= 0 && startmode == 0 && weaponstay)
                        {
                            setcoords = true;
                            settimer = true;
                        }
                    }

                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot4", 1); }

                if (setcoords)
                {
                    SetInventory("Totenkopf_MP40PickedUpX", invokerX + 65536);
                    SetInventory("Totenkopf_MP40PickedUpY", invokerY + 65536);
                    SetInventory("Totenkopf_MP40PickedUpZ", invokerZ + 65536);
                }

                if (settimer) { SetInventory("Totenkopf_MP40LastPickupTime", Timer() + dualpickuptimer); }
                break;

              case SLOT_ROCKETLAUNCHER:
                if (!CheckInventory(" Rocket Launcher "))
                {
                    GiveInventory(" Rocket Launcher ", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 2 * 5 / 2 : 2);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 2);
                    result = 1;
                }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot5", 1); }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory(" Flamethrower "))
                {
                    GiveInventory(" Flamethrower ", 1);
                    GiveInventory("Cell", dmextraammo ? 40 * 5 / 2 : 40);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40);
                    result = 1;
                }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot6", 1); }
                break;

              case SLOT_BFG9000:
                if (!CheckInventory("Spear of Destiny"))
                {
                    GiveInventory("Spear of Destiny", 1);
                    GiveInventory("Cell", dmextraammo ? 120 * 5 / 2 : 120);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 120);
                    result = 1;
                }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot7", 1); }
                break;

              case SLOT_MINIGUN:
                duallimited = duallimiting && CheckInventory("Totenkopf_MP40LevelLimiter");

                if (!CheckInventory("  Dual Chainguns  "))
                {
                    GiveInventory("  Dual Chainguns  ", 1);
                    GiveInventory("Clip", dmextraammo ? 40 * 5 / 2 : 40);

                    if (!CheckInventory("Wolfen_IHaveSlot4")) // we don't have totenkopf's single MP40 stored
                    {
                        if (!CheckInventory("Totenkopf_IHaveDualMP40s") && dualgiveboth) { GiveInventory("Totenkopf_IHaveDualMP40s", 1); }

                        if (duallimiting) { GiveInventory("Totenkopf_MP40LevelLimiter", 1); }

                        if (dropped <= 0 && startmode == 0 && weaponstay)
                        {
                            setcoords = true;
                            settimer = true;
                        }
                    } else if (!CheckInventory("Totenkopf_IHaveDualMP40s") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) { // we have totenkopf's single MP40 stored; exploit preventing measure
                        if (dualpickupmode == 1)
                        {
                            inventoryX = CheckInventory("Totenkopf_MP40PickedUpX") - 65536;
                            inventoryY = CheckInventory("Totenkopf_MP40PickedUpY") - 65536;
                            inventoryZ = CheckInventory("Totenkopf_MP40PickedUpZ") - 65536;

                            dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                        }
                        else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Totenkopf_MP40LastPickupTime"); }

                        if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                        {
                            GiveInventory("Totenkopf_IHaveDualMP40s", 1);

                            if (duallimiting) { GiveInventory("Totenkopf_MP40LevelLimiter", 1); }

                            if (dropped <= 0 && startmode == 0 && weaponstay)
                            {
                                setcoords = true;
                                settimer = true;
                            }
                        }
                    }

                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 40);

                    if (!CheckInventory("Totenkopf_IHaveDualMP40s") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1)))
                    {
                        GiveInventory("Totenkopf_IHaveDualMP40s", 1);

                        if (duallimiting) { GiveInventory("Totenkopf_MP40LevelLimiter", 1); }

                        if (dropped <= 0 && startmode == 0 && weaponstay)
                        {
                            setcoords = true;
                            settimer = true;
                        }
                    }

                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("Wolfen_IHaveDualChainguns", 1); }

                if (setcoords)
                {
                    SetInventory("Totenkopf_MP40PickedUpX", invokerX + 65536);
                    SetInventory("Totenkopf_MP40PickedUpY", invokerY + 65536);
                    SetInventory("Totenkopf_MP40PickedUpZ", invokerZ + 65536);
                }

                if (settimer) { SetInventory("Totenkopf_MP40LastPickupTime", Timer() + dualpickuptimer); }
                break;
            }
            break;

          case 2: // Castle Totenkopf SDL
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_FIST:
                if (!CheckInventory("Totenkopf_Knife"))
                {
                    GiveInventory("Totenkopf_Knife", 1);
                    result = 1;
                }
                break;

              case SLOT_CHAINSAW:
                duallimited = duallimiting && CheckInventory("Totenkopf_MauserLevelLimiter");

                if (!CheckInventory("Totenkopf_Mauser"))
                {
                    GiveInventory("Totenkopf_Mauser", 1);
                    GiveInventory("Clip", dmextraammo ? 5 / tossedammo * 5 / 2 : 5 / tossedammo);

                    if (!CheckInventory("Totenkopf_IHaveDualMausers") && dualgiveboth)
                    {
                        GiveInventory("Totenkopf_MauserDual", 1);
                        GiveInventory("Totenkopf_IHaveDualMausers", 1);
                        GiveInventory("Clip", 5 / tossedammo);
                    }

                    if (duallimiting) { GiveInventory("Totenkopf_MauserLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                } else if (!CheckInventory("Totenkopf_IHaveDualMausers") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                    if (dualpickupmode == 1)
                    {
                        inventoryX = CheckInventory("Totenkopf_MauserPickedUpX") - 65536;
                        inventoryY = CheckInventory("Totenkopf_MauserPickedUpY") - 65536;
                        inventoryZ = CheckInventory("Totenkopf_MauserPickedUpZ") - 65536;

                        dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                    }
                    else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Totenkopf_MauserLastPickupTime"); }

                    if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                    {
                        GiveInventory("Totenkopf_MauserDual", 1);
                        GiveInventory("Totenkopf_IHaveDualMausers", 1);
                        GiveInventory("Clip", 5 / tossedammo);

                        if (duallimiting) { GiveInventory("Totenkopf_MauserLevelLimiter", 1); }

                        if (dropped <= 0 && startmode == 0 && weaponstay)
                        {
                            setcoords = true;
                            settimer = true;
                        }

                        result = 1;
                    }
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 5 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Clip", GetAmmoCapacity("Clip")); }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot1", 1); }

                if (setcoords)
                {
                    SetInventory("Totenkopf_MauserPickedUpX", invokerX + 65536);
                    SetInventory("Totenkopf_MauserPickedUpY", invokerY + 65536);
                    SetInventory("Totenkopf_MauserPickedUpZ", invokerZ + 65536);
                }

                if (settimer) { SetInventory("Totenkopf_MauserLastPickupTime", Timer() + dualpickuptimer); }
                break;

              case SLOT_PISTOL:
                if (!CheckInventory("Totenkopf_Pistol"))
                {
                    GiveInventory("Totenkopf_Pistol", 1);
                    result = 1;
                }
                break;

              case SLOT_SHOTGUN:
                if (!CheckInventory("Totenkopf_Kar98k"))
                {
                    GiveInventory("Totenkopf_Kar98k", 1);
                    GiveInventory("Shell", dmextraammo ? 5 / tossedammo * 5 / 2 : 5 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 5 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot2", 1); }
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Totenkopf_STG44"))
                {
                    GiveInventory("Totenkopf_STG44", 1);
                    GiveInventory("Shell", dmextraammo ? 30 / tossedammo * 5 / 2 : 30 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 30 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot3", 1); }
                break;

              case SLOT_CHAINGUN:
              case SLOT_MINIGUN:
                duallimited = duallimiting && CheckInventory("Totenkopf_MP40LevelLimiter");

                if (!CheckInventory("Totenkopf_MP40"))
                {
                    GiveInventory("Totenkopf_MP40", 1);
                    GiveInventory("Clip", dmextraammo ? 20 * 5 / 2 : 20);

                    if (!CheckInventory("Totenkopf_IHaveDualMP40s") && dualgiveboth)
                    {
                        GiveInventory("Totenkopf_MP40Dual", 1);
                        GiveInventory("Totenkopf_IHaveDualMP40s", 1);
                        GiveInventory("Clip", 20);
                    }

                    if (duallimiting) { GiveInventory("Totenkopf_MP40LevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                } else if (!CheckInventory("Totenkopf_IHaveDualMP40s") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                    if (dualpickupmode == 1)
                    {
                        inventoryX = CheckInventory("Totenkopf_MP40PickedUpX") - 65536;
                        inventoryY = CheckInventory("Totenkopf_MP40PickedUpY") - 65536;
                        inventoryZ = CheckInventory("Totenkopf_MP40PickedUpZ") - 65536;

                        dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                    }
                    else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Totenkopf_MP40LastPickupTime"); }

                    if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                    {
                        GiveInventory("Totenkopf_MP40Dual", 1);
                        GiveInventory("Totenkopf_IHaveDualMP40s", 1);
                        GiveInventory("Clip", 20);

                        if (duallimiting) { GiveInventory("Totenkopf_MP40LevelLimiter", 1); }

                        if (dropped <= 0 && startmode == 0 && weaponstay)
                        {
                            setcoords = true;
                            settimer = true;
                        }

                        result = 1;
                    }
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 20);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    switch (slot)
                    {
                      case SLOT_CHAINGUN:
                        GiveInventory("Wolfen_IHaveSlot4", 1);
                        break;

                      case SLOT_MINIGUN:
                        GiveInventory("Wolfen_IHaveDualChainguns", 1);
                        GiveInventory("GotWeapon4", 1);
                        break;
                    }
                }

                if (setcoords)
                {
                    SetInventory("Totenkopf_MP40PickedUpX", invokerX + 65536);
                    SetInventory("Totenkopf_MP40PickedUpY", invokerY + 65536);
                    SetInventory("Totenkopf_MP40PickedUpZ", invokerZ + 65536);
                }

                if (settimer) { SetInventory("Totenkopf_MP40LastPickupTime", Timer() + dualpickuptimer); }
                break;

              case SLOT_ROCKETLAUNCHER:
                if (!CheckInventory("Totenkopf_Panzerschreck"))
                {
                    GiveInventory("Totenkopf_Panzerschreck", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 2 * 5 / 2 : 2);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 2);
                    result = 1;
                }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot5", 1); }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory("Totenkopf_Chaingun"))
                {
                    GiveInventory("Totenkopf_Chaingun", 1);
                    GiveInventory("Cell", dmextraammo ? 40 * 5 / 2 : 40);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40);
                    result = 1;
                }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot6", 1); }
                break;

              case SLOT_BFG9000:
                if (!CheckInventory("Totenkopf_Flakgun"))
                {
                    GiveInventory("Totenkopf_Flakgun", 1);
                    GiveInventory("Cell", dmextraammo ? 120 * 5 / 2 : 120);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 120);
                    result = 1;
                }

                if (result == 1) { GiveInventory("Wolfen_IHaveSlot7", 1); }
                break;
            }
            break;
        }
        break;

      case CLASS_HEXEN:
        switch (altclasschoice)
        {
          default:
            result = -1;
            break;

          case 0: // Parias (Reincarnation)
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_FIST:
                if (!CheckInventory("Mace of Contrition"))
                {
                    GiveInventory("Mace of Contrition", 1);
                    result = 1;
                }
                break;

              case SLOT_CHAINSAW:
                if (!CheckInventory("PortFlechette"))
                {
                    GiveInventory("PortFlechette", 1);
                    result = 1;
                }
                break;

              case SLOT_PISTOL:
                if (!CheckInventory("Jade Wand"))
                {
                    GiveInventory("Jade Wand", 1);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { SetInventory("SamsaraHexenHasLMSPistolDisabled", 0); }
                break;

              case SLOT_SHOTGUN:
                if (!CheckInventory("Crusader's Longbow"))
                {
                    GiveInventory("Crusader's Longbow", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    result = 1;
                }
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Bishop's Shortsword"))
                {
                    GiveInventory("Bishop's Shortsword", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    result = 1;
                }
                break;

              case SLOT_CHAINGUN:
                if (!CheckInventory("Serpent Staff"))
                {
                    GiveInventory("Serpent Staff", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    result = 1;
                }
                break;

              case SLOT_ROCKETLAUNCHER:
                if (!CheckInventory("Ice Fang"))
                {
                    GiveInventory("Ice Fang", 1);
                    GiveInventory("Cell", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 25);
                    result = 1;
                }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory("Firestorm"))
                {
                    GiveInventory("Firestorm", 1);
                    GiveInventory("Cell", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 25);
                    result = 1;
                }
                break;

              case SLOT_BFG9000:
              case SLOT_BFG10K:
                if (!CheckInventory("Wraithverge"))
                {
                    GiveInventory("Wraithverge", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    GiveInventory("Cell", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if ((CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv || CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv) && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    GiveInventory("Cell", 25);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    switch (slot)
                    {
                      case SLOT_BFG9000:
                        GiveInventory("SamsaraHexenHasSlot7", 1);
                        break;

                      case SLOT_BFG10K:
                        GiveInventory("SamsaraClassicPariasHasBloodscourge", 1);
                        GiveInventory("GotWeapon7", 1);
                        break;
                    }
                }
                break;
            }
            break;

          case 1: // Parias (Classic)
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_FIST:
                if (!CheckInventory("Mace of Contrition"))
                {
                    GiveInventory("Mace of Contrition", 1);
                    result = 1;
                }
                break;

              case SLOT_CHAINSAW:
                if (!CheckInventory("PortFlechette"))
                {
                    GiveInventory("PortFlechette", 1);
                    result = 1;
                }
                break;

              case SLOT_PISTOL:
                if (!CheckInventory("Sapphire Wand"))
                {
                    GiveInventory("Sapphire Wand", 1);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { SetInventory("SamsaraHexenHasLMSPistolDisabled", 0); }
                break;

              case SLOT_SHOTGUN:
                if (!CheckInventory("Frost Shards"))
                {
                    GiveInventory("Frost Shards", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    result = 1;
                }
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Timon's Axe"))
                {
                    GiveInventory("Timon's Axe", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    result = 1;
                }
                break;

              case SLOT_CHAINGUN:
                if (!CheckInventory("Serpent Staff"))
                {
                    GiveInventory("Serpent Staff", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    result = 1;
                }
                break;

              case SLOT_ROCKETLAUNCHER:
                if (!CheckInventory("Hammer of Retribution"))
                {
                    GiveInventory("Hammer of Retribution", 1);
                    GiveInventory("Cell", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 25);
                    result = 1;
                }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory("Firestorm"))
                {
                    GiveInventory("Firestorm", 1);
                    GiveInventory("Cell", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 25);
                    result = 1;
                }
                break;

              case SLOT_BFG9000:
                if (!CheckInventory("Wraithverge"))
                {
                    GiveInventory("Wraithverge", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    GiveInventory("Cell", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if ((CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv || CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv) && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    GiveInventory("Cell", 25);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("SamsaraHexenHasSlot7", 1); }
                break;

              case SLOT_BFG10K:
                if (!CheckInventory(" Bloodscourge "))
                {
                    GiveInventory(" Bloodscourge ", 1);
                    GiveInventory("Clip", dmextraammo ? 30 * 5 / 2 : 30);
                    GiveInventory("Cell", dmextraammo ? 30 * 5 / 2 : 30);
                    result = 1;
                } else if ((CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv || CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv) && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 30);
                    GiveInventory("Cell", 30);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("SamsaraClassicPariasHasBloodscourge", 1); }
                break;
            }
            break;

          case 2: // Daedolon
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_FIST: // no fallback melee, give a fallback ranged instead (also no fallthrough due to LMS start token handling)
                if (!CheckInventory("Sapphire Wand"))
                {
                    GiveInventory("Sapphire Wand", 1);
                    result = 1;
                }
                break;

              case SLOT_PISTOL:
                if (!CheckInventory("Sapphire Wand"))
                {
                    GiveInventory("Sapphire Wand", 1);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { SetInventory("SamsaraHexenHasLMSPistolDisabled", 0); }
                break;

              case SLOT_CHAINSAW:
                if (!CheckInventory("PortFlechette2"))
                {
                    GiveInventory("PortFlechette2", 1);
                    result = 1;
                }
                break;

              case SLOT_SHOTGUN:
                if (!CheckInventory("Frost Shards"))
                {
                    GiveInventory("Frost Shards", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    result = 1;
                }
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Fire Blast"))
                {
                    GiveInventory("Fire Blast", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    result = 1;
                }
                break;

              case SLOT_CHAINGUN:
                if (!CheckInventory("Blight Shock"))
                {
                    GiveInventory("Blight Shock", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    result = 1;
                }
                break;

              case SLOT_ROCKETLAUNCHER:
                if (!CheckInventory("Viscerelagh"))
                {
                    GiveInventory("Viscerelagh", 1);
                    GiveInventory("Cell", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 25);
                    result = 1;
                }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory("Arc of Death"))
                {
                    GiveInventory("Arc of Death", 1);
                    GiveInventory("Cell", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 25);
                    result = 1;
                }
                break;

              case SLOT_BFG9000:
              case SLOT_BFG10K:
                if (!CheckInventory("Bloodscourge"))
                {
                    GiveInventory("Bloodscourge", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    GiveInventory("Cell", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if ((CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv || CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv) && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    GiveInventory("Cell", 25);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    switch (slot)
                    {
                      case SLOT_BFG9000:
                        GiveInventory("SamsaraHexenHasSlot7", 1);
                        break;

                      case SLOT_BFG10K:
                        GiveInventory("SamsaraClassicPariasHasBloodscourge", 1);
                        GiveInventory("GotWeapon7", 1);
                        break;
                    }
                }
                break;
            }
            break;

          case 3: // Baratus
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_FIST:
                if (!CheckInventory("Spiked Gauntlets"))
                {
                    GiveInventory("Spiked Gauntlets", 1);
                    result = 1;
                }
                break;

              case SLOT_CHAINSAW:
                if (!CheckInventory("PortFlechette3"))
                {
                    GiveInventory("PortFlechette3", 1);
                    result = 1;
                }
                break;

              case SLOT_PISTOL:
                if (!CheckInventory("Impaler Crossbow"))
                {
                    GiveInventory("Impaler Crossbow", 1);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { SetInventory("SamsaraHexenHasLMSPistolDisabled", 0); }
                break;

              case SLOT_SHOTGUN:
                if (!CheckInventory("Javelin of Zeal"))
                {
                    GiveInventory("Javelin of Zeal", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    result = 1;
                }
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Timon's Axe"))
                {
                    GiveInventory("Timon's Axe", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    result = 1;
                }
                break;

              case SLOT_CHAINGUN:
                if (!CheckInventory("Jotunn's Flail"))
                {
                    GiveInventory("Jotunn's Flail", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    result = 1;
                }
                break;

              case SLOT_ROCKETLAUNCHER:
                if (!CheckInventory("Hammer of Retribution"))
                {
                    GiveInventory("Hammer of Retribution", 1);
                    GiveInventory("Cell", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 25);
                    result = 1;
                }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory("Quickspell Gauntlets"))
                {
                    GiveInventory("Quickspell Gauntlets", 1);
                    GiveInventory("Cell", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 25);
                    result = 1;
                }
                break;

              case SLOT_BFG9000:
              case SLOT_BFG10K:
                if (!CheckInventory("Quietus"))
                {
                    GiveInventory("Quietus", 1);
                    GiveInventory("Clip", dmextraammo ? 25 * 5 / 2 : 25);
                    GiveInventory("Cell", dmextraammo ? 25 * 5 / 2 : 25);
                    result = 1;
                } else if ((CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv || CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv) && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 25);
                    GiveInventory("Cell", 25);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    switch (slot)
                    {
                      case SLOT_BFG9000:
                        GiveInventory("SamsaraHexenHasSlot7", 1);
                        break;

                      case SLOT_BFG10K:
                        GiveInventory("SamsaraClassicPariasHasBloodscourge", 1);
                        GiveInventory("GotWeapon7", 1);
                        break;
                    }
                }
                break;
            }
            break;
        }
        break;

      case CLASS_DUKE:
        switch (altclasschoice)
        {
          default:
            result = -1;
            break;

          case 0: // Original
          case 1: // Life's a Beach
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_CHAINGUN:
                if (!CheckInventory("Chaingun Cannon"))
                {
                    GiveInventory("Chaingun Cannon", 1);
                    GiveInventory("Clip", dmextraammo ? 50 * 5 / 2 : 50);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 50);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("SamsaraDukeHasSlot4", 1); }
                break;

              case SLOT_MINIGUN:
                if (!CheckInventory("Golden Desert Eagle"))
                {
                    GiveInventory("Golden Desert Eagle", 1);
                    GiveInventory("Clip", dmextraammo ? 60 * 5 / 2 : 60);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 60);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1) { GiveInventory("SamsaraDukeHasGoldenDesertEagle", 1); }
                break;
            }
            break;

          case 2: // Duke Nukem 64
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_PISTOL:
                if (!CheckInventory("Glock 17"))
                {
                    GiveInventory("Glock 17", 1);
                    result = 1;
                }

                if (startmode <= -1 && GetCVar("samsara_lmsuniques")) { GiveInventory("Duke64DumDums", GetAmmoCapacity("Duke64DumDums")); }
                break;

              case SLOT_SHOTGUN:
                if (!CheckInventory("  Shotgun  "))
                {
                    GiveInventory("  Shotgun  ", 1);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("  Shotgun  ", 1);
                    result = 1;
                }

                if (startmode <= -1 && GetCVar("samsara_lmsuniques")) { GiveInventory("Duke64ExplosiveShells", GetAmmoCapacity("Duke64ExplosiveShells")); }
                break;

              case SLOT_CHAINGUN:
              case SLOT_MINIGUN:
                if (!CheckInventory("Chaingun Cannon"))
                {
                    GiveInventory("Chaingun Cannon", 1);
                    GiveInventory("Clip", dmextraammo ? 50 * 5 / 2 : 50);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 50);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    switch (slot)
                    {
                      case SLOT_CHAINGUN:
                        GiveInventory("SamsaraDukeHasSlot4", 1);
                        break;

                      case SLOT_MINIGUN:
                        GiveInventory("SamsaraDukeHasGoldenDesertEagle", 1);
                        GiveInventory("GotWeapon4", 1);
                        break;
                    }
                }
                break;

              case SLOT_ROCKETLAUNCHER:
                if (!CheckInventory("RPG"))
                {
                    GiveInventory("RPG", 1);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RPG", 1);
                    result = 1;
                }

                if (startmode <= -1 && GetCVar("samsara_lmsuniques")) { GiveInventory("Duke64HeatSeekingRockets", GetAmmoCapacity("Duke64HeatSeekingRockets")); }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory("Freezethrower"))
                {
                    GiveInventory("Freezethrower", 1);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Freezethrower", 1);
                    result = 1;
                }

                if (startmode <= -1 && GetCVar("samsara_lmsuniques")) { GiveInventory("Duke64ShrinkerAmmo", GetAmmoCapacity("Duke64ShrinkerAmmo")); }
                break;
            }
            break;
        }
        break;

      case CLASS_MARATHON:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_CHAINSAW:
            if (!CheckInventory("KKV-7 SMG Flechette"))
            {
                GiveInventory("KKV-7 SMG Flechette", 1);
                result = 1;
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("KKV-7 SMG Flechette", 1);
                result = 1;
            }

            if (!CheckInventory("CanDualPistols"))
            {
                GiveInventory("CanDualPistols", 1);
                result = 1;
            }

            if (result == 1)
            {
                if (startmode == 0)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 18);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                }
            }
            break;

          case SLOT_SHOTGUN:
            duallimited = duallimiting && CheckInventory("MarathonShotgunLevelLimiter");

            if (!CheckInventory("WSTE-M5 Combat Shotgun"))
            {
                GiveInventory("WSTE-M5 Combat Shotgun", 1);

                if (!CheckInventory("CanDualShotties") && dualgiveboth)
                {
                    GiveInventory("WSTE-M5 Combat Shotgun", 1);
                    GiveInventory("CanDualShotties", 1);
                }

                if (duallimiting) { GiveInventory("MarathonShotgunLevelLimiter", 1); }

                if (dropped <= 0 && startmode == 0 && weaponstay)
                {
                    setcoords = true;
                    settimer = true;
                }

                result = 1;
            } else if (!CheckInventory("CanDualShotties") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                if (dualpickupmode == 1)
                {
                    inventoryX = CheckInventory("MarathonShotgunPickedUpX") - 65536;
                    inventoryY = CheckInventory("MarathonShotgunPickedUpY") - 65536;
                    inventoryZ = CheckInventory("MarathonShotgunPickedUpZ") - 65536;

                    dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                }
                else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("MarathonShotgunLastPickupTime"); }

                if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                {
                    GiveInventory("WSTE-M5 Combat Shotgun", 1);
                    GiveInventory("CanDualShotties", 1);

                    if (duallimiting) { GiveInventory("MarathonShotgunLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                }
            } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("WSTE-M5 Combat Shotgun", 1);
                result = 1;
            }

            if (setcoords)
            {
                SetInventory("MarathonShotgunPickedUpX", invokerX + 65536);
                SetInventory("MarathonShotgunPickedUpY", invokerY + 65536);
                SetInventory("MarathonShotgunPickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("MarathonShotgunLastPickupTime", Timer() + dualpickuptimer); }
            break;

          case SLOT_CHAINGUN:
            if (!CheckInventory("MA-75B Assault Rifle"))
            {
                GiveInventory("MA-75B Assault Rifle", 1);
                GiveInventory("Clip", dmextraammo ? 52 * 5 / 2 : 52);
                GiveInventory("RocketAmmo", dmextraammo ? 7 * 5 / 2 : 7);
                result = 1;
            } else if ((CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv || CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv) && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Clip", 52);
                GiveInventory("RocketAmmo", 7);
                result = 1;
            }
            break;

          case SLOT_BFG9000:
            if (!CheckInventory("ONI-71 Wave Motion Cannon"))
            {
                GiveInventory("ONI-71 Wave Motion Cannon", 1);
                GiveInventory("Cell", dmextraammo ? 40 * 5 / 2 : 40);
                GiveInventory("RocketAmmo", dmextraammo ? 15 * 5 / 2 : 15);
                result = 1;
            } else if ((CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv || CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv) && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Cell", 40);
                GiveInventory("RocketAmmo", 15);
                result = 1;
            }
            break;
        }
        break;

      case CLASS_QUAKE:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_SUPERSHOTGUN:
            if (!CheckInventory("Grenade Launcher"))
            {
                GiveInventory("Grenade Launcher", 1);
                result = 1;
            } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Grenade Launcher", 1);
                result = 1;
            }

            if (startmode <= -1 && !GetCVar("samsara_vanillaquake")) { GiveInventory("MultiRocketAmmo", GetAmmoCapacity("MultiRocketAmmo")); }
            break;

          case SLOT_CHAINGUN:
            if (!CheckInventory("Nailgun"))
            {
                GiveInventory("Nailgun", 1);
                result = 1;
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Nailgun", 1);
                result = 1;
            }

            if (startmode <= -1 && !GetCVar("samsara_vanillaquake")) { GiveInventory("LavaNails", GetAmmoCapacity("LavaNails")); }
            break;

          case SLOT_ROCKETLAUNCHER:
            if (!CheckInventory("  Rocket Launcher  "))
            {
                GiveInventory("  Rocket Launcher  ", 1);
                result = 1;
            } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("  Rocket Launcher  ", 1);
                result = 1;
            }

            if (startmode <= -1 && !GetCVar("samsara_vanillaquake")) { GiveInventory("MultiRocketAmmo", GetAmmoCapacity("MultiRocketAmmo")); }
            break;

          case SLOT_PLASMARIFLE:
            if (!CheckInventory("Super Nailgun"))
            {
                GiveInventory("Super Nailgun", 1);
                result = 1;
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Super Nailgun", 1);
                result = 1;
            }

            if (startmode <= -1 && !GetCVar("samsara_vanillaquake")) { GiveInventory("LavaNails", GetAmmoCapacity("LavaNails")); }
            break;

          case SLOT_BFG9000:
            if (!CheckInventory("QuakeQuadTimer") || (!CheckInventory("QuadDamageItem") && GetCVar("samsara_permaquad")) || dropped >= 1 || startmode != 0 || !weaponstay)
            {
                if (startmode != 0) { GiveInventory("QuadDamageItem", 1); }
                else
                {
                    GiveQuad(1050);
                    if (GetCVar("samsara_permaquad")) { GiveInventory("QuadDamageItem", 1); }
                }

                result = 1;
            }

            if (!CheckInventory("Thunderbolt"))
            {
                GiveInventory("Thunderbolt", 1);
                result = 1;
            } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Thunderbolt", 1);
                result = 1;
            }

            if (startmode <= -1 && !GetCVar("samsara_vanillaquake")) { GiveInventory("PlasmaCell", GetAmmoCapacity("PlasmaCell")); }

            if (result == 1)
            {
                if (startmode == 0)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 21);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                }
            }
            break;
        }
        break;

      case CLASS_ROTT:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_SHOTGUN:
            if (!CheckInventory("Double Pistols"))
            {
                GiveInventory("Double Pistols", 1);
                result = 1;
            } else if (CheckInventory("HSMissiles") < GetAmmoCapacity("HSMissiles") && (dropped >= 1 || startmode != 0 || !weaponstay)) { // subsequents give heat seeker ammo
                GiveInventory("HSMissiles", 10 / tossedammo);
                result = 1;
            }
            break;

          case SLOT_CHAINGUN:
            if (!CheckInventory("MP40"))
            {
                GiveInventory("MP40", 1);
                result = 1;
            } else if (CheckInventory("RottMissiles") < GetAmmoCapacity("RottMissiles") && (dropped >= 1 || startmode != 0 || !weaponstay)) { // subsequents give bazooka ammo
                GiveInventory("RottMissiles", 6 / tossedammo);
                result = 1;
            }
            break;

          case SLOT_MINIGUN:
            if (!CheckInventory("RoTTM60"))
            {
                GiveInventory("RoTTM60", 1);
                result = 1;
            } else if (CheckInventory("DMissiles") < GetAmmoCapacity("DMissiles") && (dropped >= 1 || startmode != 0 || !weaponstay)) { // subsequents give drunk missile ammo
                GiveInventory("DMissiles", 10 / tossedammo);
                result = 1;
            }
            break;
        }
        break;

      case CLASS_CALEB:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_BFG9000:
            if (!CheckInventory("StopFromPickingTurrets_") && (Timer() >= CheckInventory("SamsaraBloodLifeLeechLastPickupTime") || dropped >= 1 || startmode != 0 || !weaponstay)) // if life leech sentry is active, prevent pickup regardless of drop status
            {
                if (!CheckInventory("LifeLeech"))
                {
                    GiveInventory("LifeLeech", 1);
                    GiveInventory("Cell", dmextraammo ? 40 * 5 / 2 : 40);
                    if (dropped <= 0 && startmode == 0 && weaponstay) { SetInventory("SamsaraBloodLifeLeechLastPickupTime", Timer() + pickuptimer); }
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 40);
                    if (dropped <= 0 && startmode == 0 && weaponstay) { SetInventory("SamsaraBloodLifeLeechLastPickupTime", Timer() + pickuptimer); }
                    result = 1;
                }
            }
            break;

          case SLOT_GRENADELAUNCHER:
            if (!CheckInventory("BloodProximityTNT"))
            {
                GiveInventory("BloodProximityTNT", 1);
                GiveInventory("RocketAmmo", dmextraammo ? 5 / tossedammo * 5 / 2 : 5 / tossedammo);
                result = 1;
            } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("RocketAmmo", 5 / tossedammo);
                result = 1;
            }

            if (startmode <= -1 || startmode >= 2) { GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo")); }

            if (!CheckInventory("BloodRemoteTNT"))
            {
                GiveInventory("BloodRemoteTNT", 1);
                GiveInventory("RocketAmmo", dmextraammo ? 5 / tossedammo * 5 / 2 : 5 / tossedammo);
                result = 1;
            } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("RocketAmmo", 5 / tossedammo);
                result = 1;
            }

            if (startmode <= -1 || startmode >= 2) { GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo")); }

            if (result == 1)
            {
                if (startmode == 0)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 22);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                }
            }
            break;
        }
        break;

      case CLASS_STRIFE:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_CHAINSAW:
            if (!CheckInventory("StrifeBeaconItem5"))
            {
                GiveInventory("StrifeBeaconItem5", 1);
                if (CheckInventory("StrifeBeaconCooldown")) { ACS_NamedExecuteWithResult("SamsaraStrifeBeaconCooldownDecrement"); }
                if (dropped <= 0 && startmode == 0 && weaponstay) { SetInventory("StrifeBeaconLastPickupTime", Timer() + pickuptimer); }
                result = 1;
            } else if (CheckInventory("StrifeBeaconCooldown") && (Timer() >= CheckInventory("StrifeBeaconLastPickupTime") || dropped >= 1 || startmode != 0 || !weaponstay)) {
                ACS_NamedExecuteWithResult("SamsaraStrifeBeaconCooldownDecrement");
                if (dropped <= 0 && startmode == 0 && weaponstay) { SetInventory("StrifeBeaconLastPickupTime", Timer() + pickuptimer); }
                result = 1;
            }
            break;

          case SLOT_SHOTGUN:
            if (!CheckInventory("  Crossbow  "))
            {
                GiveInventory("  Crossbow  ", 1);
                result = 1;
            } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("  Crossbow  ", 1);
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("StrifePoisonAmmo", GetAmmoCapacity("StrifePoisonAmmo")); }
            break;

          case SLOT_SUPERSHOTGUN:
            if (!CheckInventory("Mini Missile Launcher"))
            {
                GiveInventory("Mini Missile Launcher", 1);
                result = 1;
            } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Mini Missile Launcher", 1);
                result = 1;
            }

            if (!CheckInventory("StrifeSigilPieceCheck3") && currentiwad != GAME_STRIFE)
            {
                GiveInventory("StrifeSigilPieceCheck3", 1);
                GiveInventory("StrifeSigilPiece", 1);
                GiveInventory(" Sigil ", 1);
                SetInventory("StrifeSigilPiecePreferred", CheckInventory("StrifeSigilPiece"));
                result = 1;
            }

            if (result == 1)
            {
                if (startmode == 0 && currentiwad != GAME_STRIFE)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 23);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                }
            }
            break;

          case SLOT_CHAINGUN:
            if (!CheckInventory("Assault Gun"))
            {
                GiveInventory("Assault Gun", 1);
                result = 1;
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Assault Gun", 1);
                result = 1;
            }

            if (!CheckInventory("StrifeSigilPieceCheck4") && currentiwad != GAME_STRIFE)
            {
                GiveInventory("StrifeSigilPieceCheck4", 1);
                GiveInventory("StrifeSigilPiece", 1);
                GiveInventory(" Sigil ", 1);
                SetInventory("StrifeSigilPiecePreferred", CheckInventory("StrifeSigilPiece"));
                result = 1;
            }

            if (result == 1)
            {
                if (startmode == 0 && currentiwad != GAME_STRIFE)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 23);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                }
            }
            break;

          case SLOT_ROCKETLAUNCHER:
            if (!CheckInventory(" Grenade Launcher "))
            {
                GiveInventory(" Grenade Launcher ", 1);
                result = 1;
            } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory(" Grenade Launcher ", 1);
                result = 1;
            }

            if (startmode <= -1)
            {
                GiveInventory("WhitePhosGrenade", GetAmmoCapacity("WhitePhosGrenade"));
                GiveInventory("StrifeGasGrenadeAmmo", GetAmmoCapacity("StrifeGasGrenadeAmmo"));
            }

            if (!CheckInventory("StrifeSigilPieceCheck5") && currentiwad != GAME_STRIFE)
            {
                GiveInventory("StrifeSigilPieceCheck5", 1);
                GiveInventory("StrifeSigilPiece", 1);
                GiveInventory(" Sigil ", 1);
                SetInventory("StrifeSigilPiecePreferred", CheckInventory("StrifeSigilPiece"));
                result = 1;
            }

            if (result == 1)
            {
                if (startmode == 0 && currentiwad != GAME_STRIFE)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 23);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                }
            }
            break;

          case SLOT_PLASMARIFLE:
            if (!CheckInventory("Flame Thrower"))
            {
                GiveInventory("Flame Thrower", 1);
                result = 1;
            } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Flame Thrower", 1);
                result = 1;
            }

            if (!CheckInventory("StrifeSigilPieceCheck6") && currentiwad != GAME_STRIFE)
            {
                GiveInventory("StrifeSigilPieceCheck6", 1);
                GiveInventory("StrifeSigilPiece", 1);
                GiveInventory(" Sigil ", 1);
                SetInventory("StrifeSigilPiecePreferred", CheckInventory("StrifeSigilPiece"));
                result = 1;
            }

            if (result == 1)
            {
                if (startmode == 0 && currentiwad != GAME_STRIFE)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 23);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                }
            }
            break;

          case SLOT_BFG9000:
            if (!CheckInventory(" Mauler "))
            {
                GiveInventory(" Mauler ", 1);
                result = 1;
            } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory(" Mauler ", 1);
                result = 1;
            }

            if (!CheckInventory("StrifeSigilPieceCheck7") && currentiwad != GAME_STRIFE)
            {
                GiveInventory("StrifeSigilPieceCheck7", 1);
                GiveInventory("StrifeSigilPiece", 1);
                GiveInventory(" Sigil ", 1);
                SetInventory("StrifeSigilPiecePreferred", CheckInventory("StrifeSigilPiece"));
                result = 1;
            }

            if (result == 1)
            {
                if (startmode == 0 && currentiwad != GAME_STRIFE)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 23);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                }
            }
            break;
        }
        break;

      case CLASS_ERAD:
        switch (altclasschoice)
        {
          default:
            result = -1;
            break;

          case 0: // Eleena Brynstaarl
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_CHAINSAW:
                if (!CheckInventory(" Arachnicator "))
                {
                    GiveInventory(" Arachnicator ", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 3 * 5 / 2 : 3);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 3);
                    result = 1;
                }
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Death Bomb"))
                {
                    GiveInventory("Death Bomb", 1);
                    GiveInventory("Shell", dmextraammo ? 12 * 5 / 2 : 12);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 12);
                    result = 1;
                }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory("Eleena Smoke Bomb"))
                {
                    GiveInventory("Eleena Smoke Bomb", 1);
                    GiveInventory("Cell", dmextraammo ? 48 * 5 / 2 : 48);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 48);
                    result = 1;
                }
                break;

              case SLOT_MINIGUN:
                if (!CheckInventory("EradEnergywhip"))
                {
                    GiveInventory("EradEnergywhip", 1);
                    GiveInventory("Clip", dmextraammo ? 30 * 5 / 2 : 30);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 30);
                    result = 1;
                }
                break;
            }
            break;

          case 1: // Kamchak
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_CHAINSAW:
                if (!CheckInventory("EradRovingMine"))
                {
                    GiveInventory("EradRovingMine", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 3 * 5 / 2 : 3);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 3);
                    result = 1;
                }
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Cluster Bomb"))
                {
                    GiveInventory("Cluster Bomb", 1);
                    GiveInventory("Shell", dmextraammo ? 12 * 5 / 2 : 12);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 12);
                    result = 1;
                }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory("Napalm Charge"))
                {
                    GiveInventory("Napalm Charge", 1);
                    GiveInventory("Cell", dmextraammo ? 48 * 5 / 2 : 48);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 48);
                    result = 1;
                }
                break;

              case SLOT_MINIGUN:
                if (!CheckInventory("EradNitrofogger"))
                {
                    GiveInventory("EradNitrofogger", 1);
                    GiveInventory("Clip", dmextraammo ? 30 * 5 / 2 : 30);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 30);
                    result = 1;
                }
                break;
            }
            break;

          case 2: // Dan Blaze
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_CHAINSAW:
                if (!CheckInventory("EradMiniTankDetonator"))
                {
                    GiveInventory("EradMiniTankDetonator", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 3 * 5 / 2 : 3);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 3);
                    result = 1;
                }
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Pellet Bomb"))
                {
                    GiveInventory("Pellet Bomb", 1);
                    GiveInventory("Shell", dmextraammo ? 12 * 5 / 2 : 12);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 12);
                    result = 1;
                }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory("Ion Sphere"))
                {
                    GiveInventory("Ion Sphere", 1);
                    GiveInventory("Cell", dmextraammo ? 48 * 5 / 2 : 48);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 48);
                    result = 1;
                }
                break;

              case SLOT_MINIGUN:
                if (!CheckInventory("EradFlamethrower"))
                {
                    GiveInventory("EradFlamethrower", 1);
                    GiveInventory("Clip", dmextraammo ? 30 * 5 / 2 : 30);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 30);
                    result = 1;
                }
                break;
            }
            break;

          case 3: // Alliance Commando
            switch (slot)
            {
              default:
                result = -1;
                break;

              case SLOT_CHAINSAW:
                if (!CheckInventory(" Arachnicator "))
                {
                    GiveInventory(" Arachnicator ", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 3 * 5 / 2 : 3);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 3);
                    result = 1;
                }
                break;

              case SLOT_SUPERSHOTGUN:
                if (!CheckInventory("Pellet Bomb"))
                {
                    GiveInventory("Pellet Bomb", 1);
                    GiveInventory("Shell", dmextraammo ? 12 * 5 / 2 : 12);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 12);
                    result = 1;
                }
                break;

              case SLOT_PLASMARIFLE:
                if (!CheckInventory("Napalm Charge"))
                {
                    GiveInventory("Napalm Charge", 1);
                    GiveInventory("Cell", dmextraammo ? 48 * 5 / 2 : 48);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 48);
                    result = 1;
                }
                break;

              case SLOT_MINIGUN:
                if (!CheckInventory("EradFlamethrower"))
                {
                    GiveInventory("EradFlamethrower", 1);
                    GiveInventory("Clip", dmextraammo ? 30 * 5 / 2 : 30);
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Clip", 30);
                    result = 1;
                }
                break;
            }
            break;
        }
        break;

      case CLASS_RMR:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_BFG9000:
            if (!CheckInventory(" RMR Plasma Cannon "))
            {
                GiveInventory(" RMR Plasma Cannon ", 1);
                GiveInventory("Cell", dmextraammo ? 40 / tossedammo * 5 / 2 : 40 / tossedammo);
                result = 1;
            } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Cell", 40 / tossedammo);
                result = 1;
            }

            if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }

            if (usingextraweapons)
            {
                if (!CheckInventory("Subestron Arm"))
                {
                    GiveInventory("Subestron Arm", 1);
                    GiveInventory("Cell", dmextraammo ? 24 / tossedammo * 5 / 2 : 24 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 24 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
            }

            if (result == 1)
            {
                if (startmode == 0 && usingextraweapons)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 27);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                }
            }
            break;
        }
        break;

      case CLASS_POGREED:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_CHAINSAW:
            if (!CheckInventory("IPOGGrenadeToken"))
            {
                GiveInventory("IPOGGrenadeToken", 1);
                GiveInventory("RocketAmmo", dmextraammo ? 5 * 5 / 2 : 5);
                result = 1;
            } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("RocketAmmo", 5);
                result = 1;
            }
        }
        break;

      case CLASS_DISRUPTOR:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_SHOTGUN:
            if (!CheckInventory(" Phase Rifle "))
            {
                GiveInventory(" Phase Rifle ", 1);
                result = 1;
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory(" Phase Rifle ", 1);
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("DisruptorHiFreq", GetAmmoCapacity("DisruptorHiFreq")); }
            break;

          case SLOT_CHAINGUN:
            if (!CheckInventory("Phase Repeater"))
            {
                GiveInventory("Phase Repeater", 1);
                result = 1;
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Phase Repeater", 1);
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("DisruptorHiFreq", GetAmmoCapacity("DisruptorHiFreq")); }
            break;

          case SLOT_ROCKETLAUNCHER:
            if (!CheckInventory(" Lock-on Cannon "))
            {
                GiveInventory(" Lock-on Cannon ", 1);
                result = 1;
            } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory(" Lock-on Cannon ", 1);
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("DisruptorBinaryLockOn", GetAmmoCapacity("DisruptorBinaryLockOn")); }
            break;

          case SLOT_BFG9000:
            if (!CheckInventory(" Disruptor Zodiac "))
            {
                GiveInventory(" Disruptor Zodiac ", 1);
                result = 1;
            } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory(" Disruptor Zodiac ", 1);
                result = 1;
            }

            if (!CheckInventory("DisruptorTeraBall"))
            {
                SetInventory("DisruptorEnergyBall", 0);
                GiveInventory("DisruptorTeraBall", 1);
                if (CheckInventory("DisruptorPsionicSelected") == 2) { SetInventory("DisruptorPsionicSelected", 3); }
                result = 1;
            }

            if (result == 1)
            {
                if (startmode == 0)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 34);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                }
            }
            break;
        }
        break;

      case CLASS_WITCHAVEN:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_CHAINSAW:
            if (Timer() >= CheckInventory("WitchavenShieldLastPickupTime") || dropped >= 1 || startmode != 0 || !weaponstay)
            {
                if (!CheckInventory("WTShieldTrigger"))
                {
                    SetInventory("WTShieldTrigger", 1);
                    GiveInventory("WTShieldWaiting", 1);
                    if (dropped <= 0 && startmode == 0 && weaponstay) { SetInventory("WitchavenShieldLastPickupTime", Timer() + pickuptimer); }
                    result = 1;
                } else if (!CheckInventory("WTShieldWaiting") && CheckInventory("WTShieldCounter") < 50) {
                    SetInventory("WTShieldTrigger", 2);
                    GiveInventory("WTShieldWaiting", 1);
                    if (dropped <= 0 && startmode == 0 && weaponstay) { SetInventory("WitchavenShieldLastPickupTime", Timer() + pickuptimer); }
                    result = 1;
                }
            }
            break;
        }
        break;

      case CLASS_HALFLIFE:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_FIST:
            hasweapon = CheckInventory("Crowbar") || CheckInventory("Combat Knife");

            if (loadoutchoice <= 0 || completeloadout) // Crowbar
            {
                if (!hasweapon)
                {
                    GiveInventory("Crowbar", 1);
                    result = 1;
                }
            }

            if (loadoutchoice >= 1 || completeloadout) // Combat Knife
            {
                if (!hasweapon)
                {
                    GiveInventory("Combat Knife", 1);
                    result = 1;
                }
            }

            if (result == 1 && startmode == 0 && !hasweapon) { ACS_NamedExecuteAlways("HL2685", 0, 12); }
            break;

          case SLOT_CHAINSAW:
            hasweapon = CheckInventory("Hornetgun") || CheckInventory("Shock Roach");

            if (loadoutchoice <= 0 || completeloadout) // Hivehand
            {
                if (!hasweapon)
                {
                    GiveInventory("Hornetgun", 1);
                    result = 1;
                }
            }

            if (loadoutchoice >= 1 || completeloadout) // Shock Roach
            {
                if (!hasweapon)
                {
                    GiveInventory("Shock Roach", 1);
                    result = 1;
                }
            }

            if (result == 1 && startmode == 0 && !hasweapon) { ACS_NamedExecuteAlways("HL2685", 0, 13); }
            break;

          case SLOT_PISTOL:
            hasweapon = CheckInventory("9mm Pistol");

            if (!hasweapon)
            {
                GiveInventory("9mm Pistol", 1);
                result = 1;
            }

            if (result == 1 && startmode == 0 && !hasweapon) { ACS_NamedExecuteAlways("HL2685", 0, 14); }
            break;

          case SLOT_SHOTGUN:
            hasweapon = CheckInventory("Assault Shotgun");

            if (!hasweapon)
            {
                GiveInventory("Assault Shotgun", 1);
                result = 1;
            } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Assault Shotgun", 1);
                result = 1;
            }

            if (result == 1 && startmode == 0 && !hasweapon) { ACS_NamedExecuteAlways("HL2685", 0, 15); }
            break;

          case SLOT_SUPERSHOTGUN:
            hasweapon = CheckInventory(".357 Python") || CheckInventory("Desert Eagle");

            if (loadoutchoice <= 0 || completeloadout) // .357 Python
            {
                if (!hasweapon)
                {
                    GiveInventory(".357 Python", 1);
                    GiveInventory("Shell", dmextraammo ? 6 / tossedammo * 5 / 2 : 6 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 6 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }
            }

            if (loadoutchoice >= 1 || completeloadout) // Desert Eagle
            {
                if (!hasweapon)
                {
                    GiveInventory("Desert Eagle", 1);
                    GiveInventory("Shell", dmextraammo ? 7 / tossedammo * 5 / 2 : 7 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 7 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }
            }

            if (result == 1 && startmode == 0 && !hasweapon) { ACS_NamedExecuteAlways("HL2685", 0, 16); }
            break;

          case SLOT_CHAINGUN:
            hasweapon = CheckInventory("MP5");

            if (!hasweapon)
            {
                if (Random(0, 2) == 0) { GiveInventory("RocketAmmo", 3); }
                GiveInventory("MP5", 1);
                result = 1;
            } else if ((CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv || CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv) && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                if (Random(0, 2) == 0 || CheckInventory("Clip") >= GetAmmoCapacity("Clip") / tosseddiv) { GiveInventory("RocketAmmo", 3); }
                GiveInventory("MP5", 1);
                result = 1;
            }

            if (result == 1 && startmode == 0 && !hasweapon) { ACS_NamedExecuteAlways("HL2685", 0, 17); }
            break;

          case SLOT_ROCKETLAUNCHER:
            hasweapon = CheckInventory(" RPG ") || CheckInventory("Spore Launcher");

            if (loadoutchoice <= 0 || completeloadout) // RPG
            {
                if (!hasweapon)
                {
                    GiveInventory(" RPG ", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 10 / tossedammo * 5 / 2 : 10 / tossedammo);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 10 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo")); }
            }

            if (loadoutchoice >= 1 || completeloadout) // Spore Launcher
            {
                if (!hasweapon)
                {
                    GiveInventory("Spore Launcher", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 10 / tossedammo * 5 / 2 : 10 / tossedammo);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("RocketAmmo", 10 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo")); }
            }

            if (result == 1 && startmode == 0 && !hasweapon) { ACS_NamedExecuteAlways("HL2685", 0, 18); }
            break;

          case SLOT_PLASMARIFLE:
            hasweapon = CheckInventory("Gauss Cannon") || CheckInventory("M249 Squad Automatic Weapon");

            if (loadoutchoice <= 0 || completeloadout) // Tau Cannon
            {
                if (!hasweapon)
                {
                    GiveInventory("Gauss Cannon", 1);
                    GiveInventory("Cell", dmextraammo ? 70 / tossedammo * 5 / 2 : 70 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 70 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
            }

            if (loadoutchoice >= 1 || completeloadout) // M249 Squad Automatic Weapon
            {
                if (!hasweapon)
                {
                    GiveInventory("M249 Squad Automatic Weapon", 1);
                    GiveInventory("Cell", dmextraammo ? 100 / tossedammo * 5 / 2 : 100 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 100 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
            }

            if (result == 1 && startmode == 0 && !hasweapon) { ACS_NamedExecuteAlways("HL2685", 0, 19); }
            break;

          case SLOT_BFG9000:
            hasweapon = CheckInventory("E.G.O.N.") || CheckInventory("Displacer Cannon");

            if (loadoutchoice <= 0 || completeloadout) // Gluon Gun
            {
                if (!hasweapon)
                {
                    GiveInventory("E.G.O.N.", 1);
                    GiveInventory("Cell", dmextraammo ? 50 / tossedammo * 5 / 2 : 50 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 50 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
            }

            if (loadoutchoice >= 1 || completeloadout) // Displacer Cannon
            {
                if (!hasweapon)
                {
                    GiveInventory("Displacer Cannon", 1);
                    GiveInventory("Cell", dmextraammo ? 60 / tossedammo * 5 / 2 : 60 / tossedammo);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 60 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
            }

            if (result == 1 && startmode == 0 && !hasweapon) { ACS_NamedExecuteAlways("HL2685", 0, 20); }
            break;
        }
        break;

      case CLASS_SW:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_CHAINGUN:
            duallimited = duallimiting && CheckInventory("SWUziLevelLimiter");

            if (!CheckInventory("SWUzi"))
            {
                GiveInventory("SWUzi", 1);

                if (!CheckInventory("UziAmountCheck") && dualgiveboth)
                {
                    GiveInventory("SWUzi", 1);
                    GiveInventory("UziAmountCheck", 1);
                }

                if (duallimiting) { GiveInventory("SWUziLevelLimiter", 1); }

                if (dropped <= 0 && startmode == 0 && weaponstay)
                {
                    setcoords = true;
                    settimer = true;
                }

                result = 1;
            } else if (!CheckInventory("UziAmountCheck") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                if (dualpickupmode == 1)
                {
                    inventoryX = CheckInventory("SWUziPickedUpX") - 65536;
                    inventoryY = CheckInventory("SWUziPickedUpY") - 65536;
                    inventoryZ = CheckInventory("SWUziPickedUpZ") - 65536;

                    dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                }
                else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("SWUziLastPickupTime"); }

                if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                {
                    GiveInventory("SWUzi", 1);
                    GiveInventory("UziAmountCheck", 1);

                    if (duallimiting) { GiveInventory("SWUziLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                }
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("SWUzi", 1);
                result = 1;
            }

            if (setcoords)
            {
                SetInventory("SWUziPickedUpX", invokerX + 65536);
                SetInventory("SWUziPickedUpY", invokerY + 65536);
                SetInventory("SWUziPickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("SWUziLastPickupTime", Timer() + dualpickuptimer); }
            break;

          case SLOT_BFG9000:
            if (!CheckInventory("SWGuardianHead"))
            {
                GiveInventory("SWGuardianHead", 1);
                result = 1;
            } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("SWGuardianHead", 1);
                result = 1;
            }

            if (!CheckInventory("GotNuke") && (Timer() >= CheckInventory("SamsaraShadowWarriorNukeLastPickupTime") || dropped >= 1 || startmode != 0 || !weaponstay))
            {
                GiveInventory("GotNuke", 1);
                if (dropped <= 0 && startmode == 0 && weaponstay) { SetInventory("SamsaraShadowWarriorNukeLastPickupTime", Timer() + pickuptimer); }
                result = 1;
            }

            if (result == 1)
            {
                if (startmode == 0)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 35);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", dropped);
                }
            }
            break;
        }
        break;

      case CLASS_BOND:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_CHAINSAW:
            duallimited = duallimiting && CheckInventory("Goldeneye_KnifeLevelLimiter");

            if (!CheckInventory("Goldeneye_ThrowingKnives"))
            {
                GiveInventory("Goldeneye_ThrowingKnives", 1);
                GiveInventory("Goldeneye_ThrowingKnivesAmmo", dmextraammo ? 1 / tossedammo * 5 / 2 : 1 / tossedammo);

                if (!CheckInventory("Goldeneye_ThrowingKnivesDualToken") && dualgiveboth)
                {
                    GiveInventory("Goldeneye_ThrowingKnivesDualToken", 1);
                    GiveInventory("Goldeneye_ThrowingKnivesAmmo", 1 / tossedammo);
                }

                if (duallimiting) { GiveInventory("Goldeneye_KnifeLevelLimiter", 1); }

                if (dropped <= 0 && startmode == 0 && weaponstay)
                {
                    setcoords = true;
                    settimer = true;
                    setammotimer = true;
                }

                result = 1;
            } else if (!CheckInventory("Goldeneye_ThrowingKnivesDualToken") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                if (dualpickupmode == 1)
                {
                    inventoryX = CheckInventory("Goldeneye_KnifePickedUpX") - 65536;
                    inventoryY = CheckInventory("Goldeneye_KnifePickedUpY") - 65536;
                    inventoryZ = CheckInventory("Goldeneye_KnifePickedUpZ") - 65536;

                    dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                }
                else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_KnifeLastPickupTime"); }

                if (dualreqcheck || (!CheckInventory("Goldeneye_ThrowingKnivesAmmo") && Timer() >= CheckInventory("Goldeneye_KnifeAmmoLastPickupTime")) || dropped >= 1 || startmode != 0 || !weaponstay)
                {
                    GiveInventory("Goldeneye_ThrowingKnivesDualToken", 1);
                    GiveInventory("Goldeneye_ThrowingKnivesAmmo", 1 / tossedammo);

                    if (duallimiting) { GiveInventory("Goldeneye_KnifeLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                        setammotimer = true;
                    }

                    result = 1;
                }
            } else if ((CheckInventory("Goldeneye_ThrowingKnivesAmmo") < GetAmmoCapacity("Goldeneye_ThrowingKnivesAmmo") && (dropped >= 1 || startmode != 0 || !weaponstay)) ||
                       (!CheckInventory("Goldeneye_ThrowingKnivesAmmo") && (Timer() >= CheckInventory("Goldeneye_KnifeAmmoLastPickupTime") || dropped >= 1 || startmode != 0 || !weaponstay)))
            {
                int origknives = CheckInventory("Goldeneye_ThrowingKnivesAmmo");

                GiveInventory("Goldeneye_ThrowingKnivesAmmo", 1 / tossedammo);

                result = CheckInventory("Goldeneye_ThrowingKnivesAmmo") > origknives;

                if (result == 1)
                {
                    if (dropped <= 0 && startmode == 0 && weaponstay) { setammotimer = true; }
                }
            }

            if (startmode <= -1 || startmode >= 2) { GiveInventory("Goldeneye_ThrowingKnivesAmmo", GetAmmoCapacity("Goldeneye_ThrowingKnivesAmmo")); }

            if (setcoords)
            {
                SetInventory("Goldeneye_KnifePickedUpX", invokerX + 65536);
                SetInventory("Goldeneye_KnifePickedUpY", invokerY + 65536);
                SetInventory("Goldeneye_KnifePickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("Goldeneye_KnifeLastPickupTime", Timer() + dualpickuptimer); }

            if (setammotimer) { SetInventory("Goldeneye_KnifeAmmoLastPickupTime", Timer() + ammopickuptimer); }
            break;

          case SLOT_PISTOL:
            hasweapon = CheckInventory("Goldeneye_PP7Silenced") || CheckInventory("Goldeneye_Klobb") || CheckInventory("Goldeneye_PP7SpecialIssue") ||
                        CheckInventory("Goldeneye_DD44");

            if (loadoutchoice <= 0 || completeloadout) // PP7 Special Issue (Silenced)
            {
                if (!hasweapon)
                {
                    GiveInventory("Goldeneye_PP7Silenced", 1);
                    result = 1;
                }
            }

            if (loadoutchoice == 1 || completeloadout) // Klobb
            {
                if (!hasweapon)
                {
                    GiveInventory("Goldeneye_Klobb", 1);
                    result = 1;
                }
            }

            if (loadoutchoice == 2 || completeloadout) // PP7 Special Issue
            {
                if (!hasweapon)
                {
                    GiveInventory("Goldeneye_PP7SpecialIssue", 1);
                    result = 1;
                }
            }

            if (loadoutchoice >= 3 || completeloadout) // DD44 Dostovei
            {
                if (!hasweapon)
                {
                    GiveInventory("Goldeneye_DD44", 1);
                    result = 1;
                }
            }
            break;

          case SLOT_SHOTGUN:
            duallimited = duallimiting && CheckInventory("Goldeneye_KF7SovietLevelLimiter");

            if (!CheckInventory("Goldeneye_KF7Soviet"))
            {
                GiveInventory("Goldeneye_KF7Soviet", 1);

                if (!CheckInventory("Goldeneye_KF7DualToken") && dualgiveboth)
                {
                    GiveInventory("Goldeneye_KF7Soviet", 1);
                    GiveInventory("Goldeneye_KF7DualToken", 1);
                }

                if (duallimiting) { GiveInventory("Goldeneye_KF7SovietLevelLimiter", 1); }

                if (dropped <= 0 && startmode == 0 && weaponstay)
                {
                    setcoords = true;
                    settimer = true;
                }

                result = 1;
            } else if (!CheckInventory("Goldeneye_KF7DualToken") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                if (dualpickupmode == 1)
                {
                    inventoryX = CheckInventory("Goldeneye_KF7SovietPickedUpX") - 65536;
                    inventoryY = CheckInventory("Goldeneye_KF7SovietPickedUpY") - 65536;
                    inventoryZ = CheckInventory("Goldeneye_KF7SovietPickedUpZ") - 65536;

                    dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                }
                else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_KF7SovietLastPickupTime"); }

                if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                {
                    GiveInventory("Goldeneye_KF7Soviet", 1);
                    GiveInventory("Goldeneye_KF7DualToken", 1);

                    if (duallimiting) { GiveInventory("Goldeneye_KF7SovietLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                }
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Goldeneye_KF7Soviet", 1);
                result = 1;
            }

            if (setcoords)
            {
                SetInventory("Goldeneye_KF7SovietPickedUpX", invokerX + 65536);
                SetInventory("Goldeneye_KF7SovietPickedUpY", invokerY + 65536);
                SetInventory("Goldeneye_KF7SovietPickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("Goldeneye_KF7SovietLastPickupTime", Timer() + dualpickuptimer); }
            break;

          case SLOT_SUPERSHOTGUN:
            hasweapon = CheckInventory("Goldeneye_AutoShotgun") || CheckInventory("Goldeneye_Shotgun");
            hasdualtoken = CheckInventory("Goldeneye_AutoShotgunDualToken");
            duallimited = duallimiting && CheckInventory("Goldeneye_AutoShotgunLevelLimiter");

            if (loadoutchoice <= 0 || completeloadout) // Automatic Shotgun
            {
                if (!hasweapon)
                {
                    GiveInventory("Goldeneye_AutoShotgun", 1);
                    GiveInventory("Shell", dmextraammo ? 5 / tossedammo * 5 / 2 : 5 / tossedammo);

                    if (!hasdualtoken && dualgiveboth)
                    {
                        GiveInventory("Goldeneye_AutoShotgunDualToken", 1);
                        GiveInventory("Shell", 5 / tossedammo);
                    }

                    if (duallimiting) { GiveInventory("Goldeneye_AutoShotgunLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                } else if (!hasdualtoken && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                    if (dualpickupmode == 1)
                    {
                        inventoryX = CheckInventory("Goldeneye_AutoShotgunPickedUpX") - 65536;
                        inventoryY = CheckInventory("Goldeneye_AutoShotgunPickedUpY") - 65536;
                        inventoryZ = CheckInventory("Goldeneye_AutoShotgunPickedUpZ") - 65536;

                        dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                    }
                    else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_AutoShotgunLastPickupTime"); }

                    if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                    {
                        GiveInventory("Goldeneye_AutoShotgunDualToken", 1);
                        GiveInventory("Shell", 5 / tossedammo);

                        if (duallimiting) { GiveInventory("Goldeneye_AutoShotgunLevelLimiter", 1); }

                        if (dropped <= 0 && startmode == 0 && weaponstay)
                        {
                            setcoords = true;
                            settimer = true;
                        }

                        result = 1;
                    }
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 5 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }
            }

            if (loadoutchoice >= 1 || completeloadout) // Shotgun
            {
                if (!hasweapon)
                {
                    GiveInventory("Goldeneye_Shotgun", 1);
                    GiveInventory("Shell", dmextraammo ? 5 / tossedammo * 5 / 2 : 5 / tossedammo);

                    if (!hasdualtoken && dualgiveboth)
                    {
                        GiveInventory("Goldeneye_AutoShotgunDualToken", 1);
                        GiveInventory("Shell", 5 / tossedammo);
                    }

                    if (duallimiting) { GiveInventory("Goldeneye_AutoShotgunLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                } else if (!hasdualtoken && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                    if (dualpickupmode == 1)
                    {
                        inventoryX = CheckInventory("Goldeneye_AutoShotgunPickedUpX") - 65536;
                        inventoryY = CheckInventory("Goldeneye_AutoShotgunPickedUpY") - 65536;
                        inventoryZ = CheckInventory("Goldeneye_AutoShotgunPickedUpZ") - 65536;

                        dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                    }
                    else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_AutoShotgunLastPickupTime"); }

                    if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                    {
                        GiveInventory("Goldeneye_AutoShotgunDualToken", 1);
                        GiveInventory("Shell", 5 / tossedammo);

                        if (duallimiting) { GiveInventory("Goldeneye_AutoShotgunLevelLimiter", 1); }

                        if (dropped <= 0 && startmode == 0 && weaponstay)
                        {
                            setcoords = true;
                            settimer = true;
                        }

                        result = 1;
                    }
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Shell", 5 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }
            }

            if (setcoords)
            {
                SetInventory("Goldeneye_AutoShotgunPickedUpX", invokerX + 65536);
                SetInventory("Goldeneye_AutoShotgunPickedUpY", invokerY + 65536);
                SetInventory("Goldeneye_AutoShotgunPickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("Goldeneye_AutoShotgunLastPickupTime", Timer() + dualpickuptimer); }
            break;

          case SLOT_CHAINGUN:
            duallimited = duallimiting && CheckInventory("Goldeneye_AR33LevelLimiter");

            if (!CheckInventory("Goldeneye_AR33"))
            {
                GiveInventory("Goldeneye_AR33", 1);

                if (!CheckInventory("Goldeneye_AR33DualToken") && dualgiveboth)
                {
                    GiveInventory("Goldeneye_AR33", 1);
                    GiveInventory("Goldeneye_AR33DualToken", 1);
                }

                if (duallimiting) { GiveInventory("Goldeneye_AR33LevelLimiter", 1); }

                if (dropped <= 0 && startmode == 0 && weaponstay)
                {
                    setcoords = true;
                    settimer = true;
                }

                result = 1;
            } else if (!CheckInventory("Goldeneye_AR33DualToken") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                if (dualpickupmode == 1)
                {
                    inventoryX = CheckInventory("Goldeneye_AR33PickedUpX") - 65536;
                    inventoryY = CheckInventory("Goldeneye_AR33PickedUpY") - 65536;
                    inventoryZ = CheckInventory("Goldeneye_AR33PickedUpZ") - 65536;

                    dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                }
                else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_AR33LastPickupTime"); }

                if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                {
                    GiveInventory("Goldeneye_AR33", 1);
                    GiveInventory("Goldeneye_AR33DualToken", 1);

                    if (duallimiting) { GiveInventory("Goldeneye_AR33LevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                }
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Goldeneye_AR33", 1);
                result = 1;
            }

            if (setcoords)
            {
                SetInventory("Goldeneye_AR33PickedUpX", invokerX + 65536);
                SetInventory("Goldeneye_AR33PickedUpY", invokerY + 65536);
                SetInventory("Goldeneye_AR33PickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("Goldeneye_AR33LastPickupTime", Timer() + dualpickuptimer); }
            break;

          case SLOT_ROCKETLAUNCHER:
            duallimited = duallimiting && CheckInventory("Goldeneye_RocketLauncherLevelLimiter");

            if (!CheckInventory("Goldeneye_RocketLauncher"))
            {
                GiveInventory("Goldeneye_RocketLauncher", 1);

                if (!CheckInventory("Goldeneye_RocketLauncherDualToken") && dualgiveboth)
                {
                    GiveInventory("Goldeneye_RocketLauncher", 1);
                    GiveInventory("Goldeneye_RocketLauncherDualToken", 1);
                }

                if (duallimiting) { GiveInventory("Goldeneye_RocketLauncherLevelLimiter", 1); }

                if (dropped <= 0 && startmode == 0 && weaponstay)
                {
                    setcoords = true;
                    settimer = true;
                }

                result = 1;
            } else if (!CheckInventory("Goldeneye_RocketLauncherDualToken") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                if (dualpickupmode == 1)
                {
                    inventoryX = CheckInventory("Goldeneye_RocketLauncherPickedUpX") - 65536;
                    inventoryY = CheckInventory("Goldeneye_RocketLauncherPickedUpY") - 65536;
                    inventoryZ = CheckInventory("Goldeneye_RocketLauncherPickedUpZ") - 65536;

                    dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                }
                else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_RocketLauncherLastPickupTime"); }

                if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                {
                    GiveInventory("Goldeneye_RocketLauncher", 1);
                    GiveInventory("Goldeneye_RocketLauncherDualToken", 1);

                    if (duallimiting) { GiveInventory("Goldeneye_RocketLauncherLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                }
            } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Goldeneye_RocketLauncher", 1);
                result = 1;
            }

            if (setcoords)
            {
                SetInventory("Goldeneye_RocketLauncherPickedUpX", invokerX + 65536);
                SetInventory("Goldeneye_RocketLauncherPickedUpY", invokerY + 65536);
                SetInventory("Goldeneye_RocketLauncherPickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("Goldeneye_RocketLauncherLastPickupTime", Timer() + dualpickuptimer); }
            break;

          case SLOT_PLASMARIFLE:
            duallimited = duallimiting && CheckInventory("Goldeneye_RCP90LevelLimiter");

            if (!CheckInventory("Goldeneye_RCP90"))
            {
                GiveInventory("Goldeneye_RCP90", 1);

                if (!CheckInventory("Goldeneye_RCP90DualToken") && dualgiveboth)
                {
                    GiveInventory("Goldeneye_RCP90", 1);
                    GiveInventory("Goldeneye_RCP90DualToken", 1);
                }

                if (duallimiting) { GiveInventory("Goldeneye_RCP90LevelLimiter", 1); }

                if (dropped <= 0 && startmode == 0 && weaponstay)
                {
                    setcoords = true;
                    settimer = true;
                }

                result = 1;
            } else if (!CheckInventory("Goldeneye_RCP90DualToken") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                if (dualpickupmode == 1)
                {
                    inventoryX = CheckInventory("Goldeneye_RCP90PickedUpX") - 65536;
                    inventoryY = CheckInventory("Goldeneye_RCP90PickedUpY") - 65536;
                    inventoryZ = CheckInventory("Goldeneye_RCP90PickedUpZ") - 65536;

                    dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                }
                else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_RCP90LastPickupTime"); }

                if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                {
                    GiveInventory("Goldeneye_RCP90", 1);
                    GiveInventory("Goldeneye_RCP90DualToken", 1);

                    if (duallimiting) { GiveInventory("Goldeneye_RCP90LevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                }
            } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Goldeneye_RCP90", 1);
                result = 1;
            }

            if (setcoords)
            {
                SetInventory("Goldeneye_RCP90PickedUpX", invokerX + 65536);
                SetInventory("Goldeneye_RCP90PickedUpY", invokerY + 65536);
                SetInventory("Goldeneye_RCP90PickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("Goldeneye_RCP90LastPickupTime", Timer() + dualpickuptimer); }
            break;

          case SLOT_BFG9000:
            duallimited = duallimiting && CheckInventory("Goldeneye_LaserLevelLimiter");

            if (!CheckInventory("Goldeneye_Moonraker"))
            {
                GiveInventory("Goldeneye_Moonraker", 1);

                if (!CheckInventory("Goldeneye_LaserDualToken") && dualgiveboth)
                {
                    //GiveInventory("Goldeneye_Moonraker", 1);
                    GiveInventory("Goldeneye_LaserDualToken", 1);
                }

                if (duallimiting) { GiveInventory("Goldeneye_LaserLevelLimiter", 1); }

                if (dropped <= 0 && startmode == 0 && weaponstay)
                {
                    setcoords = true;
                    settimer = true;
                }

                result = 1;
            } else if (!CheckInventory("Goldeneye_LaserDualToken") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                if (dualpickupmode == 1)
                {
                    inventoryX = CheckInventory("Goldeneye_LaserPickedUpX") - 65536;
                    inventoryY = CheckInventory("Goldeneye_LaserPickedUpY") - 65536;
                    inventoryZ = CheckInventory("Goldeneye_LaserPickedUpZ") - 65536;

                    dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                }
                else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_LaserLastPickupTime"); }

                if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                {
                    //GiveInventory("Goldeneye_Moonraker", 1);
                    GiveInventory("Goldeneye_LaserDualToken", 1);

                    if (duallimiting) { GiveInventory("Goldeneye_LaserLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                }
            /*} else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Goldeneye_Moonraker", 1);
                result = 1;*/
            }

            if (setcoords)
            {
                SetInventory("Goldeneye_LaserPickedUpX", invokerX + 65536);
                SetInventory("Goldeneye_LaserPickedUpY", invokerY + 65536);
                SetInventory("Goldeneye_LaserPickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("Goldeneye_LaserLastPickupTime", Timer() + dualpickuptimer); }
            break;

          case SLOT_MINIGUN:
            duallimited = duallimiting && CheckInventory("Goldeneye_PhantomLevelLimiter");

            if (!CheckInventory("Goldeneye_Phantom"))
            {
                GiveInventory("Goldeneye_Phantom", 1);

                if (!CheckInventory("Goldeneye_PhantomDualToken") && dualgiveboth)
                {
                    GiveInventory("Goldeneye_Phantom", 1);
                    GiveInventory("Goldeneye_PhantomDualToken", 1);
                }

                if (duallimiting) { GiveInventory("Goldeneye_PhantomLevelLimiter", 1); }

                if (dropped <= 0 && startmode == 0 && weaponstay)
                {
                    setcoords = true;
                    settimer = true;
                }

                result = 1;
            } else if (!CheckInventory("Goldeneye_PhantomDualToken") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                if (dualpickupmode == 1)
                {
                    inventoryX = CheckInventory("Goldeneye_PhantomPickedUpX") - 65536;
                    inventoryY = CheckInventory("Goldeneye_PhantomPickedUpY") - 65536;
                    inventoryZ = CheckInventory("Goldeneye_PhantomPickedUpZ") - 65536;

                    dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                }
                else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_PhantomLastPickupTime"); }

                if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                {
                    GiveInventory("Goldeneye_Phantom", 1);
                    GiveInventory("Goldeneye_PhantomDualToken", 1);

                    if (duallimiting) { GiveInventory("Goldeneye_PhantomLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                }
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Goldeneye_Phantom", 1);
                result = 1;
            }

            if (setcoords)
            {
                SetInventory("Goldeneye_PhantomPickedUpX", invokerX + 65536);
                SetInventory("Goldeneye_PhantomPickedUpY", invokerY + 65536);
                SetInventory("Goldeneye_PhantomPickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("Goldeneye_PhantomLastPickupTime", Timer() + dualpickuptimer); }
            break;

          case SLOT_GRENADELAUNCHER:
            duallimited = duallimiting && CheckInventory("Goldeneye_GrenadeLauncherLevelLimiter");

            if (!CheckInventory("Goldeneye_GrenadeLauncher"))
            {
                GiveInventory("Goldeneye_GrenadeLauncher", 1);

                if (!CheckInventory("Goldeneye_GrenadeLauncherDualToken") && dualgiveboth)
                {
                    GiveInventory("Goldeneye_GrenadeLauncher", 1);
                    GiveInventory("Goldeneye_GrenadeLauncherDualToken", 1);
                }

                if (duallimiting) { GiveInventory("Goldeneye_GrenadeLauncherLevelLimiter", 1); }

                if (dropped <= 0 && startmode == 0 && weaponstay)
                {
                    setcoords = true;
                    settimer = true;
                }

                result = 1;
            } else if (!CheckInventory("Goldeneye_GrenadeLauncherDualToken") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                if (dualpickupmode == 1)
                {
                    inventoryX = CheckInventory("Goldeneye_GrenadeLauncherPickedUpX") - 65536;
                    inventoryY = CheckInventory("Goldeneye_GrenadeLauncherPickedUpY") - 65536;
                    inventoryZ = CheckInventory("Goldeneye_GrenadeLauncherPickedUpZ") - 65536;

                    dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                }
                else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_GrenadeLauncherLastPickupTime"); }

                if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                {
                    GiveInventory("Goldeneye_GrenadeLauncher", 1);
                    GiveInventory("Goldeneye_GrenadeLauncherDualToken", 1);

                    if (duallimiting) { GiveInventory("Goldeneye_GrenadeLauncherLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                }
            } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Goldeneye_GrenadeLauncher", 1);
                result = 1;
            }

            if (setcoords)
            {
                SetInventory("Goldeneye_GrenadeLauncherPickedUpX", invokerX + 65536);
                SetInventory("Goldeneye_GrenadeLauncherPickedUpY", invokerY + 65536);
                SetInventory("Goldeneye_GrenadeLauncherPickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("Goldeneye_GrenadeLauncherLastPickupTime", Timer() + dualpickuptimer); }
            break;

          case SLOT_RAILGUN:
            hasweapon = CheckInventory("Goldeneye_Cougar") || CheckInventory("Goldeneye_SilverPP7") || CheckInventory("Goldeneye_ArabahViper");
            hasdualtoken = CheckInventory("Goldeneye_CougarDualToken");
            duallimited = duallimiting && CheckInventory("Goldeneye_CougarLevelLimiter");

            if (loadoutchoice <= 0 || completeloadout) // Cougar Magnum
            {
                if (!hasweapon)
                {
                    GiveInventory("Goldeneye_Cougar", 1);
                    GiveInventory("Cell", dmextraammo ? 24 / tossedammo * 5 / 2 : 24 / tossedammo);

                    if (!hasdualtoken && dualgiveboth)
                    {
                        GiveInventory("Goldeneye_CougarDualToken", 1);
                        GiveInventory("Cell", 24 / tossedammo);
                    }

                    if (duallimiting) { GiveInventory("Goldeneye_CougarLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                } else if (!hasdualtoken && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                    if (dualpickupmode == 1)
                    {
                        inventoryX = CheckInventory("Goldeneye_CougarPickedUpX") - 65536;
                        inventoryY = CheckInventory("Goldeneye_CougarPickedUpY") - 65536;
                        inventoryZ = CheckInventory("Goldeneye_CougarPickedUpZ") - 65536;

                        dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                    }
                    else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_CougarLastPickupTime"); }

                    if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                    {
                        GiveInventory("Goldeneye_CougarDualToken", 1);
                        GiveInventory("Cell", 24 / tossedammo);

                        if (duallimiting) { GiveInventory("Goldeneye_CougarLevelLimiter", 1); }

                        if (dropped <= 0 && startmode == 0 && weaponstay)
                        {
                            setcoords = true;
                            settimer = true;
                        }

                        result = 1;
                    }
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 24 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
            }

            if (loadoutchoice == 1 || completeloadout) // Silver PP7
            {
                if (!hasweapon)
                {
                    GiveInventory("Goldeneye_SilverPP7", 1);
                    GiveInventory("Cell", dmextraammo ? 28 / tossedammo * 5 / 2 : 28 / tossedammo);

                    if (!hasdualtoken && dualgiveboth)
                    {
                        GiveInventory("Goldeneye_CougarDualToken", 1);
                        GiveInventory("Cell", 28 / tossedammo);
                    }

                    if (duallimiting) { GiveInventory("Goldeneye_CougarLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                } else if (!hasdualtoken && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                    if (dualpickupmode == 1)
                    {
                        inventoryX = CheckInventory("Goldeneye_CougarPickedUpX") - 65536;
                        inventoryY = CheckInventory("Goldeneye_CougarPickedUpY") - 65536;
                        inventoryZ = CheckInventory("Goldeneye_CougarPickedUpZ") - 65536;

                        dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                    }
                    else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_CougarLastPickupTime"); }

                    if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                    {
                        GiveInventory("Goldeneye_CougarDualToken", 1);
                        GiveInventory("Cell", 28 / tossedammo);

                        if (duallimiting) { GiveInventory("Goldeneye_CougarLevelLimiter", 1); }

                        if (dropped <= 0 && startmode == 0 && weaponstay)
                        {
                            setcoords = true;
                            settimer = true;
                        }

                        result = 1;
                    }
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 28 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
            }

            if (loadoutchoice >= 2 || completeloadout) // Arabah Viper
            {
                if (!hasweapon)
                {
                    GiveInventory("Goldeneye_ArabahViper", 1);
                    GiveInventory("Cell", dmextraammo ? 21 / tossedammo * 5 / 2 : 21 / tossedammo);

                    if (!hasdualtoken && dualgiveboth)
                    {
                        GiveInventory("Goldeneye_CougarDualToken", 1);
                        GiveInventory("Cell", 21 / tossedammo);
                    }

                    if (duallimiting) { GiveInventory("Goldeneye_CougarLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                } else if (!hasdualtoken && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                    if (dualpickupmode == 1)
                    {
                        inventoryX = CheckInventory("Goldeneye_CougarPickedUpX") - 65536;
                        inventoryY = CheckInventory("Goldeneye_CougarPickedUpY") - 65536;
                        inventoryZ = CheckInventory("Goldeneye_CougarPickedUpZ") - 65536;

                        dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                    }
                    else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_CougarLastPickupTime"); }

                    if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                    {
                        GiveInventory("Goldeneye_CougarDualToken", 1);
                        GiveInventory("Cell", 21 / tossedammo);

                        if (duallimiting) { GiveInventory("Goldeneye_CougarLevelLimiter", 1); }

                        if (dropped <= 0 && startmode == 0 && weaponstay)
                        {
                            setcoords = true;
                            settimer = true;
                        }

                        result = 1;
                    }
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                    GiveInventory("Cell", 21 / tossedammo);
                    result = 1;
                }

                if (startmode <= -1 || startmode >= 2) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }
            }

            if (setcoords)
            {
                SetInventory("Goldeneye_CougarPickedUpX", invokerX + 65536);
                SetInventory("Goldeneye_CougarPickedUpY", invokerY + 65536);
                SetInventory("Goldeneye_CougarPickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("Goldeneye_CougarLastPickupTime", Timer() + dualpickuptimer); }

            if (result == 1) { GiveInventory("Goldeneye_HasCougar", 1); }
            break;

          case SLOT_BFG10K:
            duallimited = duallimiting && CheckInventory("Goldeneye_GoldenGunLevelLimiter");

            if (!CheckInventory("Goldeneye_GoldenGun"))
            {
                GiveInventory("Goldeneye_GoldenGun", 1);

                if (!CheckInventory("Goldeneye_GoldenGunDualToken") && dualgiveboth)
                {
                    GiveInventory("Goldeneye_GoldenGun", 1);
                    GiveInventory("Goldeneye_GoldenGunDualToken", 1);
                }

                if (duallimiting) { GiveInventory("Goldeneye_GoldenGunLevelLimiter", 1); }

                if (dropped <= 0 && startmode == 0 && weaponstay)
                {
                    setcoords = true;
                    settimer = true;
                }

                result = 1;
            } else if (!CheckInventory("Goldeneye_GoldenGunDualToken") && !duallimited && (dualpickupmode <= 3 || (dualpickupmode >= 4 && dropped <= 1))) {
                if (dualpickupmode == 1)
                {
                    inventoryX = CheckInventory("Goldeneye_GoldenGunPickedUpX") - 65536;
                    inventoryY = CheckInventory("Goldeneye_GoldenGunPickedUpY") - 65536;
                    inventoryZ = CheckInventory("Goldeneye_GoldenGunPickedUpZ") - 65536;

                    dualreqcheck = abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance;
                }
                else if (dualpickupmode == 2) { dualreqcheck = Timer() >= CheckInventory("Goldeneye_GoldenGunLastPickupTime"); }

                if (dualreqcheck || dropped >= 1 || startmode != 0 || !weaponstay)
                {
                    GiveInventory("Goldeneye_GoldenGun", 1);
                    GiveInventory("Goldeneye_GoldenGunDualToken", 1);

                    if (duallimiting) { GiveInventory("Goldeneye_GoldenGunLevelLimiter", 1); }

                    if (dropped <= 0 && startmode == 0 && weaponstay)
                    {
                        setcoords = true;
                        settimer = true;
                    }

                    result = 1;
                }
            } else if (CheckInventory("Goldeneye_GoldenGunRounds") < GetAmmoCapacity("Goldeneye_GoldenGunRounds") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Goldeneye_GoldenGun", 1);
                result = 1;
            }

            if (setcoords)
            {
                SetInventory("Goldeneye_GoldenGunPickedUpX", invokerX + 65536);
                SetInventory("Goldeneye_GoldenGunPickedUpY", invokerY + 65536);
                SetInventory("Goldeneye_GoldenGunPickedUpZ", invokerZ + 65536);
            }

            if (settimer) { SetInventory("Goldeneye_GoldenGunLastPickupTime", Timer() + dualpickuptimer); }
            break;
        }
        break;

      case CLASS_PAINKILLER:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_SHOTGUN:
            if (!CheckInventory("Painkiller_Shotgun"))
            {
                GiveInventory("Painkiller_Shotgun", 1);
                result = 1;
            } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("Painkiller_Shotgun", 1);
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("Painkiller_FreezerAmmo", GetAmmoCapacity("Painkiller_FreezerAmmo")); }
            break;

          case SLOT_BFG9000:
            if (startmode <= -1)
            {
                GiveInventory("Painkiller_Speed", 1);
                GiveInventory("Painkiller_Dexterity", 1);
                GiveInventory("Painkiller_Fury", 1);
                GiveInventory("Painkiller_Rage", 1);
                GiveInventory("Painkiller_Confusion", 1);
                GiveInventory("Painkiller_Endurance", 1);
                GiveInventory("Painkiller_IronWill", 1);
                GiveInventory("Painkiller_Haste", 1);
                GiveInventory("Painkiller_DoubleHaste", 1);
                GiveInventory("Painkiller_TripleHaste", 1);
                GiveInventory("Painkiller_TimeBonus", 1);
                GiveInventory("Painkiller_DoubleTimeBonus", 1);
                GiveInventory("Painkiller_WeaponModifier", 1);
                GiveInventory("Painkiller_MagicGun", 1);
                GiveInventory("Painkiller_TheSceptre", 1);
                GiveInventory("Painkiller_DemonMorphCard", 1);
                GiveInventory("Painkiller_Rebirth", 1);
                result = 1;
            } else {
                if (Timer() >= CheckInventory("Painkiller_TarotLastPickupTime") || dropped >= 1 || startmode != 0 || !weaponstay)
                {
                    GiveInventory("Painkiller_Tarot_GoldGiver", 1);
                    if (dropped <= 0 && startmode == 0 && weaponstay) { SetInventory("Painkiller_TarotLastPickupTime", Timer() + pickuptimer); }
                    result = 1;
                }
            }
            break;
        }
        break;

      case CLASS_DESCENT:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_CHAINSAW:
            if (!CheckInventory("DescentSuperLaser"))
            {
                GiveInventory("DescentSuperLaser", 1);
                if (!CheckInventory("DescentPrimaryCounter")) { GiveInventory("DescentPrimaryCounter", 1); }
                result = 1;
            } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("DescentSuperLaser", 1);
                if (!CheckInventory("DescentPrimaryCounter")) { GiveInventory("DescentPrimaryCounter", 1); }
                result = 1;
            }

            if (CheckInventory("DescentLaserLevel") < 5)
            {
                GiveInventory("DescentLaserLevel", 5);
                result = 1;
            }
            break;
        }
        break;

      case CLASS_DEUSEX:
        switch (slot)
        {
          default:
            result = -1;
            break;

          case SLOT_CHAINGUN:
            if (!CheckInventory("DeusEx_AssaultRifle"))
            {
                GiveInventory("DeusEx_AssaultRifle", 1);
                result = 1;
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") / tosseddiv && (dropped >= 1 || startmode != 0 || !weaponstay)) {
                GiveInventory("DeusEx_AssaultRifle", 1);
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo")); }
            break;
        }
        break;
    }

    SetResultValue(result);
    //PrintBold(s:"Distance X: ", d:abs(invokerX - inventoryX), s:", Distance Y: ", d:abs(invokerY - inventoryY), s:", Distance Z: ", d:abs(invokerZ - inventoryZ));
}

script "Samsara_GiveCustomUnique" (int unum, int startmode)
{
    // Result value
    int result = 0;

    // Current IWAD
    int currentiwad = GetCVar("samsara_currentgame");

    // Player number and player class
    int pln = PlayerNumber();
    int classnum = samsaraClassNum();

    // Alternate class
    int altclasschoice = 0;

    // Shared alternate class item (this saves up on duplicating cases)
    str shareditem = "Placeholder";

    switch (classnum)
    {
      default:
        break;

      case CLASS_DOOM:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_doommode") : CheckInventory("DoomClassMode");

        if (altclasschoice > 2) { altclasschoice = 2; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      case CLASS_WOLFEN:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_wolfmode") : CheckInventory("WolfenClassMode");

        if (altclasschoice > 2) { altclasschoice = 2; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      case CLASS_HEXEN:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_hexclass") : CheckInventory("HexenClassMode");

        if (altclasschoice > 3) { altclasschoice = 3; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      case CLASS_DUKE:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_dukemode") : CheckInventory("DukeClassMode");

        if (altclasschoice > 2) { altclasschoice = 2; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      /*case CLASS_ROTT:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_rottmode") : CheckInventory("RottMode");

        if (altclasschoice > 4) { altclasschoice = 4; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;*/

      /*case CLASS_BLAKE:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_bsaog") : CheckInventory("BlakeAOGToken");

        if (altclasschoice > 1) { altclasschoice = 1; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;*/

      case CLASS_ERAD:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_eradmode") : CheckInventory("EradMode");

        if (altclasschoice > 3) { altclasschoice = 3; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      /*case CLASS_POGREED:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_ipogmode") : CheckInventory("IpogMode");

        if (altclasschoice > 4) { altclasschoice = 4; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;*/

      case CLASS_HALFLIFE:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_shephardmode") : CheckInventory("HalfLifeOpposingForce");

        if (altclasschoice > 1) { altclasschoice = 1; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;
    }

    // Loadout
    int loadoutchoice = 0;

    switch (classnum)
    {
      default:
        break;

      case CLASS_HALFLIFE:
        switch (altclasschoice)
        {
          default:
            break;

          case 0: // Gordon Freeman
            switch (unum)
            {
              default:
                break;

              case SLOT_UNIQUE1:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_freeman_unique1") > 0 ? GetCVar("samsara_freeman_unique1") - 1 : GetUserCVar(pln, "samsara_cl_freeman_unique1"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutUnique1"); }
                break;

              case SLOT_UNIQUE2:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_freeman_unique2") > 0 ? GetCVar("samsara_freeman_unique2") - 1 : GetUserCVar(pln, "samsara_cl_freeman_unique2"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutUnique2"); }
                break;

              case SLOT_UNIQUE3:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_freeman_unique3") > 0 ? GetCVar("samsara_freeman_unique3") - 1 : GetUserCVar(pln, "samsara_cl_freeman_unique3"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutUnique3"); }
                break;
            }
            break;

          case 1: // Adrian Shephard
            switch (unum)
            {
              default:
                break;

              case SLOT_UNIQUE1:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_shephard_unique1") > 0 ? GetCVar("samsara_shephard_unique1") - 1 : GetUserCVar(pln, "samsara_cl_shephard_unique1"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutUnique1"); }
                break;

              case SLOT_UNIQUE2:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_shephard_unique2") > 0 ? GetCVar("samsara_shephard_unique2") - 1 : GetUserCVar(pln, "samsara_cl_shephard_unique2"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutUnique2"); }
                break;

              case SLOT_UNIQUE3:
                if (startmode != 0) { loadoutchoice = GetCVar("samsara_shephard_unique3") > 0 ? GetCVar("samsara_shephard_unique3") - 1 : GetUserCVar(pln, "samsara_cl_shephard_unique3"); }
                else { loadoutchoice = CheckInventory("SamsaraHalfLifeLoadoutUnique3"); }
                break;
            }
            break;
        }
        break;

      case CLASS_BOND:
        switch (unum)
        {
          default:
            break;

          case SLOT_UNIQUE2:
            if (startmode != 0) { loadoutchoice = GetCVar("samsara_bond_unique2") > 0 ? GetCVar("samsara_bond_unique2") - 1 : GetUserCVar(pln, "samsara_cl_bond_unique2"); }
            else { loadoutchoice = CheckInventory("SamsaraGoldenEyeLoadoutUnique2"); }
            break;
        }
        break;
    }

    bool completeloadout = startmode != 0 ? GetCVar("samsara_allloadoutequipment") : CheckInventory("SamsaraHasAllLoadoutEquipment");

    // Inventory check
    bool hasweapon = false;
    bool hasdualtoken = false;

    // Extra ammo on first pickup in Doom deathmatch (amount * 5 / 2)
    bool dmextraammo = !isSinglePlayer() && !isCoop() && (currentiwad == GAME_DOOM || currentiwad == GAME_CHEX) && !GetCVar("sv_noextraammo");

    // Dual wield pickup mode checks
    int dualpickupmode = GetCVar("samsara_dualpickup");
    bool duallimiting = startmode == 0 && dualpickupmode <= 0;
    bool duallimited = false;
    bool dualgiveboth = startmode <= -1 || dualpickupmode == 3 || (dualpickupmode >= 4 && (!(isSinglePlayer() || isCoop()) || isInvasion()));

    // Ban morph ovum handling
    if (classnum == CLASS_HERETIC && unum == SLOT_UNIQUE2 && !isZDoom() && GetCVar("samsara_banmorphovum"))
    {
        if (startmode == 1 || startmode == 3) { unum = SLOT_UNIQUE1; }
        else
        {
            SetResultValue(result);
            terminate;
        }
    }

    // Ban jetpack handling
    if (classnum == CLASS_HALFLIFE && unum == SLOT_UNIQUE3 && GetCVar("samsara_banjetpack"))
    {
        if (startmode == 1 || startmode == 3) { unum = SLOT_UNIQUE2; }
        else
        {
            SetResultValue(result);
            terminate;
        }
    }

    // Start everything
    switch (classnum)
    {
      default:
        result = -1;
        break;

      case CLASS_DOOM:
        switch (altclasschoice)
        {
          default:
            result = -1;
            break;

          case 0: // Original
            switch (unum)
            {
              default:
                result = -1;
                break;

              case SLOT_UNIQUE1:
              case SLOT_UNIQUE2:
              case SLOT_UNIQUE3:
                if (unum == SLOT_UNIQUE1 || startmode == 0 || startmode == 1 || startmode == 3) // do not give again if giving all uniques on spawn
                {
                    GiveInventory("DoomguyBerserker", 1);
                    GiveInventory("SamsaraDoom64UnmakerArtifact", 1);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    switch (unum)
                    {
                      case SLOT_UNIQUE1:
                        GiveInventory("DGStrHasHomingRocketLauncher", 1);
                        break;

                      case SLOT_UNIQUE2:
                        GiveInventory("DGStrHasPlasmaRepeater", 1);
                        break;

                      case SLOT_UNIQUE3:
                        if (CheckInventory("DGStrHasWPK") < 3) { GiveInventory("DGStrHasWPK", 1); }
                        break;
                    }
                }
                break;
            }
            break;

          case 1: // Doom 64
            switch (unum)
            {
              default:
                result = -1;
                break;

              case SLOT_UNIQUE1:
              case SLOT_UNIQUE2:
              case SLOT_UNIQUE3:
                hasweapon = CheckInventory("SamsaraDoom64UnmakerArtifact"); // not a weapon, but using this variable for pickup message purposes

                if (unum == SLOT_UNIQUE1 || startmode == 0 || startmode == 1 || startmode == 3) // do not give again if giving all uniques on spawn
                {
                    GiveInventory("DoomguyBerserker", 1);
                    GiveInventory("SamsaraDoom64UnmakerArtifact", 1);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    switch (unum)
                    {
                      case SLOT_UNIQUE1:
                        GiveInventory("DGStrHasHomingRocketLauncher", 1);
                        break;

                      case SLOT_UNIQUE2:
                        GiveInventory("DGStrHasPlasmaRepeater", 1);
                        break;

                      case SLOT_UNIQUE3:
                        if (CheckInventory("DGStrHasWPK") < 3) { GiveInventory("DGStrHasWPK", 1); }
                        break;
                    }

                    if (startmode == 0 && hasweapon < 3)
                    {
                        SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 2 + hasweapon);
                        SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                        SetInventory("SamsaraMiscPickupDisplayExtraDropped1", 0);
                    }
                }
                break;
            }
            break;

          case 2: // Stronghold
            switch (unum)
            {
              default:
                result = -1;
                break;

              case SLOT_UNIQUE1:
                GiveInventory("DoomguyBerserker", 1);
                GiveInventory("SamsaraDoom64UnmakerArtifact", 1);
                result = 1;

                if (!CheckInventory("Homing Rocket Launcher"))
                {
                    GiveInventory("Homing Rocket Launcher", 1);
                    GiveInventory("RocketAmmo", 4);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) {
                    GiveInventory("RocketAmmo", 4);
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo")); }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGStrHasHomingRocketLauncher", 1);

                    if (startmode == 0)
                    {
                        SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 10);
                        SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                        SetInventory("SamsaraMiscPickupDisplayExtraDropped1", 0);
                    }
                }
                break;

              case SLOT_UNIQUE2:
                if (startmode == 0)
                {
                    if (CheckInventory("Homing Rocket Launcher") && CheckInventory("Plasma Repeater") &&
                        CheckInventory("RocketAmmo") >= GetAmmoCapacity("RocketAmmo") && CheckInventory("Cell") >= GetAmmoCapacity("Cell"))
                    {} // if maxed out on everything, treat this unique as the giver
                    else if (CheckInventory("Plasma Repeater") && CheckInventory("Cell") >= GetAmmoCapacity("Cell")) { break; } // allow smart pickup to skip this unique
                }

                if (startmode == 0 || startmode == 1 || startmode == 3) // do not give again if giving all uniques on spawn
                {
                    GiveInventory("DoomguyBerserker", 1);
                    GiveInventory("SamsaraDoom64UnmakerArtifact", 1);
                    result = 1;
                }

                if (!CheckInventory("Plasma Repeater"))
                {
                    GiveInventory("Plasma Repeater", 1);
                    GiveInventory("Cell", 20);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell")) {
                    GiveInventory("Cell", 20);
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DGStrHasPlasmaRepeater", 1);

                    if (startmode == 0)
                    {
                        SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 11);
                        SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                        SetInventory("SamsaraMiscPickupDisplayExtraDropped1", 0);
                    }
                }
                break;

              case SLOT_UNIQUE3:
                if (startmode == 0)
                {
                    if (CheckInventory("Homing Rocket Launcher") && CheckInventory("Plasma Repeater") &&
                        CheckInventory("RocketAmmo") >= GetAmmoCapacity("RocketAmmo") && CheckInventory("Cell") >= GetAmmoCapacity("Cell") &&
                        CheckInventory("SamsaraDoomguyStrWeaponPowerItem") >= 3)
                    {} // if maxed out on everything, treat this unique as the giver
                    else if (CheckInventory("SamsaraDoomguyStrWeaponPowerItem") >= 3) { break; } // allow smart pickup to skip this unique
                }

                if (startmode == 0 || startmode == 1 || startmode == 3) // do not give again if giving all uniques on spawn
                {
                    GiveInventory("DoomguyBerserker", 1);
                    GiveInventory("SamsaraDoom64UnmakerArtifact", 1);
                    result = 1;
                }

                if (CheckInventory("SamsaraDoomguyStrWeaponPowerItem") < 3)
                {
                    GiveInventory("SamsaraDoomguyStrWeaponPowerItem", 1);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    if (CheckInventory("DGStrHasWPK") < 3) { GiveInventory("DGStrHasWPK", 1); }

                    if (startmode == 0)
                    {
                        SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 12);
                        SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                        SetInventory("SamsaraMiscPickupDisplayExtraDropped1", 0);
                    }
                }
                break;
            }
            break;
        }
        break;

      case CLASS_HERETIC:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1: // needed for ban morph ovum handling at start of script
            if (!CheckInventory("Grim Ballista"))
            {
                GiveInventory("Grim Ballista", 1);
                result = 1;
            } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell")) {
                GiveInventory("Grim Ballista", 1);
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }
            break;
        }
        break;

      case CLASS_WOLFEN:
        switch (altclasschoice)
        {
          default:
            result = -1;
            break;

          case 0: // Original
            if ((unum == SLOT_UNIQUE2 || unum == SLOT_UNIQUE3) && !StrCmp(shareditem, "Placeholder")) { shareditem = "WolfenAmmoCrate"; }
            // Fallthrough (case (haha) in point)

          case 1: // Lost Missions
            if ((unum == SLOT_UNIQUE2 || unum == SLOT_UNIQUE3) && !StrCmp(shareditem, "Placeholder")) { shareditem = "WolfenAmmoCrateLost"; }

            switch (unum)
            {
              default:
                result = -1;
                break;

              case SLOT_UNIQUE1:
                if (CheckInventory("WolfExtraLife") < 9)
                {
                    GiveInventory("WolfExtraLife", 1);
                    result = 1;
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    if (CheckInventory("Wolfen_IHaveExtraLife") < 9) { GiveInventory("Wolfen_IHaveExtraLife", 1); }
                    GiveInventory("Totenkopf_IHaveFlamethrower", 1);
                }
                break;

              case SLOT_UNIQUE2:
              case SLOT_UNIQUE3:
                if (unum == SLOT_UNIQUE2 || startmode == 0 || startmode == 1 || startmode == 3) // do not give again if giving all uniques on spawn
                {
                    if (CheckInventory(shareditem) < 9)
                    {
                        GiveInventory(shareditem, 1);
                        result = 1;
                    }
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    if (unum == SLOT_UNIQUE2 || startmode == 0 || startmode == 1 || startmode == 3)
                    {
                        if (CheckInventory("Wolfen_IHaveAmmoCrate") < 9) { GiveInventory("Wolfen_IHaveAmmoCrate", 1); }
                    }

                    switch (unum)
                    {
                      case SLOT_UNIQUE2:
                        GiveInventory("Totenkopf_IHaveMG42", 1);
                        break;

                      case SLOT_UNIQUE3:
                        GiveInventory("Totenkopf_IHaveScope", 1);
                        break;
                    }
                }
                break;
            }
            break;

          case 2: // Castle Totenkopf SDL
            switch (unum)
            {
              default:
                result = -1;
                break;

              case SLOT_UNIQUE1:
                if (!CheckInventory("Totenkopf_Flamethrower"))
                {
                    GiveInventory("Totenkopf_Flamethrower", 1);
                    GiveInventory("Totenkopf_FlameThrowerFuel", 40);
                    result = 1;
                } else if (CheckInventory("Totenkopf_FlameThrowerFuel") < GetAmmoCapacity("Totenkopf_FlameThrowerFuel")) {
                    GiveInventory("Totenkopf_FlameThrowerFuel", 40);
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("Totenkopf_FlameThrowerFuel", GetAmmoCapacity("Totenkopf_FlameThrowerFuel")); }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    if (CheckInventory("Wolfen_IHaveExtraLife") < 9) { GiveInventory("Wolfen_IHaveExtraLife", 1); }
                    GiveInventory("Totenkopf_IHaveFlamethrower", 1);
                }
                break;

              case SLOT_UNIQUE2:
                if (!CheckInventory("Totenkopf_MG42"))
                {
                    GiveInventory("Totenkopf_MG42", 1);
                    GiveInventory("Cell", 80);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell")) {
                    GiveInventory("Cell", 80);
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    if (CheckInventory("Wolfen_IHaveAmmoCrate") < 9) { GiveInventory("Wolfen_IHaveAmmoCrate", 1); }
                    GiveInventory("Totenkopf_IHaveMG42", 1);
                }
                break;

              case SLOT_UNIQUE3:
                if (!CheckInventory("Totenkopf_Sniper"))
                {
                    GiveInventory("Totenkopf_Kar98k", 1);
                    GiveInventory("Totenkopf_Sniper", 1);
                    GiveInventory("Shell", 5);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell")) {
                    GiveInventory("Shell", 5);
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    if (startmode == 0 || startmode == 1 || startmode == 3)
                    {
                        if (CheckInventory("Wolfen_IHaveAmmoCrate") < 9) { GiveInventory("Wolfen_IHaveAmmoCrate", 1); }
                    }

                    GiveInventory("Totenkopf_IHaveScope", 1);
                    GiveInventory("GotWeapon2", 1);
                }
                break;
            }
            break;
        }
        break;

      case CLASS_HEXEN:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE2:
            if (!CheckInventory("SamsaraHexenDiscOfRepulsion"))
            {
                GiveInventory("SamsaraHexenDiscOfRepulsion", 1);
                result = 1;
            }
            break;

          case SLOT_UNIQUE3:
            if (!CheckInventory("SamsaraHexenDarkServant"))
            {
                GiveInventory("SamsaraHexenDarkServant", 1);
                result = 1;
            }
            break;
        }
        break;

      case CLASS_DUKE:
        switch (altclasschoice)
        {
          default:
            result = -1;
            break;

          case 0: // Original
            if (unum == SLOT_UNIQUE1 && !StrCmp(shareditem, "Placeholder")) { shareditem = "DukePortSteroids"; }
            // Fallthrough

          case 1: // Life's a Beach
            if (unum == SLOT_UNIQUE1 && !StrCmp(shareditem, "Placeholder")) { shareditem = "DukePortSteroidsLAB"; }

            switch (unum)
            {
              default:
                result = -1;
                break;

              case SLOT_UNIQUE1:
                if (!CheckInventory("DukePortJetpack") || CheckInventory("DukeJetpackFuel") < 100)
                {
                    if (!GetCVar("samsara_banjetpack") || !CheckInventory(shareditem) || CheckInventory("DukeSteroidsFuel") < 100) // if banjetpack is on, and we have full steroids/hot sauce, fail the pickup
                    {
                        GiveInventory("DukeJetpackFuel", 100);
                        GiveInventory("DukePortJetpack", 1);
                        result = 1;
                    }
                }
                break;

              case SLOT_UNIQUE2:
                if (!CheckInventory("Shrinker"))
                {
                    GiveInventory("Shrinker", 1);
                    GiveInventory("ShrinkerAmmo", 3);
                    result = 1;
                } else if (CheckInventory("ShrinkerAmmo") < GetAmmoCapacity("ShrinkerAmmo")) {
                    GiveInventory("ShrinkerAmmo", 3);
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("ShrinkerAmmo", GetAmmoCapacity("ShrinkerAmmo")); }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DukeHasShrinker", 1);

                    if (startmode == 0) { ACS_NamedExecuteWithResult("SamsaraWeaponTaunt"); }
                }
                break;

              case SLOT_UNIQUE3:
                if (!CheckInventory("Expander"))
                {
                    GiveInventory("Expander", 1);
                    GiveInventory("ExpanderAmmo", 20);
                    result = 1;
                } else if (CheckInventory("ExpanderAmmo") < GetAmmoCapacity("ExpanderAmmo")) {
                    GiveInventory("ExpanderAmmo", 20);
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("ExpanderAmmo", GetAmmoCapacity("ExpanderAmmo")); }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    GiveInventory("DukeHasExpander", 1);

                    if (startmode == 0) { ACS_NamedExecuteWithResult("SamsaraWeaponTaunt"); }
                }
                break;
            }
            break;

          case 2: // Duke Nukem 64
            if (!StrCmp(shareditem, "Placeholder")) { shareditem = "DukePortSteroids64"; }

            switch (unum)
            {
              default:
                result = -1;
                break;

              case SLOT_UNIQUE1:
              case SLOT_UNIQUE2:
              case SLOT_UNIQUE3:
                if (unum == SLOT_UNIQUE1 || startmode == 0 || startmode == 1 || startmode == 3) // do not give again if giving all uniques on spawn
                {
                    if (!CheckInventory("DukePortJetpack64") || CheckInventory("DukeJetpackFuel") < 100)
                    {
                        if (!GetCVar("samsara_banjetpack") || !CheckInventory(shareditem) || CheckInventory("DukeSteroidsFuel") < 100) // if banjetpack is on, and we have full vitamin x, fail the pickup
                        {
                            GiveInventory("DukeJetpackFuel", 100);
                            GiveInventory("DukePortJetpack64", 1);
                            result = 1;
                        }
                    }
                }

                if (startmode != 0) { result = 1; }

                if (result == 1)
                {
                    switch (unum)
                    {
                      case SLOT_UNIQUE2:
                        GiveInventory("DukeHasShrinker", 1);
                        break;

                      case SLOT_UNIQUE3:
                        GiveInventory("DukeHasExpander", 1);
                        break;
                    }
                }
                break;
            }
            break;
        }
        break;

      case CLASS_CALEB:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE2:
            int bloodakimbomode = GetCVar("samsara_bloodakimbomode");

            if (bloodakimbomode <= 0 || bloodakimbomode >= 3) // Powerup / Toggle (gives quad damage)
            {
                GiveInventory("SamsaraBloodGunsAkimboPickup", 1);
                result = 1;
            } else if (bloodakimbomode == 1) { // Inventory (Single Use)
                if (!CheckInventory("SamsaraBloodGunsAkimboInventory"))
                {
                    GiveInventory("SamsaraBloodGunsAkimboPickup", 1);
                    result = 1;
                }
            } else if (bloodakimbomode == 2) { // Inventory (Cooldown)
                if (!CheckInventory("SamsaraBloodGunsAkimboInventory") || CheckInventory("SamsaraBloodGunsAkimboCooldown"))
                {
                    GiveInventory("SamsaraBloodGunsAkimboPickup", 1);
                    result = 1;
                }
            }
            break;
        }
        break;

      case CLASS_STRIFE:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            GiveInventory(startmode <= -1 ? "UpgradesLMS" : "Upgrades", 1);
            result = 1;
            break;
        }
        break;

      case CLASS_C7:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            if (CheckInventory("C7ProxyMineAmmo") < GetAmmoCapacity("C7ProxyMineAmmo"))
            {
                GiveInventory("C7ProxyMineAmmo", 5);
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("C7ProxyMineAmmo", GetAmmoCapacity("C7ProxyMineAmmo")); }
            break;
        }
        break;

      case CLASS_RMR:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            int oxyrecmax = 3;

            if (CheckInventory("RMRJetPack") < 3)
            {
                // if banjetpack is on, and we have the max amount of oxygen recyclers (and full health/oxygen, depending on settings), fail the pickup
                if (!GetCVar("samsara_banjetpack") ||
                    CheckInventory("RMROxygenRecycler") < oxyrecmax ||
                    (GetCVar("samsara_cl_maxedinventoryhealthpickup") >= 2 && (GetActorProperty(0, APROP_Health) < ACS_NamedExecuteWithResult("SamsaraPlayerHealer", -1) || ACS_NamedExecuteWithResult("SamsaraPlayerOxygenAdjuster", 0, -1))) ||
                    GetCVar("samsara_nohealthcap"))
                {
                    GiveInventory("RMRJetPack", startmode <= -1 ? 3 : 1);
                    result = 1;
                }
            }
            break;
        }
        break;

      case CLASS_KATARN:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            if (!CheckInventory("DFSuperCharge")) // this is called if we don't have one, or if it's currently active (treat it like a standard powerup in this case)
            {
                GiveInventory(startmode <= -1 ? "KatarnSuperchargeLMS" : "KatarnSupercharge", 1);
                result = 1;
            } else if (CheckInventory("KatarnBlazeIt") < 2100) {
                GiveInventory(startmode <= -1 ? "KatarnSuperchargeLMS" : "KatarnSupercharge", 1);
                result = 1;
            }
            break;
        }
        break;

      case CLASS_POGREED:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            int medtubemax = 20;

            bool canmedtube = CheckInventory("Medtube") < medtubemax ||
                              (GetCVar("samsara_cl_maxedinventoryhealthpickup") >= 2 && GetActorProperty(0, APROP_Health) < ACS_NamedExecuteWithResult("SamsaraPlayerHealer", -1)) ||
                              GetCVar("samsara_nohealthcap");

            if (startmode <= -1)
            {
                GiveInventory("ShieldCharge", 3);
                GiveInventory("IPOGProximityMineItem", 10);
                GiveInventory("IPOGTimeBombItem", 10);
                GiveInventory("IPOGCloneItem", 5);

                if (canmedtube)
                {
                    for (int medtubeloops = 4; medtubeloops > 0; medtubeloops--)
                    {
                        if (CheckInventory("Medtube") >= medtubemax &&
                            (GetCVar("samsara_cl_maxedinventoryhealthpickup") <= 1 || GetActorProperty(0, APROP_Health) >= ACS_NamedExecuteWithResult("SamsaraPlayerHealer", -1)) &&
                            !GetCVar("samsara_nohealthcap"))
                        { break; }

                        if ((CheckInventory("Medtube") >= medtubemax && GetCVar("samsara_cl_maxedinventoryhealthpickup") >= 2 && GetActorProperty(0, APROP_Health) < ACS_NamedExecuteWithResult("SamsaraPlayerHealer", -1)) ||
                            GetCVar("samsara_nohealthcap"))
                        { ACS_NamedExecuteWithResult("SamsaraPlayerHealer", 25); }
                        else { GiveInventory("Medtube", 1); }
                    }
                }

                result = 1;
            } else {
                if (CheckInventory("ShieldCharge") < 3 || CheckInventory("IPOGProximityMineItem") < 10 || CheckInventory("IPOGTimeBombItem") < 10 ||
                    CheckInventory("IPOGCloneItem") < 5 || canmedtube)
                {
                    GiveInventory(startmode != 0 ? "IPOGRandomItemGeneratorStart" : "IPOGRandomItemGenerator", 1);
                    result = 1;
                }
            }
            break;
        }
        break;

      case CLASS_DISRUPTOR:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            if (!CheckInventory("DisruptorEnergyBall") && !CheckInventory("DisruptorTeraBall"))
            {
                GiveInventory("DisruptorEnergyBall", 1);
                GiveInventory("DisruptorPSIEnergy", 50);
                result = 1;
            } else if (CheckInventory("DisruptorPSIEnergy") < GetAmmoCapacity("DisruptorPSIEnergy")) {
                GiveInventory("DisruptorPSIEnergy", 50);
                result = 1;
            }
            break;
        }
        break;

      case CLASS_WITCHAVEN:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            if (CheckInventory("WTStrengthPhial") < 10)
            {
                GiveInventory("WTStrengthPhial", startmode <= -1 ? 10 : 1);
                result = 1;
            }
            break;
        }
        break;

      case CLASS_HALFLIFE:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            hasweapon = CheckInventory("SamsaraHalfLifeAcquiredUnique1");

            if (loadoutchoice <= 0 || completeloadout) // Snarks
            {
                if (!hasweapon)
                {
                    GiveInventory("HL Squeaks", 1);
                    GiveInventory("HLSqueakAmmo", 5);
                    GiveInventory("SamsaraHalfLifeSnarksAvailable", 1);
                    result = 1;
                } else if (!CheckInventory("SamsaraHalfLifeSnarksAvailable") || CheckInventory("HLSqueakAmmo") < GetAmmoCapacity("HLSqueakAmmo")) {
                    GiveInventory("HL Squeaks", 1);
                    GiveInventory("HLSqueakAmmo", 5);
                    GiveInventory("SamsaraHalfLifeSnarksAvailable", 1);
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("HLSqueakAmmo", GetAmmoCapacity("HLSqueakAmmo")); }
            }

            if (loadoutchoice >= 1 || completeloadout) // Mk 2 Grenades
            {
                if (!hasweapon)
                {
                    GiveInventory("Mk 2 Grenades", 1);
                    GiveInventory("RocketAmmo", dmextraammo ? 3 * 5 / 2 : 3);
                    result = 1;
                } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) {
                    GiveInventory("RocketAmmo", 3);
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo")); }
            }

            if (!hasweapon)
            {
                GiveInventory("SamsaraHalfLifeAcquiredUnique1", 1);
                result = 1;
            }

            if (result == 1 && startmode == 0 && !hasweapon) { ACS_NamedExecuteAlways("HL2685", 0, 21); }
            break;

          case SLOT_UNIQUE2:
            hasweapon = CheckInventory("HL Crossbow") || CheckInventory("M40A1 Sniper Rifle");

            if (loadoutchoice <= 0 || completeloadout) // Crossbow
            {
                if (!hasweapon)
                {
                    GiveInventory("HL Crossbow", 1);
                    GiveInventory("Shell", dmextraammo ? 10 * 5 / 2 : 10);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell")) {
                    GiveInventory("Shell", 10);
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }
            }

            if (loadoutchoice >= 1 || completeloadout) // M40A1 Sniper Rifle
            {
                if (!hasweapon)
                {
                    GiveInventory("M40A1 Sniper Rifle", 1);
                    GiveInventory("Shell", dmextraammo ? 10 * 5 / 2 : 10);
                    result = 1;
                } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell")) {
                    GiveInventory("Shell", 10);
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }
            }

            if (result == 1 && startmode == 0 && !hasweapon) { ACS_NamedExecuteAlways("HL2685", 0, 22); }
            break;

          case SLOT_UNIQUE3: // this time, will jump to unique 2 if we already have this (the other two have a limit based on ammo pickup)
            hasweapon = CheckInventory("HLOPHasBarnacleLongJump");

            if (!GetCVar("samsara_banjetpack"))
            {
                if (loadoutchoice <= 0 || completeloadout) // Long Jump Module
                {
                    if (!hasweapon) { GiveInventory("SamsaraHalfLifeCanLongJump", 1); }
                }

                if (loadoutchoice >= 1 || completeloadout) // Barnacle Grapple
                {
                    if (!hasweapon) { GiveInventory("HLOPBarnacle", 1); }
                }
            }

            if (!hasweapon)
            {
                GiveInventory("HLOPHasBarnacleLongJump", 1);
                result = 1;
            }

            if (result == 1 && startmode == 0 && !hasweapon) { ACS_NamedExecuteAlways("HL2685", 0, 23); }
            break;
        }
        break;

      case CLASS_SW:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE2:
            if (CheckInventory("HeatSeekingCard") < 2)
            {
                GiveInventory("HeatSeekingCard", startmode <= -1 ? 2 : 1);
                result = 1;
            }
            break;
        }
        break;

      case CLASS_CM:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            if (startmode <= -1)
            {
                GiveInventory("MagicMode1", 1);
                GiveInventory("MagicMode2", 1);
                GiveInventory("MagicMode3", 1);
                GiveInventory("MagicMode4", 1);
                result = 1;

                if (startmode <= -1)
                {
                    GiveInventory("Clip", GetAmmoCapacity("Clip"));
                    GiveInventory("Shell", GetAmmoCapacity("Shell"));
                    GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo"));
                    GiveInventory("Cell", GetAmmoCapacity("Cell"));
                }
            } else {
                if (!CheckInventory("MagicMode1") || !CheckInventory("MagicMode2") || !CheckInventory("MagicMode3") ||
                    !CheckInventory("MagicMode4") ||
                    CheckInventory("Clip") < GetAmmoCapacity("Clip") || CheckInventory("Shell") < GetAmmoCapacity("Shell") || CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo") ||
                    CheckInventory("Cell") < GetAmmoCapacity("Cell"))
                {
                    GiveInventory(startmode != 0 ? "RandomMagicItemStart" : "RandomMagicItem", 1);
                    result = 1;
                }
            }
            break;
        }
        break;

      case CLASS_RR:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            if (!CheckInventory(" Hunting Rifle With Scope "))
            {
                GiveInventory(" Hunting Rifle With Scope ", 1);
                result = 1;
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip")) {
                GiveInventory(" Hunting Rifle With Scope ", 1);
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("Clip", GetAmmoCapacity("Clip")); }

            if (result == 1 && startmode == 0) { ACS_NamedExecuteWithResult("SamsaraWeaponTaunt"); }
            break;

          case SLOT_UNIQUE2:
            if (CheckInventory("ChickenAmmo") < GetAmmoCapacity("ChickenAmmo"))
            {
                GiveInventory(" Chicken Crossbow ", 1); // given as ammo instead of a weapon
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("ChickenAmmo", GetAmmoCapacity("ChickenAmmo")); }
            break;
        }
        break;

      case CLASS_BITTERMAN:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            if (!CheckInventory("Q2GrenadeLauncher"))
            {
                GiveInventory("Q2GrenadeLauncher", 1);
                result = 1;
            } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) {
                GiveInventory("Q2GrenadeLauncher", 1);
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo")); }

            if (CheckInventory("Q2DoubleDamage") < 2) { result = 1; }

            if (startmode != 0) { result = 1; }

            if (result == 1)
            {
                GiveInventory("Q2DoubleDamage", 1);

                if (startmode == 0)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 40);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", 0);
                }
            }
            break;

          case SLOT_UNIQUE2:
            if (CheckInventory("Q2GrenadeLauncher") && CheckInventory("Q2IonRipper") &&
                CheckInventory("RocketAmmo") >= GetAmmoCapacity("RocketAmmo") && CheckInventory("Cell") >= GetAmmoCapacity("Cell") &&
                CheckInventory("Q2DoubleDamage") < 2)
            { result = 1; } // if maxed out on everything but double damage, treat this unique as the giver
            else
            {
                if (!CheckInventory("Q2IonRipper"))
                {
                    GiveInventory("Q2IonRipper", 1);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell")) {
                    GiveInventory("Q2IonRipper", 1);
                    result = 1;
                }
            }

            if (startmode <= -1) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }

            // allow smart pickup to skip this unique

            if (startmode != 0) { result = 1; }

            if (result == 1)
            {
                if (startmode == 0 || startmode == 1 || startmode == 3) { GiveInventory("Q2DoubleDamage", 1); } // do not give again if giving all uniques on spawn

                if (startmode == 0)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 40);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", 0);
                }
            }
            break;

          case SLOT_UNIQUE3:
            if (CheckInventory("Q2GrenadeLauncher") && CheckInventory("Q2IonRipper") && CheckInventory("Q2Railgun") &&
                CheckInventory("RocketAmmo") >= GetAmmoCapacity("RocketAmmo") && CheckInventory("Cell") >= GetAmmoCapacity("Cell") &&
                CheckInventory("Q2DoubleDamage") < 2)
            { result = 1; } // if maxed out on everything but double damage, treat this unique as the giver
            else
            {
                if (!CheckInventory("Q2Railgun"))
                {
                    GiveInventory("Q2Railgun", 1);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell")) {
                    GiveInventory("Q2Railgun", 1);
                    result = 1;
                }
            }

            if (startmode <= -1) { GiveInventory("Cell", GetAmmoCapacity("Cell")); }

            // allow smart pickup to skip this unique

            if (startmode != 0) { result = 1; }

            if (result == 1)
            {
                if (startmode == 0 || startmode == 1 || startmode == 3) { GiveInventory("Q2DoubleDamage", 1); } // do not give again if giving all uniques on spawn

                if (startmode == 0)
                {
                    SetInventory("SamsaraMiscPickupDisplayExtraChoice1", 40);
                    SetInventory("SamsaraMiscPickupDisplayExtraLoadout1", 0);
                    SetInventory("SamsaraMiscPickupDisplayExtraDropped1", 0);
                }
            }
            break;
        }
        break;

      case CLASS_DEMONESS:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            if (!CheckInventory("Hexen2TomeOfPower"))
            {
                GiveInventory("Hexen2TomeOfPower", 1);
                result = 1;
            } else if (CheckInventory("Hexen2TomeOfPowerCooldown")) {
                GiveInventory("Hexen2TomeOfPower", 1);
                result = 1;
            }
            break;

          case SLOT_UNIQUE2:
            if (CheckInventory("Hexen2ForceCube") < 20)
            {
                GiveInventory("Hexen2ForceCube", startmode <= -1 ? 20 : 1); // I don't think 20's needed for LMS, but just in case
                result = 1;
            }
            break;
        }
        break;

      case CLASS_BOND:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            duallimited = duallimiting && CheckInventory("Goldeneye_SniperLevelLimiter");

            if (!CheckInventory("Goldeneye_SniperRifle"))
            {
                GiveInventory("Goldeneye_SniperRifle", 1);
                GiveInventory("Shell", 5); // bonus ammo

                if (!CheckInventory("Goldeneye_SniperDualToken") && dualgiveboth)
                {
                    GiveInventory("Goldeneye_SniperDualToken", 1);
                    GiveInventory("Shell", 5);
                    GiveInventory("Shell", 5); // bonus ammo
                }

                if (duallimiting) { GiveInventory("Goldeneye_SniperLevelLimiter", 1); }
                result = 1;
            } else if (!CheckInventory("Goldeneye_SniperDualToken") && !duallimited) {
                GiveInventory("Goldeneye_SniperDualToken", 1);
                GiveInventory("Shell", 5);
                GiveInventory("Shell", 5); // bonus ammo
                if (duallimiting) { GiveInventory("Goldeneye_SniperLevelLimiter", 1); }
                result = 1;
            } else if (CheckInventory("Shell") < GetAmmoCapacity("Shell")) {
                GiveInventory("Shell", 5);
                GiveInventory("Shell", 5); // bonus ammo
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("Shell", GetAmmoCapacity("Shell")); }
            break;

          case SLOT_UNIQUE2:
            hasweapon = CheckInventory("Goldeneye_SilencedD5K") || CheckInventory("Goldeneye_ZMG") || CheckInventory("Goldeneye_D5KDeutsche");
            hasdualtoken = CheckInventory("Goldeneye_D5KDualToken");
            duallimited = duallimiting && CheckInventory("Goldeneye_D5KLevelLimiter");

            if (loadoutchoice <= 0 || completeloadout) // D5K Deutsche (Silenced)
            {
                if (!hasweapon)
                {
                    GiveInventory("Goldeneye_SilencedD5K", 1);
                    GiveInventory("Clip", dmextraammo ? 30 * 5 / 2 : 30);
                    GiveInventory("Clip", 10); // bonus ammo

                    if (!hasdualtoken && dualgiveboth)
                    {
                        GiveInventory("Goldeneye_D5KDualToken", 1);
                        GiveInventory("Clip", 10);
                        GiveInventory("Clip", 10); // bonus ammo
                    }

                    if (duallimiting) { GiveInventory("Goldeneye_D5KLevelLimiter", 1); }
                    result = 1;
                } else if (!hasdualtoken && !duallimited) {
                    GiveInventory("Goldeneye_D5KDualToken", 1);
                    GiveInventory("Clip", 10);
                    GiveInventory("Clip", 10); // bonus ammo
                    if (duallimiting) { GiveInventory("Goldeneye_D5KLevelLimiter", 1); }
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip")) {
                    GiveInventory("Clip", 10);
                    GiveInventory("Clip", 10); // bonus ammo
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("Clip", GetAmmoCapacity("Clip")); }
            }

            if (loadoutchoice == 1 || completeloadout) // ZMG
            {
                if (!hasweapon)
                {
                    GiveInventory("Goldeneye_ZMG", 1);
                    GiveInventory("Clip", dmextraammo ? 32 * 5 / 2 : 32);
                    GiveInventory("Clip", 10); // bonus ammo

                    if (!hasdualtoken && dualgiveboth)
                    {
                        GiveInventory("Goldeneye_D5KDualToken", 1);
                        GiveInventory("Clip", 10);
                        GiveInventory("Clip", 10); // bonus ammo
                    }

                    if (duallimiting) { GiveInventory("Goldeneye_D5KLevelLimiter", 1); }
                    result = 1;
                } else if (!hasdualtoken && !duallimited) {
                    GiveInventory("Goldeneye_D5KDualToken", 1);
                    GiveInventory("Clip", 10);
                    GiveInventory("Clip", 10); // bonus ammo
                    if (duallimiting) { GiveInventory("Goldeneye_D5KLevelLimiter", 1); }
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip")) {
                    GiveInventory("Clip", 10);
                    GiveInventory("Clip", 10); // bonus ammo
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("Clip", GetAmmoCapacity("Clip")); }
            }

            if (loadoutchoice >= 2 || completeloadout) // D5K Deutsche
            {
                if (!hasweapon)
                {
                    GiveInventory("Goldeneye_D5KDeutsche", 1);
                    GiveInventory("Clip", dmextraammo ? 30 * 5 / 2 : 30);
                    GiveInventory("Clip", 10); // bonus ammo

                    if (!hasdualtoken && dualgiveboth)
                    {
                        GiveInventory("Goldeneye_D5KDualToken", 1);
                        GiveInventory("Clip", 10);
                        GiveInventory("Clip", 10); // bonus ammo
                    }

                    if (duallimiting) { GiveInventory("Goldeneye_D5KLevelLimiter", 1); }
                    result = 1;
                } else if (!hasdualtoken && !duallimited) {
                    GiveInventory("Goldeneye_D5KDualToken", 1);
                    GiveInventory("Clip", 10);
                    GiveInventory("Clip", 10); // bonus ammo
                    if (duallimiting) { GiveInventory("Goldeneye_D5KLevelLimiter", 1); }
                    result = 1;
                } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip")) {
                    GiveInventory("Clip", 10);
                    GiveInventory("Clip", 10); // bonus ammo
                    result = 1;
                }

                if (startmode <= -1) { GiveInventory("Clip", GetAmmoCapacity("Clip")); }
            }
            break;

          case SLOT_UNIQUE3:
            hasweapon = CheckInventory("Goldeneye_WatchMagnet") && CheckInventory("Goldeneye_WatchLaser") && CheckInventory("Goldeneye_WatchDetonator") &&
                        CheckInventory("Goldeneye_TimedMines") && CheckInventory("Goldeneye_ProximityMines") && CheckInventory("Goldeneye_RemoteMines");

            if (!hasweapon)
            {
                GiveInventory("Goldeneye_GadgetGranter", 1);
                result = 1;
            } else if (CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) {
                GiveInventory("Goldeneye_GadgetGranter", 1);
                result = 1;
            }

            if (startmode <= -1) { GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo")); }
            break;
        }
        break;

      case CLASS_PAINKILLER:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            if (startmode <= -1)
            {
                GiveInventory("Painkiller_SoulCatcher", 1);
                GiveInventory("Painkiller_GoldMagnet", 1);
                GiveInventory("Painkiller_SoulRedeemer", 1);
                GiveInventory("Painkiller_DarkSoul", 1);
                GiveInventory("Painkiller_Blessing", 1);
                GiveInventory("Painkiller_Replenish", 1);
                GiveInventory("Painkiller_Forgiveness", 1);
                GiveInventory("Painkiller_Mercy", 1);
                GiveInventory("Painkiller_LastBreath", 1);
                GiveInventory("Painkiller_HealthStealer", 1);
                GiveInventory("Painkiller_HealthRegeneration", 1);
                GiveInventory("Painkiller_ArmorRegeneration", 1);
                GiveInventory("Painkiller_Fear", 1);
                GiveInventory("Painkiller_666Ammo", 1);
                result = 1;
            } else {
                GiveInventory("Painkiller_Tarot_SilverGiver", 1);
                result = 1;
            }
            break;
        }
        break;

      case CLASS_RTCW:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE3:
            hasweapon = CheckInventory("RTCW_Colt") && CheckInventory("RTCW_Pineapple") && CheckInventory("RTCW_Thompson") &&
                        CheckInventory("RTCW_Snooper");

            if (!hasweapon)
            {
                GiveInventory("RTCW_AlliedCrate", 1);
                result = 1;
            } else if (CheckInventory("RTCW_AlliedAmmo3") < GetAmmoCapacity("RTCW_AlliedAmmo3") || CheckInventory("RTCW_AlliedAmmo1") < GetAmmoCapacity("RTCW_AlliedAmmo1") || CheckInventory("RTCW_AlliedAmmo2") < GetAmmoCapacity("RTCW_AlliedAmmo2")) {
                GiveInventory("RTCW_AlliedCrate", 1);
                result = 1;
            }

            if (startmode <= -1)
            {
                GiveInventory("RTCW_AlliedAmmo1", GetAmmoCapacity("RTCW_AlliedAmmo1"));
                GiveInventory("RTCW_AlliedAmmo2", GetAmmoCapacity("RTCW_AlliedAmmo2"));
                GiveInventory("RTCW_AlliedAmmo3", GetAmmoCapacity("RTCW_AlliedAmmo3"));
                GiveInventory("RTCW_AlliedAmmo4", GetAmmoCapacity("RTCW_AlliedAmmo4"));
            }
            break;
        }
        break;

      case CLASS_DESCENT:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE1:
            if (!CheckInventory("DescentPlasma"))
            {
                GiveInventory("DescentPlasma", 1);
                result = 1;
            } else if (CheckInventory("Clip") < GetAmmoCapacity("Clip") || CheckInventory("Shell") < GetAmmoCapacity("Shell")) {
                GiveInventory("DescentPlasma", 1);
                result = 1;
            }

            if (startmode <= -1)
            {
                GiveInventory("Clip", GetAmmoCapacity("Clip"));
                GiveInventory("Shell", GetAmmoCapacity("Shell"));
            }
            break;

          case SLOT_UNIQUE2:
            if (!CheckInventory("DescentPhoenix"))
            {
                GiveInventory("DescentPhoenix", 1);
                result = 1;
            } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell") || CheckInventory("Shell") < GetAmmoCapacity("Shell")) {
                GiveInventory("DescentPhoenix", 1);
                result = 1;
            }

            if (startmode <= -1)
            {
                GiveInventory("Cell", GetAmmoCapacity("Cell"));
                GiveInventory("Shell", GetAmmoCapacity("Shell"));
            }
            break;

          case SLOT_UNIQUE3:
            if (!CheckInventory("DescentQuadLaser"))
            {
                GiveInventory("DescentQuadLaser", 1);
                result = 1;
            }
            break;
        }
        break;

      case CLASS_DEUSEX:
        switch (unum)
        {
          default:
            result = -1;
            break;

          case SLOT_UNIQUE3:
            if (!CheckInventory("DeusEx_NanoSword"))
            {
                GiveInventory("DeusEx_NanoSword", 1);
                result = 1;
            }
            break;
        }
        break;
    }

    SetResultValue(result);
}

script "Samsara_GiveBackpack" (int startmode)
{
    // Current IWAD
    int currentiwad = GetCVar("samsara_currentgame");

    // Player number and player class
    int pln = PlayerNumber();
    int classnum = samsaraClassNum();

    // Alternate class
    int altclasschoice = 0;

    switch (classnum)
    {
      default:
        break;

      case CLASS_DOOM:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_doommode") : CheckInventory("DoomClassMode");

        if (altclasschoice > 2) { altclasschoice = 2; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      case CLASS_WOLFEN:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_wolfmode") : CheckInventory("WolfenClassMode");

        if (altclasschoice > 2) { altclasschoice = 2; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      case CLASS_HEXEN:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_hexclass") : CheckInventory("HexenClassMode");

        if (altclasschoice > 3) { altclasschoice = 3; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      case CLASS_DUKE:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_dukemode") : CheckInventory("DukeClassMode");

        if (altclasschoice > 2) { altclasschoice = 2; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      /*case CLASS_ROTT:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_rottmode") : CheckInventory("RottMode");

        if (altclasschoice > 4) { altclasschoice = 4; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;*/

      /*case CLASS_BLAKE:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_bsaog") : CheckInventory("BlakeAOGToken");

        if (altclasschoice > 1) { altclasschoice = 1; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;*/

      case CLASS_ERAD:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_eradmode") : CheckInventory("EradMode");

        if (altclasschoice > 3) { altclasschoice = 3; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;

      /*case CLASS_POGREED:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_ipogmode") : CheckInventory("IpogMode");

        if (altclasschoice > 4) { altclasschoice = 4; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;*/

      case CLASS_HALFLIFE:
        altclasschoice = startmode != 0 ? GetUserCVar(pln, "samsara_cl_shephardmode") : CheckInventory("HalfLifeOpposingForce");

        if (altclasschoice > 1) { altclasschoice = 1; }
        else if (altclasschoice < 0) { altclasschoice = 0; }
        break;
    }

    // Loadout
    int loadoutchoice = 0;

    switch (classnum)
    {
      default:
        break;

      case CLASS_CHEX:
        if (startmode != 0) { loadoutchoice = GetCVar("samsara_chex_fallbackranged") > 0 ? GetCVar("samsara_chex_fallbackranged") - 1 : GetUserCVar(pln, "samsara_cl_chex_fallbackranged"); }
        else { loadoutchoice = CheckInventory("SamsaraChexLoadoutFallbackRanged"); }
        break;
    }

    bool completeloadout = startmode != 0 ? GetCVar("samsara_allloadoutequipment") : CheckInventory("SamsaraHasAllLoadoutEquipment");

    // Extra weapons setting
    bool usingextraweapons = startmode != 0 ? GetCVar("samsara_extraweapons") : CheckInventory("SamsaraExtraWeaponsAreEnabled");

    // Extra ammo on first pickup in Doom deathmatch (amount * 5 / 2)
    bool dmextraammo = !isSinglePlayer() && !isCoop() && (currentiwad == GAME_DOOM || currentiwad == GAME_CHEX) && !GetCVar("sv_noextraammo");

    // Dual wield pickup mode checks
    int dualpickupmode = GetCVar("samsara_dualpickup");
    bool duallimiting = startmode == 0 && dualpickupmode <= 0;
    bool duallimited = false;
    bool dualgiveboth = startmode <= -1 || dualpickupmode == 3 || (dualpickupmode >= 4 && (!(isSinglePlayer() || isCoop()) || isInvasion()));

    // Start everything
    GiveInventory("SamsaraBackpacksInInventory", 1);
    HandleAmmoCapacities(1);

    switch (classnum)
    {
      default:
        GiveInventory("Backpack", 1);
        break;

      case CLASS_DOOM:
        int curmines = CheckInventory("DoomguyStrMines");
        int curgas = CheckInventory("DoomguyStrGas");

        switch (altclasschoice)
        {
          default: // Original/Doom 64
            GiveInventory("Backpack", 1);
            SetInventory("DoomguyStrMines", curmines); // leave our mines untouched because we cannot use them
            SetInventory("DoomguyStrGas", curgas); // ditto with gas
            break;

          case 2: // Stronghold
            GiveInventory("Backpack", 1);

            if (!usingextraweapons) // don't give these ammos if extra weapons is disabled
            {
                SetInventory("DoomguyStrMines", curmines);
                SetInventory("DoomguyStrGas", curgas);
            }
            break;
        }
        break;

      case CLASS_CHEX:
        GiveInventory("Backpack", 1);

        if (loadoutchoice <= 0 || completeloadout) { GiveInventory("Dual Mini-Zorchers", 1); } // Dual Mini-Zorchers
        if (loadoutchoice >= 1 || completeloadout) { GiveInventory("Dual Micro-Zorchers", 1); } // Dual Micro-Zorchers
        break;

      case CLASS_WOLFEN:
        switch (altclasschoice)
        {
          default: // Original/Lost Missions
            int curshells = CheckInventory("Shell");
            int curflamerfuel = CheckInventory("Totenkopf_FlameThrowerFuel");

            GiveInventory("Backpack", 1);
            GiveInventory("Clip", 8);
            SetInventory("Shell", curshells); // leave our shells untouched because we cannot use them
            SetInventory("Totenkopf_FlameThrowerFuel", curflamerfuel); // ditto with flamethrower fuel
            GiveInventory("Totenkopf_IHaveDualPistols", 1);
            break;

          case 2: // Castle Totenkopf SDL
            GiveInventory("Backpack", 1);
            GiveInventory("Totenkopf_PistolDual", 1);
            GiveInventory("Totenkopf_IHaveDualPistols", 1);
            break;
        }
        break;

      case CLASS_HEXEN:
        switch (altclasschoice)
        {
          default: // Parias (Reincarnation)/Daedolon/Baratus
            GiveInventory("PortKraterOfMight", 1);
            GiveInventory("SamsaraClassicPariasHasSpikedGauntlet", 1);
            break;

          case 1: // Parias (Classic)
            GiveInventory("PortKraterOfMight", 1);
            GiveInventory("Spiked Gauntlet", 1);
            GiveInventory("SamsaraClassicPariasHasSpikedGauntlet", 1);
            break;
        }
        break;

      case CLASS_DUKE:
        switch (altclasschoice)
        {
          default: // Original/Life's a Beach
            GiveInventory("Backpack", 1);
            break;

          case 2: // Duke Nukem 64
            int curshrinkerammo = CheckInventory("ShrinkerAmmo");
            int curexpanderammo = CheckInventory("ExpanderAmmo");

            GiveInventory("Backpack", 1);
            SetInventory("ShrinkerAmmo", curshrinkerammo); // leave our duke 3D shrinker ammo untouched because we cannot use it
            SetInventory("ExpanderAmmo", curexpanderammo); // ditto with duke 3D expander ammo

            if (startmode >= 0) // do not give in LMS
            {
                GiveInventory("Duke64DumDums", 6);
                GiveInventory("Duke64ExplosiveShells", 2);
                GiveInventory("Duke64HeatSeekingRockets", 3);
                GiveInventory("Duke64ShrinkerAmmo", 2);
            }
            break;
        }
        break;

      case CLASS_MARATHON:
        GiveInventory("Backpack", 1);
        GiveInventory("Talon Ceramic Combat Blade", 1);
        GiveInventory("Tech.50 Pacifier", 1);

        if (startmode <= -1) { GiveInventory("KnifeAmmo", GetAmmoCapacity("KnifeAmmo")); }
        break;

      case CLASS_QUAKE:
        int curlavanails = CheckInventory("LavaNails");
        int curmultirockets = CheckInventory("MultiRocketAmmo");
        int curplasmacells = CheckInventory("PlasmaCell");

        GiveInventory("Backpack", 1);

        if (GetCVar("samsara_vanillaquake")) // don't give these ammos if doe ammo is disabled
        {
            SetInventory("LavaNails", curlavanails);
            SetInventory("MultiRocketAmmo", curmultirockets);
            SetInventory("PlasmaCell", curplasmacells);
        }
        break;

      case CLASS_KATARN:
        GiveInventory("Backpack", 1);
        GiveInventory("Palandrix Stun Gauntlets", 1);
        break;

      case CLASS_DEMONESS:
        GiveInventory("PortKraterOfMight2", 1);
        break;

      case CLASS_BOND:
        GiveInventory("Backpack", 1);
        GiveInventory("Goldeneye_PP7DualToken", 1);
        break;

      case CLASS_CATACOMB:
        GiveInventory("Catacomb_Waves", Random(1, 2));
        GiveInventory("Catacomb_XTerminators", Random(1, 2));
        GiveInventory("Catacomb_Nukes", Random(1, 2));
        GiveInventory("Catacomb_Bolts", Random(1, 2));
        GiveInventory("Catacomb_Zappers", Random(1, 2));
        GiveInventory("Catacomb_Bursts", Random(1, 2));

        if (startmode >= 0) // do not give in LMS
        {
            int bluepotionmax = 99;

            bool canbluepotion = CheckInventory("Catacomb_SmallHealthPotion") < bluepotionmax ||
                                 (GetCVar("samsara_cl_maxedinventoryhealthpickup") >= 2 && GetActorProperty(0, APROP_Health) < ACS_NamedExecuteWithResult("SamsaraPlayerHealer", -1)) ||
                                 GetCVar("samsara_nohealthcap");

            if (canbluepotion)
            {
                for (int bluepotionloops = Random(1, 2); bluepotionloops > 0; bluepotionloops--)
                {
                    if (CheckInventory("Catacomb_SmallHealthPotion") >= bluepotionmax &&
                        (GetCVar("samsara_cl_maxedinventoryhealthpickup") <= 1 || GetActorProperty(0, APROP_Health) >= ACS_NamedExecuteWithResult("SamsaraPlayerHealer", -1)) &&
                        !GetCVar("samsara_nohealthcap"))
                    { break; }

                    if ((CheckInventory("Catacomb_SmallHealthPotion") >= bluepotionmax && GetCVar("samsara_cl_maxedinventoryhealthpickup") >= 2 && GetActorProperty(0, APROP_Health) < ACS_NamedExecuteWithResult("SamsaraPlayerHealer", -1)) ||
                        GetCVar("samsara_nohealthcap"))
                    { ACS_NamedExecuteWithResult("SamsaraPlayerHealer", 25); }
                    else { GiveInventory("Catacomb_SmallHealthPotion", 1); }
                }
            }
        }
        break;

      case CLASS_PAINKILLER:
        GiveInventory("Backpack", 1);
        GiveInventory("Clip", 35);
        GiveInventory("Painkiller_FlamerAmmo", 10);
        GiveInventory("Shell", 8);
        GiveInventory("Painkiller_FreezerAmmo", 1);
        GiveInventory("RocketAmmo", 5);
        GiveInventory("Painkiller_HeaterAmmo", 20);
        GiveInventory("Cell", 10);
        GiveInventory("Painkiller_ElectroAmmo", 20);

        if (CheckInventory("Painkiller_Replenish_Power"))
        {
            GiveInventory("Backpack", 1);
            GiveInventory("Clip", 35);
            GiveInventory("Painkiller_FlamerAmmo", 10);
            GiveInventory("Shell", 8);
            GiveInventory("Painkiller_FreezerAmmo", 1);
            GiveInventory("RocketAmmo", 5);
            GiveInventory("Painkiller_HeaterAmmo", 20);
            GiveInventory("Cell", 10);
            GiveInventory("Painkiller_ElectroAmmo", 20);
        }
        break;

      case CLASS_UNREAL:
        GiveInventory("Backpack", 1);

        if (CheckInventory("UDPistolUpgrade") < 4)
        {
            GiveInventory("UDPistolUpgrade", startmode <= -1 ? 4 : 1);

            if (startmode != 0) { SetInventory("UDPistolUpgradePreferred", CheckInventory("UDPistolUpgrade")); }
            else { GiveInventory("UnrealDoUpgradeRevert", 1); }

            GiveInventory("UnrealRevertDirection", 1);
        }

        if (startmode <= -1)
        {
            if (GetAmmoCapacity("DPistolAmmo") != 60 + (CheckInventory("UDPistolUpgrade") * 10)) { SetAmmoCapacity("DPistolAmmo", 60 + (CheckInventory("UDPistolUpgrade") * 10)); }

            GiveInventory("DPistolAmmo", GetAmmoCapacity("DPistolAmmo") - CheckInventory("DPistolAmmo"));
        }
        break;

      case CLASS_QUAKE3:
        GiveInventory("Q3AmmoRegenerationDummy", 1);
        break;

      case CLASS_DESCENT:
        GiveInventory("Backpack", 1);
        GiveInventory("DescentLaserLevel", startmode <= -1 ? 5 : 1);
        if (CheckInventory("DescentLaserLevel") >= 4 && !CheckInventory("DescentPrimaryCounter")) { GiveInventory("DescentPrimaryCounter", 1); }
        break;

      case CLASS_DEUSEX:
        GiveInventory("Backpack", 1);
        GiveInventory("Backpack", 1);
        GiveInventory("Clip", 20);
        GiveInventory("RocketAmmo", 3);

        if (startmode <= -1)
        {
            GiveInventory("DeusEx_Augmentation_CombatStrength", 4);
            GiveInventory("DeusEx_Augmentation_MicrofibralMuscle", 4);
            GiveInventory("DeusEx_Augmentation_SpeedEnhancement", 4);
            GiveInventory("DeusEx_Augmentation_RunSilent", 4);
            GiveInventory("DeusEx_Augmentation_BallisticProtection", 4);
            GiveInventory("DeusEx_Augmentation_EMPShield", 4);
            GiveInventory("DeusEx_Augmentation_Cloak", 4);
            GiveInventory("DeusEx_Augmentation_Repulsor", 4);
            GiveInventory("DeusEx_Augmentation_EnergyShield", 4);
            GiveInventory("DeusEx_Augmentation_EnvironmentalResistance", 4);
            GiveInventory("DeusEx_Augmentation_Regeneration", 4);
            GiveInventory("DeusEx_Augmentation_Maintenance", 4);
            GiveInventory("DeusEx_Augmentation_PowerRecirculator", 4);
            GiveInventory("DeusEx_Augmentation_RechargeableBattery", 4);
            GiveInventory("DeusEx_Augmentation_SpyDrone", 4);
            GiveInventory("DeusEx_Augmentation_AggressiveDefenseSystem", 4);
            GiveInventory("DeusEx_Augmentation_VisionEnhancement", 4);
            GiveInventory("DeusEx_Augmentation_Targeting", 4);
            GiveInventory("DeusEx_Augmentation_InfoLink", 1);
            GiveInventory("DeusEx_Augmentation_IFF", 1);
            GiveInventory("DeusEx_Augmentation_Light", 1);
            GiveInventory("DeusEx_AugmentationUpgradeCannister", 99);
            GiveInventory("DeusEx_AugmentationBioEnergyCell", 99);
            if (!CheckInventory("DeusEx_Augmentation_ArmsSlot")) { GiveInventory("DeusEx_Augmentation_ArmsSlot", 1); }
            if (!CheckInventory("DeusEx_Augmentation_LegsSlot")) { GiveInventory("DeusEx_Augmentation_LegsSlot", 1); }
            if (!CheckInventory("DeusEx_Augmentation_Subdermal1Slot")) { GiveInventory("DeusEx_Augmentation_Subdermal1Slot", 1); }
            if (!CheckInventory("DeusEx_Augmentation_Subdermal2Slot")) { GiveInventory("DeusEx_Augmentation_Subdermal2Slot", 1); }
            if (!CheckInventory("DeusEx_Augmentation_Torso1Slot")) { GiveInventory("DeusEx_Augmentation_Torso1Slot", 1); }
            if (!CheckInventory("DeusEx_Augmentation_Torso2Slot")) { GiveInventory("DeusEx_Augmentation_Torso2Slot", 1); }
            if (!CheckInventory("DeusEx_Augmentation_Torso3Slot")) { GiveInventory("DeusEx_Augmentation_Torso3Slot", 1); }
            if (!CheckInventory("DeusEx_Augmentation_CranialSlot")) { GiveInventory("DeusEx_Augmentation_CranialSlot", 1); }
            if (!CheckInventory("DeusEx_Augmentation_EyeSlot")) { GiveInventory("DeusEx_Augmentation_EyeSlot", 1); }
        }
        else { ACS_NamedExecuteWithResult("DeusEx_Decorate", 23); }

        GiveInventory("DeusEx_StealthPistol", 1);
        GiveInventory("DeusEx_LAM", 1);

        if (startmode <= -1) { GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo")); }
        break;
    }
}

//======================================================================================================================
//											Spawn Slots that respawn in the map
//======================================================================================================================

Script "Samsara_SpawnSlot" (int slot, int toss)
{
	int newTid = UniqueTid();
	str slotweapon;
	switch(slot)
	{
		case 1: slotweapon = "SamsaraSlotOnePickup"; break;
		case 2: slotweapon = "SamsaraSlotTwoPickup"; break;
		case 3: slotweapon = "SamsaraSlotThreePickup"; break;
		case 4: slotweapon = "SamsaraSlotFourPickup"; break;
		case 5: slotweapon = "SamsaraSlotFivePickup"; break;
		case 6: slotweapon = "SamsaraSlotSixPickup"; break;
		case 7: slotweapon = "SamsaraSlotSevenPickup"; break;
	}
	SpawnSpotFacingForced(slotweapon,0,newTid);
	SetActorProperty(newTid,APROP_Dropped,GetActorProperty(0,APROP_Dropped));
	if(toss) SetActorVelocity(newTid,random(-4.0,4.0),random(-4.0,4.0),0,0,0);
	Thing_ChangeTid(newTid,0);
}

//======================================================================================================================
//											Optional Skulltag pickups for slots
//======================================================================================================================

script "Samsara_SpawnSlotSkulltag" (int slot, int toss)
{
    if (CheckInventory("SamsaraSlotSkulltagSpawnChecked") || CheckInventory("SamsaraItemReplaced")) { terminate; }

	int newTid = UniqueTid();
	int skulltagSpawned = 0;
	str slotweapon;
	switch(slot)
	{
		case 1: slotweapon = "SamsaraSlotFourSkulltagPickup"; break;
		case 2: slotweapon = "SamsaraSlotFiveSkulltagPickup"; break;
		case 3: slotweapon = "SamsaraSlotSixSkulltagPickup"; break;
		case 4: slotweapon = "SamsaraSlotSevenSkulltagPickup"; break;
	}

	if(random(1,100) <= (GetCvar("samsara_skulltagspawn")))
	{
		skulltagSpawned = 1;
		SpawnSpotFacingForced(slotweapon,0,newTid);
		SetActorFlag(newTid, "DROPPED", false);
	}

	SetActorProperty(newTid,APROP_Dropped,GetActorProperty(0,APROP_Dropped));

    GiveInventory("SamsaraSlotSkulltagSpawnChecked", 1);

	if (skulltagSpawned)
	{
		if (GetCvar("samsara_skulltagreplace"))
		{
			Thing_Remove(0);
		}
		else
		{
			if(toss) SetActorVelocity(newTid,random(-4.0,4.0),random(-4.0,4.0),0,0,0);
		}

		Thing_ChangeTid(newTid,0);
	}
}

//======================================================================================================================
//                                            Spawn Slots that are dropped
//======================================================================================================================

script "Samsara_SpawnSlotDropped" (int slot, int droptype, int standing)
{
    int newTID = UniqueTID();
    str slotweapon = "Placeholder";

    bool hasCountItem = CheckFlag(0, "COUNTITEM");
    bool hasDropped = CheckFlag(0, "DROPPED");
    bool hasNeverRespawn = CheckFlag(0, "NEVERRESPAWN");
    bool hasNoGravity = CheckFlag(0, "NOGRAVITY");
    bool hasTossed = CheckFlag(0, "TOSSED");

    if (droptype)
    {
        switch (slot)
        {
          case SLOT_FIST: slotweapon = "SamsaraFallbackMeleeDrop"; break;
          case SLOT_CHAINSAW: slotweapon = "SamsaraSlotOneDrop"; break;
          case SLOT_PISTOL: slotweapon = "SamsaraFallbackRangedDrop"; break;
          case SLOT_SHOTGUN: slotweapon = "SamsaraSlotTwoDrop"; break;
          case SLOT_SUPERSHOTGUN: slotweapon = "SamsaraSlotThreeDrop"; break;
          case SLOT_CHAINGUN:
            if (standing) { slotweapon = "SamsaraSlotFourDropStanding"; }
            else { slotweapon = "SamsaraSlotFourDrop"; }
            break;
          case SLOT_MINIGUN: slotweapon = "SamsaraSlotFourSkulltagDrop"; break;
          case SLOT_ROCKETLAUNCHER: slotweapon = "SamsaraSlotFiveDrop"; break;
          case SLOT_GRENADELAUNCHER: slotweapon = "SamsaraSlotFiveSkulltagDrop"; break;
          case SLOT_PLASMARIFLE: slotweapon = "SamsaraSlotSixDrop"; break;
          case SLOT_RAILGUN: slotweapon = "SamsaraSlotSixSkulltagDrop"; break;
          case SLOT_BFG9000: slotweapon = "SamsaraSlotSevenDrop"; break;
          case SLOT_BFG10K: slotweapon = "SamsaraSlotSevenSkulltagDrop"; break;
        }
    } else {
        switch (slot)
        {
          case SLOT_FIST: slotweapon = "SamsaraFallbackMeleeNoStay"; break;
          case SLOT_CHAINSAW: slotweapon = "SamsaraSlotOneNoStay"; break;
          case SLOT_PISTOL: slotweapon = "SamsaraFallbackRangedNoStay"; break;
          case SLOT_SHOTGUN: slotweapon = "SamsaraSlotTwoNoStay"; break;
          case SLOT_SUPERSHOTGUN: slotweapon = "SamsaraSlotThreeNoStay"; break;
          case SLOT_CHAINGUN:
            if (standing) { slotweapon = "SamsaraSlotFourNoStayStanding"; }
            else { slotweapon = "SamsaraSlotFourNoStay"; }
            break;
          case SLOT_MINIGUN: slotweapon = "SamsaraSlotFourSkulltagNoStay"; break;
          case SLOT_ROCKETLAUNCHER: slotweapon = "SamsaraSlotFiveNoStay"; break;
          case SLOT_GRENADELAUNCHER: slotweapon = "SamsaraSlotFiveSkulltagNoStay"; break;
          case SLOT_PLASMARIFLE: slotweapon = "SamsaraSlotSixNoStay"; break;
          case SLOT_RAILGUN: slotweapon = "SamsaraSlotSixSkulltagNoStay"; break;
          case SLOT_BFG9000: slotweapon = "SamsaraSlotSevenNoStay"; break;
          case SLOT_BFG10K: slotweapon = "SamsaraSlotSevenSkulltagNoStay"; break;
        }
    }

    SpawnForced(slotweapon, GetActorX(0), GetActorY(0), GetActorZ(0), newTID, GetActorAngle(0));
    SetActorVelocity(newTID, GetActorVelX(0), GetActorVelY(0), GetActorVelZ(0), false, false);

    if (hasDropped) { GiveActorInventory(newTID, "SamsaraDroppedEnabler", 1); }
    else { GiveActorInventory(newTID, "SamsaraDroppedDisabler", 1); }

    if (hasTossed) { GiveActorInventory(newTID, "SamsaraTossedEnabler", 1); }
    else { GiveActorInventory(newTID, "SamsaraTossedDisabler", 1); }

    if (hasTossed) { GiveActorInventory(newTID, "SamsaraCountItemDisabler", 1); } // precautionary
    else if (hasCountItem) { GiveActorInventory(newTID, "SamsaraCountItemEnabler", 1); }

    if (hasNeverRespawn) { GiveActorInventory(newTID, "SamsaraNeverRespawnEnabler", 1); }

    if (hasTossed) { GiveActorInventory(newTID, "SamsaraNoGravityDisabler", 1); } // precautionary
    else if (hasNoGravity) { GiveActorInventory(newTID, "SamsaraNoGravityEnabler", 1); }

    if (CheckInventory("SamsaraItemReplaced")) { GiveActorInventory(newTID, "SamsaraItemReplaced", 1); } // allow items replaced by slot 7/7S to continue being slot 7/7S

    GiveInventory("SamsaraCountItemDisabler", 1); // precautionary
    Thing_Remove(0);
    Thing_ChangeTid(newTID, 0);
}

//======================================================================================================================
//													Player Shrinker
//======================================================================================================================

Script "Samsara_PlayerShrinker" (int condition)
{
	if(!condition)
	{
		if(CheckInventory("ShrunkPlayer"))
			terminate;

		int shrinktimer;
		int activatorstid = ActivatorTid();
		int usertid = UniqueTid();
		int dummytid = UniqueTid();
		int ScaleX = GetActorProperty(0,APROP_ScaleX);
		int ScaleY = GetActorProperty(0,APROP_ScaleY);
		int shrunkenscalex = FixedMul(ScaleX,0.2);
		int shrunkenscaley = FixedMul(ScaleY,0.2);
		int viewheight = GetActorProperty(0,APROP_ViewHeight);
		GiveInventory("ShrunkPlayer",1);
		SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
		for(int a = 0; a < 10; a++)
		{
			SetActorProperty(0,APROP_ViewHeight,FixedMul(viewheight,1.0-(a*0.08)));
			Delay(2);
		}
		Delay(1);
		SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
		int pln = PlayerNumber();

		//Translation helper, because the flag isn't valid
		SpawnSpotForced("TranslationDummy",0,dummytid,0);
		Thing_SetTranslation(dummytid, -1);
		Thing_ChangeTid(0, usertid);
		SetActivator(dummytid, AAPTR_Default);
		MorphActor(usertid,strparam(s:ClassNames[PlayerClass(pln)][0],s:"_Shrink"),"Zombieman3",525,MRF_ADDSTAMINA|MRF_FULLHEALTH|MRF_UNDOBYTOMEOFPOWER|MRF_LOSEACTUALWEAPON|MRF_NEWTIDBEHAVIOUR,"ShrinkFlash","ShrinkFlash");
		Thing_SetTranslation(usertid, -1);
		SetActivator(usertid, AAPTR_Default);
		Thing_ChangeTid(usertid, activatorstid);
		Thing_Remove(dummytid);

		SetActorProperty(0,APROP_ScaleX,shrunkenscalex);
		SetActorProperty(0,APROP_ScaleY,shrunkenscaley);

		while (shrinktimer <= 420 && !CheckInventory("DukeSteroidsActive"))
		{
			if ((ClassifyActor(0) & ACTOR_DEAD) || !CheckInventory("ShrunkPlayer"))
				terminate;

			Delay(1);

			shrinktimer++;
		}
		TakeInventory("ShrunkPlayer",1);
		int newtid = UniqueTid();
		if(!Spawn(ClassNames[PlayerClass(pln)][0],GetActorX(0),GetActorY(0),GetActorZ(0),newtid))
		{
			Thing_Damage2(0,500000000000,"Explosive");
		}
		else
		{
			Thing_Remove(newtid);
		}
		if((ClassifyActor(0) & ACTOR_DEAD))
			terminate;

		SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
		for(a = 0; a < 10; a++)
		{
			SetActorProperty(0,APROP_ScaleX,shrunkenscalex+(FixedMul(ScaleX,0.1)*a));
			SetActorProperty(0,APROP_ScaleY,shrunkenscaley+(FixedMul(ScaleY,0.1)*a));
			SetActorProperty(0,APROP_ViewHeight,FixedMul(viewheight,0.28+(a*0.08)));
			Delay(2);
		}
		UnMorphActor(0,1);
		SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
		SetActorProperty(0,APROP_ViewHeight,viewheight);
		SetActorProperty(0,APROP_ScaleX,ScaleX);
		SetActorProperty(0,APROP_ScaleY,ScaleY);
        GiveInventory("SamsaraNoPainDisabler", 1);
        GiveInventory("SamsaraNoDamageDisabler", 1);
	}
	else
	{
		SetResultValue(ClassifyActor(0) & ACTOR_PLAYER);
	}
}

//======================================================================================================================
//								Cvar GZDoom checker - Somewhat redundant over IsThisZandro
//======================================================================================================================

Script "Samsara_GZDoomChecker" (void)
{
	if(GetCvar("samsara_runninginzdoom"))
		SetResultValue(1);

	else
		SetResultValue(0);
}

//======================================================================================================================
//												Taunt Button for GZDoom
//======================================================================================================================

script "TauntButton" (void) NET CLIENTSIDE
{
    if (!GetCVar("samsara_runninginzdoom") && GetCVar("samsara_runninginzandro")) { ConsoleCommand("taunt"); }
    else
    {
        if (!isDead(0) && GameType() != GAME_TITLE_MAP) { PlaySound(0, "*taunt", CHAN_VOICE); }
    }
}

//======================================================================================================================
//Resonate. This creates the effect of a counter going up or down at an erratic rate, like Marathon's alien weapons.
//======================================================================================================================
script "SamsaraResonate" (int which, int frequency) clientside //608
{
	if (which < 0 || which >= RESCOUNT) { Log(s:"\caERROR\c- (minor): Attempted to resonate with invalid index (", d:which, s:")"); terminate; }

	int pln = PlayerNumber();
	int locktime = Timer();

	int item = ResonantItems[which];
	int low  = ResonantAmounts[which][0];
	int high = ResonantAmounts[which][1];

	if (high <= -1) { high = GetAmmoCapacity(item); }

	if (frequency == 0) { Log(s:"\caERROR\c-: Attempted to resonate item \"", s:item, s:"\" with frequency of 0"); terminate; }
	frequency = abs(frequency);

	int resPosition = random(low, high);
	int resNextPos = resPosition;
	int resAmplitude = 0;
	int resIndex = 0;
	int resTimer;
	int resonance;

	ResonantTimes[pln][which] = locktime;

	while (ResonantTimes[pln][which] == locktime)
	{
		if (abs(resPosition - resNextPos) <= 2) { resPosition = resNextPos; }
		else { resPosition += (resNextPos - resPosition) / 3; }

		if (resAmplitude == 0) { resTimer = 0; }

		if (resTimer == 0)
		{
			resAmplitude += random(1.0, 20.0);
			resTimer = random(1, 70);
			resNextPos = random(low, high);
		}

		resonance = FixedMul(resAmplitude, sin(itof(resIndex) / frequency)) + itof(resPosition);
		resAmplitude = max(0, resAmplitude - 0.5);

		TakeInventory(item, 0x7FFFFFFF);
		GiveInventory(item, ftoi(resonance));

		Delay(1);
		resTimer--;
		resIndex++;
		resIndex %= (frequency * 100);
	}
}

//======================================================================================================================
//														Other
//======================================================================================================================

Script "Samsara_PlayerFreezeTranslation" (void)
{
	//SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
	CreateTranslation(7680, 0:255=%[0.078,0.062,0.140]:[1.16,1.16,1.348]);
	Thing_SetTranslation(0,7680);
}

Script "ExtraDeathFX" (int mode) // Samsara Extra Death Special Effects -- 2530
{
	Switch(mode)
	{
		Case 1:
			SetActorProperty(0, APROP_RenderStyle, STYLE_TRANSLUCENTSTENCIL);
			SetActorProperty(0, APROP_StencilColor, 0x000000);
			break;
		Case 2:
			SetActorProperty(0, APROP_RenderStyle, STYLE_OptFuzzy);
			ThrustThingZ(0,5,0,0);
			break;
	}
}

Script "SamsaraDeathEffects" (int type)
{
	// Determine the size of the actor that we want to spawn
	int xScale = (GetActorProperty(0,APROP_Radius)/20);
	int yScale = (GetActorProperty(0,APROP_Height)/14); // It should be 56, but for some reason, this value is divided by 4 during calculations.

	// Get the coordinates of the killed actor
	int xPosition = GetActorX(0);
	int yPosition = GetActorY(0);
	int zPosition = GetActorZ(0);

	int i;
	int effectTid = UniqueTid();
	int iceTid = UniqueTid();

	// Get the pain or death sounds of the killed actor if needed
	str voice;

	// Determines the amount of ice chunks for the killed actor
	int numChunks = max(4, ((xScale/1.0) * (yScale/1.0)/32));

	// Translation to apply to the killed actor if needed
	CreateTranslation(7600, 0:255=0:255);	// Untranslated
	CreateTranslation(7601, 0:255=%[0,0,0]:[0,0,0]);	// Disintegration Translation
	CreateTranslation(7602, 0:255=%[0.078,0.062,0.140]:[1.16,1.16,1.348]);	// Zandronum Ice Translation

	// Debug call to ensure the function is called properly
	//PrintBold(s:"Monster X: ",d:xPosition >> 16,s:" Monster Y: ",d:yPosition >> 16,s:" Monster Z: ",d:zPosition >> 16,s:" TID: ",d:effectTid >> 16,s:" Activator: ",n:0);
	//PrintBold(s:"Effect XScale: ",d:xScale >> 16,s:" Effect YScale: ",d:yScale >> 16);
	//PrintBold(s:"Actor ", n:0, s:" is the activator of this function");

	switch (type)
	{
		// Chex Zorch Effect
		case 0:
			SpawnForced("ZorchEffectSmall", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, xScale);
			SetActorProperty(effectTid, APROP_ScaleY, yScale);
			break;
		// Chex Boss Zorch Effect
		case 1:
			SpawnForced("ZorchEffectHuge", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, xScale);
			SetActorProperty(effectTid, APROP_ScaleY, yScale);
			break;
		// Totenkopf Burning Guard
		case 2:
			SpawnForced("Totenkopf_BurningGuard", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, xScale);
			SetActorProperty(effectTid, APROP_ScaleY, yScale);

			// Play death or pain sound depending on what the actor has
			if(StrLen(GetActorProperty(0, APROP_DeathSound)) != 0)
			{
				voice = GetActorProperty(0, APROP_Deathsound);
				PlaySound(0, voice, CHAN_VOICE, 1.0, 0, ATTN_NORM);
			}
			else if(StrLen(GetActorProperty(0, APROP_PainSound)) != 0)
			{
				voice = GetActorProperty(0, APROP_Painsound);
				PlaySound(0, voice, CHAN_VOICE, 1.0, 0, ATTN_NORM);
			}
			break;
		// Marathon Burning Corpse
		case 3:
			SpawnForced("SamsaraMarathonBurningCorpse", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, (xScale/20)*9);
			SetActorProperty(effectTid, APROP_ScaleY, (yScale/20)*9);

			// Play death or pain sound depending on what the actor has
			if(StrLen(GetActorProperty(0, APROP_DeathSound)) != 0)
			{
				voice = GetActorProperty(0, APROP_Deathsound);
				PlaySound(0, voice, CHAN_VOICE, 1.0, 0, ATTN_NORM);
			}
			else if(StrLen(GetActorProperty(0, APROP_PainSound)) != 0)
			{
				voice = GetActorProperty(0, APROP_Painsound);
				PlaySound(0, voice, CHAN_VOICE, 1.0, 0, ATTN_NORM);
			}
			break;
		// ROTT Burning Skeleton
		case 4:
			SpawnForced("BurningSkeleton", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, (xScale/20)*13);
			SetActorProperty(effectTid, APROP_ScaleY, (yScale/20)*13);
			break;
		// ROTT Gibbed Human
		case 5:
			SpawnForced("RottGibbedMan", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, (xScale/20)*12);
			SetActorProperty(effectTid, APROP_ScaleY, (yScale/20)*12);
			break;
		// ROTT Gibbed Creature
		case 6:
			SpawnForced("RottGibbedCreature", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, (xScale/20)*12);
			SetActorProperty(effectTid, APROP_ScaleY, (yScale/20)*12);
			break;
		// ROTT Disintegrated Human
		case 7:
			SpawnForced("RGodModeDeath", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, (xScale/20)*13);
			SetActorProperty(effectTid, APROP_ScaleY, (yScale/20)*13);
			break;
		// ROTT Generic Disintegration Effect
		case 8:
			SpawnForced("RGodModeDeathSmall", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, (xScale/20)*7);
			SetActorProperty(effectTid, APROP_ScaleY, (yScale/20)*7);
			Thing_SetTranslation(0, 7601);
			break;
		// Strife Burning Human
		case 9:
			SpawnForced("StrifeBurningHuman", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, xScale);
			SetActorProperty(effectTid, APROP_ScaleY, yScale);

			// Play death or pain sound depending on what the actor has
			if(StrLen(GetActorProperty(0, APROP_DeathSound)) != 0)
			{
				voice = GetActorProperty(0, APROP_Deathsound);
				PlaySound(0, voice, CHAN_VOICE, 1.0, 0, ATTN_NORM);
			}
			else if(StrLen(GetActorProperty(0, APROP_PainSound)) != 0)
			{
				voice = GetActorProperty(0, APROP_Painsound);
				PlaySound(0, voice, CHAN_VOICE, 1.0, 0, ATTN_NORM);
			}
			break;
		// Strife Disintegrated Human
		case 10:
			SpawnForced("DisintEffectSmall", xPosition, yPosition, zPosition+10, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, xScale);
			SetActorProperty(effectTid, APROP_ScaleY, yScale);
			Thing_SetTranslation(0, 7601);
			break;
		// Witchaven Nuke Effect
		case 11:
			SpawnForced("WTNukeDeathSmall", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, (xScale/20)*2);
			SetActorProperty(effectTid, APROP_ScaleY, (yScale/20)*2);
			break;
		// Duke 64 Plasma Death Effect
		case 12:
			SpawnForced("Duke64PlasmaEffectSmall", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, (xScale/20)*12);
			SetActorProperty(effectTid, APROP_ScaleY, (yScale/20)*12);

			SetActorProperty(0, APROP_RenderStyle, STYLE_TranslucentStencil); Delay(3);
			SetActorProperty(0, APROP_Alpha, 0.8); Delay(5);
			SetActorProperty(0, APROP_Alpha, 0.6); Delay(5);
			SetActorProperty(0, APROP_Alpha, 0.8); Delay(4);
			SetActorProperty(0, APROP_Alpha, 1.0); Delay(5);
			SetActorProperty(0, APROP_Alpha, 0.8); Delay(5);
			SetActorProperty(0, APROP_Alpha, 0.6); Delay(3);
			break;
		// ROTT Boss Disintegration Effect
		case 13:
			SpawnForced("RGodModeDeathHuge", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, (xScale/20)*10);
			SetActorProperty(effectTid, APROP_ScaleY, (yScale/20)*10);
			Thing_SetTranslation(0, 7601);
			break;
		// Witchaven Boss Nuke Effect
		case 14:
			SpawnForced("WTNukeDeathHuge", xPosition, yPosition, zPosition, effectTid);
			SetActorProperty(effectTid, APROP_ScaleX, (xScale/20)*4);
			SetActorProperty(effectTid, APROP_ScaleY, (yScale/20)*4);
			break;
		// Ice Shatter Effect
		case 15:
			for (int iceChunkAmount = random(32, 48); iceChunkAmount >= 0; iceChunkAmount--)
			{
				iceTid = UniqueTid();
				SpawnForced("UniversalBloodyHellIceDeathEffect", xPosition, yPosition+random(0,1), zPosition+random(-1,1), iceTid);
			}
			break;
		// Boss Ice Shatter Effect
		case 16:
			for (int iceChunkAmountBoss = random(96, 144); iceChunkAmountBoss >= 0; iceChunkAmountBoss--)
			{
				iceTid = UniqueTid();
				SpawnForced("UniversalBloodyHellIceDeathEffectForBosses", xPosition, yPosition+random(0,3), zPosition+random(-3,3), iceTid);
			}
			break;
		// General Ice Translation
		case 100:
			if (isZDoom()) { Thing_SetTranslation(0, TRANSLATION_ICE); }
			else { Thing_SetTranslation(0, 7602); }
			break;
		// Translation Removal
		case 9000:
			Thing_SetTranslation(0, 7600);
			break;
	}
}

script "SamsaraActorStopSound" (int soundhack) // soundhack is for A_ActiveSound/A_Pain/A_Scream
{
    StopSound(0, CHAN_AUTO); // 0
    StopSound(0, CHAN_WEAPON); // 1
    if (!IsNetworkGame() || !soundhack) { StopSound(0, CHAN_VOICE); } // 2
    StopSound(0, CHAN_ITEM); // 3
    StopSound(0, CHAN_BODY); // 4
    StopSound(0, CHAN_5);
    StopSound(0, CHAN_6);
    StopSound(0, CHAN_7);
}

str itemReplacements[44][4] =
{
    {"HealPack2",                      "",                                   "",                     "CanNoGravity"},
    {"SuperHealth",                    "",                                   "CanCountItem",         "CanNoGravity"},
    {"ArmorPack1",                     "",                                   "",                     "CanNoGravity"},
    {"ArmorPack2",                     "",                                   "",                     "CanNoGravity"},
    {"ArmorPack3",                     "",                                   "",                     "CanNoGravity"},
    {"ArmorPack4",                     "",                                   "",                     "CanNoGravity"},
    {"ArmorPack5",                     "",                                   "",                     "CanNoGravity"},
    {"MegaPack",                       "",                                   "CanCountItem",         "CanNoGravity"},
    {"Ammo1Big",                       "",                                   "",                     "CanNoGravity"},
    {"Ammo2Big",                       "",                                   "",                     "CanNoGravity"},
    {"Ammo3Big",                       "",                                   "",                     "CanNoGravity"},
    {"Ammo4Big",                       "",                                   "",                     "CanNoGravity"},
    {"AmmoBackpack",                   "",                                   "",                     "CanNoGravity"},
    {"SamsaraAllmap",                  "samsara_replace_computermap",        "CanCountItem",         "CanNoGravity"},
    {"SamsaraUniquePickupRandom",      "samsara_replace_berserk",            "",                     ""},
    {"SamsaraUniquePickup1",           "",                                   "",                     ""},
    {"SamsaraUniquePickup2",           "",                                   "",                     ""},
    {"SamsaraUniquePickup3",           "",                                   "",                     ""},
    {"PartialInvisibility",            "samsara_replace_blursphere",         "CanCountItem",         "CanNoGravity"},
    {"InvulnPowerup",                  "samsara_replace_invulnerability",    "CanCountItem",         "CanNoGravity"},
    {"BioSuit",                        "",                                   "",                     "CanNoGravity"},
    {"Visor",                          "samsara_replace_lightamplifier",     "CanCountItem",         "CanNoGravity"},
    {"SamsaraLesserTome",              "",                                   "CanCountItem",         "CanNoGravity"},
    {"SamsaraTeleportPickup",          "samsara_replace_teleport",           "CanCountItem",         "CanNoGravity"},
    {"SamsaraFlightPickup",            "",                                   "CanCountItemNotHexen", "CanNoGravity"},
    {"SamsaraSpeedBootsPickup",        "",                                   "CanCountItem",         "CanNoGravity"},
    {"SamsaraTeleportOtherPickup",     "samsara_replace_banishment",         "CanCountItem",         "CanNoGravity"},
    {"SamsaraFullInvisibility",        "samsara_replace_invisibilitysphere", "CanCountItem",         "CanNoGravity"},
    {"SamsaraTimeFreeze",              "samsara_replace_timefreeze",         "CanCountItem",         "CanNoGravity"},
    {"SamsaraSpeedBooster",            "",                                   "CanCountItem",         "CanNoGravity"},
    {"SamsaraDefenseBooster",          "",                                   "CanCountItem",         "CanNoGravity"},
    {"SamsaraDamageBooster",           "",                                   "CanCountItem",         "CanNoGravity"},
    {"SamsaraRandomPowerup",           "samsara_replace_randompowerup",      "CanCountItem",         "CanNoGravity"},
    {"SamsaraSlotOnePickup",           "samsara_replace_chainsaw",           "",                     ""},
    {"SamsaraSlotTwoPickup",           "samsara_replace_shotgun",            "",                     ""},
    {"SamsaraSlotThreePickup",         "",                                   "",                     ""},
    {"SamsaraSlotFourPickup",          "",                                   "",                     ""},
    {"SamsaraSlotFourSkulltagPickup",  "",                                   "",                     ""},
    {"SamsaraSlotFivePickup",          "",                                   "",                     ""},
    {"SamsaraSlotFiveSkulltagPickup",  "",                                   "",                     ""},
    {"SamsaraSlotSixPickup",           "",                                   "",                     ""},
    {"SamsaraSlotSixSkulltagPickup",   "",                                   "",                     ""},
    {"SamsaraSlotSevenPickup",         "samsara_replace_bfg9000",            "",                     ""},
    {"SamsaraSlotSevenSkulltagPickup", "samsara_replace_bfg10k",             "",                     ""},
};

script "Samsara_SwitchableObject" (int type)
{
    if (CheckInventory("SamsaraItemReplacerProcessed") || CheckInventory("SamsaraItemReplaced")) { terminate; }

    GiveInventory("SamsaraItemReplacerProcessed", 1);

    int replacer = GetCVar(itemReplacements[type - 1][1]);

    if (replacer != 0 && Random(1, 100) > GetCVar(StrParam(s:itemReplacements[type - 1][1], s:"_chance"))) { replacer = 0; }

    if (replacer == 0 || replacer == type) { terminate; }

    if (replacer <= -1)
    {
        GiveInventory("SamsaraCountItemDisabler", 1); // precautionary
        Thing_Remove(0);
    } else {
        str itemActor = itemReplacements[replacer - 1][0];
        int itemTID = UniqueTID();

        bool canCountItem = !StrCmp(itemReplacements[replacer - 1][2], "CanCountItem") || (!StrCmp(itemReplacements[replacer - 1][2], "CanCountItemNotHexen") && GetCVar("samsara_currentgame") != GAME_HEXEN);
        bool canNoGravity = !StrCmp(itemReplacements[replacer - 1][3], "CanNoGravity");

        bool hasCountItem = CheckFlag(0, "COUNTITEM");
        bool hasDropped = CheckFlag(0, "DROPPED");
        bool hasNeverRespawn = CheckFlag(0, "NEVERRESPAWN");
        bool hasNoGravity = CheckFlag(0, "NOGRAVITY");
        bool hasTossed = CheckFlag(0, "TOSSED");

        if (!StrCmp(itemActor, "SamsaraUniquePickupRandom")) { itemActor = StrParam(s:"SamsaraUniquePickup", d:Random(1, 3)); } // bypass RandomSpawner

        SpawnForced(itemActor, GetActorX(0), GetActorY(0), GetActorZ(0), itemTID, GetActorAngle(0));
        SetActorVelocity(itemTID, GetActorVelX(0), GetActorVelY(0), GetActorVelZ(0), false, false);

        if (hasDropped) { GiveActorInventory(itemTID, "SamsaraDroppedEnabler", 1); }
        else { GiveActorInventory(itemTID, "SamsaraDroppedDisabler", 1); }

        if (hasTossed) { GiveActorInventory(itemTID, "SamsaraTossedEnabler", 1); }
        else { GiveActorInventory(itemTID, "SamsaraTossedDisabler", 1); }

        if (hasTossed) { GiveActorInventory(itemTID, "SamsaraCountItemDisabler", 1); } // precautionary
        else if (canCountItem && hasCountItem) { GiveActorInventory(itemTID, "SamsaraCountItemEnabler", 1); }

        if (hasNeverRespawn) { GiveActorInventory(itemTID, "SamsaraNeverRespawnEnabler", 1); }

        if (hasTossed) { GiveActorInventory(itemTID, "SamsaraNoGravityDisabler", 1); } // precautionary
        else if (canNoGravity && hasNoGravity) { GiveActorInventory(itemTID, "SamsaraNoGravityEnabler", 1); }

        GiveActorInventory(itemTID, "SamsaraItemReplaced", 1);

        GiveInventory("SamsaraCountItemDisabler", 1); // precautionary
        Thing_Remove(0);
        Thing_ChangeTID(itemTID, 0);
    }
}

Script "SamsaraBossDeathToggler" (void)
{
	if(GetCvar("samsara_mixerloaded"))
		GiveInventory("Samsara_KillMaster", 1);
	else
		GiveInventory("Samsara_BossDeath", 1);
}

script "SamsaraBerserkFistSwitchHack" (void) { SetWeapon(" Fist "); } // A_SelectWeapon somehow doesn't work for whatever reason

script "SamsaraForcePlayerAttackState" (int flash)
{
	if (!isDead(0))
	{
		if (flash) { SetActorState(0, "Melee"); }
		else { SetActorState(0, "Missile"); }
	}
}

Script "SamsaraBloodGeneratorOffsets" (void)
{
	int missilex = GetActorX(0);
	int missiley = GetActorY(0);
	int missilez = GetActorZ(0);
	int missileAngle = GetActorAngle(0);
	SetActivator(0,AAPTR_Tracer);

	int enemyx = GetActorX(0);
	int enemyy = GetActorY(0);
	int enemyz = GetActorZ(0);
	int currentangle = GetActorAngle(0);
	int vang = VectorAngle(enemyx - missilex, enemyy - missiley);
	int angle = vang % 1.0;
	TakeInventory("SamsaraBloodGeneratorBleedAngle",999999);
	TakeInventory("SamsaraBloodGeneratorAngle",999999);
	TakeInventory("SamsaraBloodGeneratorZ",999999);
	GiveInventory("SamsaraBloodGeneratorAngle",angle+65536);
	GiveInventory("SamsaraBloodGeneratorBleedAngle",missileAngle+65536);
	GiveInventory("SamsaraBloodGeneratorZ",(missilez - enemyz)>>16 + 65536);
}

Script "SamsaraBloodGeneratorReturn" (int mode)
{
	int result;
	switch(mode)
	{
		case 1:
			result = ((CheckInventory("SamsaraBloodGeneratorAngle") - 65536)/182)+180;
			break;
		case 2:
			result = CheckInventory("SamsaraBloodGeneratorZ");
			break;
		case 3:
			result = ((CheckInventory("SamsaraBloodGeneratorBleedAngle") - 65536)/182);
			break;
	}
	SetResultValue(result);
}

Script "SamsaraProjectileMovementPitch" (void)
{
	SetResultValue(VectorAngle(VectorLength(GetActorVelX(0),GetActorVelY(0)),GetActorVelZ(0)));
}

Script "SamsaraProximityLooker" (void)
{
	int newTid = UniqueTID();
	SpawnForced("PlayerProximityTNTLooker",GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
	SetPointerExt(AAPTR_MASTER,0,newTid);
	SetActivator(0,AAPTR_TARGET);
	SetPointerExt(AAPTR_TRACER,0,newTid);
}

Script "SamsaraProximityChecker" (void)
{
	if (GetCVar("samsara_proximitybehavior"))
		SetActorState(0,"TNTEnemyLooker",1);
	else
		SetActorState(0,"BeginSpawnLoop",1);
}

Script "SamsaraProximityAllyChecker" (void)
{
	int myTid = UniqueTID();
	int activationTid = ActivatorTID();
	Thing_ChangeTID(0,myTid);
	SetActivator(0,AAPTR_MASTER);
	SetActivator(0,AAPTR_TRACER);
	int userTeam = GetPlayerInfo(PlayerNumber(),PLAYERINFO_TEAM);
	int userPlayer = PlayerNumber();
	SetActivator(myTid,AAPTR_TARGET);
	if(!(ClassifyActor(0) & ACTOR_PLAYER))
	{
		SetActorState(0,"LookForNewTarget",1);
	}
	else
	{
		int targetTeam = GetPlayerInfo(PlayerNumber(),PLAYERINFO_TEAM);
		int targetPlayer = PlayerNumber();
		SetActivator(myTid);
		if (userTeam == targetTeam && userPlayer != targetPlayer)
			SetActorState(0,"LookForNewTarget",1);
		else
			SetActorState(0,"ValidTarget",1);
	}
	Thing_ChangeTID(myTid,activationTid);
}

Script "SamsaraTossableResolve" (int reactionTime, int strength, int type)
{
	switch (type)
	{
		case 0:
			if (strength == 0 && reactionTime > 0) SetActorState(0,"Stay",1);
			else SetActorState(0,"XDeath",1);
			break;
		case 1:
			if (reactionTime > 0) SetActorState(0,"Stay",1);
			else SetActorState(0,"Explode",1);
			break;
		case 2:
			if (reactionTime > 0)
			{
				if (CheckInventory("ProximityTNTArmed")) SetActorState(0,"ChargeLoop",1);
				else SetActorState(0,"Stay",1);
			}
			else SetActorState(0,"Explode",1);
			break;
	}
}

script "SamsaraClientSidePresetSelection" (void)
{
	switch(GetCvar("samsara_clientsidepresetvalue"))
	{
		case 0: // Vanilla

		// General Player Preferences
		SetCVar("samsara_cl_wolfmove", false);
		SetCVar("samsara_cl_wolfmovebob", false);
		SetCVar("samsara_cl_smoothanims", false);
		SetCVar("samsara_cl_weaponhud", false);
		SetCVar("samsara_cl_legacyfullscreenhud", false);
		SetCVar("samsara_cl_teamtext", false);
		SetCVar("samsara_cl_pickupmode", 2);
		SetCVar("samsara_cl_printpickup", false);
		SetCVar("samsara_cl_showsecretmessage", false);
		SetCVar("samsara_cl_moremessages", false);
		SetCVar("samsara_cl_noflashes", 0);
		SetCVar("samsara_cl_noadditivepickups", false);
		SetCVar("samsara_cl_ballgag", false);
		SetCVar("samsara_cl_idleballgag", false);
		SetCVar("samsara_cl_norecoil", false);
		SetCVar("samsara_cl_sinerecoil", false);
		SetCVar("samsara_cl_merrychristmassnow", false);
		SetCVar("samsara_cl_xmasmusic", false);
		SetCVar("samsara_cl_dualwieldswap", false);
		SetCVar("samsara_cl_compendiumscroll", 1);
		SetCVar("samsara_cl_oldcompendiumgraphics", false);
		SetCVar("samsara_cl_classtips", false);
		SetCVar("samsara_cl_autoinventoryhealth", 0);
		SetCVar("samsara_cl_maxedinventoryhealthpickup", 1);
		SetCVar("samsara_cl_autoinventoryarmor", false);
		SetCVar("samsara_cl_maxedinventoryarmorpickup", false);
		SetCVar("samsara_cl_footstepsounds", true);

		// Class-Based Player Preferences
		SetCVar("samsara_cl_berserkswitch", 2);
		SetCVar("samsara_cl_legacydukevoices", true);
		SetCVar("samsara_cl_expparticles", 0);
		SetCVar("samsara_cl_hevtalk", true);
		SetCVar("samsara_cl_lowangcookiemessages", 0);
		SetCVar("samsara_cl_alcoholgut", true);
		SetCVar("samsara_cl_rr_bikeaim", false);
		SetCVar("samsara_cl_pettonweapons", false);
		SetCVar("samsara_cl_descentviewbob", true);
		SetCVar("samsara_cl_deusexskilldisplay", false);

		// Hero Soundtrack
		SetCVar("samsara_cl_heromusic", 0);
		SetCVar("samsara_cl_heromusichub", true);
		SetCVar("samsara_cl_heromusic_doom", false);
		SetCVar("samsara_cl_heromusic_doom64", false);
		SetCVar("samsara_cl_heromusic_chex", false);
		SetCVar("samsara_cl_heromusic_heretic", false);
		SetCVar("samsara_cl_heromusic_wolf3d", false);
		SetCVar("samsara_cl_heromusic_totenkopf", false);
		SetCVar("samsara_cl_heromusic_hexen1", false);
		SetCVar("samsara_cl_heromusic_duke3d", false);
		SetCVar("samsara_cl_heromusic_dukelab", false);
		SetCVar("samsara_cl_heromusic_marathon", false);
		SetCVar("samsara_cl_heromusic_quake1", false);
		SetCVar("samsara_cl_heromusic_rott", false);
		SetCVar("samsara_cl_heromusic_bstone", false);
		SetCVar("samsara_cl_heromusic_blood", false);
		SetCVar("samsara_cl_heromusic_strife", false);
		SetCVar("samsara_cl_heromusic_erad", false);
		SetCVar("samsara_cl_heromusic_c7", false);
		SetCVar("samsara_cl_heromusic_rmr", false);
		SetCVar("samsara_cl_heromusic_darkf", false);
		SetCVar("samsara_cl_heromusic_ipog", false);
		SetCVar("samsara_cl_heromusic_disrup", false);
		SetCVar("samsara_cl_heromusic_witch", false);
		SetCVar("samsara_cl_heromusic_halflife", false);
		SetCVar("samsara_cl_heromusic_hlop", false);
		SetCVar("samsara_cl_heromusic_sw", false);
		SetCVar("samsara_cl_heromusic_cm", false);
		SetCVar("samsara_cl_heromusic_ps", false);
		SetCVar("samsara_cl_heromusic_rr", false);
		SetCVar("samsara_cl_heromusic_quake2", false);
		SetCVar("samsara_cl_heromusic_hexen2", false);
		SetCVar("samsara_cl_heromusic_goldeneye", false);
		SetCVar("samsara_cl_heromusic_catacomb", false);
		SetCVar("samsara_cl_heromusic_painkiller", false);
		SetCVar("samsara_cl_heromusic_unreal", false);
		SetCVar("samsara_cl_heromusic_rtcw", false);
		SetCVar("samsara_cl_heromusic_quake3", false);
		SetCVar("samsara_cl_heromusic_descent", false);
		SetCVar("samsara_cl_heromusic_deusex", false);
		SetCVar("samsara_cl_wolf3dimf", false);
		SetCVar("samsara_cl_hexcd", false);
		SetCVar("samsara_cl_rott13ost", false);
		SetCVar("samsara_cl_bstoneimf", false);
		SetCVar("samsara_cl_bloodcd", false);
		SetCVar("samsara_cl_c7imf", false);
		SetCVar("samsara_cl_darkfpsx", false);
		SetCVar("samsara_cl_hex2cd", false);
		SetCVar("samsara_cl_c3dimf", false);
		SetCVar("samsara_cl_descentcd", false);

		// Alternative Characters
		SetCVar("samsara_cl_doommode", 0);
		SetCVar("samsara_cl_wolfmode", 0);
		SetCVar("samsara_cl_hexclass", 0);
		SetCVar("samsara_cl_dukemode", 0);
		SetCVar("samsara_cl_rottmode", 0);
		SetCVar("samsara_cl_bsaog", false);
		SetCVar("samsara_cl_eradmode", 0);
		SetCVar("samsara_cl_ipogmode", 0);
		SetCVar("samsara_cl_shephardmode", false);

		// Alternative Weapon Sounds
		SetCVar("samsara_cl_originaldoomsounds", 0);
		SetCVar("samsara_cl_strongholddoomsounds", false);
		SetCVar("samsara_cl_quake1sounds", 0);
		SetCVar("samsara_cl_rottsounds", false);
		SetCVar("samsara_cl_rebelmoonrisingsounds", false);
		SetCVar("samsara_cl_quake2sounds", false);
		SetCVar("samsara_cl_goldeneyesounds", false);
		SetCVar("samsara_cl_unrealsounds", false);
		SetCVar("samsara_cl_rtcwsounds", 0);
		SetCVar("samsara_cl_quake3sounds", 0);

		// Blood and Gore Preferences
		SetCVar("samsara_cl_bloodyhell", 0);
		SetCVar("samsara_cl_bloodypersistent", false);

		// Character Equipment Loadout Options
		SetCVar("samsara_cl_doomguy_fallbackranged", false);
		SetCVar("samsara_cl_doomguy_slot4", false);
		SetCVar("samsara_cl_doomguy_slot6", false);
		SetCVar("samsara_cl_doomguy_slot7", 0);
		SetCVar("samsara_cl_chex_fallbackranged", false);
		SetCVar("samsara_cl_freeman_fallbackmelee", false);
		SetCVar("samsara_cl_freeman_slot1", false);
		SetCVar("samsara_cl_freeman_slot3", false);
		SetCVar("samsara_cl_freeman_slot5", false);
		SetCVar("samsara_cl_freeman_slot6", false);
		SetCVar("samsara_cl_freeman_slot7", false);
		SetCVar("samsara_cl_freeman_unique1", false);
		SetCVar("samsara_cl_freeman_unique2", false);
		SetCVar("samsara_cl_freeman_unique3", false);
		SetCVar("samsara_cl_shephard_fallbackmelee", true);
		SetCVar("samsara_cl_shephard_slot1", true);
		SetCVar("samsara_cl_shephard_slot3", true);
		SetCVar("samsara_cl_shephard_slot5", true);
		SetCVar("samsara_cl_shephard_slot6", true);
		SetCVar("samsara_cl_shephard_slot7", true);
		SetCVar("samsara_cl_shephard_unique1", true);
		SetCVar("samsara_cl_shephard_unique2", true);
		SetCVar("samsara_cl_shephard_unique3", true);
		SetCVar("samsara_cl_bond_fallbackranged", 0);
		SetCVar("samsara_cl_bond_slot3", false);
		SetCVar("samsara_cl_bond_slot6s", 0);
		SetCVar("samsara_cl_bond_unique2", 0);
		break;

		case 1: // Samsara

		// General Player Preferences
		SetCVar("samsara_cl_wolfmove", false);
		SetCVar("samsara_cl_wolfmovebob", false);
		SetCVar("samsara_cl_smoothanims", false);
		SetCVar("samsara_cl_weaponhud", true);
		SetCVar("samsara_cl_legacyfullscreenhud", true);
		SetCVar("samsara_cl_teamtext", false);
		SetCVar("samsara_cl_pickupmode", 1);
		SetCVar("samsara_cl_printpickup", false);
		SetCVar("samsara_cl_showsecretmessage", true);
		SetCVar("samsara_cl_moremessages", false);
		SetCVar("samsara_cl_noflashes", 0);
		SetCVar("samsara_cl_noadditivepickups", false);
		SetCVar("samsara_cl_ballgag", false);
		SetCVar("samsara_cl_idleballgag", false);
		SetCVar("samsara_cl_norecoil", false);
		SetCVar("samsara_cl_sinerecoil", false);
		SetCVar("samsara_cl_merrychristmassnow", true);
		SetCVar("samsara_cl_xmasmusic", false);
		SetCVar("samsara_cl_dualwieldswap", false);
		SetCVar("samsara_cl_compendiumscroll", 1);
		SetCVar("samsara_cl_oldcompendiumgraphics", false);
		SetCVar("samsara_cl_classtips", false);
		SetCVar("samsara_cl_autoinventoryhealth", 0);
		SetCVar("samsara_cl_maxedinventoryhealthpickup", 1);
		SetCVar("samsara_cl_autoinventoryarmor", false);
		SetCVar("samsara_cl_maxedinventoryarmorpickup", false);
		SetCVar("samsara_cl_footstepsounds", true);

		// Class-Based Player Preferences
		SetCVar("samsara_cl_berserkswitch", 0);
		SetCVar("samsara_cl_legacydukevoices", true);
		SetCVar("samsara_cl_expparticles", 0);
		SetCVar("samsara_cl_hevtalk", false);
		SetCVar("samsara_cl_lowangcookiemessages", 0);
		SetCVar("samsara_cl_alcoholgut", true);
		SetCVar("samsara_cl_rr_bikeaim", false);
		SetCVar("samsara_cl_pettonweapons", false);
		SetCVar("samsara_cl_descentviewbob", true);
		SetCVar("samsara_cl_deusexskilldisplay", false);

		// Hero Soundtrack
		SetCVar("samsara_cl_heromusic", 0);
		SetCVar("samsara_cl_heromusichub", true);
		SetCVar("samsara_cl_heromusic_doom", false);
		SetCVar("samsara_cl_heromusic_doom64", false);
		SetCVar("samsara_cl_heromusic_chex", false);
		SetCVar("samsara_cl_heromusic_heretic", false);
		SetCVar("samsara_cl_heromusic_wolf3d", false);
		SetCVar("samsara_cl_heromusic_totenkopf", false);
		SetCVar("samsara_cl_heromusic_hexen1", false);
		SetCVar("samsara_cl_heromusic_duke3d", false);
		SetCVar("samsara_cl_heromusic_dukelab", false);
		SetCVar("samsara_cl_heromusic_marathon", false);
		SetCVar("samsara_cl_heromusic_quake1", false);
		SetCVar("samsara_cl_heromusic_rott", false);
		SetCVar("samsara_cl_heromusic_bstone", false);
		SetCVar("samsara_cl_heromusic_blood", false);
		SetCVar("samsara_cl_heromusic_strife", false);
		SetCVar("samsara_cl_heromusic_erad", false);
		SetCVar("samsara_cl_heromusic_c7", false);
		SetCVar("samsara_cl_heromusic_rmr", false);
		SetCVar("samsara_cl_heromusic_darkf", false);
		SetCVar("samsara_cl_heromusic_ipog", false);
		SetCVar("samsara_cl_heromusic_disrup", false);
		SetCVar("samsara_cl_heromusic_witch", false);
		SetCVar("samsara_cl_heromusic_halflife", false);
		SetCVar("samsara_cl_heromusic_hlop", false);
		SetCVar("samsara_cl_heromusic_sw", false);
		SetCVar("samsara_cl_heromusic_cm", false);
		SetCVar("samsara_cl_heromusic_ps", false);
		SetCVar("samsara_cl_heromusic_rr", false);
		SetCVar("samsara_cl_heromusic_quake2", false);
		SetCVar("samsara_cl_heromusic_hexen2", false);
		SetCVar("samsara_cl_heromusic_goldeneye", false);
		SetCVar("samsara_cl_heromusic_catacomb", false);
		SetCVar("samsara_cl_heromusic_painkiller", false);
		SetCVar("samsara_cl_heromusic_unreal", false);
		SetCVar("samsara_cl_heromusic_rtcw", false);
		SetCVar("samsara_cl_heromusic_quake3", false);
		SetCVar("samsara_cl_heromusic_descent", false);
		SetCVar("samsara_cl_heromusic_deusex", false);
		SetCVar("samsara_cl_wolf3dimf", false);
		SetCVar("samsara_cl_hexcd", false);
		SetCVar("samsara_cl_rott13ost", false);
		SetCVar("samsara_cl_bstoneimf", false);
		SetCVar("samsara_cl_bloodcd", false);
		SetCVar("samsara_cl_c7imf", false);
		SetCVar("samsara_cl_darkfpsx", false);
		SetCVar("samsara_cl_hex2cd", false);
		SetCVar("samsara_cl_c3dimf", false);
		SetCVar("samsara_cl_descentcd", false);

		// Alternative Characters
		SetCVar("samsara_cl_doommode", 0);
		SetCVar("samsara_cl_wolfmode", 0);
		SetCVar("samsara_cl_hexclass", 1);
		SetCVar("samsara_cl_dukemode", 0);
		SetCVar("samsara_cl_rottmode", 0);
		SetCVar("samsara_cl_bsaog", false);
		SetCVar("samsara_cl_eradmode", 0);
		SetCVar("samsara_cl_ipogmode", 0);
		SetCVar("samsara_cl_shephardmode", false);

		// Alternative Weapon Sounds
		SetCVar("samsara_cl_originaldoomsounds", 0);
		SetCVar("samsara_cl_strongholddoomsounds", false);
		SetCVar("samsara_cl_quake1sounds", 0);
		SetCVar("samsara_cl_rottsounds", false);
		SetCVar("samsara_cl_rebelmoonrisingsounds", false);
		SetCVar("samsara_cl_quake2sounds", false);
		SetCVar("samsara_cl_goldeneyesounds", false);
		SetCVar("samsara_cl_unrealsounds", false);
		SetCVar("samsara_cl_rtcwsounds", 0);
		SetCVar("samsara_cl_quake3sounds", 0);

		// Blood and Gore Preferences
		SetCVar("samsara_cl_bloodyhell", 0);
		SetCVar("samsara_cl_bloodypersistent", false);

		// Character Equipment Loadout Options
		SetCVar("samsara_cl_doomguy_fallbackranged", false);
		SetCVar("samsara_cl_doomguy_slot4", false);
		SetCVar("samsara_cl_doomguy_slot6", false);
		SetCVar("samsara_cl_doomguy_slot7", 0);
		SetCVar("samsara_cl_chex_fallbackranged", false);
		SetCVar("samsara_cl_freeman_fallbackmelee", false);
		SetCVar("samsara_cl_freeman_slot1", false);
		SetCVar("samsara_cl_freeman_slot3", false);
		SetCVar("samsara_cl_freeman_slot5", false);
		SetCVar("samsara_cl_freeman_slot6", false);
		SetCVar("samsara_cl_freeman_slot7", false);
		SetCVar("samsara_cl_freeman_unique1", false);
		SetCVar("samsara_cl_freeman_unique2", false);
		SetCVar("samsara_cl_freeman_unique3", false);
		SetCVar("samsara_cl_shephard_fallbackmelee", true);
		SetCVar("samsara_cl_shephard_slot1", true);
		SetCVar("samsara_cl_shephard_slot3", true);
		SetCVar("samsara_cl_shephard_slot5", true);
		SetCVar("samsara_cl_shephard_slot6", true);
		SetCVar("samsara_cl_shephard_slot7", true);
		SetCVar("samsara_cl_shephard_unique1", true);
		SetCVar("samsara_cl_shephard_unique2", true);
		SetCVar("samsara_cl_shephard_unique3", true);
		SetCVar("samsara_cl_bond_fallbackranged", 0);
		SetCVar("samsara_cl_bond_slot3", false);
		SetCVar("samsara_cl_bond_slot6s", 0);
		SetCVar("samsara_cl_bond_unique2", 0);
		break;

		case 2: // Samsara Reincarnation

		// General Player Preferences
		SetCVar("samsara_cl_wolfmove", false);
		SetCVar("samsara_cl_wolfmovebob", false);
		SetCVar("samsara_cl_smoothanims", false);
		SetCVar("samsara_cl_weaponhud", true);
		SetCVar("samsara_cl_legacyfullscreenhud", false);
		SetCVar("samsara_cl_teamtext", true);
		SetCVar("samsara_cl_pickupmode", 1);
		SetCVar("samsara_cl_printpickup", false);
		SetCVar("samsara_cl_showsecretmessage", true);
		SetCVar("samsara_cl_moremessages", false);
		SetCVar("samsara_cl_noflashes", 0);
		SetCVar("samsara_cl_noadditivepickups", false);
		SetCVar("samsara_cl_ballgag", false);
		SetCVar("samsara_cl_idleballgag", false);
		SetCVar("samsara_cl_norecoil", false);
		SetCVar("samsara_cl_sinerecoil", false);
		SetCVar("samsara_cl_merrychristmassnow", true);
		SetCVar("samsara_cl_xmasmusic", false);
		SetCVar("samsara_cl_dualwieldswap", false);
		SetCVar("samsara_cl_compendiumscroll", 1);
		SetCVar("samsara_cl_oldcompendiumgraphics", false);
		SetCVar("samsara_cl_classtips", true);
		SetCVar("samsara_cl_autoinventoryhealth", 50);
		SetCVar("samsara_cl_maxedinventoryhealthpickup", 1);
		SetCVar("samsara_cl_autoinventoryarmor", true);
		SetCVar("samsara_cl_maxedinventoryarmorpickup", false);
		SetCVar("samsara_cl_footstepsounds", true);

		// Class-Based Player Preferences
		SetCVar("samsara_cl_berserkswitch", 2);
		SetCVar("samsara_cl_legacydukevoices", false);
		SetCVar("samsara_cl_expparticles", 0);
		SetCVar("samsara_cl_hevtalk", false);
		SetCVar("samsara_cl_lowangcookiemessages", 1);
		SetCVar("samsara_cl_alcoholgut", true);
		SetCVar("samsara_cl_rr_bikeaim", false);
		SetCVar("samsara_cl_pettonweapons", false);
		SetCVar("samsara_cl_descentviewbob", true);
		SetCVar("samsara_cl_deusexskilldisplay", true);

		// Hero Soundtrack
		SetCVar("samsara_cl_heromusic", 0);
		SetCVar("samsara_cl_heromusichub", true);
		SetCVar("samsara_cl_heromusic_doom", false);
		SetCVar("samsara_cl_heromusic_doom64", false);
		SetCVar("samsara_cl_heromusic_chex", false);
		SetCVar("samsara_cl_heromusic_heretic", false);
		SetCVar("samsara_cl_heromusic_wolf3d", false);
		SetCVar("samsara_cl_heromusic_totenkopf", false);
		SetCVar("samsara_cl_heromusic_hexen1", false);
		SetCVar("samsara_cl_heromusic_duke3d", false);
		SetCVar("samsara_cl_heromusic_dukelab", false);
		SetCVar("samsara_cl_heromusic_marathon", false);
		SetCVar("samsara_cl_heromusic_quake1", false);
		SetCVar("samsara_cl_heromusic_rott", false);
		SetCVar("samsara_cl_heromusic_bstone", false);
		SetCVar("samsara_cl_heromusic_blood", false);
		SetCVar("samsara_cl_heromusic_strife", false);
		SetCVar("samsara_cl_heromusic_erad", false);
		SetCVar("samsara_cl_heromusic_c7", false);
		SetCVar("samsara_cl_heromusic_rmr", false);
		SetCVar("samsara_cl_heromusic_darkf", false);
		SetCVar("samsara_cl_heromusic_ipog", false);
		SetCVar("samsara_cl_heromusic_disrup", false);
		SetCVar("samsara_cl_heromusic_witch", false);
		SetCVar("samsara_cl_heromusic_halflife", false);
		SetCVar("samsara_cl_heromusic_hlop", false);
		SetCVar("samsara_cl_heromusic_sw", false);
		SetCVar("samsara_cl_heromusic_cm", false);
		SetCVar("samsara_cl_heromusic_ps", false);
		SetCVar("samsara_cl_heromusic_rr", false);
		SetCVar("samsara_cl_heromusic_quake2", false);
		SetCVar("samsara_cl_heromusic_hexen2", false);
		SetCVar("samsara_cl_heromusic_goldeneye", false);
		SetCVar("samsara_cl_heromusic_catacomb", false);
		SetCVar("samsara_cl_heromusic_painkiller", false);
		SetCVar("samsara_cl_heromusic_unreal", false);
		SetCVar("samsara_cl_heromusic_rtcw", false);
		SetCVar("samsara_cl_heromusic_quake3", false);
		SetCVar("samsara_cl_heromusic_descent", false);
		SetCVar("samsara_cl_heromusic_deusex", false);
		SetCVar("samsara_cl_wolf3dimf", false);
		SetCVar("samsara_cl_hexcd", false);
		SetCVar("samsara_cl_rott13ost", false);
		SetCVar("samsara_cl_bstoneimf", false);
		SetCVar("samsara_cl_bloodcd", false);
		SetCVar("samsara_cl_c7imf", false);
		SetCVar("samsara_cl_darkfpsx", false);
		SetCVar("samsara_cl_hex2cd", false);
		SetCVar("samsara_cl_c3dimf", false);
		SetCVar("samsara_cl_descentcd", false);

		// Alternative Characters
		SetCVar("samsara_cl_doommode", 0);
		SetCVar("samsara_cl_wolfmode", 0);
		SetCVar("samsara_cl_hexclass", 0);
		SetCVar("samsara_cl_dukemode", 0);
		SetCVar("samsara_cl_rottmode", 0);
		SetCVar("samsara_cl_bsaog", false);
		SetCVar("samsara_cl_eradmode", 0);
		SetCVar("samsara_cl_ipogmode", 0);
		SetCVar("samsara_cl_shephardmode", false);

		// Alternative Weapon Sounds
		SetCVar("samsara_cl_originaldoomsounds", 0);
		SetCVar("samsara_cl_strongholddoomsounds", false);
		SetCVar("samsara_cl_quake1sounds", 0);
		SetCVar("samsara_cl_rottsounds", false);
		SetCVar("samsara_cl_rebelmoonrisingsounds", false);
		SetCVar("samsara_cl_quake2sounds", false);
		SetCVar("samsara_cl_goldeneyesounds", false);
		SetCVar("samsara_cl_unrealsounds", false);
		SetCVar("samsara_cl_rtcwsounds", 0);
		SetCVar("samsara_cl_quake3sounds", 0);

		// Blood and Gore Preferences
		SetCVar("samsara_cl_bloodyhell", 0);
		SetCVar("samsara_cl_bloodypersistent", false);

		// Character Equipment Loadout Options
		SetCVar("samsara_cl_doomguy_fallbackranged", false);
		SetCVar("samsara_cl_doomguy_slot4", false);
		SetCVar("samsara_cl_doomguy_slot6", false);
		SetCVar("samsara_cl_doomguy_slot7", 0);
		SetCVar("samsara_cl_chex_fallbackranged", false);
		SetCVar("samsara_cl_freeman_fallbackmelee", false);
		SetCVar("samsara_cl_freeman_slot1", false);
		SetCVar("samsara_cl_freeman_slot3", false);
		SetCVar("samsara_cl_freeman_slot5", false);
		SetCVar("samsara_cl_freeman_slot6", false);
		SetCVar("samsara_cl_freeman_slot7", false);
		SetCVar("samsara_cl_freeman_unique1", false);
		SetCVar("samsara_cl_freeman_unique2", false);
		SetCVar("samsara_cl_freeman_unique3", false);
		SetCVar("samsara_cl_shephard_fallbackmelee", true);
		SetCVar("samsara_cl_shephard_slot1", true);
		SetCVar("samsara_cl_shephard_slot3", true);
		SetCVar("samsara_cl_shephard_slot5", true);
		SetCVar("samsara_cl_shephard_slot6", true);
		SetCVar("samsara_cl_shephard_slot7", true);
		SetCVar("samsara_cl_shephard_unique1", true);
		SetCVar("samsara_cl_shephard_unique2", true);
		SetCVar("samsara_cl_shephard_unique3", true);
		SetCVar("samsara_cl_bond_fallbackranged", 0);
		SetCVar("samsara_cl_bond_slot3", false);
		SetCVar("samsara_cl_bond_slot6s", 0);
		SetCVar("samsara_cl_bond_unique2", 0);
		break;

		// Secret presets
		case 100: // cubebert's Settings

		// General Player Preferences
		SetCVar("samsara_cl_wolfmove", isZDoom() ? true : false);
		SetCVar("samsara_cl_wolfmovebob", false);
		SetCVar("samsara_cl_smoothanims", false);
		SetCVar("samsara_cl_weaponhud", isZDoom() ? false : true);
		SetCVar("samsara_cl_legacyfullscreenhud", true);
		SetCVar("samsara_cl_teamtext", true);
		SetCVar("samsara_cl_pickupmode", 1);
		SetCVar("samsara_cl_printpickup", false);
		SetCVar("samsara_cl_showsecretmessage", true);
		SetCVar("samsara_cl_moremessages", false);
		SetCVar("samsara_cl_noflashes", 0);
		SetCVar("samsara_cl_noadditivepickups", false);
		SetCVar("samsara_cl_ballgag", false);
		SetCVar("samsara_cl_idleballgag", false);
		SetCVar("samsara_cl_norecoil", isZDoom() ? false : true);
		SetCVar("samsara_cl_sinerecoil", false);
		SetCVar("samsara_cl_merrychristmassnow", true);
		SetCVar("samsara_cl_xmasmusic", false);
		SetCVar("samsara_cl_dualwieldswap", true);
		SetCVar("samsara_cl_compendiumscroll", 1);
		SetCVar("samsara_cl_oldcompendiumgraphics", true);
		SetCVar("samsara_cl_classtips", false);
		SetCVar("samsara_cl_autoinventoryhealth", isZDoom() ? 0 : 50);
		SetCVar("samsara_cl_maxedinventoryhealthpickup", 1);
		SetCVar("samsara_cl_autoinventoryarmor", isZDoom() ? false : true);
		SetCVar("samsara_cl_maxedinventoryarmorpickup", false);
		SetCVar("samsara_cl_footstepsounds", true);

		// Class-Based Player Preferences
		SetCVar("samsara_cl_berserkswitch", 0);
		SetCVar("samsara_cl_legacydukevoices", true);
		SetCVar("samsara_cl_expparticles", 0);
		SetCVar("samsara_cl_hevtalk", false);
		SetCVar("samsara_cl_lowangcookiemessages", 2);
		SetCVar("samsara_cl_alcoholgut", false);
		SetCVar("samsara_cl_rr_bikeaim", false);
		SetCVar("samsara_cl_pettonweapons", false);
		SetCVar("samsara_cl_descentviewbob", true);
		SetCVar("samsara_cl_deusexskilldisplay", false);

		// Hero Soundtrack
		SetCVar("samsara_cl_heromusic", 0);
		SetCVar("samsara_cl_heromusichub", true);
		SetCVar("samsara_cl_heromusic_doom", false);
		SetCVar("samsara_cl_heromusic_doom64", false);
		SetCVar("samsara_cl_heromusic_chex", false);
		SetCVar("samsara_cl_heromusic_heretic", false);
		SetCVar("samsara_cl_heromusic_wolf3d", false);
		SetCVar("samsara_cl_heromusic_totenkopf", false);
		SetCVar("samsara_cl_heromusic_hexen1", false);
		SetCVar("samsara_cl_heromusic_duke3d", false);
		SetCVar("samsara_cl_heromusic_dukelab", false);
		SetCVar("samsara_cl_heromusic_marathon", false);
		SetCVar("samsara_cl_heromusic_quake1", false);
		SetCVar("samsara_cl_heromusic_rott", false);
		SetCVar("samsara_cl_heromusic_bstone", false);
		SetCVar("samsara_cl_heromusic_blood", false);
		SetCVar("samsara_cl_heromusic_strife", false);
		SetCVar("samsara_cl_heromusic_erad", false);
		SetCVar("samsara_cl_heromusic_c7", false);
		SetCVar("samsara_cl_heromusic_rmr", false);
		SetCVar("samsara_cl_heromusic_darkf", false);
		SetCVar("samsara_cl_heromusic_ipog", false);
		SetCVar("samsara_cl_heromusic_disrup", false);
		SetCVar("samsara_cl_heromusic_witch", false);
		SetCVar("samsara_cl_heromusic_halflife", false);
		SetCVar("samsara_cl_heromusic_hlop", false);
		SetCVar("samsara_cl_heromusic_sw", false);
		SetCVar("samsara_cl_heromusic_cm", false);
		SetCVar("samsara_cl_heromusic_ps", false);
		SetCVar("samsara_cl_heromusic_rr", false);
		SetCVar("samsara_cl_heromusic_quake2", false);
		SetCVar("samsara_cl_heromusic_hexen2", false);
		SetCVar("samsara_cl_heromusic_goldeneye", false);
		SetCVar("samsara_cl_heromusic_catacomb", false);
		SetCVar("samsara_cl_heromusic_painkiller", false);
		SetCVar("samsara_cl_heromusic_unreal", false);
		SetCVar("samsara_cl_heromusic_rtcw", false);
		SetCVar("samsara_cl_heromusic_quake3", false);
		SetCVar("samsara_cl_heromusic_descent", false);
		SetCVar("samsara_cl_heromusic_deusex", false);
		SetCVar("samsara_cl_wolf3dimf", false);
		SetCVar("samsara_cl_hexcd", false);
		SetCVar("samsara_cl_rott13ost", false);
		SetCVar("samsara_cl_bstoneimf", false);
		SetCVar("samsara_cl_bloodcd", false);
		SetCVar("samsara_cl_c7imf", false);
		SetCVar("samsara_cl_darkfpsx", false);
		SetCVar("samsara_cl_hex2cd", false);
		SetCVar("samsara_cl_c3dimf", false);
		SetCVar("samsara_cl_descentcd", false);

		// Alternative Characters
		SetCVar("samsara_cl_doommode", 0);
		SetCVar("samsara_cl_wolfmode", 0);
		SetCVar("samsara_cl_hexclass", 1);
		SetCVar("samsara_cl_dukemode", 0);
		SetCVar("samsara_cl_rottmode", 0);
		SetCVar("samsara_cl_bsaog", false);
		SetCVar("samsara_cl_eradmode", 3);
		SetCVar("samsara_cl_ipogmode", 0);
		SetCVar("samsara_cl_shephardmode", false);

		// Alternative Weapon Sounds
		SetCVar("samsara_cl_originaldoomsounds", 0);
		SetCVar("samsara_cl_strongholddoomsounds", false);
		SetCVar("samsara_cl_quake1sounds", 0);
		SetCVar("samsara_cl_rottsounds", false);
		SetCVar("samsara_cl_rebelmoonrisingsounds", false);
		SetCVar("samsara_cl_quake2sounds", false);
		SetCVar("samsara_cl_goldeneyesounds", false);
		SetCVar("samsara_cl_unrealsounds", false);
		SetCVar("samsara_cl_rtcwsounds", 0);
		SetCVar("samsara_cl_quake3sounds", 0);

		// Blood and Gore Preferences
		SetCVar("samsara_cl_bloodyhell", 2);
		SetCVar("samsara_cl_bloodypersistent", isZDoom() ? true : false);

		// Character Equipment Loadout Options
		SetCVar("samsara_cl_doomguy_fallbackranged", false);
		SetCVar("samsara_cl_doomguy_slot4", false);
		SetCVar("samsara_cl_doomguy_slot6", false);
		SetCVar("samsara_cl_doomguy_slot7", 0);
		SetCVar("samsara_cl_chex_fallbackranged", false);
		SetCVar("samsara_cl_freeman_fallbackmelee", false);
		SetCVar("samsara_cl_freeman_slot1", false);
		SetCVar("samsara_cl_freeman_slot3", false);
		SetCVar("samsara_cl_freeman_slot5", false);
		SetCVar("samsara_cl_freeman_slot6", false);
		SetCVar("samsara_cl_freeman_slot7", false);
		SetCVar("samsara_cl_freeman_unique1", true);
		SetCVar("samsara_cl_freeman_unique2", false);
		SetCVar("samsara_cl_freeman_unique3", false);
		SetCVar("samsara_cl_shephard_fallbackmelee", true);
		SetCVar("samsara_cl_shephard_slot1", true);
		SetCVar("samsara_cl_shephard_slot3", true);
		SetCVar("samsara_cl_shephard_slot5", true);
		SetCVar("samsara_cl_shephard_slot6", true);
		SetCVar("samsara_cl_shephard_slot7", true);
		SetCVar("samsara_cl_shephard_unique1", true);
		SetCVar("samsara_cl_shephard_unique2", true);
		SetCVar("samsara_cl_shephard_unique3", true);
		SetCVar("samsara_cl_bond_fallbackranged", 0);
		SetCVar("samsara_cl_bond_slot3", false);
		SetCVar("samsara_cl_bond_slot6s", 0);
		SetCVar("samsara_cl_bond_unique2", 0);
		break;

		case 101: // tehvappy50's Settings

		// General Player Preferences
		SetCVar("samsara_cl_wolfmove", false);
		SetCVar("samsara_cl_wolfmovebob", false);
		SetCVar("samsara_cl_smoothanims", false);
		SetCVar("samsara_cl_weaponhud", true);
		SetCVar("samsara_cl_legacyfullscreenhud", true);
		SetCVar("samsara_cl_teamtext", true);
		SetCVar("samsara_cl_pickupmode", 2);
		SetCVar("samsara_cl_printpickup", true);
		SetCVar("samsara_cl_showsecretmessage", true);
		SetCVar("samsara_cl_moremessages", true);
		SetCVar("samsara_cl_noflashes", 0);
		SetCVar("samsara_cl_noadditivepickups", false);
		SetCVar("samsara_cl_ballgag", false);
		SetCVar("samsara_cl_idleballgag", false);
		SetCVar("samsara_cl_norecoil", false);
		SetCVar("samsara_cl_sinerecoil", false);
		SetCVar("samsara_cl_merrychristmassnow", true);
		SetCVar("samsara_cl_xmasmusic", false);
		SetCVar("samsara_cl_dualwieldswap", false);
		SetCVar("samsara_cl_compendiumscroll", 5);
		SetCVar("samsara_cl_oldcompendiumgraphics", true);
		SetCVar("samsara_cl_classtips", false);
		SetCVar("samsara_cl_autoinventoryhealth", 50);
		SetCVar("samsara_cl_maxedinventoryhealthpickup", 2);
		SetCVar("samsara_cl_autoinventoryarmor", true);
		SetCVar("samsara_cl_maxedinventoryarmorpickup", true);
		SetCVar("samsara_cl_footstepsounds", true);

		// Class-Based Player Preferences
		SetCVar("samsara_cl_berserkswitch", 0);
		SetCVar("samsara_cl_legacydukevoices", false);
		SetCVar("samsara_cl_expparticles", 0);
		SetCVar("samsara_cl_hevtalk", true);
		SetCVar("samsara_cl_lowangcookiemessages", 2);
		SetCVar("samsara_cl_alcoholgut", true);
		SetCVar("samsara_cl_rr_bikeaim", false);
		SetCVar("samsara_cl_pettonweapons", true);
		SetCVar("samsara_cl_descentviewbob", true);
		SetCVar("samsara_cl_deusexskilldisplay", true);

		// Hero Soundtrack
		SetCVar("samsara_cl_heromusic", 0);
		SetCVar("samsara_cl_heromusichub", false);
		SetCVar("samsara_cl_heromusic_doom", false);
		SetCVar("samsara_cl_heromusic_doom64", false);
		SetCVar("samsara_cl_heromusic_chex", false);
		SetCVar("samsara_cl_heromusic_heretic", false);
		SetCVar("samsara_cl_heromusic_wolf3d", false);
		SetCVar("samsara_cl_heromusic_totenkopf", false);
		SetCVar("samsara_cl_heromusic_hexen1", false);
		SetCVar("samsara_cl_heromusic_duke3d", false);
		SetCVar("samsara_cl_heromusic_dukelab", false);
		SetCVar("samsara_cl_heromusic_marathon", false);
		SetCVar("samsara_cl_heromusic_quake1", false);
		SetCVar("samsara_cl_heromusic_rott", false);
		SetCVar("samsara_cl_heromusic_bstone", false);
		SetCVar("samsara_cl_heromusic_blood", false);
		SetCVar("samsara_cl_heromusic_strife", false);
		SetCVar("samsara_cl_heromusic_erad", false);
		SetCVar("samsara_cl_heromusic_c7", false);
		SetCVar("samsara_cl_heromusic_rmr", false);
		SetCVar("samsara_cl_heromusic_darkf", false);
		SetCVar("samsara_cl_heromusic_ipog", false);
		SetCVar("samsara_cl_heromusic_disrup", false);
		SetCVar("samsara_cl_heromusic_witch", false);
		SetCVar("samsara_cl_heromusic_halflife", false);
		SetCVar("samsara_cl_heromusic_hlop", false);
		SetCVar("samsara_cl_heromusic_sw", false);
		SetCVar("samsara_cl_heromusic_cm", false);
		SetCVar("samsara_cl_heromusic_ps", false);
		SetCVar("samsara_cl_heromusic_rr", false);
		SetCVar("samsara_cl_heromusic_quake2", false);
		SetCVar("samsara_cl_heromusic_hexen2", false);
		SetCVar("samsara_cl_heromusic_goldeneye", false);
		SetCVar("samsara_cl_heromusic_catacomb", false);
		SetCVar("samsara_cl_heromusic_painkiller", false);
		SetCVar("samsara_cl_heromusic_unreal", false);
		SetCVar("samsara_cl_heromusic_rtcw", false);
		SetCVar("samsara_cl_heromusic_quake3", false);
		SetCVar("samsara_cl_heromusic_descent", false);
		SetCVar("samsara_cl_heromusic_deusex", false);
		SetCVar("samsara_cl_wolf3dimf", false);
		SetCVar("samsara_cl_hexcd", false);
		SetCVar("samsara_cl_rott13ost", false);
		SetCVar("samsara_cl_bstoneimf", false);
		SetCVar("samsara_cl_bloodcd", false);
		SetCVar("samsara_cl_c7imf", false);
		SetCVar("samsara_cl_darkfpsx", false);
		SetCVar("samsara_cl_hex2cd", false);
		SetCVar("samsara_cl_c3dimf", false);
		SetCVar("samsara_cl_descentcd", false);

		// Alternative Characters
		SetCVar("samsara_cl_doommode", 2);
		SetCVar("samsara_cl_wolfmode", 0);
		SetCVar("samsara_cl_hexclass", 2);
		SetCVar("samsara_cl_dukemode", 1);
		SetCVar("samsara_cl_rottmode", 3);
		SetCVar("samsara_cl_bsaog", true);
		SetCVar("samsara_cl_eradmode", 0);
		SetCVar("samsara_cl_ipogmode", 0);
		SetCVar("samsara_cl_shephardmode", true);

		// Alternative Weapon Sounds
		SetCVar("samsara_cl_originaldoomsounds", 1);
		SetCVar("samsara_cl_strongholddoomsounds", true);
		SetCVar("samsara_cl_quake1sounds", 0);
		SetCVar("samsara_cl_rottsounds", false);
		SetCVar("samsara_cl_rebelmoonrisingsounds", true);
		SetCVar("samsara_cl_quake2sounds", true);
		SetCVar("samsara_cl_goldeneyesounds", false);
		SetCVar("samsara_cl_unrealsounds", true);
		SetCVar("samsara_cl_rtcwsounds", 1);
		SetCVar("samsara_cl_quake3sounds", 1);

		// Blood and Gore Preferences
		SetCVar("samsara_cl_bloodyhell", 8);
		SetCVar("samsara_cl_bloodypersistent", false);

		// Character Equipment Loadout Options
		SetCVar("samsara_cl_doomguy_fallbackranged", true);
		SetCVar("samsara_cl_doomguy_slot4", true);
		SetCVar("samsara_cl_doomguy_slot6", true);
		SetCVar("samsara_cl_doomguy_slot7", 2);
		SetCVar("samsara_cl_chex_fallbackranged", true);
		SetCVar("samsara_cl_freeman_fallbackmelee", false);
		SetCVar("samsara_cl_freeman_slot1", false);
		SetCVar("samsara_cl_freeman_slot3", false);
		SetCVar("samsara_cl_freeman_slot5", false);
		SetCVar("samsara_cl_freeman_slot6", true);
		SetCVar("samsara_cl_freeman_slot7", false);
		SetCVar("samsara_cl_freeman_unique1", true);
		SetCVar("samsara_cl_freeman_unique2", true);
		SetCVar("samsara_cl_freeman_unique3", false);
		SetCVar("samsara_cl_shephard_fallbackmelee", false);
		SetCVar("samsara_cl_shephard_slot1", true);
		SetCVar("samsara_cl_shephard_slot3", true);
		SetCVar("samsara_cl_shephard_slot5", true);
		SetCVar("samsara_cl_shephard_slot6", true);
		SetCVar("samsara_cl_shephard_slot7", true);
		SetCVar("samsara_cl_shephard_unique1", true);
		SetCVar("samsara_cl_shephard_unique2", true);
		SetCVar("samsara_cl_shephard_unique3", false);
		SetCVar("samsara_cl_bond_fallbackranged", 1);
		SetCVar("samsara_cl_bond_slot3", true);
		SetCVar("samsara_cl_bond_slot6s", 1);
		SetCVar("samsara_cl_bond_unique2", 1);
		break;
	}
}

script "SamsaraServerSidePresetSelection" (void)
{
    int currentiwad = GetCVar("samsara_currentgame");

	switch(GetCvar("samsara_serversidepresetvalue"))
	{
		case 0: // Vanilla

		// General Options
		SetCVar("samsara_jumpmod", 0);
		SetCVar("samsara_armormode", 0);
		SetCVar("samsara_armorpickupbehavior", 0);
		SetCVar("samsara_speedmod", 0);
		SetCVar("samsara_nohealth", false);
		SetCVar("samsara_nohealthcap", false);
		SetCVar("samsara_noarmorcap", false);
		SetCVar("samsara_nomonologues", true);
		SetCVar("samsara_experiencegain", 2);
		SetCVar("samsara_dukesoundboard", false);
		SetCVar("samsara_microwavepop", false);
		SetCVar("samsara_unmakerartifacts", 0);
		SetCVar("samsara_strifeupgrades", 0);
		SetCVar("samsara_mp_startingGold", 0);
		SetCVar("samsara_deusexstartingskills", 0);
		SetCVar("samsara_randomcharacters", 0);
		SetCVar("samsara_misccharacterspawnmode", 1);
		SetCVar("samsara_deathmatchcharacters", false);
		SetCVar("samsara_restorehealth", 0);
		SetCVar("samsara_keepmaxhealth", false);
		SetCVar("samsara_forcefootstepsounds", false);
		SetCVar("samsara_merrychristmas", false);

		// LMS Options
		SetCVar("samsara_lmsrules", false);
		SetCVar("samsara_lmshealth", 0);
		SetCVar("samsara_lmsarmor", 0);
		SetCVar("samsara_lmsarmortier", 0);
		SetCVar("samsara_lmsuniques", false);
		SetCVar("samsara_lmspistol", true);
		SetCVar("samsara_lmschainsaw", true);
		SetCVar("samsara_lmsshotgun", true);
		SetCVar("samsara_lmsssg", true);
		SetCVar("samsara_lmschaingun", true);
		SetCVar("samsara_lmsminigun", false);
		SetCVar("samsara_lmsrocketlauncher", true);
		SetCVar("samsara_lmsgrenadelauncher", false);
		SetCVar("samsara_lmsplasma", true);
		SetCVar("samsara_lmsrailgun", false);
		SetCVar("samsara_lmsbfg9000", false);
		SetCVar("samsara_lmsbfg10k", false);
		SetCVar("samsara_lmsbackpack", true);

		// Turkey Puncher Options
		SetCVar("samsara_superturboturkeypuncher3000", 0);
		SetCVar("samsara_superturboturkeyfrequency", 35);
		SetCVar("samsara_superturboturkeylimit", 0);

		// Party Mode Options
		SetCVar("samsara_pdwtak_damage", 0);
		SetCVar("samsara_pdwtak_distance", 0);
		SetCVar("samsara_pdwtak_fulldamagedistance", 0);
		SetCVar("samsara_pdwtak_monsters", false);
		SetCVar("samsara_permaweaponlevel2", false);
		SetCVar("samsara_pinataparty", false);
		SetCVar("samsara_pinatapartyextras", false);
		SetCVar("samsara_sigilmode", false);
		SetCVar("samsara_allloadoutequipment", false);

		// Weapon Options
		SetCVar("samsara_permault", false);
		SetCVar("samsara_dualpickup", 1);
		SetCVar("samsara_extraweapons", false);
		SetCVar("samsara_uniquestart", 0);
		SetCVar("samsara_chainsawstart", 0);
		SetCVar("samsara_shotgunstart", 0);
		SetCVar("samsara_ssgstart", 0);
		SetCVar("samsara_chaingunstart", 0);
		SetCVar("samsara_minigunstart", 0);
		SetCVar("samsara_rocketlauncherstart", 0);
		SetCVar("samsara_grenadelauncherstart", 0);
		SetCVar("samsara_plasmastart", 0);
		SetCVar("samsara_railgunstart", 0);
		SetCVar("samsara_bfg9000start", 0);
		SetCVar("samsara_bfg10kstart", 0);
		SetCVar("samsara_backpackstart", false);
		SetCVar("samsara_reloadmode", 2);
		SetCVar("samsara_bottomlessmagazines", false);
		SetCVar("samsara_weaponoverheating", 2);
		SetCVar("samsara_noinventorycooldown", false);
		SetCVar("samsara_pistolammo", false);
		SetCVar("samsara_pistolstart", 0);
		SetCVar("samsara_slotmode", 0);
		SetCVar("samsara_instagibspread", false);

		// Ammo Options
		SetCVar("samsara_max_clip", 200);
		SetCVar("samsara_max_shell", 50);
		SetCVar("samsara_max_rocket", 50);
		SetCVar("samsara_max_cell", 300);
		SetCVar("samsara_ammomultiply", 1);
		SetCVar("samsara_increasingammo", false);
		SetCVar("samsara_increasingammopercent", 1);
		SetCVar("samsara_increasingammolimit", 1);
		SetCVar("samsara_noammocap", false);

		// Skulltag Spawn Options
		SetCVar("samsara_skulltagspawn", 0);
		SetCVar("samsara_skulltagreplace", true);

		// Item Options
		SetCVar("samsara_randomitems", 0);
		SetCVar("samsara_randomitemextras", false);
		SetCVar("samsara_randomitempool", false);
		SetCVar("samsara_replace_computermap", 0);
		SetCVar("samsara_replace_computermap_chance", 100);
		SetCVar("samsara_replace_berserk", 0);
		SetCVar("samsara_replace_berserk_chance", 100);
		SetCVar("samsara_replace_blursphere", 0);
		SetCVar("samsara_replace_blursphere_chance", 100);
		SetCVar("samsara_replace_invulnerability", 0);
		SetCVar("samsara_replace_invulnerability_chance", 100);
		SetCVar("samsara_replace_lightamplifier", 0);
		SetCVar("samsara_replace_lightamplifier_chance", 100);
		SetCVar("samsara_replace_teleport", 0);
		SetCVar("samsara_replace_teleport_chance", 100);
		SetCVar("samsara_replace_banishment", 0);
		SetCVar("samsara_replace_banishment_chance", 100);
		SetCVar("samsara_replace_invisibilitysphere", 0);
		SetCVar("samsara_replace_invisibility_chance", 100);
		SetCVar("samsara_replace_timefreeze", 0);
		SetCVar("samsara_replace_timefreeze_chance", 100);
		SetCVar("samsara_replace_randompowerup", 0);
		SetCVar("samsara_replace_randompowerup_chance", 100);
		SetCVar("samsara_replace_chainsaw", 0);
		SetCVar("samsara_replace_chainsaw_chance", 100);
		SetCVar("samsara_replace_shotgun", 0);
		SetCVar("samsara_replace_shotgun_chance", 100);
		SetCVar("samsara_replace_bfg9000", 0);
		SetCVar("samsara_replace_bfg9000_chance", 100);
		SetCVar("samsara_replace_bfg10k", 0);
		SetCVar("samsara_replace_bfg10k_chance", 100);

		// Random Character Spawn Options
		SetCVar("samsara_misccharspawn_duke3d", 0);
		SetCVar("samsara_misccharspawn_rott", false);
		SetCVar("samsara_misccharspawn_blood", false);
		SetCVar("samsara_misccharspawn_strife", false);
		SetCVar("samsara_misccharspawn_rmr", false);
		SetCVar("samsara_misccharspawn_halflife", 0);
		SetCVar("samsara_misccharspawn_sw", false);
		SetCVar("samsara_misccharspawn_ps", false);
		SetCVar("samsara_misccharspawn_rr", false);
		SetCVar("samsara_misccharspawn_quake2", false);
		SetCVar("samsara_misccharspawn_hexen2", false);

		// Class-Based Ability Options
		SetCVar("samsara_doomguybalance", 0);
		SetCVar("samsara_absolutionunmaker", false);
		SetCVar("samsara_classiclaz", false);
		SetCVar("samsara_bombwalls", false);
		SetCVar("samsara_banmorphovum", false);
		SetCVar("samsara_extralifeteleport", true);
		SetCVar("samsara_fullradiusdmg", false);
		SetCVar("samsara_permaquad", false);
		SetCVar("samsara_vanillaquake", false);
		SetCVar("samsara_banrottgodmode", false);
		SetCVar("samsara_lifeleechdrain", true);
		SetCVar("samsara_bloodakimbomode", 0);
		SetCVar("samsara_hlgaussjump", false);
		SetCVar("samsara_hlexplosivebolts", 3);
		SetCVar("samsara_nodemonmorph", false);
		SetCVar("samsara_notarotcardlimit", false);
		SetCVar("samsara_nopainkillercorpseremoval", false);
		SetCVar("samsara_descentflight", 2);
		SetCVar("samsara_deusexmovementpenalty", true);

		// Serverside Ability Options
		SetCVar("samsara_banjetpack", true);
		SetCVar("samsara_banwolfmove", false);
		SetCVar("samsara_banallies", true);
		SetCVar("samsara_nocustomgravity", true);
		SetCVar("samsara_forcerecoil", false);
		SetCVar("samsara_proximitybehavior", true);

		// Character Ban Options
		SetCVar("samsara_bandoomguy", false);
		SetCVar("samsara_bandoomguy64", false);
		SetCVar("samsara_bandoomguystr", false);
		SetCVar("samsara_banchex", false);
		SetCVar("samsara_bancorvus", false);
		SetCVar("samsara_banbj", false);
		SetCVar("samsara_banbjlost", false);
		SetCVar("samsara_banbjctk", false);
		SetCVar("samsara_banparias", false);
		SetCVar("samsara_banpariasclassic", false);
		SetCVar("samsara_bandaedolon", false);
		SetCVar("samsara_banbaratus", false);
		SetCVar("samsara_banduke", false);
		SetCVar("samsara_bandukelab", false);
		SetCVar("samsara_banduke64", false);
		SetCVar("samsara_banso", false);
		SetCVar("samsara_banranger", false);
		SetCVar("samsara_banfreely", false);
		SetCVar("samsara_bancassatt", false);
		SetCVar("samsara_banbarrett", false);
		SetCVar("samsara_banni", false);
		SetCVar("samsara_banwendt", false);
		SetCVar("samsara_banblake", false);
		SetCVar("samsara_bancaleb", false);
		SetCVar("samsara_banstrifeguy", false);
		SetCVar("samsara_baneleena", false);
		SetCVar("samsara_bankamchak", false);
		SetCVar("samsara_bandanblaze", false);
		SetCVar("samsara_banalliancecommando", false);
		SetCVar("samsara_banspaceseal", false);
		SetCVar("samsara_banrebelmooncommando", false);
		SetCVar("samsara_bankatarn", false);
		SetCVar("samsara_banmooman", false);
		SetCVar("samsara_bancyborg", false);
		SetCVar("samsara_banlizardman", false);
		SetCVar("samsara_banmutant", false);
		SetCVar("samsara_bandominatrix", false);
		SetCVar("samsara_bandisruptor", false);
		SetCVar("samsara_bangrondoval", false);
		SetCVar("samsara_banfreeman", false);
		SetCVar("samsara_banshephard", false);
		SetCVar("samsara_banwang", false);
		SetCVar("samsara_bancm", false);
		SetCVar("samsara_banjon", false);
		SetCVar("samsara_banrr", false);
		SetCVar("samsara_banq2", false);
		SetCVar("samsara_bandemoness", false);
		SetCVar("samsara_banbond", false);
		SetCVar("samsara_banpetton", false);
		SetCVar("samsara_bandaniel", false);
		SetCVar("samsara_banprisoner", false);
		SetCVar("samsara_banrtcw", false);
		SetCVar("samsara_bansarge", false);
		SetCVar("samsara_banpyrogx", false);
		SetCVar("samsara_banjcdenton", false);

		// Character Multiplier Options
		SetCVar("samsara_generaldamage", 0);
		SetCVar("samsara_generaldefense", 0);
		SetCVar("samsara_doomguydamage", 0);
		SetCVar("samsara_doomguydefense", 0);
		SetCVar("samsara_doomguy64damage", 0);
		SetCVar("samsara_doomguy64defense", 0);
		SetCVar("samsara_doomguystrdamage", 0);
		SetCVar("samsara_doomguystrdefense", 0);
		SetCVar("samsara_chexdamage", 0);
		SetCVar("samsara_chexdefense", 0);
		SetCVar("samsara_corvusdamage", 0);
		SetCVar("samsara_corvusdefense", 0);
		SetCVar("samsara_bjdamage", 0);
		SetCVar("samsara_bjdefense", 0);
		SetCVar("samsara_bjlostdamage", 0);
		SetCVar("samsara_bjlostdefense", 0);
		SetCVar("samsara_bjctkdamage", 0);
		SetCVar("samsara_bjctkdefense", 0);
		SetCVar("samsara_pariasdamage", 0);
		SetCVar("samsara_pariasdefense", 0);
		SetCVar("samsara_pariasclassicdamage", 0);
		SetCVar("samsara_pariasclassicdefense", 0);
		SetCVar("samsara_daedolondamage", 0);
		SetCVar("samsara_daedolondefense", 0);
		SetCVar("samsara_baratusdamage", 0);
		SetCVar("samsara_baratusdefense", 0);
		SetCVar("samsara_dukedamage", 0);
		SetCVar("samsara_dukedefense", 0);
		SetCVar("samsara_dukelabdamage", 0);
		SetCVar("samsara_dukelabdefense", 0);
		SetCVar("samsara_duke64damage", 0);
		SetCVar("samsara_duke64defense", 0);
		SetCVar("samsara_sodamage", 0);
		SetCVar("samsara_sodefense", 0);
		SetCVar("samsara_rangerdamage", 0);
		SetCVar("samsara_rangerdefense", 0);
		SetCVar("samsara_freelydamage", 0);
		SetCVar("samsara_freelydefense", 0);
		SetCVar("samsara_cassattdamage", 0);
		SetCVar("samsara_cassattdefense", 0);
		SetCVar("samsara_barrettdamage", 0);
		SetCVar("samsara_barrettdefense", 0);
		SetCVar("samsara_nidamage", 0);
		SetCVar("samsara_nidefense", 0);
		SetCVar("samsara_wendtdamage", 0);
		SetCVar("samsara_wendtdefense", 0);
		SetCVar("samsara_blakedamage", 0);
		SetCVar("samsara_blakedefense", 0);
		SetCVar("samsara_calebdamage", 0);
		SetCVar("samsara_calebdefense", 0);
		SetCVar("samsara_strifeguydamage", 0);
		SetCVar("samsara_strifeguydefense", 0);
		SetCVar("samsara_eleenadamage", 0);
		SetCVar("samsara_eleenadefense", 0);
		SetCVar("samsara_kamchakdamage", 0);
		SetCVar("samsara_kamchakdefense", 0);
		SetCVar("samsara_danblazedamage", 0);
		SetCVar("samsara_danblazedefense", 0);
		SetCVar("samsara_alliancecommandodamage", 0);
		SetCVar("samsara_alliancecommandodefense", 0);
		SetCVar("samsara_spacesealdamage", 0);
		SetCVar("samsara_spacesealdefense", 0);
		SetCVar("samsara_rebelmooncommandodamage", 0);
		SetCVar("samsara_rebelmooncommandodefense", 0);
		SetCVar("samsara_katarndamage", 0);
		SetCVar("samsara_katarndefense", 0);
		SetCVar("samsara_moomandamage", 0);
		SetCVar("samsara_moomandefense", 0);
		SetCVar("samsara_cyborgdamage", 0);
		SetCVar("samsara_cyborgdefense", 0);
		SetCVar("samsara_lizardmandamage", 0);
		SetCVar("samsara_lizardmandefense", 0);
		SetCVar("samsara_mutantdamage", 0);
		SetCVar("samsara_mutantdefense", 0);
		SetCVar("samsara_dominatrixdamage", 0);
		SetCVar("samsara_dominatrixdefense", 0);
		SetCVar("samsara_disruptordamage", 0);
		SetCVar("samsara_disruptordefense", 0);
		SetCVar("samsara_grondovaldamage", 0);
		SetCVar("samsara_grondovaldefense", 0);
		SetCVar("samsara_freemandamage", 0);
		SetCVar("samsara_freemandefense", 0);
		SetCVar("samsara_shepharddamage", 0);
		SetCVar("samsara_shepharddefense", 0);
		SetCVar("samsara_wangdamage", 0);
		SetCVar("samsara_wangdefense", 0);
		SetCVar("samsara_cmdamage", 0);
		SetCVar("samsara_cmdefense", 0);
		SetCVar("samsara_jondamage", 0);
		SetCVar("samsara_jondefense", 0);
		SetCVar("samsara_rrdamage", 0);
		SetCVar("samsara_rrdefense", 0);
		SetCVar("samsara_q2damage", 0);
		SetCVar("samsara_q2defense", 0);
		SetCVar("samsara_demonessdamage", 0);
		SetCVar("samsara_demonessdefense", 0);
		SetCVar("samsara_bonddamage", 0);
		SetCVar("samsara_bonddefense", 0);
		SetCVar("samsara_pettondamage", 0);
		SetCVar("samsara_pettondefense", 0);
		SetCVar("samsara_danieldamage", 0);
		SetCVar("samsara_danieldefense", 0);
		SetCVar("samsara_prisonerdamage", 0);
		SetCVar("samsara_prisonerdefense", 0);
		SetCVar("samsara_rtcwdamage", 0);
		SetCVar("samsara_rtcwdefense", 0);
		SetCVar("samsara_sargedamage", 0);
		SetCVar("samsara_sargedefense", 0);
		SetCVar("samsara_pyrogxdamage", 0);
		SetCVar("samsara_pyrogxdefense", 0);
		SetCVar("samsara_jcdentondamage", 0);
		SetCVar("samsara_jcdentondefense", 0);

		// Character Equipment Loadout Options
		SetCVar("samsara_doomguy_fallbackranged", 0);
		SetCVar("samsara_doomguy_slot4", 0);
		SetCVar("samsara_doomguy_slot6", 0);
		SetCVar("samsara_doomguy_slot7", 0);
		SetCVar("samsara_chex_fallbackranged", 0);
		SetCVar("samsara_freeman_fallbackmelee", 0);
		SetCVar("samsara_freeman_slot1", 0);
		SetCVar("samsara_freeman_slot3", 0);
		SetCVar("samsara_freeman_slot5", 0);
		SetCVar("samsara_freeman_slot6", 0);
		SetCVar("samsara_freeman_slot7", 0);
		SetCVar("samsara_freeman_unique1", 0);
		SetCVar("samsara_freeman_unique2", 0);
		SetCVar("samsara_freeman_unique3", 0);
		SetCVar("samsara_shephard_fallbackmelee", 0);
		SetCVar("samsara_shephard_slot1", 0);
		SetCVar("samsara_shephard_slot3", 0);
		SetCVar("samsara_shephard_slot5", 0);
		SetCVar("samsara_shephard_slot6", 0);
		SetCVar("samsara_shephard_slot7", 0);
		SetCVar("samsara_shephard_unique1", 0);
		SetCVar("samsara_shephard_unique2", 0);
		SetCVar("samsara_shephard_unique3", 0);
		SetCVar("samsara_bond_fallbackranged", 0);
		SetCVar("samsara_bond_slot3", 0);
		SetCVar("samsara_bond_slot6s", 0);
		SetCVar("samsara_bond_unique2", 0);
		break;

		case 1: // Samsara

		// General Options
		SetCVar("samsara_jumpmod", 0);
		SetCVar("samsara_armormode", 0);
		SetCVar("samsara_armorpickupbehavior", 1);
		SetCVar("samsara_speedmod", 0);
		SetCVar("samsara_nohealth", false);
		SetCVar("samsara_nohealthcap", false);
		SetCVar("samsara_noarmorcap", false);
		SetCVar("samsara_nomonologues", false);
		SetCVar("samsara_experiencegain", 2);
		SetCVar("samsara_dukesoundboard", false);
		SetCVar("samsara_microwavepop", false);
		SetCVar("samsara_unmakerartifacts", 0);
		SetCVar("samsara_strifeupgrades", 0);
		SetCVar("samsara_mp_startingGold", 0);
		SetCVar("samsara_deusexstartingskills", 0);
		SetCVar("samsara_randomcharacters", 0);
		SetCVar("samsara_misccharacterspawnmode", 1);
		SetCVar("samsara_deathmatchcharacters", false);
		SetCVar("samsara_restorehealth", 0);
		SetCVar("samsara_keepmaxhealth", false);
		SetCVar("samsara_forcefootstepsounds", false);
		SetCVar("samsara_merrychristmas", false);

		// LMS Options
		SetCVar("samsara_lmsrules", false);
		SetCVar("samsara_lmshealth", 0);
		SetCVar("samsara_lmsarmor", 0);
		SetCVar("samsara_lmsarmortier", 0);
		SetCVar("samsara_lmsuniques", false);
		SetCVar("samsara_lmspistol", true);
		SetCVar("samsara_lmschainsaw", true);
		SetCVar("samsara_lmsshotgun", true);
		SetCVar("samsara_lmsssg", true);
		SetCVar("samsara_lmschaingun", true);
		SetCVar("samsara_lmsminigun", false);
		SetCVar("samsara_lmsrocketlauncher", true);
		SetCVar("samsara_lmsgrenadelauncher", false);
		SetCVar("samsara_lmsplasma", true);
		SetCVar("samsara_lmsrailgun", false);
		SetCVar("samsara_lmsbfg9000", false);
		SetCVar("samsara_lmsbfg10k", false);
		SetCVar("samsara_lmsbackpack", true);

		// Turkey Puncher Options
		SetCVar("samsara_superturboturkeypuncher3000", 0);
		SetCVar("samsara_superturboturkeyfrequency", 35);
		SetCVar("samsara_superturboturkeylimit", 0);

		// Party Mode Options
		SetCVar("samsara_pdwtak_damage", 0);
		SetCVar("samsara_pdwtak_distance", 0);
		SetCVar("samsara_pdwtak_fulldamagedistance", 0);
		SetCVar("samsara_pdwtak_monsters", false);
		SetCVar("samsara_permaweaponlevel2", false);
		SetCVar("samsara_pinataparty", false);
		SetCVar("samsara_pinatapartyextras", false);
		SetCVar("samsara_sigilmode", false);
		SetCVar("samsara_allloadoutequipment", false);

		// Weapon Options
		SetCVar("samsara_permault", false);
		SetCVar("samsara_dualpickup", 4);
		SetCVar("samsara_extraweapons", false);
		SetCVar("samsara_uniquestart", 0);
		SetCVar("samsara_chainsawstart", 0);
		SetCVar("samsara_shotgunstart", 0);
		SetCVar("samsara_ssgstart", 0);
		SetCVar("samsara_chaingunstart", 0);
		SetCVar("samsara_minigunstart", 0);
		SetCVar("samsara_rocketlauncherstart", 0);
		SetCVar("samsara_grenadelauncherstart", 0);
		SetCVar("samsara_plasmastart", 0);
		SetCVar("samsara_railgunstart", 0);
		SetCVar("samsara_bfg9000start", 0);
		SetCVar("samsara_bfg10kstart", 0);
		SetCVar("samsara_backpackstart", false);
		SetCVar("samsara_reloadmode", 2);
		SetCVar("samsara_bottomlessmagazines", false);
		SetCVar("samsara_weaponoverheating", 2);
		SetCVar("samsara_noinventorycooldown", false);
		SetCVar("samsara_pistolammo", false);
		SetCVar("samsara_pistolstart", 0);
		SetCVar("samsara_slotmode", 11);
		SetCVar("samsara_instagibspread", false);

		// Ammo Options
		SetCVar("samsara_max_clip", 200);
		SetCVar("samsara_max_shell", 100);
		SetCVar("samsara_max_rocket", 50);
		SetCVar("samsara_max_cell", 300);
		SetCVar("samsara_ammomultiply", 1);
		SetCVar("samsara_increasingammo", false);
		SetCVar("samsara_increasingammopercent", 1);
		SetCVar("samsara_increasingammolimit", 1);
		SetCVar("samsara_noammocap", false);

		// Skulltag Spawn Options
		SetCVar("samsara_skulltagspawn", 0);
		SetCVar("samsara_skulltagreplace", true);

		// Item Options
		SetCVar("samsara_randomitems", 0);
		SetCVar("samsara_randomitemextras", false);
		SetCVar("samsara_randomitempool", false);
		SetCVar("samsara_replace_computermap", 36);
		SetCVar("samsara_replace_computermap_chance", 100);
		SetCVar("samsara_replace_berserk", 0);
		SetCVar("samsara_replace_berserk_chance", 100);
		SetCVar("samsara_replace_blursphere", 0);
		SetCVar("samsara_replace_blursphere_chance", 100);
		SetCVar("samsara_replace_invulnerability", 0);
		SetCVar("samsara_replace_invulnerability_chance", 100);
		SetCVar("samsara_replace_lightamplifier", 0);
		SetCVar("samsara_replace_lightamplifier_chance", 100);
		SetCVar("samsara_replace_teleport", 0);
		SetCVar("samsara_replace_teleport_chance", 100);
		SetCVar("samsara_replace_banishment", 0);
		SetCVar("samsara_replace_banishment_chance", 100);
		SetCVar("samsara_replace_invisibilitysphere", 0);
		SetCVar("samsara_replace_invisibility_chance", 100);
		SetCVar("samsara_replace_timefreeze", 0);
		SetCVar("samsara_replace_timefreeze_chance", 100);
		SetCVar("samsara_replace_randompowerup", 0);
		SetCVar("samsara_replace_randompowerup_chance", 100);
		SetCVar("samsara_replace_chainsaw", 0);
		SetCVar("samsara_replace_chainsaw_chance", 100);
		SetCVar("samsara_replace_shotgun", 0);
		SetCVar("samsara_replace_shotgun_chance", 100);
		SetCVar("samsara_replace_bfg9000", 0);
		SetCVar("samsara_replace_bfg9000_chance", 100);
		SetCVar("samsara_replace_bfg10k", 0);
		SetCVar("samsara_replace_bfg10k_chance", 100);

		// Random Character Spawn Options
		SetCVar("samsara_misccharspawn_duke3d", 0);
		SetCVar("samsara_misccharspawn_rott", false);
		SetCVar("samsara_misccharspawn_blood", false);
		SetCVar("samsara_misccharspawn_strife", false);
		SetCVar("samsara_misccharspawn_rmr", false);
		SetCVar("samsara_misccharspawn_halflife", 0);
		SetCVar("samsara_misccharspawn_sw", false);
		SetCVar("samsara_misccharspawn_ps", false);
		SetCVar("samsara_misccharspawn_rr", false);
		SetCVar("samsara_misccharspawn_quake2", false);
		SetCVar("samsara_misccharspawn_hexen2", false);

		// Class-Based Ability Options
		SetCVar("samsara_doomguybalance", 0);
		SetCVar("samsara_absolutionunmaker", false);
		SetCVar("samsara_classiclaz", false);
		SetCVar("samsara_bombwalls", false);
		SetCVar("samsara_banmorphovum", false);
		SetCVar("samsara_extralifeteleport", true);
		SetCVar("samsara_fullradiusdmg", false);
		SetCVar("samsara_permaquad", false);
		SetCVar("samsara_vanillaquake", false);
		SetCVar("samsara_banrottgodmode", false);
		SetCVar("samsara_lifeleechdrain", true);
		SetCVar("samsara_bloodakimbomode", 0);
		SetCVar("samsara_hlgaussjump", false);
		SetCVar("samsara_hlexplosivebolts", 3);
		SetCVar("samsara_nodemonmorph", false);
		SetCVar("samsara_notarotcardlimit", false);
		SetCVar("samsara_nopainkillercorpseremoval", false);
		SetCVar("samsara_descentflight", 2);
		SetCVar("samsara_deusexmovementpenalty", false);

		// Serverside Ability Options
		SetCVar("samsara_banjetpack", false);
		SetCVar("samsara_banwolfmove", false);
		SetCVar("samsara_banallies", true);
		SetCVar("samsara_nocustomgravity", false);
		SetCVar("samsara_forcerecoil", false);
		SetCVar("samsara_proximitybehavior", false);

		// Character Ban Options
		SetCVar("samsara_bandoomguy", false);
		SetCVar("samsara_bandoomguy64", false);
		SetCVar("samsara_bandoomguystr", false);
		SetCVar("samsara_banchex", false);
		SetCVar("samsara_bancorvus", false);
		SetCVar("samsara_banbj", false);
		SetCVar("samsara_banbjlost", false);
		SetCVar("samsara_banbjctk", false);
		SetCVar("samsara_banparias", false);
		SetCVar("samsara_banpariasclassic", false);
		SetCVar("samsara_bandaedolon", false);
		SetCVar("samsara_banbaratus", false);
		SetCVar("samsara_banduke", false);
		SetCVar("samsara_bandukelab", false);
		SetCVar("samsara_banduke64", false);
		SetCVar("samsara_banso", false);
		SetCVar("samsara_banranger", false);
		SetCVar("samsara_banfreely", false);
		SetCVar("samsara_bancassatt", false);
		SetCVar("samsara_banbarrett", false);
		SetCVar("samsara_banni", false);
		SetCVar("samsara_banwendt", false);
		SetCVar("samsara_banblake", false);
		SetCVar("samsara_bancaleb", false);
		SetCVar("samsara_banstrifeguy", false);
		SetCVar("samsara_baneleena", false);
		SetCVar("samsara_bankamchak", false);
		SetCVar("samsara_bandanblaze", false);
		SetCVar("samsara_banalliancecommando", false);
		SetCVar("samsara_banspaceseal", false);
		SetCVar("samsara_banrebelmooncommando", false);
		SetCVar("samsara_bankatarn", false);
		SetCVar("samsara_banmooman", false);
		SetCVar("samsara_bancyborg", false);
		SetCVar("samsara_banlizardman", false);
		SetCVar("samsara_banmutant", false);
		SetCVar("samsara_bandominatrix", false);
		SetCVar("samsara_bandisruptor", false);
		SetCVar("samsara_bangrondoval", false);
		SetCVar("samsara_banfreeman", false);
		SetCVar("samsara_banshephard", false);
		SetCVar("samsara_banwang", false);
		SetCVar("samsara_bancm", false);
		SetCVar("samsara_banjon", false);
		SetCVar("samsara_banrr", false);
		SetCVar("samsara_banq2", false);
		SetCVar("samsara_bandemoness", false);
		SetCVar("samsara_banbond", false);
		SetCVar("samsara_banpetton", false);
		SetCVar("samsara_bandaniel", false);
		SetCVar("samsara_banprisoner", false);
		SetCVar("samsara_banrtcw", false);
		SetCVar("samsara_bansarge", false);
		SetCVar("samsara_banpyrogx", false);
		SetCVar("samsara_banjcdenton", false);

		// Character Multiplier Options
		SetCVar("samsara_generaldamage", 0);
		SetCVar("samsara_generaldefense", 0);
		SetCVar("samsara_doomguydamage", 0);
		SetCVar("samsara_doomguydefense", 0);
		SetCVar("samsara_doomguy64damage", 0);
		SetCVar("samsara_doomguy64defense", 0);
		SetCVar("samsara_doomguystrdamage", 0);
		SetCVar("samsara_doomguystrdefense", 0);
		SetCVar("samsara_chexdamage", 0);
		SetCVar("samsara_chexdefense", 0);
		SetCVar("samsara_corvusdamage", 0);
		SetCVar("samsara_corvusdefense", 0);
		SetCVar("samsara_bjdamage", 0);
		SetCVar("samsara_bjdefense", 0);
		SetCVar("samsara_bjlostdamage", 0);
		SetCVar("samsara_bjlostdefense", 0);
		SetCVar("samsara_bjctkdamage", 0);
		SetCVar("samsara_bjctkdefense", 0);
		SetCVar("samsara_pariasdamage", 0);
		SetCVar("samsara_pariasdefense", 0);
		SetCVar("samsara_pariasclassicdamage", 0);
		SetCVar("samsara_pariasclassicdefense", 0);
		SetCVar("samsara_daedolondamage", 0);
		SetCVar("samsara_daedolondefense", 0);
		SetCVar("samsara_baratusdamage", 0);
		SetCVar("samsara_baratusdefense", 0);
		SetCVar("samsara_dukedamage", 0);
		SetCVar("samsara_dukedefense", 0);
		SetCVar("samsara_dukelabdamage", 0);
		SetCVar("samsara_dukelabdefense", 0);
		SetCVar("samsara_duke64damage", 0);
		SetCVar("samsara_duke64defense", 0);
		SetCVar("samsara_sodamage", 0);
		SetCVar("samsara_sodefense", 0);
		SetCVar("samsara_rangerdamage", 0);
		SetCVar("samsara_rangerdefense", 0);
		SetCVar("samsara_freelydamage", 0);
		SetCVar("samsara_freelydefense", 0);
		SetCVar("samsara_cassattdamage", 0);
		SetCVar("samsara_cassattdefense", 0);
		SetCVar("samsara_barrettdamage", 0);
		SetCVar("samsara_barrettdefense", 0);
		SetCVar("samsara_nidamage", 0);
		SetCVar("samsara_nidefense", 0);
		SetCVar("samsara_wendtdamage", 0);
		SetCVar("samsara_wendtdefense", 0);
		SetCVar("samsara_blakedamage", 0);
		SetCVar("samsara_blakedefense", 0);
		SetCVar("samsara_calebdamage", 0);
		SetCVar("samsara_calebdefense", 0);
		SetCVar("samsara_strifeguydamage", 0);
		SetCVar("samsara_strifeguydefense", 0);
		SetCVar("samsara_eleenadamage", 0);
		SetCVar("samsara_eleenadefense", 0);
		SetCVar("samsara_kamchakdamage", 0);
		SetCVar("samsara_kamchakdefense", 0);
		SetCVar("samsara_danblazedamage", 0);
		SetCVar("samsara_danblazedefense", 0);
		SetCVar("samsara_alliancecommandodamage", 0);
		SetCVar("samsara_alliancecommandodefense", 0);
		SetCVar("samsara_spacesealdamage", 0);
		SetCVar("samsara_spacesealdefense", 0);
		SetCVar("samsara_rebelmooncommandodamage", 0);
		SetCVar("samsara_rebelmooncommandodefense", 0);
		SetCVar("samsara_katarndamage", 0);
		SetCVar("samsara_katarndefense", 0);
		SetCVar("samsara_moomandamage", 0);
		SetCVar("samsara_moomandefense", 0);
		SetCVar("samsara_cyborgdamage", 0);
		SetCVar("samsara_cyborgdefense", 0);
		SetCVar("samsara_lizardmandamage", 0);
		SetCVar("samsara_lizardmandefense", 0);
		SetCVar("samsara_mutantdamage", 0);
		SetCVar("samsara_mutantdefense", 0);
		SetCVar("samsara_dominatrixdamage", 0);
		SetCVar("samsara_dominatrixdefense", 0);
		SetCVar("samsara_disruptordamage", 0);
		SetCVar("samsara_disruptordefense", 0);
		SetCVar("samsara_grondovaldamage", 0);
		SetCVar("samsara_grondovaldefense", 0);
		SetCVar("samsara_freemandamage", 0);
		SetCVar("samsara_freemandefense", 0);
		SetCVar("samsara_shepharddamage", 0);
		SetCVar("samsara_shepharddefense", 0);
		SetCVar("samsara_wangdamage", 0);
		SetCVar("samsara_wangdefense", 0);
		SetCVar("samsara_cmdamage", 0);
		SetCVar("samsara_cmdefense", 0);
		SetCVar("samsara_jondamage", 0);
		SetCVar("samsara_jondefense", 0);
		SetCVar("samsara_rrdamage", 0);
		SetCVar("samsara_rrdefense", 0);
		SetCVar("samsara_q2damage", 0);
		SetCVar("samsara_q2defense", 0);
		SetCVar("samsara_demonessdamage", 0);
		SetCVar("samsara_demonessdefense", 0);
		SetCVar("samsara_bonddamage", 0);
		SetCVar("samsara_bonddefense", 0);
		SetCVar("samsara_pettondamage", 0);
		SetCVar("samsara_pettondefense", 0);
		SetCVar("samsara_danieldamage", 0);
		SetCVar("samsara_danieldefense", 0);
		SetCVar("samsara_prisonerdamage", 0);
		SetCVar("samsara_prisonerdefense", 0);
		SetCVar("samsara_rtcwdamage", 0);
		SetCVar("samsara_rtcwdefense", 0);
		SetCVar("samsara_sargedamage", 0);
		SetCVar("samsara_sargedefense", 0);
		SetCVar("samsara_pyrogxdamage", 0);
		SetCVar("samsara_pyrogxdefense", 0);
		SetCVar("samsara_jcdentondamage", 0);
		SetCVar("samsara_jcdentondefense", 0);

		// Character Equipment Loadout Options
		SetCVar("samsara_doomguy_fallbackranged", 0);
		SetCVar("samsara_doomguy_slot4", 0);
		SetCVar("samsara_doomguy_slot6", 0);
		SetCVar("samsara_doomguy_slot7", 0);
		SetCVar("samsara_chex_fallbackranged", 0);
		SetCVar("samsara_freeman_fallbackmelee", 0);
		SetCVar("samsara_freeman_slot1", 0);
		SetCVar("samsara_freeman_slot3", 0);
		SetCVar("samsara_freeman_slot5", 0);
		SetCVar("samsara_freeman_slot6", 0);
		SetCVar("samsara_freeman_slot7", 0);
		SetCVar("samsara_freeman_unique1", 0);
		SetCVar("samsara_freeman_unique2", 0);
		SetCVar("samsara_freeman_unique3", 0);
		SetCVar("samsara_shephard_fallbackmelee", 0);
		SetCVar("samsara_shephard_slot1", 0);
		SetCVar("samsara_shephard_slot3", 0);
		SetCVar("samsara_shephard_slot5", 0);
		SetCVar("samsara_shephard_slot6", 0);
		SetCVar("samsara_shephard_slot7", 0);
		SetCVar("samsara_shephard_unique1", 0);
		SetCVar("samsara_shephard_unique2", 0);
		SetCVar("samsara_shephard_unique3", 0);
		SetCVar("samsara_bond_fallbackranged", 0);
		SetCVar("samsara_bond_slot3", 0);
		SetCVar("samsara_bond_slot6s", 0);
		SetCVar("samsara_bond_unique2", 0);
		break;

		case 2: // Samsara Reincarnation

		// General Options
		SetCVar("samsara_jumpmod", 0);
		SetCVar("samsara_armormode", 0);
		SetCVar("samsara_armorpickupbehavior", 1);
		SetCVar("samsara_speedmod", 0);
		SetCVar("samsara_nohealth", false);
		SetCVar("samsara_nohealthcap", false);
		SetCVar("samsara_noarmorcap", false);
		SetCVar("samsara_nomonologues", true);
		SetCVar("samsara_experiencegain", 1);
		SetCVar("samsara_dukesoundboard", false);
		SetCVar("samsara_microwavepop", false);
		SetCVar("samsara_unmakerartifacts", 0);
		SetCVar("samsara_strifeupgrades", 0);
		SetCVar("samsara_mp_startingGold", 1500);
		SetCVar("samsara_deusexstartingskills", 0);
		SetCVar("samsara_randomcharacters", 2);
		SetCVar("samsara_misccharacterspawnmode", 0);
		SetCVar("samsara_deathmatchcharacters", false);
		SetCVar("samsara_restorehealth", 0);
		SetCVar("samsara_keepmaxhealth", true);
		SetCVar("samsara_forcefootstepsounds", false);
		SetCVar("samsara_merrychristmas", false);

		// LMS Options
		SetCVar("samsara_lmsrules", false);
		SetCVar("samsara_lmshealth", 0);
		SetCVar("samsara_lmsarmor", 0);
		SetCVar("samsara_lmsarmortier", 0);
		SetCVar("samsara_lmsuniques", false);
		SetCVar("samsara_lmspistol", true);
		SetCVar("samsara_lmschainsaw", true);
		SetCVar("samsara_lmsshotgun", true);
		SetCVar("samsara_lmsssg", true);
		SetCVar("samsara_lmschaingun", true);
		SetCVar("samsara_lmsminigun", false);
		SetCVar("samsara_lmsrocketlauncher", true);
		SetCVar("samsara_lmsgrenadelauncher", false);
		SetCVar("samsara_lmsplasma", true);
		SetCVar("samsara_lmsrailgun", false);
		SetCVar("samsara_lmsbfg9000", false);
		SetCVar("samsara_lmsbfg10k", false);
		SetCVar("samsara_lmsbackpack", true);

		// Turkey Puncher Options
		SetCVar("samsara_superturboturkeypuncher3000", 0);
		SetCVar("samsara_superturboturkeyfrequency", 35);
		SetCVar("samsara_superturboturkeylimit", 0);

		// Party Mode Options
		SetCVar("samsara_pdwtak_damage", 0);
		SetCVar("samsara_pdwtak_distance", 0);
		SetCVar("samsara_pdwtak_fulldamagedistance", 0);
		SetCVar("samsara_pdwtak_monsters", false);
		SetCVar("samsara_permaweaponlevel2", false);
		SetCVar("samsara_pinataparty", false);
		SetCVar("samsara_pinatapartyextras", false);
		SetCVar("samsara_sigilmode", false);
		SetCVar("samsara_allloadoutequipment", false);

		// Weapon Options
		SetCVar("samsara_permault", false);
		SetCVar("samsara_dualpickup", 1);
		SetCVar("samsara_extraweapons", true);
		SetCVar("samsara_uniquestart", 0);
		SetCVar("samsara_chainsawstart", 0);
		SetCVar("samsara_shotgunstart", 0);
		SetCVar("samsara_ssgstart", 0);
		SetCVar("samsara_chaingunstart", 0);
		SetCVar("samsara_minigunstart", 0);
		SetCVar("samsara_rocketlauncherstart", 0);
		SetCVar("samsara_grenadelauncherstart", 0);
		SetCVar("samsara_plasmastart", 0);
		SetCVar("samsara_railgunstart", 0);
		SetCVar("samsara_bfg9000start", 0);
		SetCVar("samsara_bfg10kstart", 0);
		SetCVar("samsara_backpackstart", false);
		SetCVar("samsara_reloadmode", 3);
		SetCVar("samsara_bottomlessmagazines", false);
		SetCVar("samsara_weaponoverheating", 2);
		SetCVar("samsara_noinventorycooldown", false);
		SetCVar("samsara_pistolammo", false);
		SetCVar("samsara_pistolstart", 0);
		SetCVar("samsara_slotmode", 11);
		SetCVar("samsara_instagibspread", false);

		// Ammo Options
		SetCVar("samsara_max_clip", 200);
		SetCVar("samsara_max_shell", 100);
		SetCVar("samsara_max_rocket", 50);
		SetCVar("samsara_max_cell", 300);
		SetCVar("samsara_ammomultiply", 1);
		SetCVar("samsara_increasingammo", false);
		SetCVar("samsara_increasingammopercent", 1);
		SetCVar("samsara_increasingammolimit", 1);
		SetCVar("samsara_noammocap", false);

		// Skulltag Spawn Options
		SetCVar("samsara_skulltagspawn", 25);
		SetCVar("samsara_skulltagreplace", true);

		// Item Options
		SetCVar("samsara_randomitems", 0);
		SetCVar("samsara_randomitemextras", false);
		SetCVar("samsara_randomitempool", false);
		SetCVar("samsara_replace_computermap", 0);
		SetCVar("samsara_replace_computermap_chance", 100);
		SetCVar("samsara_replace_berserk", 0);
		SetCVar("samsara_replace_berserk_chance", 100);
		SetCVar("samsara_replace_blursphere", 32);
		SetCVar("samsara_replace_blursphere_chance", 50);
		SetCVar("samsara_replace_invulnerability", 0);
		SetCVar("samsara_replace_invulnerability_chance", 100);
		SetCVar("samsara_replace_lightamplifier", 0);
		SetCVar("samsara_replace_lightamplifier_chance", 100);
		SetCVar("samsara_replace_teleport", 0);
		SetCVar("samsara_replace_teleport_chance", 100);
		SetCVar("samsara_replace_banishment", 0);
		SetCVar("samsara_replace_banishment_chance", 100);
		SetCVar("samsara_replace_invisibilitysphere", 0);
		SetCVar("samsara_replace_invisibility_chance", 100);
		SetCVar("samsara_replace_timefreeze", 0);
		SetCVar("samsara_replace_timefreeze_chance", 100);
		SetCVar("samsara_replace_randompowerup", 0);
		SetCVar("samsara_replace_randompowerup_chance", 100);
		SetCVar("samsara_replace_chainsaw", 0);
		SetCVar("samsara_replace_chainsaw_chance", 100);
		SetCVar("samsara_replace_shotgun", 0);
		SetCVar("samsara_replace_shotgun_chance", 100);
		SetCVar("samsara_replace_bfg9000", 0);
		SetCVar("samsara_replace_bfg9000_chance", 100);
		SetCVar("samsara_replace_bfg10k", 0);
		SetCVar("samsara_replace_bfg10k_chance", 100);

		// Random Character Spawn Options
		SetCVar("samsara_misccharspawn_duke3d", 1);
		SetCVar("samsara_misccharspawn_rott", true);
		SetCVar("samsara_misccharspawn_blood", true);
		SetCVar("samsara_misccharspawn_strife", true);
		SetCVar("samsara_misccharspawn_rmr", true);
		SetCVar("samsara_misccharspawn_halflife", 1);
		SetCVar("samsara_misccharspawn_sw", true);
		SetCVar("samsara_misccharspawn_ps", true);
		SetCVar("samsara_misccharspawn_rr", true);
		SetCVar("samsara_misccharspawn_quake2", true);
		SetCVar("samsara_misccharspawn_hexen2", true);

		// Class-Based Ability Options
		SetCVar("samsara_doomguybalance", 1);
		SetCVar("samsara_absolutionunmaker", false);
		SetCVar("samsara_classiclaz", false);
		SetCVar("samsara_bombwalls", false);
		SetCVar("samsara_banmorphovum", true);
		SetCVar("samsara_extralifeteleport", true);
		SetCVar("samsara_fullradiusdmg", true);
		SetCVar("samsara_permaquad", true);
		SetCVar("samsara_vanillaquake", false);
		SetCVar("samsara_banrottgodmode", false);
		SetCVar("samsara_lifeleechdrain", true);
		SetCVar("samsara_bloodakimbomode", 0);
		SetCVar("samsara_hlgaussjump", false);
		SetCVar("samsara_hlexplosivebolts", 3);
		SetCVar("samsara_nodemonmorph", false);
		SetCVar("samsara_notarotcardlimit", false);
		SetCVar("samsara_nopainkillercorpseremoval", false);
		SetCVar("samsara_descentflight", 2);
		SetCVar("samsara_deusexmovementpenalty", false);

		// Serverside Ability Options
		SetCVar("samsara_banjetpack", false);
		SetCVar("samsara_banwolfmove", false);
		SetCVar("samsara_banallies", false);
		SetCVar("samsara_nocustomgravity", false);
		SetCVar("samsara_forcerecoil", false);
		SetCVar("samsara_proximitybehavior", false);

		// Character Ban Options
		SetCVar("samsara_bandoomguy", false);
		SetCVar("samsara_bandoomguy64", false);
		SetCVar("samsara_bandoomguystr", false);
		SetCVar("samsara_banchex", false);
		SetCVar("samsara_bancorvus", false);
		SetCVar("samsara_banbj", false);
		SetCVar("samsara_banbjlost", false);
		SetCVar("samsara_banbjctk", false);
		SetCVar("samsara_banparias", false);
		SetCVar("samsara_banpariasclassic", false);
		SetCVar("samsara_bandaedolon", false);
		SetCVar("samsara_banbaratus", false);
		SetCVar("samsara_banduke", false);
		SetCVar("samsara_bandukelab", false);
		SetCVar("samsara_banduke64", false);
		SetCVar("samsara_banso", false);
		SetCVar("samsara_banranger", false);
		SetCVar("samsara_banfreely", false);
		SetCVar("samsara_bancassatt", false);
		SetCVar("samsara_banbarrett", false);
		SetCVar("samsara_banni", false);
		SetCVar("samsara_banwendt", false);
		SetCVar("samsara_banblake", false);
		SetCVar("samsara_bancaleb", false);
		SetCVar("samsara_banstrifeguy", false);
		SetCVar("samsara_baneleena", false);
		SetCVar("samsara_bankamchak", false);
		SetCVar("samsara_bandanblaze", false);
		SetCVar("samsara_banalliancecommando", false);
		SetCVar("samsara_banspaceseal", false);
		SetCVar("samsara_banrebelmooncommando", false);
		SetCVar("samsara_bankatarn", false);
		SetCVar("samsara_banmooman", false);
		SetCVar("samsara_bancyborg", false);
		SetCVar("samsara_banlizardman", false);
		SetCVar("samsara_banmutant", false);
		SetCVar("samsara_bandominatrix", false);
		SetCVar("samsara_bandisruptor", false);
		SetCVar("samsara_bangrondoval", false);
		SetCVar("samsara_banfreeman", false);
		SetCVar("samsara_banshephard", false);
		SetCVar("samsara_banwang", false);
		SetCVar("samsara_bancm", false);
		SetCVar("samsara_banjon", false);
		SetCVar("samsara_banrr", false);
		SetCVar("samsara_banq2", false);
		SetCVar("samsara_bandemoness", false);
		SetCVar("samsara_banbond", false);
		SetCVar("samsara_banpetton", false);
		SetCVar("samsara_bandaniel", false);
		SetCVar("samsara_banprisoner", false);
		SetCVar("samsara_banrtcw", false);
		SetCVar("samsara_bansarge", false);
		SetCVar("samsara_banpyrogx", false);
		SetCVar("samsara_banjcdenton", false);

		// Character Multiplier Options
		SetCVar("samsara_generaldamage", 0);
		SetCVar("samsara_generaldefense", 0);
		SetCVar("samsara_doomguydamage", 0);
		SetCVar("samsara_doomguydefense", 0);
		SetCVar("samsara_doomguy64damage", 0);
		SetCVar("samsara_doomguy64defense", 0);
		SetCVar("samsara_doomguystrdamage", 0);
		SetCVar("samsara_doomguystrdefense", 0);
		SetCVar("samsara_chexdamage", 0);
		SetCVar("samsara_chexdefense", 0);
		SetCVar("samsara_corvusdamage", 0);
		SetCVar("samsara_corvusdefense", 0);
		SetCVar("samsara_bjdamage", 0);
		SetCVar("samsara_bjdefense", 0);
		SetCVar("samsara_bjlostdamage", 0);
		SetCVar("samsara_bjlostdefense", 0);
		SetCVar("samsara_bjctkdamage", 0);
		SetCVar("samsara_bjctkdefense", 0);
		SetCVar("samsara_pariasdamage", 0);
		SetCVar("samsara_pariasdefense", 0);
		SetCVar("samsara_pariasclassicdamage", 0);
		SetCVar("samsara_pariasclassicdefense", 0);
		SetCVar("samsara_daedolondamage", 0);
		SetCVar("samsara_daedolondefense", 0);
		SetCVar("samsara_baratusdamage", 0);
		SetCVar("samsara_baratusdefense", 0);
		SetCVar("samsara_dukedamage", 0);
		SetCVar("samsara_dukedefense", 0);
		SetCVar("samsara_dukelabdamage", 0);
		SetCVar("samsara_dukelabdefense", 0);
		SetCVar("samsara_duke64damage", 0);
		SetCVar("samsara_duke64defense", 0);
		SetCVar("samsara_sodamage", 0);
		SetCVar("samsara_sodefense", 0);
		SetCVar("samsara_rangerdamage", 0);
		SetCVar("samsara_rangerdefense", 0);
		SetCVar("samsara_freelydamage", 0);
		SetCVar("samsara_freelydefense", 0);
		SetCVar("samsara_cassattdamage", 0);
		SetCVar("samsara_cassattdefense", 0);
		SetCVar("samsara_barrettdamage", 0);
		SetCVar("samsara_barrettdefense", 0);
		SetCVar("samsara_nidamage", 0);
		SetCVar("samsara_nidefense", 0);
		SetCVar("samsara_wendtdamage", 0);
		SetCVar("samsara_wendtdefense", 0);
		SetCVar("samsara_blakedamage", 0);
		SetCVar("samsara_blakedefense", 0);
		SetCVar("samsara_calebdamage", 0);
		SetCVar("samsara_calebdefense", 0);
		SetCVar("samsara_strifeguydamage", 0);
		SetCVar("samsara_strifeguydefense", 0);
		SetCVar("samsara_eleenadamage", 0);
		SetCVar("samsara_eleenadefense", 0);
		SetCVar("samsara_kamchakdamage", 0);
		SetCVar("samsara_kamchakdefense", 0);
		SetCVar("samsara_danblazedamage", 0);
		SetCVar("samsara_danblazedefense", 0);
		SetCVar("samsara_alliancecommandodamage", 0);
		SetCVar("samsara_alliancecommandodefense", 0);
		SetCVar("samsara_spacesealdamage", 0);
		SetCVar("samsara_spacesealdefense", 0);
		SetCVar("samsara_rebelmooncommandodamage", 0);
		SetCVar("samsara_rebelmooncommandodefense", 0);
		SetCVar("samsara_katarndamage", 0);
		SetCVar("samsara_katarndefense", 0);
		SetCVar("samsara_moomandamage", 0);
		SetCVar("samsara_moomandefense", 0);
		SetCVar("samsara_cyborgdamage", 0);
		SetCVar("samsara_cyborgdefense", 0);
		SetCVar("samsara_lizardmandamage", 0);
		SetCVar("samsara_lizardmandefense", 0);
		SetCVar("samsara_mutantdamage", 0);
		SetCVar("samsara_mutantdefense", 0);
		SetCVar("samsara_dominatrixdamage", 0);
		SetCVar("samsara_dominatrixdefense", 0);
		SetCVar("samsara_disruptordamage", 0);
		SetCVar("samsara_disruptordefense", 0);
		SetCVar("samsara_grondovaldamage", 0);
		SetCVar("samsara_grondovaldefense", 0);
		SetCVar("samsara_freemandamage", 0);
		SetCVar("samsara_freemandefense", 0);
		SetCVar("samsara_shepharddamage", 0);
		SetCVar("samsara_shepharddefense", 0);
		SetCVar("samsara_wangdamage", 0);
		SetCVar("samsara_wangdefense", 0);
		SetCVar("samsara_cmdamage", 0);
		SetCVar("samsara_cmdefense", 0);
		SetCVar("samsara_jondamage", 0);
		SetCVar("samsara_jondefense", 0);
		SetCVar("samsara_rrdamage", 0);
		SetCVar("samsara_rrdefense", 0);
		SetCVar("samsara_q2damage", 0);
		SetCVar("samsara_q2defense", 0);
		SetCVar("samsara_demonessdamage", 0);
		SetCVar("samsara_demonessdefense", 0);
		SetCVar("samsara_bonddamage", 0);
		SetCVar("samsara_bonddefense", 0);
		SetCVar("samsara_pettondamage", 0);
		SetCVar("samsara_pettondefense", 0);
		SetCVar("samsara_danieldamage", 0);
		SetCVar("samsara_danieldefense", 0);
		SetCVar("samsara_prisonerdamage", 0);
		SetCVar("samsara_prisonerdefense", 0);
		SetCVar("samsara_rtcwdamage", 0);
		SetCVar("samsara_rtcwdefense", 0);
		SetCVar("samsara_sargedamage", 0);
		SetCVar("samsara_sargedefense", 0);
		SetCVar("samsara_pyrogxdamage", 0);
		SetCVar("samsara_pyrogxdefense", 0);
		SetCVar("samsara_jcdentondamage", 0);
		SetCVar("samsara_jcdentondefense", 0);

		// Character Equipment Loadout Options
		SetCVar("samsara_doomguy_fallbackranged", 0);
		SetCVar("samsara_doomguy_slot4", 0);
		SetCVar("samsara_doomguy_slot6", 0);
		SetCVar("samsara_doomguy_slot7", 0);
		SetCVar("samsara_chex_fallbackranged", 0);
		SetCVar("samsara_freeman_fallbackmelee", 0);
		SetCVar("samsara_freeman_slot1", 0);
		SetCVar("samsara_freeman_slot3", 0);
		SetCVar("samsara_freeman_slot5", 0);
		SetCVar("samsara_freeman_slot6", 0);
		SetCVar("samsara_freeman_slot7", 0);
		SetCVar("samsara_freeman_unique1", 0);
		SetCVar("samsara_freeman_unique2", 0);
		SetCVar("samsara_freeman_unique3", 0);
		SetCVar("samsara_shephard_fallbackmelee", 0);
		SetCVar("samsara_shephard_slot1", 0);
		SetCVar("samsara_shephard_slot3", 0);
		SetCVar("samsara_shephard_slot5", 0);
		SetCVar("samsara_shephard_slot6", 0);
		SetCVar("samsara_shephard_slot7", 0);
		SetCVar("samsara_shephard_unique1", 0);
		SetCVar("samsara_shephard_unique2", 0);
		SetCVar("samsara_shephard_unique3", 0);
		SetCVar("samsara_bond_fallbackranged", 0);
		SetCVar("samsara_bond_slot3", 0);
		SetCVar("samsara_bond_slot6s", 0);
		SetCVar("samsara_bond_unique2", 0);
		break;

		// Secret presets
		case 100: // cubebert's Settings

		// General Options
		SetCVar("samsara_jumpmod", 0);
		SetCVar("samsara_armormode", 0);
		SetCVar("samsara_armorpickupbehavior", 0);
		SetCVar("samsara_speedmod", 0);
		SetCVar("samsara_nohealth", false);
		SetCVar("samsara_nohealthcap", false);
		SetCVar("samsara_noarmorcap", false);
		SetCVar("samsara_nomonologues", true);
		SetCVar("samsara_experiencegain", 1);
		SetCVar("samsara_dukesoundboard", false);
		SetCVar("samsara_microwavepop", false);
		SetCVar("samsara_unmakerartifacts", 0);
		SetCVar("samsara_strifeupgrades", 5);
		SetCVar("samsara_mp_startingGold", 2000);
		SetCVar("samsara_deusexstartingskills", 1);
		SetCVar("samsara_randomcharacters", 0);
		SetCVar("samsara_misccharacterspawnmode", 1);
		SetCVar("samsara_deathmatchcharacters", false);
		SetCVar("samsara_restorehealth", 0);
		SetCVar("samsara_keepmaxhealth", true);
		SetCVar("samsara_forcefootstepsounds", false);
		SetCVar("samsara_merrychristmas", false);

		// LMS Options
		SetCVar("samsara_lmsrules", false);
		SetCVar("samsara_lmshealth", 100);
		SetCVar("samsara_lmsarmor", 200);
		SetCVar("samsara_lmsarmortier", 2);
		SetCVar("samsara_lmsuniques", true);
		SetCVar("samsara_lmspistol", true);
		SetCVar("samsara_lmschainsaw", true);
		SetCVar("samsara_lmsshotgun", true);
		SetCVar("samsara_lmsssg", true);
		SetCVar("samsara_lmschaingun", true);
		SetCVar("samsara_lmsminigun", true);
		SetCVar("samsara_lmsrocketlauncher", true);
		SetCVar("samsara_lmsgrenadelauncher", true);
		SetCVar("samsara_lmsplasma", true);
		SetCVar("samsara_lmsrailgun", true);
		SetCVar("samsara_lmsbfg9000", true);
		SetCVar("samsara_lmsbfg10k", true);
		SetCVar("samsara_lmsbackpack", true);

		// Turkey Puncher Options
		SetCVar("samsara_superturboturkeypuncher3000", 0);
		SetCVar("samsara_superturboturkeyfrequency", 35);
		SetCVar("samsara_superturboturkeylimit", 0);

		// Party Mode Options
		SetCVar("samsara_pdwtak_damage", 0);
		SetCVar("samsara_pdwtak_distance", 0);
		SetCVar("samsara_pdwtak_fulldamagedistance", 0);
		SetCVar("samsara_pdwtak_monsters", false);
		SetCVar("samsara_permaweaponlevel2", false);
		SetCVar("samsara_pinataparty", false);
		SetCVar("samsara_pinatapartyextras", true);
		SetCVar("samsara_sigilmode", false);
		SetCVar("samsara_allloadoutequipment", false);

		// Weapon Options
		SetCVar("samsara_permault", false);
		SetCVar("samsara_dualpickup", 1);
		SetCVar("samsara_extraweapons", true);
		SetCVar("samsara_uniquestart", 0);
		SetCVar("samsara_chainsawstart", 0);
		SetCVar("samsara_shotgunstart", 0);
		SetCVar("samsara_ssgstart", 0);
		SetCVar("samsara_chaingunstart", 0);
		SetCVar("samsara_minigunstart", 0);
		SetCVar("samsara_rocketlauncherstart", 0);
		SetCVar("samsara_grenadelauncherstart", 0);
		SetCVar("samsara_plasmastart", 0);
		SetCVar("samsara_railgunstart", 0);
		SetCVar("samsara_bfg9000start", 0);
		SetCVar("samsara_bfg10kstart", 0);
		SetCVar("samsara_backpackstart", false);
		SetCVar("samsara_reloadmode", 2);
		SetCVar("samsara_bottomlessmagazines", false);
		SetCVar("samsara_weaponoverheating", 1);
		SetCVar("samsara_noinventorycooldown", false);
		SetCVar("samsara_pistolammo", false);
		SetCVar("samsara_pistolstart", 0);
		SetCVar("samsara_slotmode", 0);
		SetCVar("samsara_instagibspread", false);

		// Ammo Options
		SetCVar("samsara_max_clip", 200);
		SetCVar("samsara_max_shell", 100);
		SetCVar("samsara_max_rocket", 50);
		SetCVar("samsara_max_cell", 300);
		SetCVar("samsara_ammomultiply", 1);
		SetCVar("samsara_increasingammo", false);
		SetCVar("samsara_increasingammopercent", 5);
		SetCVar("samsara_increasingammolimit", 0);
		SetCVar("samsara_noammocap", false);

		// Skulltag Spawn Options
		SetCVar("samsara_skulltagspawn", 1);
		SetCVar("samsara_skulltagreplace", false);

		// Item Options
		SetCVar("samsara_randomitems", 0);
		SetCVar("samsara_randomitemextras", true);
		SetCVar("samsara_randomitempool", false);
		SetCVar("samsara_replace_computermap", 36);
		SetCVar("samsara_replace_computermap_chance", 100);
		SetCVar("samsara_replace_berserk", 0);
		SetCVar("samsara_replace_berserk_chance", 100);
		SetCVar("samsara_replace_blursphere", 0);
		SetCVar("samsara_replace_blursphere_chance", 100);
		SetCVar("samsara_replace_invulnerability", 0);
		SetCVar("samsara_replace_invulnerability_chance", 100);
		SetCVar("samsara_replace_lightamplifier", 0);
		SetCVar("samsara_replace_lightamplifier_chance", 100);
		SetCVar("samsara_replace_teleport", 0);
		SetCVar("samsara_replace_teleport_chance", 100);
		SetCVar("samsara_replace_banishment", 0);
		SetCVar("samsara_replace_banishment_chance", 100);
		SetCVar("samsara_replace_invisibilitysphere", 0);
		SetCVar("samsara_replace_invisibility_chance", 100);
		SetCVar("samsara_replace_timefreeze", 0);
		SetCVar("samsara_replace_timefreeze_chance", 100);
		SetCVar("samsara_replace_randompowerup", 0);
		SetCVar("samsara_replace_randompowerup_chance", 100);
		SetCVar("samsara_replace_chainsaw", 0);
		SetCVar("samsara_replace_chainsaw_chance", 100);
		SetCVar("samsara_replace_shotgun", 0);
		SetCVar("samsara_replace_shotgun_chance", 100);
		SetCVar("samsara_replace_bfg9000", 0);
		SetCVar("samsara_replace_bfg9000_chance", 100);
		SetCVar("samsara_replace_bfg10k", 0);
		SetCVar("samsara_replace_bfg10k_chance", 100);

		// Random Character Spawn Options
		SetCVar("samsara_misccharspawn_duke3d", 0);
		SetCVar("samsara_misccharspawn_rott", false);
		SetCVar("samsara_misccharspawn_blood", false);
		SetCVar("samsara_misccharspawn_strife", false);
		SetCVar("samsara_misccharspawn_rmr", false);
		SetCVar("samsara_misccharspawn_halflife", 0);
		SetCVar("samsara_misccharspawn_sw", false);
		SetCVar("samsara_misccharspawn_ps", false);
		SetCVar("samsara_misccharspawn_rr", false);
		SetCVar("samsara_misccharspawn_quake2", false);
		SetCVar("samsara_misccharspawn_hexen2", false);

		// Class-Based Ability Options
		SetCVar("samsara_doomguybalance", 2);
		SetCVar("samsara_absolutionunmaker", false);
		SetCVar("samsara_classiclaz", false);
		SetCVar("samsara_bombwalls", false);
		SetCVar("samsara_banmorphovum", false);
		SetCVar("samsara_extralifeteleport", true);
		SetCVar("samsara_fullradiusdmg", true);
		SetCVar("samsara_permaquad", true);
		SetCVar("samsara_vanillaquake", false);
		SetCVar("samsara_banrottgodmode", true);
		SetCVar("samsara_lifeleechdrain", true);
		SetCVar("samsara_bloodakimbomode", 3);
		SetCVar("samsara_hlgaussjump", false);
		SetCVar("samsara_hlexplosivebolts", 3);
		SetCVar("samsara_nodemonmorph", false);
		SetCVar("samsara_notarotcardlimit", false);
		SetCVar("samsara_nopainkillercorpseremoval", true);
		SetCVar("samsara_descentflight", 2);
		SetCVar("samsara_deusexmovementpenalty", true);

		// Serverside Ability Options
		SetCVar("samsara_banjetpack", false);
		SetCVar("samsara_banwolfmove", false);
		SetCVar("samsara_banallies", true);
		SetCVar("samsara_nocustomgravity", false);
		SetCVar("samsara_forcerecoil", false);
		SetCVar("samsara_proximitybehavior", true);

		// Character Ban Options
		SetCVar("samsara_bandoomguy", false);
		SetCVar("samsara_bandoomguy64", false);
		SetCVar("samsara_bandoomguystr", false);
		SetCVar("samsara_banchex", false);
		SetCVar("samsara_bancorvus", false);
		SetCVar("samsara_banbj", false);
		SetCVar("samsara_banbjlost", false);
		SetCVar("samsara_banbjctk", false);
		SetCVar("samsara_banparias", false);
		SetCVar("samsara_banpariasclassic", false);
		SetCVar("samsara_bandaedolon", false);
		SetCVar("samsara_banbaratus", false);
		SetCVar("samsara_banduke", false);
		SetCVar("samsara_bandukelab", false);
		SetCVar("samsara_banduke64", false);
		SetCVar("samsara_banso", false);
		SetCVar("samsara_banranger", false);
		SetCVar("samsara_banfreely", false);
		SetCVar("samsara_bancassatt", false);
		SetCVar("samsara_banbarrett", false);
		SetCVar("samsara_banni", false);
		SetCVar("samsara_banwendt", false);
		SetCVar("samsara_banblake", false);
		SetCVar("samsara_bancaleb", false);
		SetCVar("samsara_banstrifeguy", false);
		SetCVar("samsara_baneleena", false);
		SetCVar("samsara_bankamchak", false);
		SetCVar("samsara_bandanblaze", false);
		SetCVar("samsara_banalliancecommando", false);
		SetCVar("samsara_banspaceseal", false);
		SetCVar("samsara_banrebelmooncommando", false);
		SetCVar("samsara_bankatarn", false);
		SetCVar("samsara_banmooman", false);
		SetCVar("samsara_bancyborg", false);
		SetCVar("samsara_banlizardman", false);
		SetCVar("samsara_banmutant", false);
		SetCVar("samsara_bandominatrix", false);
		SetCVar("samsara_bandisruptor", false);
		SetCVar("samsara_bangrondoval", false);
		SetCVar("samsara_banfreeman", false);
		SetCVar("samsara_banshephard", false);
		SetCVar("samsara_banwang", false);
		SetCVar("samsara_bancm", false);
		SetCVar("samsara_banjon", false);
		SetCVar("samsara_banrr", false);
		SetCVar("samsara_banq2", false);
		SetCVar("samsara_bandemoness", false);
		SetCVar("samsara_banbond", false);
		SetCVar("samsara_banpetton", false);
		SetCVar("samsara_bandaniel", false);
		SetCVar("samsara_banprisoner", false);
		SetCVar("samsara_banrtcw", false);
		SetCVar("samsara_bansarge", false);
		SetCVar("samsara_banpyrogx", false);
		SetCVar("samsara_banjcdenton", false);

		// Character Multiplier Options
		SetCVar("samsara_generaldamage", 0);
		SetCVar("samsara_generaldefense", 0);
		SetCVar("samsara_doomguydamage", 0);
		SetCVar("samsara_doomguydefense", 0);
		SetCVar("samsara_doomguy64damage", 0);
		SetCVar("samsara_doomguy64defense", 0);
		SetCVar("samsara_doomguystrdamage", 0);
		SetCVar("samsara_doomguystrdefense", 0);
		SetCVar("samsara_chexdamage", 0);
		SetCVar("samsara_chexdefense", 0);
		SetCVar("samsara_corvusdamage", 0);
		SetCVar("samsara_corvusdefense", 0);
		SetCVar("samsara_bjdamage", 0);
		SetCVar("samsara_bjdefense", 0);
		SetCVar("samsara_bjlostdamage", 0);
		SetCVar("samsara_bjlostdefense", 0);
		SetCVar("samsara_bjctkdamage", 0);
		SetCVar("samsara_bjctkdefense", 0);
		SetCVar("samsara_pariasdamage", 0);
		SetCVar("samsara_pariasdefense", 0);
		SetCVar("samsara_pariasclassicdamage", 0);
		SetCVar("samsara_pariasclassicdefense", 0);
		SetCVar("samsara_daedolondamage", 0);
		SetCVar("samsara_daedolondefense", 0);
		SetCVar("samsara_baratusdamage", 0);
		SetCVar("samsara_baratusdefense", 0);
		SetCVar("samsara_dukedamage", 0);
		SetCVar("samsara_dukedefense", 0);
		SetCVar("samsara_dukelabdamage", 0);
		SetCVar("samsara_dukelabdefense", 0);
		SetCVar("samsara_duke64damage", 0);
		SetCVar("samsara_duke64defense", 0);
		SetCVar("samsara_sodamage", 0);
		SetCVar("samsara_sodefense", 0);
		SetCVar("samsara_rangerdamage", 0);
		SetCVar("samsara_rangerdefense", 0);
		SetCVar("samsara_freelydamage", 0);
		SetCVar("samsara_freelydefense", 0);
		SetCVar("samsara_cassattdamage", 0);
		SetCVar("samsara_cassattdefense", 0);
		SetCVar("samsara_barrettdamage", 0);
		SetCVar("samsara_barrettdefense", 0);
		SetCVar("samsara_nidamage", 0);
		SetCVar("samsara_nidefense", 0);
		SetCVar("samsara_wendtdamage", 0);
		SetCVar("samsara_wendtdefense", 0);
		SetCVar("samsara_blakedamage", 0);
		SetCVar("samsara_blakedefense", 0);
		SetCVar("samsara_calebdamage", 0);
		SetCVar("samsara_calebdefense", 0);
		SetCVar("samsara_strifeguydamage", 0);
		SetCVar("samsara_strifeguydefense", 0);
		SetCVar("samsara_eleenadamage", 0);
		SetCVar("samsara_eleenadefense", 0);
		SetCVar("samsara_kamchakdamage", 0);
		SetCVar("samsara_kamchakdefense", 0);
		SetCVar("samsara_danblazedamage", 0);
		SetCVar("samsara_danblazedefense", 0);
		SetCVar("samsara_alliancecommandodamage", 0);
		SetCVar("samsara_alliancecommandodefense", 0);
		SetCVar("samsara_spacesealdamage", 0);
		SetCVar("samsara_spacesealdefense", 0);
		SetCVar("samsara_rebelmooncommandodamage", 0);
		SetCVar("samsara_rebelmooncommandodefense", 0);
		SetCVar("samsara_katarndamage", 0);
		SetCVar("samsara_katarndefense", 0);
		SetCVar("samsara_moomandamage", 0);
		SetCVar("samsara_moomandefense", 0);
		SetCVar("samsara_cyborgdamage", 0);
		SetCVar("samsara_cyborgdefense", 0);
		SetCVar("samsara_lizardmandamage", 0);
		SetCVar("samsara_lizardmandefense", 0);
		SetCVar("samsara_mutantdamage", 0);
		SetCVar("samsara_mutantdefense", 0);
		SetCVar("samsara_dominatrixdamage", 0);
		SetCVar("samsara_dominatrixdefense", 0);
		SetCVar("samsara_disruptordamage", 0);
		SetCVar("samsara_disruptordefense", 0);
		SetCVar("samsara_grondovaldamage", 0);
		SetCVar("samsara_grondovaldefense", 0);
		SetCVar("samsara_freemandamage", 0);
		SetCVar("samsara_freemandefense", 0);
		SetCVar("samsara_shepharddamage", 0);
		SetCVar("samsara_shepharddefense", 0);
		SetCVar("samsara_wangdamage", 0);
		SetCVar("samsara_wangdefense", 0);
		SetCVar("samsara_cmdamage", 0);
		SetCVar("samsara_cmdefense", 0);
		SetCVar("samsara_jondamage", 0);
		SetCVar("samsara_jondefense", 0);
		SetCVar("samsara_rrdamage", 0);
		SetCVar("samsara_rrdefense", 0);
		SetCVar("samsara_q2damage", 0);
		SetCVar("samsara_q2defense", 0);
		SetCVar("samsara_demonessdamage", 0);
		SetCVar("samsara_demonessdefense", 0);
		SetCVar("samsara_bonddamage", 0);
		SetCVar("samsara_bonddefense", 0);
		SetCVar("samsara_pettondamage", 0);
		SetCVar("samsara_pettondefense", 0);
		SetCVar("samsara_danieldamage", 0);
		SetCVar("samsara_danieldefense", 0);
		SetCVar("samsara_prisonerdamage", 0);
		SetCVar("samsara_prisonerdefense", 0);
		SetCVar("samsara_rtcwdamage", 0);
		SetCVar("samsara_rtcwdefense", 0);
		SetCVar("samsara_sargedamage", 0);
		SetCVar("samsara_sargedefense", 0);
		SetCVar("samsara_pyrogxdamage", 0);
		SetCVar("samsara_pyrogxdefense", 0);
		SetCVar("samsara_jcdentondamage", 0);
		SetCVar("samsara_jcdentondefense", 0);

		// Character Equipment Loadout Options
		SetCVar("samsara_doomguy_fallbackranged", 0);
		SetCVar("samsara_doomguy_slot4", 0);
		SetCVar("samsara_doomguy_slot6", 0);
		SetCVar("samsara_doomguy_slot7", 0);
		SetCVar("samsara_chex_fallbackranged", 0);
		SetCVar("samsara_freeman_fallbackmelee", 0);
		SetCVar("samsara_freeman_slot1", 0);
		SetCVar("samsara_freeman_slot3", 0);
		SetCVar("samsara_freeman_slot5", 0);
		SetCVar("samsara_freeman_slot6", 0);
		SetCVar("samsara_freeman_slot7", 0);
		SetCVar("samsara_freeman_unique1", 0);
		SetCVar("samsara_freeman_unique2", 0);
		SetCVar("samsara_freeman_unique3", 0);
		SetCVar("samsara_shephard_fallbackmelee", 0);
		SetCVar("samsara_shephard_slot1", 0);
		SetCVar("samsara_shephard_slot3", 0);
		SetCVar("samsara_shephard_slot5", 0);
		SetCVar("samsara_shephard_slot6", 0);
		SetCVar("samsara_shephard_slot7", 0);
		SetCVar("samsara_shephard_unique1", 0);
		SetCVar("samsara_shephard_unique2", 0);
		SetCVar("samsara_shephard_unique3", 0);
		SetCVar("samsara_bond_fallbackranged", 0);
		SetCVar("samsara_bond_slot3", 0);
		SetCVar("samsara_bond_slot6s", 0);
		SetCVar("samsara_bond_unique2", 0);

		if(GetCvar("samsara_mixerloaded"))
		{
			SetCVar("mm_presetvalue", 100);
			ACS_NamedExecuteAlways("ReMixerPresetSelection",0,0);
		}
		break;

		case 101: // tehvappy50's Settings (mainly tweaked for invasion on the zandronum side)

		// General Options
		SetCVar("samsara_jumpmod", 0);
		SetCVar("samsara_armormode", isZDoom() ? 0 : 3);
		SetCVar("samsara_armorpickupbehavior", 2);
		SetCVar("samsara_speedmod", 0);
		SetCVar("samsara_nohealth", false);
		SetCVar("samsara_nohealthcap", false);
		SetCVar("samsara_noarmorcap", false);
		SetCVar("samsara_nomonologues", isZDoom() ? false : true);
		SetCVar("samsara_experiencegain", 2);
		SetCVar("samsara_dukesoundboard", false);
		SetCVar("samsara_microwavepop", false);
		SetCVar("samsara_unmakerartifacts", isZDoom() ? 0 : 3);
		SetCVar("samsara_strifeupgrades", 0);
		SetCVar("samsara_mp_startingGold", 1500);
		SetCVar("samsara_deusexstartingskills", 0);
		SetCVar("samsara_randomcharacters", 0);
		SetCVar("samsara_misccharacterspawnmode", 0);
		SetCVar("samsara_deathmatchcharacters", false);
		SetCVar("samsara_restorehealth", 0);
		SetCVar("samsara_keepmaxhealth", true);
		SetCVar("samsara_forcefootstepsounds", false);
		SetCVar("samsara_merrychristmas", false);

		// LMS Options
		SetCVar("samsara_lmsrules", false);
		SetCVar("samsara_lmshealth", 0);
		SetCVar("samsara_lmsarmor", 0);
		SetCVar("samsara_lmsarmortier", 0);
		SetCVar("samsara_lmsuniques", false);
		SetCVar("samsara_lmspistol", true);
		SetCVar("samsara_lmschainsaw", true);
		SetCVar("samsara_lmsshotgun", true);
		SetCVar("samsara_lmsssg", true);
		SetCVar("samsara_lmschaingun", true);
		SetCVar("samsara_lmsminigun", false);
		SetCVar("samsara_lmsrocketlauncher", true);
		SetCVar("samsara_lmsgrenadelauncher", false);
		SetCVar("samsara_lmsplasma", true);
		SetCVar("samsara_lmsrailgun", false);
		SetCVar("samsara_lmsbfg9000", false);
		SetCVar("samsara_lmsbfg10k", false);
		SetCVar("samsara_lmsbackpack", true);

		// Turkey Puncher Options
		SetCVar("samsara_superturboturkeypuncher3000", 0);
		SetCVar("samsara_superturboturkeyfrequency", 35);
		SetCVar("samsara_superturboturkeylimit", 0);

		// Party Mode Options
		SetCVar("samsara_pdwtak_damage", 0);
		SetCVar("samsara_pdwtak_distance", 0);
		SetCVar("samsara_pdwtak_fulldamagedistance", 0);
		SetCVar("samsara_pdwtak_monsters", false);
		SetCVar("samsara_permaweaponlevel2", false);
		SetCVar("samsara_pinataparty", false);
		SetCVar("samsara_pinatapartyextras", isZDoom() ? true : false);
		SetCVar("samsara_sigilmode", false);
		SetCVar("samsara_allloadoutequipment", false);

		// Weapon Options
		SetCVar("samsara_permault", isZDoom() ? false : true);
		SetCVar("samsara_dualpickup", isZDoom() ? 2 : 3);
		SetCVar("samsara_extraweapons", true);
		SetCVar("samsara_uniquestart", isZDoom() ? 0 : 4);
		SetCVar("samsara_chainsawstart", isZDoom() ? 0 : 1);
		SetCVar("samsara_shotgunstart", isZDoom() ? 0 : 1);
		SetCVar("samsara_ssgstart", 0);
		SetCVar("samsara_chaingunstart", 0);
		SetCVar("samsara_minigunstart", 0);
		SetCVar("samsara_rocketlauncherstart", 0);
		SetCVar("samsara_grenadelauncherstart", 0);
		SetCVar("samsara_plasmastart", 0);
		SetCVar("samsara_railgunstart", 0);
		SetCVar("samsara_bfg9000start", 0);
		SetCVar("samsara_bfg10kstart", 0);
		SetCVar("samsara_backpackstart", isZDoom() ? false : true);
		SetCVar("samsara_reloadmode", isZDoom() ? 2 : 1);
		SetCVar("samsara_bottomlessmagazines", false);
		SetCVar("samsara_weaponoverheating", isZDoom() ? 2 : 0);
		SetCVar("samsara_noinventorycooldown", false);
		SetCVar("samsara_pistolammo", isZDoom() ? true : false);
		SetCVar("samsara_pistolstart", 0);
		SetCVar("samsara_slotmode", 11);
		SetCVar("samsara_instagibspread", false);

		// Ammo Options
		SetCVar("samsara_max_clip", 200);
		SetCVar("samsara_max_shell", 50);
		SetCVar("samsara_max_rocket", 50);
		SetCVar("samsara_max_cell", 300);
		SetCVar("samsara_ammomultiply", 1);
		SetCVar("samsara_increasingammo", true);
		SetCVar("samsara_increasingammopercent", 15);
		SetCVar("samsara_increasingammolimit", -1);
		SetCVar("samsara_noammocap", false);

		// Skulltag Spawn Options
		SetCVar("samsara_skulltagspawn", 0);
		SetCVar("samsara_skulltagreplace", false);

		// Item Options
		SetCVar("samsara_randomitems", isZDoom() ? 25 : 0);
		SetCVar("samsara_randomitemextras", isZDoom() ? true : false);
		SetCVar("samsara_randomitempool", isZDoom() ? true : false);
		SetCVar("samsara_replace_computermap", 0);
		SetCVar("samsara_replace_computermap_chance", 100);
		SetCVar("samsara_replace_berserk", currentiwad == GAME_STRIFE ? 13 : 0);
		SetCVar("samsara_replace_berserk_chance", 100);
		SetCVar("samsara_replace_blursphere", 0);
		SetCVar("samsara_replace_blursphere_chance", 100);
		SetCVar("samsara_replace_invulnerability", 0);
		SetCVar("samsara_replace_invulnerability_chance", 100);
		SetCVar("samsara_replace_lightamplifier", 0);
		SetCVar("samsara_replace_lightamplifier_chance", 100);
		SetCVar("samsara_replace_teleport", 0);
		SetCVar("samsara_replace_teleport_chance", 100);
		SetCVar("samsara_replace_banishment", 0);
		SetCVar("samsara_replace_banishment_chance", 100);
		SetCVar("samsara_replace_invisibilitysphere", 0);
		SetCVar("samsara_replace_invisibility_chance", 100);
		SetCVar("samsara_replace_timefreeze", isZDoom() ? 0 : 20);
		SetCVar("samsara_replace_timefreeze_chance", 100);
		SetCVar("samsara_replace_randompowerup", isZDoom() ? 0 : 20);
		SetCVar("samsara_replace_randompowerup_chance", 100);
		SetCVar("samsara_replace_chainsaw", 0);
		SetCVar("samsara_replace_chainsaw_chance", 100);
		SetCVar("samsara_replace_shotgun", 0);
		SetCVar("samsara_replace_shotgun_chance", 100);
		SetCVar("samsara_replace_bfg9000", 0);
		SetCVar("samsara_replace_bfg9000_chance", 100);
		SetCVar("samsara_replace_bfg10k", 0);
		SetCVar("samsara_replace_bfg10k_chance", 100);

		// Random Character Spawn Options
		SetCVar("samsara_misccharspawn_duke3d", isZDoom() ? 4 : 0);
		SetCVar("samsara_misccharspawn_rott", isZDoom() ? true : false);
		SetCVar("samsara_misccharspawn_blood", isZDoom() ? true : false);
		SetCVar("samsara_misccharspawn_strife", isZDoom() ? true : false);
		SetCVar("samsara_misccharspawn_rmr", isZDoom() ? true : false);
		SetCVar("samsara_misccharspawn_halflife", isZDoom() ? 4 : 0);
		SetCVar("samsara_misccharspawn_sw", isZDoom() ? true : false);
		SetCVar("samsara_misccharspawn_ps", isZDoom() ? true : false);
		SetCVar("samsara_misccharspawn_rr", isZDoom() ? true : false);
		SetCVar("samsara_misccharspawn_quake2", isZDoom() ? true : false);
		SetCVar("samsara_misccharspawn_hexen2", isZDoom() ? true : false);

		// Class-Based Ability Options
		SetCVar("samsara_doomguybalance", 2);
		SetCVar("samsara_absolutionunmaker", false);
		SetCVar("samsara_classiclaz", false);
		SetCVar("samsara_bombwalls", false);
		SetCVar("samsara_banmorphovum", isZDoom() ? false : true);
		SetCVar("samsara_extralifeteleport", true);
		SetCVar("samsara_fullradiusdmg", true);
		SetCVar("samsara_permaquad", true);
		SetCVar("samsara_vanillaquake", false);
		SetCVar("samsara_banrottgodmode", false);
		SetCVar("samsara_lifeleechdrain", true);
		SetCVar("samsara_bloodakimbomode", 2);
		SetCVar("samsara_hlgaussjump", false);
		SetCVar("samsara_hlexplosivebolts", 3);
		SetCVar("samsara_nodemonmorph", false);
		SetCVar("samsara_notarotcardlimit", false);
		SetCVar("samsara_nopainkillercorpseremoval", false);
		SetCVar("samsara_descentflight", 2);
		SetCVar("samsara_deusexmovementpenalty", false);

		// Serverside Ability Options
		SetCVar("samsara_banjetpack", false);
		SetCVar("samsara_banwolfmove", false);
		SetCVar("samsara_banallies", false);
		SetCVar("samsara_nocustomgravity", false);
		SetCVar("samsara_forcerecoil", false);
		SetCVar("samsara_proximitybehavior", false);

		// Character Ban Options
		SetCVar("samsara_bandoomguy", false);
		SetCVar("samsara_bandoomguy64", false);
		SetCVar("samsara_bandoomguystr", false);
		SetCVar("samsara_banchex", false);
		SetCVar("samsara_bancorvus", false);
		SetCVar("samsara_banbj", false);
		SetCVar("samsara_banbjlost", false);
		SetCVar("samsara_banbjctk", false);
		SetCVar("samsara_banparias", false);
		SetCVar("samsara_banpariasclassic", false);
		SetCVar("samsara_bandaedolon", false);
		SetCVar("samsara_banbaratus", false);
		SetCVar("samsara_banduke", false);
		SetCVar("samsara_bandukelab", false);
		SetCVar("samsara_banduke64", false);
		SetCVar("samsara_banso", false);
		SetCVar("samsara_banranger", false);
		SetCVar("samsara_banfreely", false);
		SetCVar("samsara_bancassatt", false);
		SetCVar("samsara_banbarrett", false);
		SetCVar("samsara_banni", false);
		SetCVar("samsara_banwendt", false);
		SetCVar("samsara_banblake", false);
		SetCVar("samsara_bancaleb", false);
		SetCVar("samsara_banstrifeguy", false);
		SetCVar("samsara_baneleena", false);
		SetCVar("samsara_bankamchak", false);
		SetCVar("samsara_bandanblaze", false);
		SetCVar("samsara_banalliancecommando", false);
		SetCVar("samsara_banspaceseal", false);
		SetCVar("samsara_banrebelmooncommando", false);
		SetCVar("samsara_bankatarn", false);
		SetCVar("samsara_banmooman", false);
		SetCVar("samsara_bancyborg", false);
		SetCVar("samsara_banlizardman", false);
		SetCVar("samsara_banmutant", false);
		SetCVar("samsara_bandominatrix", false);
		SetCVar("samsara_bandisruptor", false);
		SetCVar("samsara_bangrondoval", false);
		SetCVar("samsara_banfreeman", false);
		SetCVar("samsara_banshephard", false);
		SetCVar("samsara_banwang", false);
		SetCVar("samsara_bancm", false);
		SetCVar("samsara_banjon", false);
		SetCVar("samsara_banrr", false);
		SetCVar("samsara_banq2", false);
		SetCVar("samsara_bandemoness", false);
		SetCVar("samsara_banbond", false);
		SetCVar("samsara_banpetton", false);
		SetCVar("samsara_bandaniel", false);
		SetCVar("samsara_banprisoner", false);
		SetCVar("samsara_banrtcw", false);
		SetCVar("samsara_bansarge", false);
		SetCVar("samsara_banpyrogx", false);
		SetCVar("samsara_banjcdenton", false);

		// Character Multiplier Options
		SetCVar("samsara_generaldamage", 0);
		SetCVar("samsara_generaldefense", 0);
		SetCVar("samsara_doomguydamage", 0);
		SetCVar("samsara_doomguydefense", 0);
		SetCVar("samsara_doomguy64damage", 0);
		SetCVar("samsara_doomguy64defense", 0);
		SetCVar("samsara_doomguystrdamage", 0);
		SetCVar("samsara_doomguystrdefense", 0);
		SetCVar("samsara_chexdamage", 0);
		SetCVar("samsara_chexdefense", 0);
		SetCVar("samsara_corvusdamage", 0);
		SetCVar("samsara_corvusdefense", 0);
		SetCVar("samsara_bjdamage", 0);
		SetCVar("samsara_bjdefense", 0);
		SetCVar("samsara_bjlostdamage", 0);
		SetCVar("samsara_bjlostdefense", 0);
		SetCVar("samsara_bjctkdamage", 0);
		SetCVar("samsara_bjctkdefense", 0);
		SetCVar("samsara_pariasdamage", 0);
		SetCVar("samsara_pariasdefense", 0);
		SetCVar("samsara_pariasclassicdamage", 0);
		SetCVar("samsara_pariasclassicdefense", 0);
		SetCVar("samsara_daedolondamage", 0);
		SetCVar("samsara_daedolondefense", 0);
		SetCVar("samsara_baratusdamage", 0);
		SetCVar("samsara_baratusdefense", 0);
		SetCVar("samsara_dukedamage", 0);
		SetCVar("samsara_dukedefense", 0);
		SetCVar("samsara_dukelabdamage", 0);
		SetCVar("samsara_dukelabdefense", 0);
		SetCVar("samsara_duke64damage", 0);
		SetCVar("samsara_duke64defense", 0);
		SetCVar("samsara_sodamage", 0);
		SetCVar("samsara_sodefense", 0);
		SetCVar("samsara_rangerdamage", 0);
		SetCVar("samsara_rangerdefense", 0);
		SetCVar("samsara_freelydamage", 0);
		SetCVar("samsara_freelydefense", 0);
		SetCVar("samsara_cassattdamage", 0);
		SetCVar("samsara_cassattdefense", 0);
		SetCVar("samsara_barrettdamage", 0);
		SetCVar("samsara_barrettdefense", 0);
		SetCVar("samsara_nidamage", 0);
		SetCVar("samsara_nidefense", 0);
		SetCVar("samsara_wendtdamage", 0);
		SetCVar("samsara_wendtdefense", 0);
		SetCVar("samsara_blakedamage", 0);
		SetCVar("samsara_blakedefense", 0);
		SetCVar("samsara_calebdamage", 0);
		SetCVar("samsara_calebdefense", 0);
		SetCVar("samsara_strifeguydamage", 0);
		SetCVar("samsara_strifeguydefense", 0);
		SetCVar("samsara_eleenadamage", 0);
		SetCVar("samsara_eleenadefense", 0);
		SetCVar("samsara_kamchakdamage", 0);
		SetCVar("samsara_kamchakdefense", 0);
		SetCVar("samsara_danblazedamage", 0);
		SetCVar("samsara_danblazedefense", 0);
		SetCVar("samsara_alliancecommandodamage", 0);
		SetCVar("samsara_alliancecommandodefense", 0);
		SetCVar("samsara_spacesealdamage", 0);
		SetCVar("samsara_spacesealdefense", 0);
		SetCVar("samsara_rebelmooncommandodamage", 0);
		SetCVar("samsara_rebelmooncommandodefense", 0);
		SetCVar("samsara_katarndamage", 0);
		SetCVar("samsara_katarndefense", 0);
		SetCVar("samsara_moomandamage", 0);
		SetCVar("samsara_moomandefense", 0);
		SetCVar("samsara_cyborgdamage", 0);
		SetCVar("samsara_cyborgdefense", 0);
		SetCVar("samsara_lizardmandamage", 0);
		SetCVar("samsara_lizardmandefense", 0);
		SetCVar("samsara_mutantdamage", 0);
		SetCVar("samsara_mutantdefense", 0);
		SetCVar("samsara_dominatrixdamage", 0);
		SetCVar("samsara_dominatrixdefense", 0);
		SetCVar("samsara_disruptordamage", 0);
		SetCVar("samsara_disruptordefense", 0);
		SetCVar("samsara_grondovaldamage", 0);
		SetCVar("samsara_grondovaldefense", 0);
		SetCVar("samsara_freemandamage", 0);
		SetCVar("samsara_freemandefense", 0);
		SetCVar("samsara_shepharddamage", 0);
		SetCVar("samsara_shepharddefense", 0);
		SetCVar("samsara_wangdamage", 0);
		SetCVar("samsara_wangdefense", 0);
		SetCVar("samsara_cmdamage", 0);
		SetCVar("samsara_cmdefense", 0);
		SetCVar("samsara_jondamage", 0);
		SetCVar("samsara_jondefense", 0);
		SetCVar("samsara_rrdamage", 0);
		SetCVar("samsara_rrdefense", 0);
		SetCVar("samsara_q2damage", 0);
		SetCVar("samsara_q2defense", 0);
		SetCVar("samsara_demonessdamage", 0);
		SetCVar("samsara_demonessdefense", 0);
		SetCVar("samsara_bonddamage", 0);
		SetCVar("samsara_bonddefense", 0);
		SetCVar("samsara_pettondamage", 0);
		SetCVar("samsara_pettondefense", 0);
		SetCVar("samsara_danieldamage", 0);
		SetCVar("samsara_danieldefense", 0);
		SetCVar("samsara_prisonerdamage", 0);
		SetCVar("samsara_prisonerdefense", 0);
		SetCVar("samsara_rtcwdamage", 0);
		SetCVar("samsara_rtcwdefense", 0);
		SetCVar("samsara_sargedamage", 0);
		SetCVar("samsara_sargedefense", 0);
		SetCVar("samsara_pyrogxdamage", 0);
		SetCVar("samsara_pyrogxdefense", 0);
		SetCVar("samsara_jcdentondamage", 0);
		SetCVar("samsara_jcdentondefense", 0);

		// Character Equipment Loadout Options
		SetCVar("samsara_doomguy_fallbackranged", 0);
		SetCVar("samsara_doomguy_slot4", 0);
		SetCVar("samsara_doomguy_slot6", 0);
		SetCVar("samsara_doomguy_slot7", 0);
		SetCVar("samsara_chex_fallbackranged", 0);
		SetCVar("samsara_freeman_fallbackmelee", 0);
		SetCVar("samsara_freeman_slot1", 0);
		SetCVar("samsara_freeman_slot3", 0);
		SetCVar("samsara_freeman_slot5", 0);
		SetCVar("samsara_freeman_slot6", 0);
		SetCVar("samsara_freeman_slot7", 0);
		SetCVar("samsara_freeman_unique1", 0);
		SetCVar("samsara_freeman_unique2", 0);
		SetCVar("samsara_freeman_unique3", 0);
		SetCVar("samsara_shephard_fallbackmelee", 0);
		SetCVar("samsara_shephard_slot1", 0);
		SetCVar("samsara_shephard_slot3", 0);
		SetCVar("samsara_shephard_slot5", 0);
		SetCVar("samsara_shephard_slot6", 0);
		SetCVar("samsara_shephard_slot7", 0);
		SetCVar("samsara_shephard_unique1", 0);
		SetCVar("samsara_shephard_unique2", 0);
		SetCVar("samsara_shephard_unique3", 0);
		SetCVar("samsara_bond_fallbackranged", 0);
		SetCVar("samsara_bond_slot3", 0);
		SetCVar("samsara_bond_slot6s", 0);
		SetCVar("samsara_bond_unique2", 0);

		if(GetCvar("samsara_mixerloaded"))
		{
			SetCVar("mm_presetvalue", 101);
			ACS_NamedExecuteAlways("ReMixerPresetSelection",0,0);
		}
		break;
	}
}

script "SamsaraReactionTimeChecker" (void) { SetResultValue(GetActorProperty(0, APROP_ReactionTime)); }

Script "DisableVoodooDoll" (void)
{
	if(ClassifyActor(0) & ACTOR_VOODOODOLL)
		SetActorState(0,"DisableVoodooDoll",true);
}

str PinataItemActors[10][31] =
{
    { // Common
        "Ammo1Small", "Ammo2Small", "HealPack0", "ArmorScrap", "HealPack1", "Ammo1Big", "Ammo2Big",
        "SamsaraSlotTwoNoStay", "SamsaraSlotFourNoStay"
    },
    { // Uncommon
        "Ammo1Small", "Ammo2Small", "Ammo3Small", "Ammo4Small", "HealPack1", "Ammo1Big",
        "Ammo2Big", "HealPack2","SamsaraAllmap", "SamsaraSlotOneNoStay", "SamsaraSlotTwoNoStay",
        "SamsaraSlotThreeNoStay", "SamsaraSlotFourNoStay", "ArmorPack1", "AmmoBackpack",
        "SamsaraUniquePickupRandom", "PartialInvisibility"
    },
    { // Rare
        "Ammo1Big", "Ammo2Big", "Ammo3Big", "Ammo4Big", "HealPack2", "Ammo3Small", "Ammo4Small",
        "AmmoBackpack", "SamsaraSlotThreeNoStay", "SamsaraSlotFourNoStay", "SamsaraSlotFiveNoStay",
        "SamsaraSlotSixNoStay", "SamsaraAllmap", "SuperHealth", "ArmorPack3",
        "SamsaraUniquePickupRandom", "SamsaraSlotFourSkulltagNoStay",
        "SamsaraSlotFiveSkulltagNoStay", "SamsaraSlotSixSkulltagNoStay", "PartialInvisibility",
        "MegaPack"
    },
    { // Epic
        "Ammo1Big", "Ammo2Big", "Ammo3Big", "Ammo4Big", "AmmoBackpack", "HealPack2",
        "SamsaraAllmap", "ArmorPack3", "SamsaraSlotSixNoStay", "SamsaraSlotSixSkulltagNoStay",
        "SamsaraUniquePickupRandom", "SuperHealth", "SamsaraSlotSevenNoStay",
        "SamsaraSlotSevenSkulltagNoStay", "PartialInvisibility", "MegaPack"
    },
    { // Legendary
        "Ammo1Big", "Ammo2Big", "Ammo3Big", "Ammo4Big", "SuperHealth", "ArmorPack3",
        "AmmoBackpack", "SamsaraUniquePickupRandom", "SamsaraSlotSevenNoStay",
        "SamsaraSlotSevenSkulltagNoStay", "PartialInvisibility", "MegaPack"
    },
    { // Common (Extras)
        "Ammo1Small", "Ammo2Small", "HealPack0", "ArmorScrap", "HealPack0Dump", "HealPack1",
        "ArmorScrapDump", "Ammo1Medium", "Ammo2Medium", "Ammo1Big", "Ammo2Big",
        "SamsaraSlotTwoNoStay", "SamsaraSlotFourNoStay"
    },
    { // Uncommon (Extras)
        "Ammo1Small", "Ammo2Small", "Ammo3Small", "Ammo4Small", "AmmoComboSmall", "HealPack0Dump",
        "HealPack1", "Ammo1Medium", "Ammo2Medium", "Ammo3Medium", "Ammo4Medium", "Ammo1Big",
        "Ammo2Big", "HealPack2", "SamsaraAllmap", "SamsaraSlotOneNoStay", "SamsaraSlotTwoNoStay",
        "SamsaraSlotThreeNoStay", "SamsaraSlotFourNoStay", "ArmorPack1", "ArmorPackBonusLight",
        "AmmoBackpack", "SamsaraUniquePickupRandom", "PartialInvisibility"
    },
    { // Rare (Extras)
        "Ammo1Big", "Ammo2Big", "Ammo3Big", "Ammo4Big", "AmmoComboBig", "HealPack2",
        "MaxHealPack0", "SamsaraAllmap", "SamsaraLesserTome", "SamsaraTeleportPickup",
        "SamsaraFlightPickup", "SamsaraSpeedBootsPickup", "SamsaraTeleportOtherPickup",
        "SamsaraSlotThreeNoStay", "SamsaraSlotFourNoStay", "SamsaraSlotFiveNoStay",
        "SamsaraSlotSixNoStay", "SuperHealth", "ArmorPack2", "ArmorPack3",
        "ArmorPackBonusHeavy", "SamsaraUniquePickupRandom", "SamsaraSlotFourSkulltagNoStay",
        "SamsaraSlotFiveSkulltagNoStay", "SamsaraSlotSixSkulltagNoStay", "AmmoBackpack",
        "PartialInvisibility", "MegaPack"
    },
    { // Epic (Extras)
        "Ammo1Big", "Ammo2Big", "Ammo3Big", "Ammo4Big", "AmmoComboBig", "HealPack2",
        "MaxHealPack0", "SamsaraAllmap", "SamsaraLesserTome", "SamsaraTeleportPickup",
        "SamsaraFlightPickup", "SamsaraSpeedBootsPickup", "SamsaraTeleportOtherPickup",
        "SamsaraSlotSixNoStay", "SamsaraSlotSixSkulltagNoStay", "SamsaraUniquePickupRandom",
        "SamsaraSpeedBooster", "SamsaraDefenseBooster", "SamsaraDamageBooster",
        "SamsaraFullInvisibility", "SamsaraTimeFreeze", "SuperHealth", "ArmorPack3",
        "ArmorPackBonusHeavy", "ArmorPack4", "SamsaraSlotSevenNoStay",
        "SamsaraSlotSevenSkulltagNoStay", "AmmoBackpack", "PartialInvisibility", "MegaPack",
        "SamsaraRandomPowerup"
    },
    { // Legendary (Extras)
        "Ammo1Big", "Ammo2Big", "Ammo3Big", "Ammo4Big", "AmmoComboBig", "SuperHealth",
        "ArmorPack4", "ArmorPack5", "AmmoBackpack", "SamsaraUniquePickupRandom",
        "SamsaraSlotSevenNoStay", "SamsaraSlotSevenSkulltagNoStay", "PartialInvisibility",
        "MegaPack"
    },
};

int PinataItemChances[10][31] =
{
    { // Common
        50, 50, 50, 50, 25, 10, 10, 5, 5
    },
    { // Uncommon
        50, 50, 50, 50, 50, 25, 25, 25, 10, 10, 10, 10, 5, 5, 5, 2, 2
    },
    { // Rare
        50, 50, 30, 30, 30, 30, 30, 25, 15, 15, 15, 15, 10, 5, 5, 5, 5, 5, 5, 2, 2
    },
    { // Epic
        50, 50, 50, 50, 50, 50, 30, 30, 25, 25, 15, 10, 5, 5, 5, 2
    },
    { // Legendary
        80, 80, 80, 80, 50, 50, 50, 25, 25, 25, 5, 5
    },
    { // Common (Extras)
        50, 50, 50, 50, 25, 25, 25, 15, 15, 10, 10, 5, 5
    },
    { // Uncommon (Extras)
        50, 50, 50, 50, 50, 50, 50, 40, 40, 40, 40, 25, 25, 25, 25, 10, 10, 10, 10, 5, 5, 5, 5, 2
    },
    { // Rare (Extras)
        50, 50, 50, 50, 50, 30, 30, 25, 25, 25, 25, 25, 25, 25, 15, 15, 15, 15, 10, 10, 10, 5, 5,
        5, 5, 5, 2, 2
    },
    { // Epic (Extras)
        75, 75, 75, 75, 50, 30, 30, 25, 25, 25, 25, 25, 25, 25, 15, 10, 10, 10, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 2, 2
    },
    { // Legendary (Extras)
        80, 80, 80, 80, 80, 50, 50, 50, 25, 25, 25, 10, 5, 5
    },
};

script "Samsara_PinataHandler" (int health, int radius, int height, int friendly)
{
    if (!GetCVar("samsara_pinataparty")) { terminate; }

    int currentpooltier, currentpoolamount;
    int spawneditems, randomchance, randomitem;
    int newtid = UniqueTID();
    int maxitems = ((height * 4) * (radius * radius)) / 4096;
    bool xmas = GetCVar("samsara_merrychristmas");
    bool naughty = GetActorProperty(0, APROP_Mass) == 2 && xmas;

    if (!naughty)
    {
        // Start at Common
        currentpooltier = GetCVar("samsara_pinatapartyextras") ? 5 : 0;
        currentpoolamount = GetCVar("samsara_pinatapartyextras") ? 13 : 9;

        // Upgrade to Uncommon
        if (health >= 200)
        {
            currentpooltier++;
            currentpoolamount = GetCVar("samsara_pinatapartyextras") ? 24 : 17;
        }

        // Upgrade to Rare
        if (health >= 1000)
        {
            currentpooltier++;
            currentpoolamount = GetCVar("samsara_pinatapartyextras") ? 28 : 21;
        }

        // Upgrade to Epic
        if (health >= 2500)
        {
            currentpooltier++;
            currentpoolamount = GetCVar("samsara_pinatapartyextras") ? 31 : 16;
        }

        // Upgrade to Legendary
        if (health >= 5000)
        {
            currentpooltier++;
            currentpoolamount = GetCVar("samsara_pinatapartyextras") ? 14 : 12;
        }
    }

    str itemtospawn = "Placeholder";

    if (naughty) { itemtospawn = "SamsaraXmasCoal"; }

    while (spawneditems < maxitems)
    {
        if (!naughty)
        {
            randomchance = Random(0, 100);
            randomitem = Random(0, currentpoolamount - 1);

            itemtospawn = PinataItemActors[currentpooltier][randomitem];

            if (!StrCmp(itemtospawn, "HealPack1") && Random(0, 100) > 99 && xmas) { itemtospawn = "BecauseTermSaidSo"; }
        }

        if (naughty || randomchance < PinataItemChances[currentpooltier][randomitem])
        {
            SpawnForced(itemtospawn, GetActorX(0), GetActorY(0), GetActorZ(0), newtid);
            ThrustThing(Random(0, 256), 2, 0, newtid);
            ThrustThingZ(newtid, Random(17, 35), 0, 1);
            Thing_ChangeTID(newtid, 0);
            spawneditems++;
        }
    }
}

script "SamsaraPlayerHealer" (int healamount, int healcap, int usemaxbonus)
{
    // initialize health variables
    int healthmax = getMaxHealth(0);
    int healthcapcheck = healthmax; // default cap

    // determine cap
    if (healamount == -1 || healamount > 0)
    {
        if (healcap > 0) { healthcapcheck = healcap; } // custom cap
        else if (healcap < 0) { healthcapcheck = -healcap; } // custom "hardcoded" cap

        if (usemaxbonus) { healthcapcheck += CheckInventory("SamsaraHasMaxHealth"); } // max. health bonus healing behavior replication

        if (healcap >= 0)
        {
            if (healthmax > healthcapcheck) { healthcapcheck = healthmax; } // this is mainly for health items that give up to 200+ hp

            if (GetCVar("samsara_nohealthcap")) { healthcapcheck = INTMAX; }
            else if (healthcapcheck < 250 && CheckInventory("SamsaraHasProsperity")) { healthcapcheck = 250; }
        }
    } else { // -2 checks based on SpawnHealth (ignoring samsara_nohealthcap), while 0 gives the full healing
        if (healthcapcheck < 250 && CheckInventory("SamsaraHasProsperity")) { healthcapcheck = 250; }
    }

    // do checking or healing
    if (healamount > 0 && !isDead(0) && GetActorProperty(0, APROP_Health) < healthcapcheck) // give specified health
    {
        if (GetActorProperty(0, APROP_Health) + healamount > healthcapcheck) { SetActorProperty(0, APROP_Health, healthcapcheck); }
        else { SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_Health) + healamount); }
    }
    else if (healamount == 0 && !isDead(0) && GetActorProperty(0, APROP_Health) < healthcapcheck) { SetActorProperty(0, APROP_Health, healthcapcheck); } // full healing (ignores samsara_nohealthcap)
    else if (healamount < 0) { SetResultValue(healthcapcheck); } // check health
}

script "SamsaraPlayerHealerStrife" (int mode)
{
    int result = 0;
    int healthtogive = getMaxHealth(0);

    if (healthtogive < 250 && CheckInventory("SamsaraHasProsperity")) { healthtogive = 250; }

    if (mode >= 1) // Health Fillup
    {
        healthtogive /= 2;

        if (GetActorProperty(0, APROP_Health) < ACS_NamedExecuteWithResult("SamsaraPlayerHealer", -1, -healthtogive))
        {
            ACS_NamedExecuteWithResult("SamsaraPlayerHealer", healthtogive, -healthtogive);
            result = 1;
        }
    } else { // Surgery Kit
        ACS_NamedExecuteWithResult("SamsaraPlayerHealer", healthtogive);
        result = 1;
    }

    SetResultValue(result);
}

script "SamsaraPlayerSpawnHealthAdjust" (int amount, int add, int maxtype, int maxcap)
{
    if (add)
    {
        if (amount == 0) { terminate; }

        str maxtoken = "Placeholder";

        switch (maxtype)
        {
          default:
            terminate;

          case 0:
            maxtoken = "SamsaraExtraBaseSpawnHealth"; // Generic extra base health token (lost on respawn)
            break;

          case 1:
            maxtoken = "SamsaraExtraBaseSpawnHealthDeterminant"; // Generic extra base health token (either lost or kept on respawn depending on samsara_keepmaxhealth)
            break;

          case 2:
            maxtoken = "SamsaraExtraBaseSpawnHealthPermanent"; // Generic extra base health token (kept on respawn)
            break;

          case 3:
            maxtoken = "SamsaraExtraSpawnHealth"; // Generic extra health token (lost on respawn)
            break;

          case 4:
            maxtoken = "SamsaraExtraSpawnHealthDeterminant"; // Generic extra health token (either lost or kept on respawn depending on samsara_keepmaxhealth)
            break;

          case 5:
            maxtoken = "SamsaraExtraSpawnHealthPermanent"; // Generic extra health token (kept on respawn)
            break;

          case 6:
            maxtoken = "SamsaraHasMaxHealth"; // Zandronum max. health bonus (either lost or kept on respawn depending on samsara_keepmaxhealth)
            break;

          case 7:
            maxtoken = "StaminaUpgradeHealth"; // Strifeguy stamina upgrade (kept on respawn)
            break;

          case 8:
            maxtoken = "SamsaraWitchavenHealthIncrease"; // Grondoval extra health (kept on respawn)
            break;

          case 9:
            maxtoken = "Hexen2HealthAdd"; // Hexen 2 classes extra health (kept on respawn)
            break;
        }

        if (amount > 0)
        {
            if (maxcap <= 0) { maxcap = INTMAX; }

            if (CheckInventory(maxtoken) >= maxcap) { terminate; }
            else if (CheckInventory(maxtoken) + amount > maxcap) { SetInventory(maxtoken, maxcap); }
            else { GiveInventory(maxtoken, amount); }
        } else if (amount < 0) {
            if (CheckInventory(maxtoken) <= 0) { terminate; }
            else if (CheckInventory(maxtoken) + amount < 0) { SetInventory(maxtoken, 0); }
            else { TakeInventory(maxtoken, -amount); }
        }
    }
    else { SetInventory("SamsaraBaseSpawnHealth", amount); }

    CalcPlayerSpawnHealth();
}

script "SamsaraAdjustHealthOverMaxDisplay" (void) { AdjustHealthOverMaxDisplay(); } // for CustomInventory triggers

script "SamsaraStrifeStatsAdjust" (int adjusttype)
{
    if (adjusttype >= 1) { SetInventory("SamsaraHasBonusStamina", GetActorProperty(0, APROP_Stamina)); } // adjust token accordingly
    else // reset for BJ PVP extra life
    {
        SetActorProperty(0, APROP_Stamina, 0);
        SetInventory("SamsaraHasBonusStamina", 0);
        AdjustHealthOverMaxDisplay();

        SetActorProperty(0, APROP_Accuracy, 0);
    }
}

script "SamsaraArmorAdjust" (int armortype, int armoradd, int armorcap, int armorgivetype) // this is a separate script now due to the extra script arguments
{
    // armorgivetype is as follows:
    // 0 = normal armor, 1 = normal armor (ignores max armor boost),
    // 2 = armor bonus, 3 = armor bonus (ignores max armor boost),
    // -1 = normal armor (ignores samsara_noarmorcap), -2 = normal armor (ignores samsara_noarmorcap and max armor boost),
    // -3 = armor bonus (ignores samsara_noarmorcap), -4 = armor bonus (ignores samsara_noarmorcap and max armor boost)

    // initialize armor mode
    SetArmorMode();

    // initialize armor pickup behavior variable
    int armorpickupbehavior = GetCVar("samsara_armorpickupbehavior");

    // initialize armor bonus variable
    bool treatasbonus = armorgivetype <= -3 || armorgivetype >= 2;

    // initialize samsara_noarmorcap ignoring variable
    bool alwayscap = armorgivetype <= -1;

    // initialize max armor boost ignoring variable
    bool ignoremaxboost = armorgivetype <= -4 || armorgivetype == -2 || armorgivetype == 1 || armorgivetype >= 3;

    // determine armor type/amount/cap/save percent
    str armortypetogive = "NoArmor";
    int armoramounttogive = 0; // usually SaveAmount
    int armoramounttocap = 0; // usually SaveAmount (or MaxSaveAmount in the case of bonuses)
    int armorsavepercent = 0;

    switch (armortype)
    {
      default:
        armortypetogive = ArmorItems[ArmorMode][armortype];
        armoramounttogive = ArmorAmounts[ArmorMode][armortype][0];
        armoramounttocap = ArmorAmounts[ArmorMode][armortype][1];
        armorsavepercent = ArmorAmounts[ArmorMode][armortype][2];
        break;

      // Normal
      case -1:
        armortypetogive = "ArmorScrapArmorNormal";
        armoramounttogive = 1;
        armoramounttocap = 200;
        armorsavepercent = 33;
        break;

      case -2:
        armortypetogive = "MaxArmorScrapArmorNormal";
        armoramounttogive = 1;
        armoramounttocap = 200;
        armorsavepercent = 33;
        break;

      case -3:
        armortypetogive = "ArmorScrapDumpArmorNormal";
        armoramounttogive = 5;
        armoramounttocap = 200;
        armorsavepercent = 33;
        break;

      case -4:
        armortypetogive = "ArmorPackBonusLightArmorNormal";
        armoramounttogive = 25;
        armoramounttocap = 200;
        armorsavepercent = 33;
        break;

      case -5:
        armortypetogive = "ArmorPackBonusHeavyArmorNormal";
        armoramounttogive = 50;
        armoramounttocap = 300;
        armorsavepercent = 33;
        break;

      case -6:
        armortypetogive = "ArmorPack1ArmorNormal";
        armoramounttogive = 100;
        armoramounttocap = 100;
        armorsavepercent = 33;
        break;

      case -7:
        armortypetogive = "StrifeArmorPack1ArmorNormal";
        armoramounttogive = 100;
        armoramounttocap = 100;
        armorsavepercent = 33;
        break;

      case -8:
        armortypetogive = "ArmorPack2ArmorNormal";
        armoramounttogive = 150;
        armoramounttocap = 150;
        armorsavepercent = 40;
        break;

      case -9:
        armortypetogive = "ArmorPack3ArmorNormal";
        armoramounttogive = 200;
        armoramounttocap = 200;
        armorsavepercent = 50;
        break;

      case -10:
        armortypetogive = "StrifeArmorPack3ArmorNormal";
        armoramounttogive = 200;
        armoramounttocap = 200;
        armorsavepercent = 50;
        break;

      case -11:
        armortypetogive = "ArmorPack4ArmorNormal";
        armoramounttogive = 250;
        armoramounttocap = 250;
        armorsavepercent = 66;
        break;

      case -12:
        armortypetogive = "ArmorPack5ArmorNormal";
        armoramounttogive = 300;
        armoramounttocap = 300;
        armorsavepercent = 100;
        break;

      // Quake
      case -13:
        armortypetogive = "ArmorScrapArmorQuake";
        armoramounttogive = 1;
        armoramounttocap = 200;
        armorsavepercent = 30;
        break;

      case -14:
        armortypetogive = "MaxArmorScrapArmorQuake";
        armoramounttogive = 1;
        armoramounttocap = 200;
        armorsavepercent = 30;
        break;

      case -15:
        armortypetogive = "ArmorScrapDumpArmorQuake";
        armoramounttogive = 5;
        armoramounttocap = 200;
        armorsavepercent = 30;
        break;

      case -16:
        armortypetogive = "ArmorPackBonusLightArmorQuake";
        armoramounttogive = 25;
        armoramounttocap = 200;
        armorsavepercent = 30;
        break;

      case -17:
        armortypetogive = "ArmorPackBonusHeavyArmorQuake";
        armoramounttogive = 50;
        armoramounttocap = 300;
        armorsavepercent = 30;
        break;

      case -18:
        armortypetogive = "ArmorPack1ArmorQuake";
        armoramounttogive = 100;
        armoramounttocap = 100;
        armorsavepercent = 30;
        break;

      case -19:
        armortypetogive = "StrifeArmorPack1ArmorQuake";
        armoramounttogive = 100;
        armoramounttocap = 100;
        armorsavepercent = 30;
        break;

      case -20:
        armortypetogive = "ArmorPack2ArmorQuake";
        armoramounttogive = 150;
        armoramounttocap = 150;
        armorsavepercent = 60;
        break;

      case -21:
        armortypetogive = "ArmorPack3ArmorQuake";
        armoramounttogive = 200;
        armoramounttocap = 200;
        armorsavepercent = 80;
        break;

      case -22:
        armortypetogive = "StrifeArmorPack3ArmorQuakeTier2Inactive";
        armoramounttogive = 150;
        armoramounttocap = 150;
        armorsavepercent = 60;
        break;

      case -23:
        armortypetogive = "StrifeArmorPack3ArmorQuakeTier2Active";
        armoramounttogive = 200;
        armoramounttocap = 200;
        armorsavepercent = 80;
        break;

      case -24:
        armortypetogive = "ArmorPack4ArmorQuake";
        armoramounttogive = 250;
        armoramounttocap = 250;
        armorsavepercent = 90;
        break;

      case -25:
        armortypetogive = "ArmorPack5ArmorQuake";
        armoramounttogive = 300;
        armoramounttocap = 300;
        armorsavepercent = 100;
        break;

      // Quake+
      case -26:
        armortypetogive = "ArmorScrapArmorQuakePlus";
        armoramounttogive = 1;
        armoramounttocap = 200;
        armorsavepercent = 60;
        break;

      case -27:
        armortypetogive = "MaxArmorScrapArmorQuakePlus";
        armoramounttogive = 1;
        armoramounttocap = 200;
        armorsavepercent = 60;
        break;

      case -28:
        armortypetogive = "ArmorScrapDumpArmorQuakePlus";
        armoramounttogive = 5;
        armoramounttocap = 200;
        armorsavepercent = 60;
        break;

      case -29:
        armortypetogive = "ArmorPackBonusLightArmorQuakePlus";
        armoramounttogive = 25;
        armoramounttocap = 200;
        armorsavepercent = 60;
        break;

      case -30:
        armortypetogive = "ArmorPackBonusHeavyArmorQuakePlus";
        armoramounttogive = 50;
        armoramounttocap = 300;
        armorsavepercent = 60;
        break;

      case -31:
        armortypetogive = "StrifeArmorPack1ArmorQuakePlus";
        armoramounttogive = 150;
        armoramounttocap = 150;
        armorsavepercent = 60;
        break;

      case -32:
        armortypetogive = "StrifeArmorPack3ArmorQuakePlusTier2Inactive";
        armoramounttogive = 200;
        armoramounttocap = 200;
        armorsavepercent = 80;
        break;

      case -33:
        armortypetogive = "StrifeArmorPack3ArmorQuakePlusTier2Active";
        armoramounttogive = 250;
        armoramounttocap = 250;
        armorsavepercent = 90;
        break;

      // Marathon
      case -34:
        armortypetogive = "ArmorScrapArmorMarathon";
        armoramounttogive = 1;
        armoramounttocap = 200;
        armorsavepercent = 100;
        break;

      case -35:
        armortypetogive = "MaxArmorScrapArmorMarathon";
        armoramounttogive = 1;
        armoramounttocap = 200;
        armorsavepercent = 100;
        break;

      case -36:
        armortypetogive = "ArmorScrapDumpArmorMarathon";
        armoramounttogive = 5;
        armoramounttocap = 200;
        armorsavepercent = 100;
        break;

      case -37:
        armortypetogive = "ArmorPackBonusLightArmorMarathon";
        armoramounttogive = 25;
        armoramounttocap = 200;
        armorsavepercent = 100;
        break;

      case -38:
        armortypetogive = "ArmorPackBonusHeavyArmorMarathon";
        armoramounttogive = 50;
        armoramounttocap = 300;
        armorsavepercent = 100;
        break;

      case -39:
        armortypetogive = "ArmorPack1ArmorMarathon";
        armoramounttogive = 100;
        armoramounttocap = 100;
        armorsavepercent = 100;
        break;

      case -40:
        armortypetogive = "StrifeArmorPack1ArmorMarathon";
        armoramounttogive = 100;
        armoramounttocap = 100;
        armorsavepercent = 100;
        break;

      case -41:
        armortypetogive = "ArmorPack2ArmorMarathon";
        armoramounttogive = 150;
        armoramounttocap = 150;
        armorsavepercent = 100;
        break;

      case -42:
        armortypetogive = "ArmorPack3ArmorMarathon";
        armoramounttogive = 200;
        armoramounttocap = 200;
        armorsavepercent = 100;
        break;

      case -43:
        armortypetogive = "StrifeArmorPack3ArmorMarathon";
        armoramounttogive = 200;
        armoramounttocap = 200;
        armorsavepercent = 100;
        break;

      case -44:
        armortypetogive = "ArmorPack4ArmorMarathon";
        armoramounttogive = 250;
        armoramounttocap = 250;
        armorsavepercent = 100;
        break;

      case -45:
        armortypetogive = "ArmorPack5ArmorMarathon";
        armoramounttogive = 300;
        armoramounttocap = 300;
        armorsavepercent = 100;
        break;

      // Heretic
      case -46:
        armortypetogive = "ArmorScrapArmorHeretic";
        armoramounttogive = 1;
        armoramounttocap = 200;
        armorsavepercent = 50;
        break;

      case -47:
        armortypetogive = "MaxArmorScrapArmorHeretic";
        armoramounttogive = 1;
        armoramounttocap = 200;
        armorsavepercent = 50;
        break;

      case -48:
        armortypetogive = "ArmorScrapDumpArmorHeretic";
        armoramounttogive = 5;
        armoramounttocap = 200;
        armorsavepercent = 50;
        break;

      case -49:
        armortypetogive = "ArmorPackBonusLightArmorHeretic";
        armoramounttogive = 25;
        armoramounttocap = 200;
        armorsavepercent = 50;
        break;

      case -50:
        armortypetogive = "ArmorPackBonusHeavyArmorHeretic";
        armoramounttogive = 50;
        armoramounttocap = 300;
        armorsavepercent = 50;
        break;

      case -51:
        armortypetogive = "ArmorPack1ArmorHeretic";
        armoramounttogive = 100;
        armoramounttocap = 100;
        armorsavepercent = 50;
        break;

      case -52:
        armortypetogive = "StrifeArmorPack1ArmorHeretic";
        armoramounttogive = 100;
        armoramounttocap = 100;
        armorsavepercent = 50;
        break;

      case -53:
        armortypetogive = "ArmorPack2ArmorHeretic";
        armoramounttogive = 150;
        armoramounttocap = 150;
        armorsavepercent = 67;
        break;

      case -54:
        armortypetogive = "ArmorPack3ArmorHeretic";
        armoramounttogive = 200;
        armoramounttocap = 200;
        armorsavepercent = 75;
        break;

      case -55:
        armortypetogive = "StrifeArmorPack3ArmorHeretic";
        armoramounttogive = 200;
        armoramounttocap = 200;
        armorsavepercent = 75;
        break;

      case -56:
        armortypetogive = "ArmorPack4ArmorHeretic";
        armoramounttogive = 250;
        armoramounttocap = 250;
        armorsavepercent = 87;
        break;

      case -57:
        armortypetogive = "ArmorPack5ArmorHeretic";
        armoramounttogive = 300;
        armoramounttocap = 300;
        armorsavepercent = 100;
        break;

      // Mixer armors
      case -58:
        armortypetogive = "DukeArmorArmor";
        armoramounttogive = 50;
        armoramounttocap = 50;
        armorsavepercent = 35;
        break;

      case -59:
        armortypetogive = "WHAdamantineRingArmor";
        armoramounttogive = 15;
        armoramounttocap = 200;
        armorsavepercent = 33; // actually 33.215, which is pretty close to green armor's 33.335
        break;

      // Special cases
      case -60:
        armortypetogive = "TotenkopfPowerArmorPickup";
        armoramounttogive = 200;
        armoramounttocap = 200;
        armorsavepercent = 50;
        armorpickupbehavior = 2; // always use Zandronum+ logic regardless of setting
        break;
    }

    // if armor type wasn't defined (like armor mode being set to None), stop the script
    if (!StrCmp(armortypetogive, "NoArmor")) { terminate; }

    // if armoradd is greater than 0, the amount of armor to give is added onto the default SaveAmount. if negative, the amount overrides the default
    if (armoradd > 0) { armoramounttogive += armoradd; }
    else if (armoradd < 0) { armoramounttogive = -armoradd; }

    // if the amount of armor to give turned up 0 or negative, stop the script
    if (armoramounttogive <= 0) { terminate; }

    // if armorcap is greater than 0, the amount of armor to cap at is added onto the default SaveAmount (or MaxSaveAmount if available). if negative, the amount overrides the default
    // this is buggily hardcoded to 250 at all times when prosperity is active. can't do anything with that, unfortunately
    if (CheckInventory("SamsaraHasProsperity")) { armoramounttocap = 250; }
    else if (GetCVar("samsara_noarmorcap") && !alwayscap) { armoramounttocap = INTMAX; }
    else
    {
        if (armorcap > 0) { armoramounttocap += armorcap; }
        else if (armorcap < 0) { armoramounttocap = -armorcap; }

        // raise cap in accordance to multi runes' prosperity_max_health cvar
        if (CheckInventory("PowerProsperity1") && GetCVar("prosperity_max_health") > armoramounttocap) { armoramounttocap = GetCVar("prosperity_max_health"); } // only take effect if cvar is greater than variable

        // if we're allowed to, take max armor boost into account
        if (!ignoremaxboost) { armoramounttocap += CheckInventory("SamsaraHasMaxArmor"); }
    }

    // if the amount of armor to cap at turned up 0 or negative, stop the script
    if (armoramounttocap <= 0) { terminate; }

    // get our current armor value and absorption
    int currentarmor = CheckInventory("BasicArmor");
    int currentarmorsavepercent = CheckInventory("SamsaraArmorSavePercent");

    // check if our current armor is hitting the cap
    if (currentarmor > 0)
    {
        if (armorpickupbehavior >= 1 && !treatasbonus)
        {
            if (currentarmor > armoramounttocap || (currentarmor == armoramounttocap && currentarmorsavepercent >= armorsavepercent)) { terminate; }
        } else {
            if (currentarmor >= armoramounttocap) { terminate; }
        }
    }

    // reset armor type for the purposes of setting the new type if we're not treating it like a bonus or if we had no armor to begin with
    // if samsara_armorpickupbehavior is 2 (Zandronum+), only reset armor if our absorption is less than what the pickup provides
    if (!treatasbonus || !currentarmor)
    {
        if (armorpickupbehavior < 2 || (armorpickupbehavior >= 2 && currentarmorsavepercent < armorsavepercent) || !currentarmor)
        {
            SetInventory("BasicArmor", 0);

            GiveInventory(armortypetogive, 1);
            AdjustArmorDisplays();
        }
    }

    // add armor accordingly
    if (currentarmor > 0)
    {
        // set armor amount back to pre-pickup value for calculation purposes
        if (CheckInventory("BasicArmor") < currentarmor) { GiveInventory("InfiniteArmorBonus", currentarmor - CheckInventory("BasicArmor")); }
        else if (CheckInventory("BasicArmor") > currentarmor) { SetInventory("BasicArmor", currentarmor); }

        // now add the amount to our armor
        if (armoramounttogive + currentarmor > armoramounttocap) { armoramounttogive = armoramounttocap - currentarmor; } // don't exceed the cap

        GiveInventory("InfiniteArmorBonus", armoramounttogive);
    } else {
        // hackery to set new amount while retaining the new armor type
        SetInventory("BasicArmor", 1);

        if (armoramounttogive > armoramounttocap) { armoramounttogive = armoramounttocap; } // don't exceed the cap

        if (armoramounttogive > 1) { GiveInventory("InfiniteArmorBonus", armoramounttogive - 1); }
    }
}

script "SamsaraArmorAdjustMultiRunesRegen" (void) // multi runes compatibility; to be used with ArmorScrapMultiRunesRegen
{
    int regenamount = GetCVar("ArmorRegenerationMultiplier");

    if (regenamount > 0) { ACS_NamedExecuteWithResult("SamsaraArmorAdjust", ARMOR_BONUS1, -regenamount, 0, -3); }
}

script "SamsaraArmorCapCheck" (int armortype, int armorcap, int maxbonuscap, int armorgivetype)
{
    // armorgivetype is as follows:
    // 0 = normal armor, 1 = normal armor (ignores max armor boost),
    // 2 = armor bonus, 3 = armor bonus (ignores max armor boost),
    // -1 = normal armor (ignores samsara_noarmorcap), -2 = normal armor (ignores samsara_noarmorcap and max armor boost),
    // -3 = armor bonus (ignores samsara_noarmorcap), -4 = armor bonus (ignores samsara_noarmorcap and max armor boost)

    int result = 0;

    // initialize armor mode
    SetArmorMode();

    // initialize armor pickup behavior variable
    int armorpickupbehavior = GetCVar("samsara_armorpickupbehavior");

    // initialize armor bonus variable
    bool treatasbonus = armorgivetype <= -3 || armorgivetype >= 2;

    // initialize samsara_noarmorcap ignoring variable
    bool alwayscap = armorgivetype <= -1;

    // initialize max armor boost ignoring variable
    bool ignoremaxboost = armorgivetype <= -4 || armorgivetype == -2 || armorgivetype == 1 || armorgivetype >= 3;

    // determine armor type/cap/save percent/max bonus cap
    str armortypetogive = "NoArmor";
    int armoramounttocap = 0; // usually SaveAmount (or MaxSaveAmount in the case of bonuses)
    int armorsavepercent = 0;
    int armormaxbonusmax = 0;

    switch (armortype)
    {
      default:
        armortypetogive = ArmorItems[ArmorMode][armortype];
        armoramounttocap = ArmorAmounts[ArmorMode][armortype][1];
        armorsavepercent = ArmorAmounts[ArmorMode][armortype][2];
        armormaxbonusmax = ArmorAmounts[ArmorMode][armortype][4];
        break;

      // Normal
      case -1:
        armortypetogive = "ArmorScrapArmorNormal";
        armoramounttocap = 200;
        armorsavepercent = 33;
        break;

      case -2:
        armortypetogive = "MaxArmorScrapArmorNormal";
        armoramounttocap = 200;
        armorsavepercent = 33;
        armormaxbonusmax = 50;
        break;

      case -3:
        armortypetogive = "ArmorScrapDumpArmorNormal";
        armoramounttocap = 200;
        armorsavepercent = 33;
        break;

      case -4:
        armortypetogive = "ArmorPackBonusLightArmorNormal";
        armoramounttocap = 200;
        armorsavepercent = 33;
        break;

      case -5:
        armortypetogive = "ArmorPackBonusHeavyArmorNormal";
        armoramounttocap = 300;
        armorsavepercent = 33;
        break;

      case -6:
        armortypetogive = "ArmorPack1ArmorNormal";
        armoramounttocap = 100;
        armorsavepercent = 33;
        break;

      case -7:
        armortypetogive = "StrifeArmorPack1ArmorNormal";
        armoramounttocap = 100;
        armorsavepercent = 33;
        break;

      case -8:
        armortypetogive = "ArmorPack2ArmorNormal";
        armoramounttocap = 150;
        armorsavepercent = 40;
        break;

      case -9:
        armortypetogive = "ArmorPack3ArmorNormal";
        armoramounttocap = 200;
        armorsavepercent = 50;
        break;

      case -10:
        armortypetogive = "StrifeArmorPack3ArmorNormal";
        armoramounttocap = 200;
        armorsavepercent = 50;
        break;

      case -11:
        armortypetogive = "ArmorPack4ArmorNormal";
        armoramounttocap = 250;
        armorsavepercent = 66;
        break;

      case -12:
        armortypetogive = "ArmorPack5ArmorNormal";
        armoramounttocap = 300;
        armorsavepercent = 100;
        break;

      // Quake
      case -13:
        armortypetogive = "ArmorScrapArmorQuake";
        armoramounttocap = 200;
        armorsavepercent = 30;
        break;

      case -14:
        armortypetogive = "MaxArmorScrapArmorQuake";
        armoramounttocap = 200;
        armorsavepercent = 30;
        armormaxbonusmax = 50;
        break;

      case -15:
        armortypetogive = "ArmorScrapDumpArmorQuake";
        armoramounttocap = 200;
        armorsavepercent = 30;
        break;

      case -16:
        armortypetogive = "ArmorPackBonusLightArmorQuake";
        armoramounttocap = 200;
        armorsavepercent = 30;
        break;

      case -17:
        armortypetogive = "ArmorPackBonusHeavyArmorQuake";
        armoramounttocap = 300;
        armorsavepercent = 30;
        break;

      case -18:
        armortypetogive = "ArmorPack1ArmorQuake";
        armoramounttocap = 100;
        armorsavepercent = 30;
        break;

      case -19:
        armortypetogive = "StrifeArmorPack1ArmorQuake";
        armoramounttocap = 100;
        armorsavepercent = 30;
        break;

      case -20:
        armortypetogive = "ArmorPack2ArmorQuake";
        armoramounttocap = 150;
        armorsavepercent = 60;
        break;

      case -21:
        armortypetogive = "ArmorPack3ArmorQuake";
        armoramounttocap = 200;
        armorsavepercent = 80;
        break;

      case -22:
        armortypetogive = "StrifeArmorPack3ArmorQuakeTier2Inactive";
        armoramounttocap = 150;
        armorsavepercent = 60;
        break;

      case -23:
        armortypetogive = "StrifeArmorPack3ArmorQuakeTier2Active";
        armoramounttocap = 200;
        armorsavepercent = 80;
        break;

      case -24:
        armortypetogive = "ArmorPack4ArmorQuake";
        armoramounttocap = 250;
        armorsavepercent = 90;
        break;

      case -25:
        armortypetogive = "ArmorPack5ArmorQuake";
        armoramounttocap = 300;
        armorsavepercent = 100;
        break;

      // Quake+
      case -26:
        armortypetogive = "ArmorScrapArmorQuakePlus";
        armoramounttocap = 200;
        armorsavepercent = 60;
        break;

      case -27:
        armortypetogive = "MaxArmorScrapArmorQuakePlus";
        armoramounttocap = 200;
        armorsavepercent = 60;
        armormaxbonusmax = 50;
        break;

      case -28:
        armortypetogive = "ArmorScrapDumpArmorQuakePlus";
        armoramounttocap = 200;
        armorsavepercent = 60;
        break;

      case -29:
        armortypetogive = "ArmorPackBonusLightArmorQuakePlus";
        armoramounttocap = 200;
        armorsavepercent = 60;
        break;

      case -30:
        armortypetogive = "ArmorPackBonusHeavyArmorQuakePlus";
        armoramounttocap = 300;
        armorsavepercent = 60;
        break;

      case -31:
        armortypetogive = "StrifeArmorPack1ArmorQuakePlus";
        armoramounttocap = 150;
        armorsavepercent = 60;
        break;

      case -32:
        armortypetogive = "StrifeArmorPack3ArmorQuakePlusTier2Inactive";
        armoramounttocap = 200;
        armorsavepercent = 80;
        break;

      case -33:
        armortypetogive = "StrifeArmorPack3ArmorQuakePlusTier2Active";
        armoramounttocap = 250;
        armorsavepercent = 90;
        break;

      // Marathon
      case -34:
        armortypetogive = "ArmorScrapArmorMarathon";
        armoramounttocap = 200;
        armorsavepercent = 100;
        break;

      case -35:
        armortypetogive = "MaxArmorScrapArmorMarathon";
        armoramounttocap = 200;
        armorsavepercent = 100;
        armormaxbonusmax = 50;
        break;

      case -36:
        armortypetogive = "ArmorScrapDumpArmorMarathon";
        armoramounttocap = 200;
        armorsavepercent = 100;
        break;

      case -37:
        armortypetogive = "ArmorPackBonusLightArmorMarathon";
        armoramounttocap = 200;
        armorsavepercent = 100;
        break;

      case -38:
        armortypetogive = "ArmorPackBonusHeavyArmorMarathon";
        armoramounttocap = 300;
        armorsavepercent = 100;
        break;

      case -39:
        armortypetogive = "ArmorPack1ArmorMarathon";
        armoramounttocap = 100;
        armorsavepercent = 100;
        break;

      case -40:
        armortypetogive = "StrifeArmorPack1ArmorMarathon";
        armoramounttocap = 100;
        armorsavepercent = 100;
        break;

      case -41:
        armortypetogive = "ArmorPack2ArmorMarathon";
        armoramounttocap = 150;
        armorsavepercent = 100;
        break;

      case -42:
        armortypetogive = "ArmorPack3ArmorMarathon";
        armoramounttocap = 200;
        armorsavepercent = 100;
        break;

      case -43:
        armortypetogive = "StrifeArmorPack3ArmorMarathon";
        armoramounttocap = 200;
        armorsavepercent = 100;
        break;

      case -44:
        armortypetogive = "ArmorPack4ArmorMarathon";
        armoramounttocap = 250;
        armorsavepercent = 100;
        break;

      case -45:
        armortypetogive = "ArmorPack5ArmorMarathon";
        armoramounttocap = 300;
        armorsavepercent = 100;
        break;

      // Heretic
      case -46:
        armortypetogive = "ArmorScrapArmorHeretic";
        armoramounttocap = 200;
        armorsavepercent = 50;
        break;

      case -47:
        armortypetogive = "MaxArmorScrapArmorHeretic";
        armoramounttocap = 200;
        armorsavepercent = 50;
        armormaxbonusmax = 50;
        break;

      case -48:
        armortypetogive = "ArmorScrapDumpArmorHeretic";
        armoramounttocap = 200;
        armorsavepercent = 50;
        break;

      case -49:
        armortypetogive = "ArmorPackBonusLightArmorHeretic";
        armoramounttocap = 200;
        armorsavepercent = 50;
        break;

      case -50:
        armortypetogive = "ArmorPackBonusHeavyArmorHeretic";
        armoramounttocap = 300;
        armorsavepercent = 50;
        break;

      case -51:
        armortypetogive = "ArmorPack1ArmorHeretic";
        armoramounttocap = 100;
        armorsavepercent = 50;
        break;

      case -52:
        armortypetogive = "StrifeArmorPack1ArmorHeretic";
        armoramounttocap = 100;
        armorsavepercent = 50;
        break;

      case -53:
        armortypetogive = "ArmorPack2ArmorHeretic";
        armoramounttocap = 150;
        armorsavepercent = 67;
        break;

      case -54:
        armortypetogive = "ArmorPack3ArmorHeretic";
        armoramounttocap = 200;
        armorsavepercent = 75;
        break;

      case -55:
        armortypetogive = "StrifeArmorPack3ArmorHeretic";
        armoramounttocap = 200;
        armorsavepercent = 75;
        break;

      case -56:
        armortypetogive = "ArmorPack4ArmorHeretic";
        armoramounttocap = 250;
        armorsavepercent = 87;
        break;

      case -57:
        armortypetogive = "ArmorPack5ArmorHeretic";
        armoramounttocap = 300;
        armorsavepercent = 100;
        break;

      // Mixer armors
      case -58:
        armortypetogive = "DukeArmorArmor";
        armoramounttocap = 50;
        armorsavepercent = 35;
        break;

      case -59:
        armortypetogive = "WHAdamantineRingArmor";
        armoramounttocap = 200;
        armorsavepercent = 33; // actually 33.215, which is pretty close to green armor's 33.335
        armormaxbonusmax = 50;
        break;

      // Special cases
      case -60:
        armortypetogive = "TotenkopfPowerArmorPickup";
        armoramounttocap = 200;
        armorsavepercent = 50;
        armorpickupbehavior = 2; // always use Zandronum+ logic regardless of setting
        break;
    }

    // if armor type wasn't defined (like armor mode being set to None), stop the script
    if (!StrCmp(armortypetogive, "NoArmor")) { terminate; }

    // if maxbonuscap is greater than 0, the amount of max armor boost to cap at is added onto the default MaxBonusMax. if negative, the amount overrides the default
    if (maxbonuscap > 0) { armormaxbonusmax += maxbonuscap; }
    else if (maxbonuscap < 0) { armormaxbonusmax = -maxbonuscap; }

    // if armorcap is greater than 0, the amount of armor to cap at is added onto the default SaveAmount (or MaxSaveAmount if available). if negative, the amount overrides the default
    // this is buggily hardcoded to 250 at all times when prosperity is active. can't do anything with that, unfortunately
    if (CheckInventory("SamsaraHasProsperity")) { armoramounttocap = 250; }
    else if (GetCVar("samsara_noarmorcap") && !alwayscap) { armoramounttocap = INTMAX; }
    else
    {
        if (armorcap > 0) { armoramounttocap += armorcap; }
        else if (armorcap < 0) { armoramounttocap = -armorcap; }

        // raise cap in accordance to multi runes' prosperity_max_health cvar
        if (CheckInventory("PowerProsperity1") && GetCVar("prosperity_max_health") > armoramounttocap) { armoramounttocap = GetCVar("prosperity_max_health"); } // only take effect if cvar is greater than variable

        // if we're allowed to, take max armor boost into account
        if (!ignoremaxboost)
        {
            if (CheckInventory("SamsaraHasMaxArmor") > armormaxbonusmax) { armoramounttocap += CheckInventory("SamsaraHasMaxArmor"); }
            else if (armormaxbonusmax > 0) { armoramounttocap += armormaxbonusmax; }
        }
    }

    // if the amount of armor to cap at turned up 0 or negative, stop the script
    if (armoramounttocap <= 0) { terminate; }

    // get our current armor value, absorption, and max armor boost
    int currentarmor = CheckInventory("BasicArmor");
    int currentarmorsavepercent = CheckInventory("SamsaraArmorSavePercent");
    int currentmaxarmor = CheckInventory("SamsaraHasMaxArmor");

    // check if our current armor is hitting the cap, and if we've hit the limit on max armor boost
    if (currentarmor > 0)
    {
        if (armorpickupbehavior >= 1 && !treatasbonus)
        {
            if ((currentarmor > armoramounttocap || (currentarmor == armoramounttocap && currentarmorsavepercent >= armorsavepercent)) && currentmaxarmor >= armormaxbonusmax) { result = 1; }
        } else {
            if (currentarmor >= armoramounttocap && currentmaxarmor >= armormaxbonusmax) { result = 1; }
        }
    }

    // we're done
    SetResultValue(result);
}

script "SamsaraPlayerMaxArmorAdjust" (int armortype, int maxbonusadd, int maxbonuscap)
{
    // initialize armor mode
    SetArmorMode();

    // determine armor max bonus amount/max bonus cap
    int armormaxbonus = 0;
    int armormaxbonusmax = 0;

    switch (armortype)
    {
      default:
        armormaxbonus = ArmorAmounts[ArmorMode][armortype][3];
        armormaxbonusmax = ArmorAmounts[ArmorMode][armortype][4];
        break;

      // Normal
      case -2:
        armormaxbonus = 1;
        armormaxbonusmax = 50;
        break;

      // Quake
      case -14:
        armormaxbonus = 1;
        armormaxbonusmax = 50;
        break;

      // Quake+
      case -27:
        armormaxbonus = 1;
        armormaxbonusmax = 50;
        break;

      // Marathon
      case -35:
        armormaxbonus = 1;
        armormaxbonusmax = 50;
        break;

      // Heretic
      case -47:
        armormaxbonus = 1;
        armormaxbonusmax = 50;
        break;

      // Mixer armors
      case -59:
        armormaxbonus = 3;
        armormaxbonusmax = 50;
        break;
    }

    // if maxbonusadd is greater than 0, the amount of max armor boost to give is added onto the default MaxBonus. if negative, the amount overrides the default
    if (maxbonusadd > 0) { armormaxbonus += maxbonusadd; }
    else if (maxbonusadd < 0) { armormaxbonus = -maxbonusadd; }

    // if the amount of max armor boost to give turned up 0 or negative, stop the script
    if (armormaxbonus <= 0) { terminate; }

    // if maxbonuscap is greater than 0, the amount of max armor boost to cap at is added onto the default MaxBonusMax. if negative, the amount overrides the default
    if (maxbonuscap > 0) { armormaxbonusmax += maxbonuscap; }
    else if (maxbonuscap < 0) { armormaxbonusmax = -maxbonuscap; }

    // if the amount of max armor boost to cap at turned up 0 or negative, stop the script
    if (armormaxbonusmax <= 0) { terminate; }

    // add max armor boost accordingly
    if (CheckInventory("SamsaraHasMaxArmor") < armormaxbonusmax)
    {
        GiveInventory("SamsaraHasMaxArmor", armormaxbonus);

        if (CheckInventory("SamsaraHasMaxArmor") > armormaxbonusmax) { SetInventory("SamsaraHasMaxArmor", armormaxbonusmax); } // don't exceed the cap
    }
}

script "SamsaraPlayerOxygenAdjuster" (int mode, int amount)
{
    bool radsuitcheck = CheckInventory("PowerIronFeet") || CheckInventory("PowerIronFeetNoColor") || CheckInventory("PowerMask");

    bool invulncheck = CheckFlag(0, "INVULNERABLE") ||
                       CheckInventory("PowerFakeInvulnerable") || CheckInventory("PowerFakeInvulnerableCleric") || CheckInventory("PowerFakeInvulnerableMage") ||
                       CheckInventory("PowerFakeInvulnerableFighter") || CheckInventory("QuakePentagram") || CheckInventory("PowerGodProtection") ||
                       CheckInventory("PowerDogProtection") || CheckInventory("Painkiller_IronWill_Protection") || CheckInventory("PainkillerDemonMorphInvulnerability");

    if (GetActorProperty(0, APROP_WaterLevel) < 3 || radsuitcheck || invulncheck) // GetAirSupply's quite finicky
    {
        SetResultValue(0);
        terminate;
    }

    int pln = PlayerNumber();
    int aircapacity = 35 * 20; // usually the maximum
    int result = 0;

    if (mode >= 1) // Set current air
    {
        if (amount < 0)
        {
            if (GetAirSupply(pln) < aircapacity)
            {
                SetAirSupply(pln, aircapacity);
                result = 1;
            }
        } else {
            SetAirSupply(pln, amount);
            result = 1;
        }
    }
    else { result = (amount < 0 && GetAirSupply(pln) < aircapacity) || amount >= 0; } // Get current air

    SetResultValue(result);
}

script "SamsaraPowerupTimerActiveChecker" (int category, int powerup)
{
    int result = 0;
    str powerupname = "Placeholder";

    switch (category)
    {
      // Partial Invisibility
      case 0:
        switch (powerup)
        {
          case 0: powerupname = "PowerInvisibility"; break;
          case 1: powerupname = "PowerGhost"; break;
          case 2: powerupname = "PowerShadow"; break;
          case 3: powerupname = "PowerShadowCumulativeLock"; break;
        }
        break;

      // Invulnerability
      case 1:
        switch (powerup)
        {
          case 0: powerupname = "PowerFakeInvulnerable"; break;
          case 1: powerupname = "PowerFakeInvulnerableCleric"; break;
          case 2: powerupname = "PowerFakeInvulnerableMage"; break;
          case 3: powerupname = "PowerFakeInvulnerableFighter"; break;
        }
        break;

      // Environmental Protection
      case 2:
        switch (powerup)
        {
          case 0: powerupname = "PowerIronFeet"; break;
          case 1: powerupname = "PowerMask"; break;
        }
        break;

      // Light Amplification
      case 3:
        switch (powerup)
        {
          case 0: powerupname = "PowerLightAmp"; break;
          case 1: powerupname = "PowerTorch"; break;
        }
        break;

      // Scanner
      case 4:
        switch (powerup)
        {
          case 0: powerupname = "PowerScanner"; break;
        }
        break;

      // Strength
      case 5:
        switch (powerup)
        {
          case 0: powerupname = "PowerSamsaraLesserTome"; break;
        }
        break;

      // Flight
      case 6:
        switch (powerup)
        {
          case 0: powerupname = "PowerSamsaraFlight"; break;
          case 1: powerupname = "PowerSamsaraFlightRaven"; break;
        }
        break;

      // Haste
      case 7:
        switch (powerup)
        {
          case 0: powerupname = "PowerSamsaraSpeedBoots"; break;
          case 1: powerupname = "PowerSamsaraSpeedBootsRaven"; break;
        }
        break;

      // Full Invisibility
      case 8:
        switch (powerup)
        {
          case 0: powerupname = "PowerSamsaraFullInvisibility"; break;
          case 1: powerupname = "PowerSamsaraFullInvisibilityGhost"; break;
          case 2: powerupname = "PowerSamsaraFullInvisibilityShadow"; break;
          case 3: powerupname = "PowerSamsaraFullInvisibilityShadowCumulativeLock"; break;
        }
        break;

      // Time Freeze
      case 9:
        switch (powerup)
        {
          case 0: powerupname = "PowerTimeFreezer"; break;
        }
        break;

      // Speed Booster
      case 10:
        switch (powerup)
        {
          case 0: powerupname = "PowerSamsaraSpeedBooster"; break;
        }
        break;

      // Defense Booster
      case 11:
        switch (powerup)
        {
          case 0: powerupname = "PowerSamsaraDefenseBooster"; break;
        }
        break;

      // Damage Booster
      case 12:
        switch (powerup)
        {
          case 0: powerupname = "PowerSamsaraDamageBooster"; break;
        }
        break;

      // Doomguy Powerups
      case 13:
        switch (powerup)
        {
          case 0: powerupname = "PowerSamsaraDoomguyStrWeaponPower"; break;
        }
        break;

      // Corvus Powerups
      case 14:
        switch (powerup)
        {
          case 0: powerupname = "PowerHereticTome"; break;
        }
        break;

      // Caleb Powerups
      case 15:
        switch (powerup)
        {
          case 0: powerupname = "PowerSamsaraBloodGunsAkimbo"; break;
          case 1: powerupname = "PowerSamsaraBloodGunsAkimboHub"; break;
        }
        break;

      // Eradicator Characters Powerups
      case 16:
        switch (powerup)
        {
          case 0: powerupname = "PowerEradEnWP"; break;
        }
        break;

      // LDF Commando Powerups
      case 17:
        switch (powerup)
        {
          case 0: powerupname = "PowerRMRFlyAbilityHack"; break;
        }
        break;

      // A.V.C. Team Members Powerups
      case 18:
        switch (powerup)
        {
          case 0: powerupname = "PowerIPOGCharge"; break;
          case 1: powerupname = "PowerReversoPillGain"; break;
        }
        break;

      // Demoness Powerups
      case 19:
        switch (powerup)
        {
          case 0: powerupname = "PowerHexen2WeaponLevel2"; break;
        }
        break;

      // Petton Everhail Powerups
      case 20:
        switch (powerup)
        {
          case 0: powerupname = "PowerCatacomb_TimeFreeze"; break;
        }
        break;
    }

    result = GetActorPowerupTics(0, powerupname) > BLINK_THRESHOLD;

    SetResultValue(result);
}

script "SamsaraMapRevealerPickup" (void) { MapRevealerPickedUp = true; }

Script "SamsaraSemiAuto" (void)
{
	SetInventory("SamsaraFiringFullAuto",1);
	until(!(GetPlayerInput (-1, INPUT_BUTTONS) & BT_ATTACK)) 
	{ 
		Delay(1);
	}
	SetInventory("SamsaraFiringFullAuto",0);
}

Script "SamsaraSemiAuto2" (void)
{
	SetInventory("SamsaraFiringFullAuto2",1);
	until(!(GetPlayerInput (-1, INPUT_BUTTONS) & BT_ATTACK)) 
	{ 
		Delay(1);
	}
	SetInventory("SamsaraFiringFullAuto2",0);
}
