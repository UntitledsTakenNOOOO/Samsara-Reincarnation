Script "Unreal_Loop" (void)
{
	int charging, speedx, speedy, lasttimer, velocity, movement;
	int chargetime = 39;
	While(CheckInventory("UnrealClass") && (ClassifyActor(0) && ACTOR_PLAYER))
	{
		int input = GetPlayerInput(-1,INPUT_BUTTONS);
		int DPistolLevel = (CheckInventory("UDPistolUpgrade"));
		int Dpistolammo = (CheckInventory("DPistolAmmo"));

		if(GetAmmoCapacity("DPistolAmmo") != 60 +(DPistolLevel*10))
			SetAmmoCapacity("DPistolAmmo", 60+(DPistolLevel*10));

		if((!(input & BT_ALTATTACK) || CheckInventory("SamsaraHasInfiniteAmmo") || !CheckWeapon("Unreal_DispersionPistol")) && charging >= chargetime)
		{
			charging = 0;
			GiveInventory("DPistolAmmo", 1);
		}

		if((input & BT_AltAttack) && (input & BT_Attack))
			GiveInventory("Unreal_Combo", 1);

		charging++;

		speedx = GetActorVelX(0);
		speedy = GetActorVelY(0);

		velocity = magnitudeTwo_f(speedx, speedy);
		movement = velocity >> 8 != 0 ? 750/((velocity >> 8)*7) : 0;

		if((Timer()-lasttimer) > movement && movement != 0)
		{
			//PlaySound(0, "HLPlayer/Step", CHAN_BODY, 1.0, false, ATTN_NORM);
			if (!CheckInventory("SamsaraQuietFootsteps")) { SpawnSpotForced("Unreal_Step",0,0,0); }
			lasttimer = Timer();
		}

		if(isCrouching(28.0))
			GiveInventory("IsCrouching",1);
		else
			TakeInventory("IsCrouching",1);

		Delay(1);
		TakeInventory("Unreal_Combo", 1);
	}
}

Script "Unreal_ShockCoreTidToken" (void)
{
	int newtid = UniqueTid()>>16;
	Thing_ChangeTid(0,newtid);
	//PrintBold(d:newtid);
	//PrintBold(d:ActivatorTid());
	SetActivatorToTarget(0);
	SetInventory("Unreal_ShockCoreTidToken",newtid);
}

Script "Unreal_ASMDRetrieveTracer" (void)
{
	int newtid = UniqueTid()>>16;
	Thing_ChangeTid(0,newtid);
	SetActivatorToTarget(0);
	int detectTid = CheckInventory("Unreal_ShockCoreTidToken");
	TakeInventory("Unreal_ShockCoreTidToken",65536);
	SetActivator(newtid,AAPTR_DEFAULT);
	SetPointer(AAPTR_TRACER,detectTid);
	SetActivator(detectTid,AAPTR_TRACER);
	SetPointer(AAPTR_TRACER,newtid);
	Thing_ChangeTid(newtid,0);
	Thing_ChangeTid(detectTid,0);
}

Script "Unreal_ShockRifleCombo" (void)
{
	int newtid = UniqueTid();
	Thing_ChangeTid(0,newtid);
	SetActivator(0,AAPTR_TRACER);
	//Thing_Remove(newtid);
	SetActorState(0,"Explode",true);
}

/*Script "Unreal_EightballLockOn" (void)
{
	int newtid = UniqueTID()>>16;
	ActivatorTID();
	if(PickActor(0,1.0,1.0,2488,newtid, MF_SHOOTABLE, ML_BLOCKEVERYTHING | ML_BLOCKHITSCAN, PICKAF_FORCETID);
	{
		GiveActorInventory(newtid, "Unreal_EightballLockTimer", 1);
		delay(5);
	}
}*/

Script "UnrealHitBox" (int damage, int headshotdmg)
{
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	int newtid = UniqueTID();
	int oldTID = ActivatorTID();
	Thing_ChangeTID(0,newtid);
	SetActivator(0, AAPTR_Tracer);
	int tx = GetActorX(0);
	int ty = GetActorY(0);
	int tz = GetActorZ(0);
	int monsterHealth = GetActorProperty(0,APROP_Health);
	int height = GetActorProperty(0,APROP_Height);
	int width = GetActorProperty(0,APROP_Radius)*2;
	int result;
	if(!CheckInventory("IsFatButBiped") && width >= height)
	{
		int monsterAngle = GetActorAngle(0);
		int vang = VectorAngle(tx - x, ty - y);
		int angle = vang % 1.0;

		if(!CheckInventory("NoHeadShots") && (z <= tz+FixedMul(height,0.35)) && (z >= tz+FixedMul(height,0.65)) && ((abs(monsterAngle - angle)) < 0.65 && (abs(monsterAngle - angle)) > 0.35))
		{
			SetActorProperty(newtid,APROP_DamageType,"UnrealDecapitate");
			if(monsterHealth - (headshotdmg) <= 0)
				GiveInventory("Unreal_HeadshotGibGenerator", 1);
			SetResultValue(headshotdmg);
		}
		else
		{
			SetResultValue(damage);
		}
	}
	else if(!CheckInventory("NoHeadShots") && (z >= tz+FixedMul(height,0.75))/* && (z <= tz+height)*/)
	{
		if(StrLeft(GetActorClass(0),4)=="RTCW")
			GiveInventory("RTCW_RemoveHat",1);

		result = GetCvar("samsara_mixerloaded") ? ACS_NamedExecuteWithResult("Goldeneye_HatShot",0,0,0,0) : 0;

		if(result == -1)
		{
			SetResultValue(-1);
			terminate;
		}

		SetActorProperty(newtid,APROP_DamageType,"UnrealDecapitate");
		if(monsterHealth - (headshotdmg) <= 0)
			GiveInventory("Unreal_HeadshotGibGenerator", 1);
		SetResultValue(headshotdmg);
	}
	else
	{
		if((z >= tz+FixedMul(height,0.45)) && (z < tz+FixedMul(height,0.75)))
		{
			SetActorProperty(newtid,APROP_DamageType,"UnrealBullet");
		}

		SetResultValue(damage);
	}
	Thing_ChangeTID(newtid,oldTID);
}

Script "Unreal_SpawnShockRifleHitBox" (int type)
{
	str hitbox;

	if (type == 3)
	{
		hitbox = "UASMDBallHitBox";
	}

	int bombtid = UniqueTid();
	int newtid = UniqueTid();
	Thing_ChangeTid(0,bombtid);
	SpawnSpotFacingForced(hitbox,0,newtid);
	SetActivator(newtid,AAPTR_DEFAULT);
	SetPointer(AAPTR_TRACER,bombtid);
	Thing_ChangeTid(bombtid,0);
}

Script "Unreal_BloodGenerator_Offsets" (void)
{
	int missilex = GetActorX(0);
	int missiley = GetActorY(0);
	int missilez = GetActorZ(0);
	SetActivator(0,AAPTR_Tracer);
	int enemyx = GetActorX(0);
	int enemyy = GetActorY(0);
	int enemyz = GetActorZ(0);
	int currentangle = GetActorAngle(0);
	int vang = VectorAngle(enemyx - missilex, enemyy - missiley);
	int angle = vang % 1.0;
	SetInventory("Unreal_BloodGeneratorAngle",angle+65536);
	SetInventory("Unreal_BloodGeneratorZ",(missilez - enemyz)>>16 + 65536);
}

Script "Unreal_BloodGenerator_Return" (int mode)
{
	int result;
	switch(mode)
	{
		case 1:
			result = ((CheckInventory("Unreal_BloodGeneratorAngle") - 65536)/182)+180;
			break;
		case 2:
			result = CheckInventory("Unreal_BloodGeneratorZ");
			break;
	}
	SetResultValue(result);
}

Script "Unreal_GibHeightCheck" (void)
{
	int height = (GetActorProperty(0,APROP_Height)>>16);
	//height += height * (3 * (GetActorProperty(0,APROP_Health) <= 0));
	SetResultValue(height);
}

Script "Unreal_EightballReticle" (void)
{
	While(CheckInventory("Unreal_TargetLocked") == 1)
	{
		SetFont("8LOCKCH");
		SetHUDSize(640,480,0);
		HudMessage(s: "A"; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD, 1624, CR_UNTRANSLATED, 320.0,240.0,0.1,1.0);
		Delay(1);
	}
}

Script "Unreal_ASMDTrace" (void)
{
	int projX = GetActorX(0);
	int projY = GetActorY(0);
	int projZ = GetActorZ(0);
	SetActivatorToTarget(0);
	int angle = GetActorAngle(0);
	int pitch = GetActorPitch(0);
	int playX = GetActorX(0) + FixedMul(sin(angle),13.0);
	int playY = GetActorY(0) - FixedMul(cos(angle),13.0);
	int playZ = GetActorZ(0) + GetActorViewHeight(0) - 8.0;
	int newtid = UniqueTid();

	int vectorX = projX - playX;
	int vectorY = projY - playY;
	int vectorZ = projZ - playZ;

	int distance = magnitudeThree_f(vectorX, vectorY, vectorZ);

	int offX = FixedDiv(vectorX,distance);
	int offY = FixedDiv(vectorY,distance);
	int offZ = FixedDiv(vectorZ,distance);

	for(int a = 35; a < (distance>>16); a+=70)
	{
		SpawnForced("U1ShockRippleB_Small",playX + (a * offX),playY + (a * offY),playZ + (a * offZ), newtid);
		SetActorAngle(newtid,angle);
		SetActorPitch(newtid,-pitch);
		Delay(2);
		while(ThingCountName("U1ShockRippleB_Small",newtid) > 15)
			Delay(1);
	}
}

script "Unreal_TransferCharge" (int target)
{
	if (target) { SetActivatorToTarget(0); }

	SetResultValue(CheckInventory("UDispChargePower"));
}

script "Unreal_RevertUpgrade" (void)
{
	if (!CheckWeapon("Unreal_DispersionPistol") || isDead(0)) { terminate; }

	GiveInventory("UnrealDoUpgradeRevert", 1);
	Delay(9);
	TakeInventory("UnrealDoUpgradeRevert", 1);
}

Script "Unreal_GibScale" (void)
{
	int oldTID = ActivatorTID();
	int target = UniqueTID();
	Thing_ChangeTID(0, target);
	SetActivator(0,AAPTR_Master);
	int height = (GetActorProperty(0,APROP_Height)*4)>>16;
	int radius = GetActorProperty(0,APROP_Radius)>>16;
	//To make up for my mistake that is too widespread to address head on, I will do it here
	SetActorPosition(target,GetActorX(0),GetActorY(0),GetActorZ(0)+(height/2),0);

	SetActivator(target);
	Thing_ChangeTID(target, oldTID);
	int spacecube = height*radius*radius;
	if(spacecube < 5000) { SetActorProperty(0,APROP_ScaleX,1.0); SetActorProperty(0,APROP_ScaleY,1.0); }
	else if(spacecube < 50000) { SetActorProperty(0,APROP_ScaleX,1.2); SetActorProperty(0,APROP_ScaleY,1.2); }
	else if(spacecube < 500000) { SetActorProperty(0,APROP_ScaleX,1.5); SetActorProperty(0,APROP_ScaleY,1.5); }
	else if(spacecube < 1000000) { SetActorProperty(0,APROP_ScaleX,2.0); SetActorProperty(0,APROP_ScaleY,2.0); }
	else { SetActorProperty(0,APROP_ScaleX,1.0); SetActorProperty(0,APROP_ScaleY,1.0); }
}

Script "Unreal_RedeemerPitch" (void)
{
	SetActivatorToTarget(0);
	SetResultValue(GetActorPitch(0)/182);
}

Script "Unreal_Recoil" (void)
{
	int GZDoom = (GetCvar("samsara_zscriptready") == 1);
	int rolldir = -1 + (2*random(0,1));
	int randomroll = random(45,90);
	int rollamount = random(2,3);
	int rollcounter;
	SetActorRoll(0,0);
	while(rollcounter < rollamount)
	{
		if(GZDoom)
			SetActorRoll(0,GetActorRoll(0)+(rolldir*randomroll));
		SetActorProperty(0,APROP_Viewheight,GetActorProperty(0,APROP_Viewheight)-1.0);
		Delay(1);
		rollcounter++;
	}
	while(rollcounter > 0)
	{
		if(GZDoom)
			SetActorRoll(0,GetActorRoll(0)-(rolldir*randomroll));
		SetActorProperty(0,APROP_Viewheight,GetActorProperty(0,APROP_Viewheight)+1.0);
		Delay(1);
		rollcounter--;
	}
	SetActorRoll(0,0);
}

Script "Unreal_RedeemerRocket" (void)
{
	int GZDoom = (GetCvar("samsara_zscriptready") == 1);
	int abortDelay;
	int missileTid = UniqueTid();
	int maxturn = 2160;
	int turnamount = 180;
	bool spreadproj = false;
	Thing_ChangeTid(0,missileTid);
	SetActivator(0,AAPTR_TARGET);
	if (CheckInventory("SamsaraUnrealRedeemerMainRocketControlled")) { spreadproj = true; }
	else
	{
		ChangeCamera(missileTid, 0, 0);
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		SetInventory("SamsaraUnrealRedeemerMainRocketControlled", 1);
	}
	SetActorPitch(missileTid,GetActorPitch(0));
	while (ClassifyActor(missileTid) > 0 && !isDead(0) && CheckInventory("SamsaraUnrealRedeemerMainRocketControlled"))
	{
		if (!spreadproj)
		{
			SetFont("UNREDEEM");
			SetHudSize(640,480,1);
			HudMessage(s:"A"; HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD, 10000, CR_UNTRANSLATED, 320.0, 240.0, 0.1, 0.67);
		}

		int yaw = GetPlayerInput(-1,INPUT_YAW);
		int pitch = -GetPlayerInput(-1,INPUT_PITCH);
		int detonate = (GetPlayerInput(-1,INPUT_BUTTONS) & BT_ATTACK);
		int abort = GetPlayerInput(-1,INPUT_BUTTONS) & BT_ALTATTACK;
		SetActorAngle(missileTid,GetActorAngle(missileTid)+yaw);
		SetActorPitch(missileTid,GetActorPitch(missileTid)+pitch);
		int velx = FixedMul(16*cos(GetActorAngle(missileTid)),cos(GetActorPitch(missileTid)));
		int vely = FixedMul(16*sin(GetActorAngle(missileTid)),cos(GetActorPitch(missileTid)));
		int velz = -16*sin(GetActorPitch(missileTid));
		SetActorVelocity(missileTid,velx,vely,velz,0,0);

		if(GZDoom)
		{
			int roll = GetActorRoll(missileTid);

			if(roll >= 0.5 && roll < 1.0)
				roll-=1.0;

			if(yaw < 0)
			{
				if(roll < maxturn)
					SetActorRoll(missileTid,roll+turnamount);
			}
			else if(yaw > 0)
			{
				if(roll > -maxturn)
					SetActorRoll(missileTid,roll-turnamount);
			}
			else if(roll != 0)
			{
				if(roll > 0)
					SetActorRoll(missileTid,roll-turnamount);
				else
					SetActorRoll(missileTid,roll+turnamount);

				if(roll != 0)
				{
					if(roll > 0)
						SetActorRoll(missileTid,roll-turnamount);
					else
						SetActorRoll(missileTid,roll+turnamount);
				}
			}
		}

		Delay(1);
		abortDelay++;

		if (abort != 0 && abortDelay > 7)
		{
			SetActorVelocity(missileTid, velx * 2, vely * 2, velz * 2, false, false);
			break;
		}
		else if (detonate)
		{
			SetActorState(missileTid, "ForceDeath", true);
			break;
		}
	}

	if (ClassifyActor(missileTid) > 0 && !CheckActorInventory(missileTid, "SamsaraUnrealRedeemerRocketDeath")) { GiveActorInventory(missileTid, "SamsaraNoTimeFreezeDisabler", 1); }

	if (!spreadproj)
	{
		SetInventory("SamsaraUnrealRedeemerMainRocketControlled", 0);
		HudMessage(s:""; HUDMSG_PLAIN, 10000, CR_UNTRANSLATED, 240.0, 240.0, 0.1);
		SetHudSize(0, 0, 0);
		ChangeCamera(0, 0, 0);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
	}
}

script "UnrealWeaponTargeter" (int weapon)
{
    if (weapon >= 1) // Eightball Gun
    {
        while (CheckWeapon("Unreal_EightBall") && !isDead(0))
        {
            if (isSinglePlayer() || isCoop()) { LineAttack(0, GetActorAngle(0), GetActorPitch(0), 0, "Unreal_EightballTargeterPuffCoop", "None", 8192.0, FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL, 0); }
            else { LineAttack(0, GetActorAngle(0), GetActorPitch(0), 0, "Unreal_EightballTargeterPuff", "None", 8192.0, FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL, 0); }

            Delay(2);
        }
    } else { // Razorjack
        while (CheckWeapon("Unreal_RazorJack") && !isDead(0))
        {
            if (isSinglePlayer() || isCoop()) { LineAttack(0, GetActorAngle(0), GetActorPitch(0), 0, "SamsaraLineTracePuffCoop", "None", 8192.0, FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL, 0); }
            else { LineAttack(0, GetActorAngle(0), GetActorPitch(0), 0, "SamsaraLineTracePuff", "None", 8192.0, FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL, 0); }

            Delay(2);
        }
    }
}
