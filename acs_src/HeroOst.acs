//======================================================================================================================
//													Compile this
//======================================================================================================================

#library "HeroOST"
#include "zcommon.acs"
#include "commonFuncs.acs"

#define musicCount 38

int musicActivated[musicCount] = {-1};
str musicSettings[musiccount] =
{
    "samsara_cl_heromusic_doom", //0
    "samsara_cl_heromusic_chex", //1
    "samsara_cl_heromusic_heretic", //2
    "samsara_cl_heromusic_wolf3d", //3
    "samsara_cl_heromusic_hexen1", //4
    "samsara_cl_heromusic_duke3d", //5
    "samsara_cl_heromusic_marathon", //6
    "samsara_cl_heromusic_quake1", //7
    "samsara_cl_heromusic_rott", //8
    "samsara_cl_heromusic_bstone", //9
    "samsara_cl_heromusic_blood", //10
    "samsara_cl_heromusic_strife", //11
    "samsara_cl_heromusic_erad", //12
    "samsara_cl_heromusic_c7", //13
    "samsara_cl_heromusic_rmr", //14
    "samsara_cl_heromusic_darkf", //15
    "samsara_cl_heromusic_ipog", //16
    "samsara_cl_heromusic_disrup", //17
    "samsara_cl_heromusic_witch", //18
    "samsara_cl_heromusic_halflife", //19
    "samsara_cl_heromusic_sw", //20
    "samsara_cl_heromusic_cm", //21
    "samsara_cl_heromusic_ps", //22
    "samsara_cl_heromusic_rr", //23
    "samsara_cl_heromusic_quake2", //24
    "samsara_cl_heromusic_hexen2", //25
    "samsara_cl_heromusic_goldeneye", //26
    "samsara_cl_heromusic_catacomb", //27
    "samsara_cl_heromusic_painkiller", //28
    "samsara_cl_heromusic_unreal", //29
    "samsara_cl_heromusic_rtcw", //30
    "samsara_cl_heromusic_quake3", //31
    "samsara_cl_heromusic_descent", //32
    "samsara_cl_heromusic_deusex", //33
	"samsara_cl_heromusic_doom64", //34
	"samsara_cl_heromusic_totenkopf", //35
	"samsara_cl_heromusic_dukelab", //36
	"samsara_cl_heromusic_hlop", //37
};

#DEFINE CLASSCOUNT 34
#DEFINE MAXTYPES 5
#DEFINE MAXALTS 5

int maxGameTracks[CLASSCOUNT][MAXALTS][MAXTYPES] =
{
	{ {85}, {50} }, //Doom
	{ {15} }, //Chex Quest
	{ {19} }, //Heretic
	{ {25, 25}, {15} }, //Wolfenstein 3D
	{ {32, 20} }, //Hexen
	{ {40}, {6} }, //Duke Nukem 3D
	{ {16} }, //Marathon
	{ {25} }, //Quake
	{ {21, 21} }, //Rise of the Triad
	{ {34, 37} }, //Blake Stone
	{ {12, 8} }, //Blood
	{ {19} }, //Strife
	{ {17} }, //Eradicator
	{ {31, 31} }, //Corridor 7
	{ {51} }, //Rebel Moon Rising
	{ {20, 16} }, //Star Wars: Dark Forces
	{ {33} }, //In Pursuit of Greed
	{ {37} }, //Disruptor
	{ {17} }, //Witchhaven
	{ {3, 4, 8, 4, 3}, {2, 3, 6, 5, 3} }, //Half-Life
	{ {9} }, //Shadow Warrior
	{ {27} }, //Cybermage
	{ {10} }, //Powerslave
	{ {16} }, //Redneck Rampage
	{ {20} }, //Quake 2
	{ {26, 26} }, //Hexen 2
	{ {26} }, //Goldeneye 007
	{ {1, 1} }, //Catacomb 3-D
	{ {27, 27, 27} }, //Painkiller
	{ {77} }, //Unreal
	{ {16} }, //Return to Castle Wolfenstein
	{ {29} }, //Quake 3
	{ {26, 21} }, //Descent
	{ {21, 21, 21} }, //Deus Ex
};

str gameMusicTypes[CLASSCOUNT][MAXALTS][MAXTYPES] =
{
	{ {"DOOMTR"}, {"D64TRK"} },
	{ {"CHEXTR"} },
	{ {"HERETR"} },
	{ {"WOLF3D", "W3DIMF" }, {"TKTRAK"} },
	{ {"HEXENT", "HEXECD"} },
	{ {"DUKE3D"}, {"DUKLAB"} },
	{ {"MARATR"} },
	{ {"QKTRAK"} },
	{ {"ROTTTR", "ROTTAH"} },
	{ {"BSTRAK", "BSTIMF"} },
	{ {"BLDMID", "BLOODT"} },
	{ {"STRIFT"} },
	{ {"ERDTRK"} },
	{ {"C7TRAK", "C7TIMF"} },
	{ {"RMRTRK"} },
	{ {"DFTRAK", "DFTPSX"} },
	{ {"POTRAK"} },
	{ {"DISRTR"} },
	{ {"WITRAK"} },
	{ {"HLBTRK", "HLKTRK", "HLRTRK", "HLSTRK", "HLWTRK" }, {"OPBTRK", "OPKTRK", "OPRTRK", "OPSTRK", "OPWTRK" } },
	{ {"SWTRAK"} },
	{ {"CMTRAK"} },
	{ {"EXHUTR"} },
	{ {"RRTRAK"} },
	{ {"Q2TRAK"} },
	{ {"HX2MID", "H2TRAK"} },
	{ {"BONDTR"} },
	{ {"C3DTRACK", "C3DTRIMF"} },
	{ {"PKAMB1", "PKAMB2", "PKFIT1"} },
	{ {"UNRTRK"} },
	{ {"RTCWTR"} },
	{ {"Q3TRAK"} },
	{ {"DSTRAK", "DSCDTR"} },
	{ {"DXAMB1", "DXAMB2", "DXFIT"} },
};

str ChristmasMusic[16] = {"CHRIST01","CHRIST02","CHRIST03","CHRIST04","CHRIST05",
"CHRIST06","CHRIST07","CHRIST08","CHRIST09","CHRIST10","CHRIST11","CHRIST12",
"CHRIST13","CHRIST14","CHRIST15","CHRIST16"};

/*str gameClassesSTR[34] = {
	"DoomguyClass", "ChexClass", "CorvusClass", "WolfenClass", "HexenClass", "DukeClass", "MarathonClass", "QuakeClass", "RottClass", "BlakeClass",
	"CalebClass", "StrifeClass", "EradClass", "C7Class", "RMRClass", "KatarnClass", "POGreedClass", "DisruptorClass", "WitchavenClass",
	"HalfLifeClass", "SWClass", "CMClass", "JonClass", "RRClass", "BittermanClass", "Hexen2Class", "BondClass", "CatacombClass", "PainkillerClass",
	"UnrealClass", "RTCWClass", "Q3Class", "DescentClass", "DeusExClass"
};*/

script "SamsaraOST_Enter" ENTER
{
    if (GameType() == GAME_TITLE_MAP) { terminate; }

    int i;
    int choices;

    int pln = PlayerNumber();
    int altskin, settrack, lastmode, lastgame, lastwolf3d, lasthex, lastrott, lastbstone, lastblud, lastc7, lastdarkf, lasthex2, lastc3d, lastdescent;
    int herosoundtrack = GetUserCVar(pln, "samsara_cl_heromusic");
    int gameoverride;
	int wolf3dimf = GetUserCVar(pln, "samsara_cl_wolf3dimf");
	int hexencd = GetUserCVar(pln, "samsara_cl_hexcd");
	int rott13 = GetUserCVar(pln, "samsara_cl_rott13ost");
	int bstoneimf = GetUserCVar(pln, "samsara_cl_bstoneimf");
    int bloodcd = GetUserCVar(pln, "samsara_cl_bloodcd");
	int c7imf = GetUserCVar(pln, "samsara_cl_c7imf");
	int darkfpsx = GetUserCVar(pln, "samsara_cl_darkfpsx");
    int hexen2cd = GetUserCVar(pln, "samsara_cl_hex2cd");
	int c3dimf = GetUserCVar(pln, "samsara_cl_c3dimf");
    int descentcd = GetUserCVar(pln, "samsara_cl_descentcd");
    int musictid = UniqueTID();

    if (herosoundtrack > 3) { herosoundtrack = 3; }
    else if (herosoundtrack < 0) { herosoundtrack = 0; }

    // precautionary
    if (wolf3dimf > 1) { wolf3dimf = 1; }
    else if (wolf3dimf < 0) { wolf3dimf = 0; }

    if (hexencd > 1) { hexencd = 1; }
    else if (hexencd < 0) { hexencd = 0; }

    if (rott13 > 1) { rott13 = 1; }
    else if (rott13 < 0) { rott13 = 0; }

    if (bstoneimf > 1) { bstoneimf = 1; }
    else if (bstoneimf < 0) { bstoneimf = 0; }

    if (bloodcd > 1) { bloodcd = 1; }
    else if (bloodcd < 0) { bloodcd = 0; }

    if (c7imf > 1) { c7imf = 1; }
    else if (c7imf < 0) { c7imf = 0; }

    if (darkfpsx > 1) { darkfpsx = 1; }
    else if (darkfpsx < 0) { darkfpsx = 0; }

    if (hexen2cd > 1) { hexen2cd = 1; }
    else if (hexen2cd < 0) { hexen2cd = 0; }

    if (c3dimf > 1) { c3dimf = 1; }
    else if (c3dimf < 0) { c3dimf = 0; }

    if (descentcd > 1) { descentcd = 1; }
    else if (descentcd < 0) { descentcd = 0; }

    if (herosoundtrack > 0 && (!GetUserCVar(pln, "samsara_cl_xmasmusic") || !GetCVar("samsara_merrychristmas")))
    {
        if (herosoundtrack != lastmode
		|| CheckInventory("SamsaraModeCounter") != altskin
		|| wolf3dimf != lastwolf3d
		|| hexencd != lasthex
		|| rott13 != lastrott
		|| bstoneimf != lastbstone
		|| bloodcd != lastblud
		|| c7imf != lastc7
		|| darkfpsx != lastdarkf
		|| hexen2cd != lasthex2
		|| descentcd != lastdescent
		|| c3dimf != lastc3d
		|| (CheckInventory("HeroSoundTrackLevel") && !GetUserCVar(pln,"samsara_cl_heromusichub"))
		|| CheckInventory("SamsaraHeroMusicSelectingNextTrack"))
        {
            LocalSetMusic("");

            choices = -1;
            gameoverride = 0; // default to doom when there are no other fallbacks in use

            if (herosoundtrack == 2)
            {
                for (i = 0; i < musicCount; i++)
                {
                    if (GetUserCVar(pln, musicSettings[i]))
                    {
                        choices++;
                        musicActivated[choices] = i;
                    }
                }

                if (choices > -1) { gameoverride = musicActivated[Random(0, choices)]; }
            }

            if (herosoundtrack == 1 || (herosoundtrack == 2 && choices == -1))
            {
                if (GetCVar("samsara_moddedgame")) { gameoverride = 0; }
                else
                {
                    gameoverride = PlayerClass(pln);

                    switch (gameoverride)
                    {
                      default:
                        break;

                      case 0:
                        if (GetUserCVar(pln, "samsara_cl_doommode") == 1) { gameoverride = 34; }
                        break;

                      case 3:
                        if (GetUserCVar(pln, "samsara_cl_wolfmode") >= 2) { gameoverride = 35; }
                        break;

                      case 5:
                        if (GetUserCVar(pln, "samsara_cl_dukemode") == 1) { gameoverride = 36; }
                        break;

                      case 19:
                        if (GetUserCVar(pln, "samsara_cl_shephardmode") >= 1) { gameoverride = 37; }
                        break;
                    }
                }
            }

            SetInventory("SamsaraHeroMusicGame", gameoverride + 1);

            int switchType = 0;
            int switchClass = 0;
            StopSound(musictid, CHAN_BODY);
            Thing_Remove(musictid);

            if (herosoundtrack == 3)
            {
                settrack = Random(0, 30);

                if (settrack <= 9) { LocalSetMusic(StrParam(s:"a000000", d:settrack)); }
                else { LocalSetMusic(StrParam(s:"a00000", d:settrack)); }
            } else {
                switch (gameoverride)
                {
                  default:
                    settrack = Random(1, maxGameTracks[gameoverride][0][0]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[gameoverride][0][0], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 0:
                  case 34:
                    switchClass = gameoverride == 34;
                    settrack = Random(1, maxGameTracks[0][switchClass][0]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[0][switchClass][0], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 3:
                  case 35:
					switchType = GetUserCVar(pln, "samsara_cl_wolf3dimf");
                    switchClass = gameoverride == 35;
                    settrack = Random(1, maxGameTracks[3][switchClass][switchClass ? 0 : switchType]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[3][switchClass][switchClass ? 0 : switchType], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

				  case 4:
                    switchType = GetUserCVar(pln, "samsara_cl_hexcd");
                    settrack = Random(1, maxGameTracks[4][0][switchType]);
                    LocalSetMusic(StrParam(s:gameMusicTypes[4][0][switchType], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 5:
                  case 36:
                    switchClass = gameoverride == 36;
                    settrack = Random(1, maxGameTracks[5][switchClass][0]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[5][switchClass][0], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

				  case 8:
                    switchType = GetUserCVar(pln, "samsara_cl_rott13ost");
                    settrack = Random(1, maxGameTracks[8][0][switchType]);
                    LocalSetMusic(StrParam(s:gameMusicTypes[8][0][switchType], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

				  case 9:
                    switchType = GetUserCVar(pln, "samsara_cl_bstoneimf");
                    settrack = Random(1, maxGameTracks[9][0][switchType]);
                    LocalSetMusic(StrParam(s:gameMusicTypes[9][0][switchType], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 10:
                    switchType = GetUserCVar(pln, "samsara_cl_bloodcd");
                    settrack = Random(1, maxGameTracks[10][0][switchType]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[10][0][switchType], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

				  case 13:
                    switchType = GetUserCVar(pln, "samsara_cl_c7imf");
                    settrack = Random(1, maxGameTracks[13][0][switchType]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[13][0][switchType], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

				  case 15:
                    switchType = GetUserCVar(pln, "samsara_cl_darkfpsx");
                    settrack = Random(1, maxGameTracks[15][0][switchType]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[15][0][switchType], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 19:
                  case 37:
                    SpawnForced("HLMusicToken",GetActorX(0),GetActorY(0),GetActorZ(0),musictid);
                    if (!CheckInventory("SamsaraHeroMusicHalfLifeActive")) { ACS_NamedExecuteWithResult("SamsaraOST_HalfLifeScriptedMusicLoop",musictid); }
                    break;

                  case 25:
                    switchType = GetUserCVar(pln, "samsara_cl_hex2cd");
                    settrack = Random(1, maxGameTracks[25][0][switchType]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[25][0][switchType], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 26:
                    settrack = Random(1, maxGameTracks[26][0][0]);
                    SetInventory("BondMusicToken", settrack + 1);

                    LocalSetMusic(StrParam(s:gameMusicTypes[26][0][0], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 27:
					if(GetUserCVar(pln, "samsara_cl_c3dimf")) LocalSetMusic("C3DTRIMF");
					else LocalSetMusic("C3DTRACK");
                    break;

                  case 28:
                    if (!CheckInventory("SamsaraHeroMusicPainkillerActive")) { ACS_NamedExecuteWithResult("SamsaraOST_PainkillerScriptedMusic"); }
                    break;

                  case 32:
                    switchType = GetUserCVar(pln, "samsara_cl_descentcd");
                    settrack = Random(1, maxGameTracks[32][0][switchType]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[32][0][switchType], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 33:
                    if (!CheckInventory("SamsaraHeroMusicDeusExActive")) { ACS_NamedExecuteWithResult("SamsaraOST_DeusExScriptedMusic"); }
                    break;
                }
            }

            SetInventory("HeroSoundTrack", herosoundtrack);
            SetInventory("HeroSoundTrackXmas", 0);
			SetInventory("HeroSoundTrackLevel", 0);
            SetInventory("SamsaraHeroMusicSelectingNextTrack", 0);
        }
    } else if (GetUserCVar(pln, "samsara_cl_xmasmusic") && GetCVar("samsara_merrychristmas") && herosoundtrack > 0) {
        if (!CheckInventory("HeroSoundTrackXmas") || (CheckInventory("HeroSoundTrackLevel") && !GetUserCVar(pln,"samsara_cl_heromusichub")) || CheckInventory("SamsaraHeroMusicSelectingNextTrack"))
        {
            LocalSetMusic("");

            settrack = Random(0, 15);

            LocalSetMusic(ChristmasMusic[settrack]);

            SetInventory("HeroSoundTrack", 0);
            SetInventory("HeroSoundTrackXmas", 1);
            SetInventory("SamsaraHeroMusicGame", 0);
			SetInventory("HeroSoundTrackLevel", 0);
            SetInventory("SamsaraHeroMusicSelectingNextTrack", 0);
        }
    } else {
        if (CheckInventory("HeroSoundTrack") || CheckInventory("HeroSoundTrackXmas"))
        {
            LocalSetMusic("");

            LocalSetMusic("*");

            SetInventory("HeroSoundTrack", 0);
            SetInventory("HeroSoundTrackXmas", 0);
            SetInventory("SamsaraHeroMusicGame", 0);
			SetInventory("HeroSoundTrackLevel", 0);
            SetInventory("SamsaraHeroMusicSelectingNextTrack", 0);
        }
    }

    altskin = CheckInventory("SamsaraModeCounter");
    lastmode = GetUserCVar(pln,"samsara_cl_heromusic");
	lastwolf3d = GetUserCVar(pln,"samsara_cl_wolf3dimf");
	lasthex = GetUserCVar(pln,"samsara_cl_hexcd");
	lastrott = GetUserCVar(pln,"samsara_cl_rott13ost");
	lastbstone = GetUserCVar(pln,"samsara_cl_bstoneimf");
    lastblud = GetUserCVar(pln,"samsara_cl_bloodcd");
	lastc7 = GetUserCVar(pln,"samsara_cl_c7imf");
	lastdarkf = GetUserCVar(pln,"samsara_cl_darkfpsx");
    lasthex2 = GetUserCVar(pln,"samsara_cl_hex2cd");
	lastc3d = GetUserCVar(pln,"samsara_cl_c3dimf");
    lastdescent = GetUserCVar(pln,"samsara_cl_descentcd");

    if (lastmode > 3) { lastmode = 3; }
    else if (lastmode < 0) { lastmode = 0; }

    // precautionary
    if (lastwolf3d > 1) { lastwolf3d = 1; }
    else if (lastwolf3d < 0) { lastwolf3d = 0; }

    if (lasthex > 1) { lasthex = 1; }
    else if (lasthex < 0) { lasthex = 0; }

    if (lastrott > 1) { lastrott = 1; }
    else if (lastrott < 0) { lastrott = 0; }

    if (lastbstone > 1) { lastbstone = 1; }
    else if (lastbstone < 0) { lastbstone = 0; }

    if (lastblud > 1) { lastblud = 1; }
    else if (lastblud < 0) { lastblud = 0; }

    if (lastc7 > 1) { lastc7 = 1; }
    else if (lastc7 < 0) { lastc7 = 0; }

    if (lastdarkf > 1) { lastdarkf = 1; }
    else if (lastdarkf < 0) { lastdarkf = 0; }

    if (lasthex2 > 1) { lasthex2 = 1; }
    else if (lasthex2 < 0) { lasthex2 = 0; }

    if (lastc3d > 1) { lastc3d = 1; }
    else if (lastc3d < 0) { lastc3d = 0; }

    if (lastdescent > 1) { lastdescent = 1; }
    else if (lastdescent < 0) { lastdescent = 0; }

    Delay(1);
    restart;
}

script "SamsaraOST_NewHubLevelSong" RETURN
{
	GiveInventory("HeroSoundTrackLevel",1);
}

script "SamsaraOST_HalfLifeScriptedMusicLoop" (int musictid)
{
    int settrack;
    int delaytimer = 0;
	int mySetting = GetUserCVAR(PlayerNumber(),"samsara_cl_heromusic");
    SetInventory("SamsaraHeroMusicHalfLifeActive", 1);

    while (GetUserCVAR(PlayerNumber(),"samsara_cl_heromusic") == mySetting)
    {
		if(CheckInventory("SamsaraHeroMusicGame") != 20 && CheckInventory("SamsaraHeroMusicGame") != 38)
			break;

        if (CheckInventory("HalfLifeMusicPlayingToken"))
        {
			TakeInventory("HLMusicKey",1);
			TakeInventory("HLMusicWeapon",1);
			TakeInventory("HLMusicBoss",1);
            if (delaytimer >= 4200)
            {
                StopSound(musictid,CHAN_BODY);
                SetInventory("HalfLifeMusicPlayingToken", 0);
                delaytimer = 0;
            }
            else { delaytimer++; }
        }

        if (!CheckInventory("HalfLifeMusicPlayingToken"))
        {
			delaytimer = 0;
            if (Timer() == 0)
            {
                ACS_NamedExecuteWithResult("SamsaraOST_HalfLifeScriptedMusic", musictid, 3, PlayerNumber());
                SetInventory("HalfLifeMusicPlayingToken", 1);
            }
			else if(CheckInventory("HLMusicBoss"))
			{
				ACS_NamedExecuteWithResult("SamsaraOST_HalfLifeScriptedMusic", musictid, 5, PlayerNumber());
				TakeInventory("HLMusicBoss",1);
                SetInventory("HalfLifeMusicPlayingToken", 1);
			}
			else if(CheckInventory("HLMusicWeapon"))
			{
				ACS_NamedExecuteWithResult("SamsaraOST_HalfLifeScriptedMusic", musictid, 1, PlayerNumber());
				TakeInventory("HLMusicWeapon",1);
                SetInventory("HalfLifeMusicPlayingToken", 1);
			}
			else if(CheckInventory("HLMusicKey"))
			{
				ACS_NamedExecuteWithResult("SamsaraOST_HalfLifeScriptedMusic", musictid, 2, PlayerNumber());
				TakeInventory("HLMusicKey",1);
                SetInventory("HalfLifeMusicPlayingToken", 1);
			}
			else
			{
                settrack = Random(0, 2048);

                if (settrack == 0)
                {
                    ACS_NamedExecuteWithResult("SamsaraOST_HalfLifeScriptedMusic", musictid, 4, PlayerNumber());
                    SetInventory("HalfLifeMusicPlayingToken", 1);
                }
            }
        }

        Delay(1);
    }

	TakeInventory("HLMusicBoss",1);
	TakeInventory("HLMusicWeapon",1);
	TakeInventory("HLMusicKey",1);
	StopSound(musictid,CHAN_BODY);
	SetInventory("HalfLifeMusicPlayingToken", 0);
    SetInventory("SamsaraHeroMusicHalfLifeActive", 0);
}

Script "SamsaraOST_HalfLifeScriptedMusic" (int musictid, int cause, int pln) clientside
{
	if(pln != ConsolePlayerNumber()) terminate;
	int settrack;
    bool halflifeopposingforce = CheckInventory("SamsaraHeroMusicGame") == 38;

	switch(cause)
	{
		case 1:
			SetTrack = Random(1, maxGameTracks[19][halflifeopposingforce][1]);
			PlaySound(musictid, strparam(s:gameMusicTypes[19][halflifeopposingforce][1],s:SetTrack < 10 ? "0" : "",d:SetTrack), CHAN_BODY|CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
			break;
		case 2:
			SetTrack = Random(1, maxGameTracks[19][halflifeopposingforce][4]);
			PlaySound(musictid, strparam(s:gameMusicTypes[19][halflifeopposingforce][4],s:SetTrack < 10 ? "0" : "",d:SetTrack), CHAN_BODY|CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
			break;
		case 3:
			SetTrack = Random(1, maxGameTracks[19][halflifeopposingforce][3]);
			PlaySound(musictid, strparam(s:gameMusicTypes[19][halflifeopposingforce][3],s:SetTrack < 10 ? "0" : "",d:SetTrack), CHAN_BODY|CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
			break;
		case 4:
			SetTrack = Random(1, maxGameTracks[19][halflifeopposingforce][2]);
			PlaySound(musictid, strparam(s:gameMusicTypes[19][halflifeopposingforce][2],s:SetTrack < 10 ? "0" : "",d:SetTrack), CHAN_BODY|CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
			break;
		case 5:
			SetTrack = Random(1, maxGameTracks[19][halflifeopposingforce][0]);
			PlaySound(musictid, strparam(s:gameMusicTypes[19][halflifeopposingforce][0],s:SetTrack < 10 ? "0" : "",d:SetTrack), CHAN_BODY|CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
			break;
	}
}

Script "SamsaraOST_PainkillerScriptedMusic" (void)
{
	int musicvolume = 1.0;
	int themeseed = random(1,maxGameTracks[28][0][0]);
	int songseed = 1;
	int targetmusicvolume = musicvolume;
	int swapped, swaptofight, swaptoambient;
	int laststate = 0;
	int trigger = 1;
	int gameoverride = CheckInventory("SamsaraHeroMusicGame") - 1;

	switch(themeseed)
	{
		case 2: case 3: case 4: case 5: case 10: case 11: case 12: case 13: case 17: case 18: case 20: case 22: songseed = random(1,2); break;
	}

    SetInventory("SamsaraHeroMusicPainkillerActive", 1);

	while(CheckInventory("SamsaraHeroMusicPainkillerActive"))
	{
        if (GetCVar("snd_musicvolume") <= 0 || ((CheckInventory("BondClass") || CheckInventory("RTCWClass")) && isDead(0) && isSinglePlayer() && !GetCVar("sv_singleplayerrespawn")))
        {
            Delay(1);
            continue;
        }

        gameoverride = CheckInventory("SamsaraHeroMusicGame") - 1;

        if (gameoverride != 28) { break; }

        if (CheckInventory("SamsaraHeroMusicSelectingNextTrack"))
        {
            LocalSetMusic("");

	        themeseed = random(1,maxGameTracks[28][0][0]);
	        switch(themeseed)
			{
				case 2: case 3: case 4: case 5: case 10: case 11: case 12: case 13: case 17: case 18: case 20: case 22: songseed = random(1,2); break;
			}
        }

		int newtid = UniqueTid();
		SpawnSpotFacingForced("Painkiller_MusicDecider",0,newtid);
		SetPointerExt(AAPTR_TRACER,0,newtid);
		Thing_ChangeTid(newtid,0);

		if(GetCvar("samsara_zscriptready") == 1)
		{
			SetMusicVolume(musicvolume);
			if(CheckInventory("Painkiller_CombatMusic") || swaptofight == 1)
			{
				if(CheckInventory("Painkiller_CombatMusic") != swapped || swaptofight == 1)
				{
					swaptofight = 1;
					//PrintBold(s:"Combat ",f:musicvolume);
					if(laststate == 0)
					{
						trigger = 0;
						musicvolume -= 0.01;
					}
					if(musicvolume < 0.0 || trigger == 1)
					{
						trigger = 1;
						if(musicvolume < targetmusicvolume)
							musicvolume += 0.01;
						else
						{
							musicvolume = targetmusicvolume;
							swaptofight = 0;
							swaptoambient = 0;
							swapped = 1;
						}

						if(laststate == 0)
						{
							switch(themeseed)
							{
								default:
									LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:themeseed < 10 ? "0" : "",d:themeseed),0);
									break;
								case 12:
									LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:1),0);
									break;
								case 13:
									LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:6),0);
									break;
								case 17:
									LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:5),0);
									break;

							}
						}
						laststate = 1;
					}
				}
				else
				{
					SetMusicVolume(targetmusicvolume);
					switch(themeseed)
					{
						default:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:themeseed < 10 ? "0" : "",d:themeseed),0);
							break;
						case 12:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:1),0);
							break;
						case 13:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:6),0);
							break;
						case 17:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:5),0);
							break;

					}
				}
			}
			else if(CheckInventory("Painkiller_CombatMusic") == 0 || swaptoambient == 1)
			{
				if(CheckInventory("Painkiller_CombatMusic") != swapped || swaptoambient == 1)
				{
					swaptoambient = 1;
					//PrintBold(s:"Ambient ",f:musicvolume);
					if(laststate == 1)
					{
						trigger = 0;
						musicvolume -= 0.01;
					}
					if(musicvolume < 0.0 || trigger == 1)
					{
						trigger = 1;
						if(musicvolume < targetmusicvolume)
							musicvolume += 0.01;
						else
						{
							musicvolume = targetmusicvolume;
							swaptofight = 0;
							swaptoambient = 0;
							swapped = 0;
						}

						if(laststate == 1)
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][songseed-1],s:themeseed < 10 ? "0" : "",d:themeseed),0);
						laststate = 0;
					}
				}
				else
				{
					SetMusicVolume(targetmusicvolume);
					LocalSetMusic(strparam(s:gameMusicTypes[28][0][songseed-1],s:themeseed < 10 ? "0" : "",d:themeseed),0);
				}
			}
		}
		else
		{
			if(!CheckWeapon("Painkiller_DemonMorph") && !CheckInventory("Painkiller_GoldActive"))
			{
				if(CheckInventory("Painkiller_CombatMusic"))
				{
					TakeInventory("Painkiller_AmbientMusic",65536);
					GiveInventory("Painkiller_CombatMusic",1);
					switch(themeseed)
					{
						default:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:themeseed < 10 ? "0" : "",d:themeseed),0);
							break;
						case 12:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:1),0);
							break;
						case 13:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:6),0);
							break;
						case 17:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:5),0);
							break;

					}
				}
				else if(!CheckInventory("Painkiller_AmbientMusic"))
				{
					GiveInventory("Painkiller_AmbientMusic",1);
					LocalSetMusic(strparam(s:gameMusicTypes[28][0][songseed-1],s:themeseed < 10 ? "0" : "",d:themeseed),0);
				}
			}
		}

		Delay(1);
	}
    SetInventory("SamsaraHeroMusicPainkillerActive", 0);
	TakeInventory("Painkiller_CombatMusic",1);
	TakeInventory("Painkiller_AmbientMusic",1);
}

Script "SamsaraOST_DeusExScriptedMusic" (void)
{
	int musicvolume = 1.0;
	int themeseed = random(1,maxGameTracks[33][0][0]);
	int songseed = 1;
	int targetmusicvolume = musicvolume;
	int swapped, swaptofight, swaptoambient;
	int laststate = 0;
	int trigger = 1;
	int gameoverride = CheckInventory("SamsaraHeroMusicGame") - 1;

    SetInventory("SamsaraHeroMusicDeusExActive", 1);

	if(themeseed == 14) songseed = random(1,2);
	while (CheckInventory("SamsaraHeroMusicDeusExActive"))
	{
        if (GetCVar("snd_musicvolume") <= 0 || ((CheckInventory("BondClass") || CheckInventory("RTCWClass")) && isDead(0) && isSinglePlayer() && !GetCVar("sv_singleplayerrespawn")))
        {
            Delay(1);
            continue;
        }

        gameoverride = CheckInventory("SamsaraHeroMusicGame") - 1;

        if (gameoverride != 33) { break; }

        if (CheckInventory("SamsaraHeroMusicSelectingNextTrack"))
        {
            LocalSetMusic("");

	        themeseed = random(1,maxGameTracks[33][0][0]);
			if(themeseed == 14) songseed = random(1,2);
        }

		int newtid = UniqueTid();
		SpawnSpotFacingForced("DeusEx_MusicDecider",0,newtid);
		SetPointerExt(AAPTR_TRACER,0,newtid);
		Thing_ChangeTid(newtid,0);

		if(GetCvar("samsara_zscriptready") == 1)
		{
			SetMusicVolume(musicvolume);
			if(CheckInventory("DeusEx_CombatMusic") || swaptofight == 1)
			{
				if(CheckInventory("DeusEx_CombatMusic") != swapped || swaptofight == 1)
				{
					swaptofight = 1;
					//PrintBold(s:"Combat ",f:musicvolume);
					if(laststate == 0)
					{
						trigger = 0;
						musicvolume -= 0.01;
					}
					if(musicvolume < 0.0 || trigger == 1)
					{
						trigger = 1;
						if(musicvolume < targetmusicvolume)
							musicvolume += 0.01;
						else
						{
							musicvolume = targetmusicvolume;
							swaptofight = 0;
							swaptoambient = 0;
							swapped = 1;
						}

						if(laststate == 0)
							LocalSetMusic(strparam(s:gameMusicTypes[33][0][2],s:themeseed < 10 ? "0" : "",d:themeseed),0);
						laststate = 1;
					}
				}
				else
				{
					SetMusicVolume(targetmusicvolume);
					LocalSetMusic(strparam(s:gameMusicTypes[33][0][2],s:themeseed < 10 ? "0" : "",d:themeseed),0);
				}
			}
			else if(CheckInventory("DeusEx_CombatMusic") == 0 || swaptoambient == 1)
			{
				if(CheckInventory("DeusEx_CombatMusic") != swapped || swaptoambient == 1)
				{
					swaptoambient = 1;
					//PrintBold(s:"Ambient ",f:musicvolume);
					if(laststate == 1)
					{
						trigger = 0;
						musicvolume -= 0.01;
					}
					if(musicvolume < 0.0 || trigger == 1)
					{
						trigger = 1;
						if(musicvolume < targetmusicvolume)
							musicvolume += 0.01;
						else
						{
							musicvolume = targetmusicvolume;
							swaptofight = 0;
							swaptoambient = 0;
							swapped = 0;
						}

						if(laststate == 1)
							LocalSetMusic(strparam(s:gameMusicTypes[33][0][songseed-1],s:themeseed < 10 ? "0" : "",d:themeseed),0);
						laststate = 0;
					}
				}
				else
				{
					SetMusicVolume(targetmusicvolume);
					LocalSetMusic(strparam(s:gameMusicTypes[33][0][songseed-1],s:themeseed < 10 ? "0" : "",d:themeseed),0);
				}
			}
		}
		else
		{
			if(!CheckWeapon("Painkiller_DemonMorph") && !CheckInventory("Painkiller_GoldActive"))
			{
				if(CheckInventory("DeusEx_CombatMusic"))
					LocalSetMusic(strparam(s:gameMusicTypes[33][0][2],s:themeseed < 10 ? "0" : "",d:themeseed),0);
				else
					LocalSetMusic(strparam(s:gameMusicTypes[33][0][songseed-1],s:themeseed < 10 ? "0" : "",d:themeseed),0);
			}
		}

		Delay(1);
	}
    SetInventory("SamsaraHeroMusicDeusExActive", 0);
    SetInventory("DeusEx_CombatMusic", 0);
}

script "SamsaraOST_NextSong" (void) NET
{
    int pln = PlayerNumber();

    if (PlayerIsSpectator(pln) > 0)
    {
        ACS_NamedExecuteWithResult("SamsaraOST_NextSong_Message", 0);
        terminate;
    } else if (GetUserCVar(pln, "samsara_cl_heromusic") <= 0) {
        ACS_NamedExecuteWithResult("SamsaraOST_NextSong_Message", 1);
        terminate;
    }

    SetInventory("SamsaraHeroMusicSelectingNextTrack", 1);
}

script "SamsaraOST_NextSong_Message" (int message) CLIENTSIDE
{
    int pln = PlayerNumber(); // ensure only the activator gets the messages
    int cpln = ConsolePlayerNumber();

    if (pln == cpln)
    {
        switch (message)
        {
            case 0:
                Log(s:"This cannot be used while spectating.");
                break;

            default:
                Log(s:"This can only be used with Hero Music enabled.");
                break;
        }
    }
}
