#DEFINE DX_AUGSLOTS 12

str DeusExAugmentationsSlots[DX_AUGSLOTS][9] =
{
	{ 	"DeusEx_Augmentation_Arms", "DeusEx_Augmentation_CombatStrength", "DeusEx_Augmentation_MicrofibralMuscle", "Combat Strength", "Microfibral Muscle",
		"Sorting rotors accelerate calcium ion concentration in the sarcoplasmic reticulum, increasing an agent's muscle speed several-fold and multiplying the damage they inflict in melee combat.
		\n\nTECH ONE: The effectiveness of melee weapons is increased slightly.
		\n\nTECH TWO: The effectiveness of melee weapons is increased moderately.
		\n\nTECH THREE: The effectiveness of melee weapons is increased significantly.
		\n\nTECH FOUR: Melee weapons are almost instantly lethal.",
		"Muscle strength is amplified with ionic polymeric gel myofibrils that allow the agent to push and lift extraordinarily heavy objects.
		\n\nTECH ONE: Strength is increased slightly.
		\n\nTECH TWO: Strength is increased moderately.
		\n\nTECH THREE: Strength is increased significantly - small enemies can now be lifted.
		\n\nTECH FOUR: An agent is inhumanly strong - human sized enemies can be lifted.",
		"DXAUG01", "DXAUG02"
	},
	{	"DeusEx_Augmentation_Legs", "DeusEx_Augmentation_SpeedEnhancement", "DeusEx_Augmentation_RunSilent", "Speed Enhancement", "Run Silent",
		"Ionic polymeric gel myofibrils are woven into the leg muscles, increasing the speed at which an agent can run and climb, the height they can jump, and reducing the damage they receive from falls.
		\n\nTECH ONE: Speed and jumping are increased slightly, while falling damage is reduced.
		\n\nTECH TWO: Speed and jumping are increased moderately, while falling damage is further reduced.
		\n\nTECH THREE: Speed and jumping are increased significantly, while falling damage is substantially reduced.
		\n\nTECH FOUR: An agent can run like the wind and leap from the tallest building.",
		"The necessary muscle movements for complete silence when walking or running are determined continuously with reactive kinematics equations produced by embedded nanocomputers.
		\n\nTECH ONE: Sound made while moving is reduced slightly.
		\n\nTECH TWO: Sound made while moving is reduced moderately.
		\n\nTECH THREE: Sound made while moving is reduced significantly.
		\n\nTECH FOUR: An agent is completely silent.",
		"DXAUG03", "DXAUG04"
	},
	{ 	"DeusEx_Augmentation_Subdermal1", "DeusEx_Augmentation_BallisticProtection", "DeusEx_Augmentation_EMPShield", "Ballistic Protection", "EMP Shield",
		"Monomolecular plates reinforce the skin's epithelial membrane, reducing the damage an agent receives from projectiles and bladed weapons.
		\n\nTECH ONE: Damage from projectiles and bladed weapons is reduced slightly.
		\n\nTECH TWO: Damage from projectiles and bladed weapons is reduced moderately.
		\n\nTECH THREE: Damage from projectiles and bladed weapons is reduced significantly.
		\n\nTECH FOUR: An agent is nearly invulnerable to damage from projectiles and bladed weapons.",
		"Nanoscale generators partially protect individual nanites and reduce electrical damage by canceling incoming pulses.
		\n\nTECH ONE: Damage from electrical attacks is reduced slightly.
		\n\nTECH TWO: Damage from electrical attacks is reduced moderately.
		\n\nTECH THREE: Damage from electrical attacks is reduced significantly.
		\n\nTECH FOUR: An agent is nearly invulnerable to damage from electrical attacks.",
		"DXAUG05", "DXAUG06"
	},
	{ 	"DeusEx_Augmentation_Subdermal2", "DeusEx_Augmentation_Cloak", "DeusEx_Augmentation_Repulsor", "Cloak", "Repulsor",
		"Subdermal pigmentation cells allow the agent to blend with their surrounding environment, rendering them effectively invisible to observation by organic hostiles.
		\n\nTECH ONE: Power drain is normal.
		\n\nTECH TWO: Power drain is reduced slightly.
		\n\nTECH THREE: Power drain is reduced moderately. 
		\n\nTECH FOUR: Power drain is reduced significantly.",
		"Installing a bioelectric magnetic field with inversed polarity, organisms and robots alike will not be able to touch the agent.
		\n\nTECH ONE: Enemies in contact range are unable to touch the agent.
		\n\nTECH TWO: Enemies nearby are unable to touch the agent.
		\n\nTECH THREE: Enemies from further away are unable to touch the agent. 
		\n\nTECH FOUR: Enemies cannot come anywhere close to the agent.",
		"DXAUG07", "DXAUG08"
	},
	{ 
		"DeusEx_Augmentation_Torso1", "DeusEx_Augmentation_EnergyShield", "DeusEx_Augmentation_EnvironmentalResistance", "Energy Shield", "Environmental Resistance",
		"Polyanilene capacitors below the skin absorb heat and electricity, reducing the damage received from flame, energy, and plasma attacks.
		\n\nTECH ONE: Damage from energy attacks is reduced slightly.
		\n\nTECH TWO: Damage from energy attacks is reduced moderately.
		\n\nTECH THREE: Damage from energy attacks is reduced significantly.
		\n\nTECH FOUR: An agent is nearly invulnerable to damage from energy attacks.",
		"Induced keratin production strengthens all epithelial tissues and reduces the agent's vulnerability to radiation and other toxins.
		\n\nTECH ONE: Toxic resistance is increased slightly.
		\n\nTECH TWO: Toxic resistance is increased moderately.
		\n\nTECH THREE: Toxic resistance is increased significantly.
		\n\nTECH FOUR: An agent is nearly invulnerable to damage from toxins.",
		"DXAUG09", "DXAUG10"
	},
	{ 
		"DeusEx_Augmentation_Torso2", "DeusEx_Augmentation_Regeneration", "DeusEx_Augmentation_Maintenance", "Regeneration", "Maintenance",
		"Programmable polymerase automatically directs construction of proteins in injured cells, restoring an agent to full health over time.
		\n\nTECH ONE: Healing occurs at a normal rate.
		\n\nTECH TWO: Healing occurs at a slightly faster rate.
		\n\nTECH THREE: Healing occurs at a moderately faster rate.
		\n\nTECH FOUR: Healing occurs at a significantly faster rate.",
		"Polyethylene fibers weld to an agent's skin and armor, rebuilding the damaged fibers over time.
		\n\nTECH ONE: Armor repair occurs at a normal rate.
		\n\nTECH TWO: Armor repair occurs at a slightly faster rate.
		\n\nTECH THREE: Armor repair occurs at a moderately faster rate.
		\n\nTECH FOUR: Armor repair occurs at a significantly faster rate.",
		"DXAUG11", "DXAUG12"
	},
	{ 
		"DeusEx_Augmentation_Torso3", "DeusEx_Augmentation_PowerRecirculator", "DeusEx_Augmentation_RechargeableBattery", "Power Recirculator", "Rechargeable Battery",
		"Power consumption for all augmentations is reduced by polianilene circuits, plugged directly into cell membranes, that allow nanite particles to interconnect electronically without leaving their host cells.
		\n\nTech one: Power drain of augmentations is reduced slightly.
		\n\nTech two: Power drain of augmentations is reduced moderately.
		\n\nTech three: Power drain of augmentations is reduced. 
		\n\nTech four: Power drain of augmentations is reduced significantly.",
		"An internal battery is installed near the agent's heart, converting an insignifcant amount of oxygen into bioelectrical energy, restoring bioelectric energy over time.
		\n\nTech one: Bioelectrical energy is recovered slowly.
		\n\nTech two: Bioelectrical energy is recovered slightly faster.
		\n\nTech three: Bioelectrical energy is recovered moderately faster. 
		\n\nTech four: Bioelectrical energy is recovered significantly faster.",
		"DXAUG13", "DXAUG14"
	},
	{ 
		"DeusEx_Augmentation_Cranial", "DeusEx_Augmentation_SpyDrone", "DeusEx_Augmentation_AggressiveDefenseSystem", "Spy Drone", "Aggressive Defense System",
		"Advanced nanofactories can assemble a spy drone on demand which can then be remotely controlled by the agent until released or destroyed, at which point a new drone will be assembled. Further upgrades equip the spy drone with better armor and a one-shot EMP attack.
		\n\nTECH ONE: The drone can take little damage and has a very light EMP attack.
		\n\nTECH TWO: The drone can take minor damage and has a light EMP attack.
		\n\nTECH THREE: The drone can take moderate damage and has a medium EMP attack.
		\n\nTECH FOUR: The drone can take heavy damage and has a strong EMP attack.",
		"Aerosol nanoparticles are released upon the detection of objects fitting the electromagnetic threat profile of missiles and grenades; these nanoparticles will prematurely detonate such objects prior to reaching the agent.
		\n\nTECH ONE: The range at which incoming rockets and grenades are detonated is short.
		\n\nTECH TWO: The range at which detonation occurs is increased slightly.
		\n\nTECH THREE: The range at which detonation occurs is increased moderately.
		\n\nTECH FOUR: Rockets and grenades are detonated almost before they are fired.",
		"DXAUG15", "DXAUG16"
	},
	{ 
		"DeusEx_Augmentation_Eye", "DeusEx_Augmentation_VisionEnhancement", "DeusEx_Augmentation_Targeting", "Vision Enhancement", "Targeting",
		"By bleaching selected rod photoreceptors and saturating them with metarhodopsin XII, the \"nightvision\" present in most nocturnal animals can be duplicated. Subsequent upgrades and modifications add infravision and sonar-resonance imaging that effectively allows an agent to see through walls.
		\n\nTECH ONE: Nightvision.
		\n\nTECH TWO: Nightvision. Energy drains at a slower rate.
		\n\nTECH THREE: Infravision.
		\n\nTECH FOUR: Infravision. Energy drains at an even slower rate.",
		"Image-scaling and recognition provided by multiplexing the optic nerve with doped polyacetylene \"quantum wires\" not only increases accuracy, but also delivers limited situational info about a target.
		\n\nTECH ONE: Slight increase in accuracy and general target information.
		\n\nTECH TWO: Additional increase in accuracy and more target information.
		\n\nTECH THREE: Additional increase in accuracy and specific target information.
		\n\nTECH FOUR: Additional increase in accuracy and telescopic vision.",
		"DXAUG17", "DXAUG18"
	},
	{ 
		"DeusEx_Augmentation_InfoLink", "DeusEx_Augmentation_InfoLink", "Infolink", "",
		"One-way micro-transceiver array allows agents in the field to receive messages from Control, and to store and later retrieve relevant maps, conversations, and notes.
		\n\n<UNATCO OPS FILE NOTE JR133-VIOLET>This is top of the line all the way, so don't expect any upgrades. -- Jaime Reyes <END NOTE>
		\n\nNO UPGRADES",
		"",
		"DXAUG19", ""
	},
	{ 
		"DeusEx_Augmentation_Light", "DeusEx_Augmentation_Light", "Light", "",
		"Bioluminescent cells within the retina provide coherent illumination of the agent's field of view.
		\n\nNO UPGRADES",
		"",
		"DXAUG21", ""
	},
	{ 
		"DeusEx_Augmentation_IFF", "DeusEx_Augmentation_IFF", "IFF", "",
		"Automatic friend or foe identification uses advanced heuristic algorithms to associate visible objects with known threat categories. Targeting reticle highlights RED over enemies, and GREEN over allies and neutrals.
		\n\nNO UPGRADES",
		"",
		"DXAUG20", ""
	}
};

int DeusExAugmentationsConsumptions[DX_AUGSLOTS][2] = { {20,20}, {40,40}, {60,10}, {150,100}, {40,20}, {120,100}, {}, {100,150}, {40,40}, {}, {10,10}, {} };

Script "DeusEx_DamageModifiers" (int damage)
{
	int bulletX = GetActorX(0);
	int bulletY = GetActorY(0);
	int bulletZ = GetActorZ(0);
	//int pointblank = CheckInventory("DeusEx_PointBlank");
	int shooterX = GetActorX(0);
	int shooterY = GetActorY(0);
	int shooterZ = GetActorZ(0);	
	SetActivator(0,AAPTR_Tracer);
	int monsterX = GetActorX(0);
	int monsterY = GetActorY(0);
	int monsterZ = GetActorZ(0);
	int monsterdistance = magnitudeThree(monsterX*shooterX,monsterY*shooterY,monsterZ*shooterZ);
	int monsterHealth = GetActorProperty(0,APROP_Health);
	int monsterHeight = GetActorProperty(0,APROP_Height);
	int monsterWidth = GetActorProperty(0,APROP_Radius)*2;
	int monsterAngle = GetActorAngle(0);
	int vang = VectorAngle(monsterX - bulletX, monsterY - bulletY);
	int angle = vang % 1.0;		
	
	if(CheckFlag(0,"NOBLOOD")) { SetResultValue(damage); terminate; }

	if(monsterWidth > monsterHeight)
	{
		if(bulletZ > monsterZ + FixedMul(monsterHeight,0.55) && bulletZ < monsterZ + FixedMul(monsterHeight,0.75) && ((abs(monsterAngle - angle)) < 0.65 && (abs(monsterAngle - angle)) > 0.45))
		{			
			//8x? Absolutely not!!
			damage *= 3;
		}	
	}
	else
	{
		if(bulletZ > monsterZ + FixedMul(monsterHeight,0.8))
			damage *= 3;
	}
	
	SetResultValue(damage);
}

Script "DeusEx_BackDamage" (int damage)
{
	int bulletX = GetActorX(0);
	int bulletY = GetActorY(0);
	int bulletZ = GetActorZ(0);
	SetActivator(0,AAPTR_Tracer);
	int monsterX = GetActorX(0);
	int monsterY = GetActorY(0);
	int monsterZ = GetActorZ(0);
	int monsterHeight = GetActorProperty(0,APROP_Height);
	int monsterAngle = GetActorAngle(0) - 0.5;
	
	int vang = VectorAngle(monsterX - bulletX, monsterY - bulletY);
	int angle = vang % 1.0;
	int backdamage;
	
	if(bulletZ > monsterZ + (monsterHeight / 3) && (abs(monsterAngle - angle)) < 0.6 && (abs(monsterAngle - angle)) > 0.4)
		backdamage = 5;
	else
		backdamage = 1;
		
	if(bulletZ > monsterZ + FixedMul(monsterHeight,0.8))
		damage *= 3;
	
	SetResultValue(backdamage*damage);		
}

str DeusExSkillPoints[4] = { "DeusEx_LowTechPoints", "DeusEx_PistolPoints", "DeusEx_RiflePoints", "DeusEx_HeavyWeaponPoints" };

Script "DeusEx_KillScript" (int override, int DeusExWeaponType)
{
	if(!(ClassifyActor(0) & ACTOR_MONSTER))
		terminate;
		
	int HasXDeath; 
	int isBoss = CheckFlag(0,"BOSS");
	
	if(isZDoom())
		HasXDeath = CheckActorState(0,"XDeath",1);
	else
		HasXDeath = 1;

	//int DeusExWeaponType = CheckInventory("DeusEx_DeathTypeIndicator"); checks which weapon type the enemy was killed with, gives the corresponding points			
		
	int noblood = CheckFlag(0,"NOBLOOD");
	int health;
	int currentHealth = GetActorProperty(0, APROP_Health);		
	int experience = GetCVar("samsara_experiencegain");
	
	health = GetActorProperty(0, APROP_SpawnHealth);	
	
	SetActivatorToTarget(0);
	
	if(CheckInventory("DeusExClass"))
		GiveInventory(DeusExSkillPoints[DeusExWeaponType], health*(1+(PlayerCount()/4))*(experience)/2);		
}	

Script "DeusEx_WeaponSkillDamage" (int weapontype, int basedamage)
{
	int mult, targetStrength, combatStrength;
	SetActivatorToTarget(0);
	Switch(weapontype)
	{
		Case 1:
			int pistolskill = CheckInventory("DeusEx_PistolSkill");
			targetStrength = CheckInventory("DeusEx_Augmentation_TargetingToken") * CheckInventory("DeusEx_Augmentation_Targeting");
			mult = 1.0+(0.25*pistolskill)+(0.1*targetStrength);
			SetResultValue(basedamage*mult>>16);
			break;
		Case 2:
			int lowtechskill = CheckInventory("DeusEx_LowTechSkill");
			combatStrength = CheckInventory("DeusEx_Augmentation_CombatStrengthToken") * CheckInventory("DeusEx_Augmentation_CombatStrength");
			mult = 1.0+(0.25*lowtechskill)+(0.25*combatStrength);
			SetResultValue(basedamage*mult>>16);
			break;	
		Case 3:
			int rifleskill = CheckInventory("DeusEx_RifleSkill");
			targetStrength = CheckInventory("DeusEx_Augmentation_TargetingToken") * CheckInventory("DeusEx_Augmentation_Targeting");
			mult = 1.0+(0.25*rifleskill)+(0.1*targetStrength);
			SetResultValue(basedamage*mult>>16);
			break;		
		Case 4:
			int demoskill = CheckInventory("DeusEx_DemolitionsSkill");
			combatStrength = CheckInventory("DeusEx_Augmentation_CombatStrengthToken") * CheckInventory("DeusEx_Augmentation_CombatStrength");
			mult = 1.0+(0.25*demoskill)+(0.25*combatStrength);
			SetResultValue(basedamage*mult>>16);
			break;	
		Case 5:
			int heavyskill = CheckInventory("DeusEx_HeavyWeaponSkill");
			targetStrength = CheckInventory("DeusEx_Augmentation_TargetingToken") * CheckInventory("DeusEx_Augmentation_Targeting");
			mult = 1.0+(0.25*heavyskill)+(0.1*targetStrength);
			SetResultValue(basedamage*mult>>16);
			break;				
	}		
}	

str DxskillLevelNames[5] = { "Untrained", "Trained", "Proficient", "Advanced", "Master" };
str DxSkillNames[6][2] = { {"Low-Tech","DeusEx_LowTech"}, {"Pistol","DeusEx_Pistol"}, {"Rifle","DeusEx_Rifle"}, {"Heavy Weapon","DeusEx_HeavyWeapon"}, {"Medicine","DeusEx_Medicine"}, {"Environmental","DeusEx_Enviro"} };
str DeusExSpreads[7] = { "DeusEx_GlockSpread", "DeusEx_XBowSpread", "DeusEx_AssaultGunSpread", "DeusEx_ShotgunSpread", "DeusEx_PlasmaRifleSpread", "DeusEx_StealthSpread", "DeusEx_SawedOffSpread" };
str DeusExWeaponSkills[5] = { "DeusEx_LowTechSkill", "DeusEx_PistolSkill", "DeusEx_RifleSkill", "DeusEx_DemolitionsSkill", "DeusEx_HeavyWeaponSkill" };
int NXTPoints[6][4] = { {500, 2800, 7800, 16000 }, {600, 3400, 9400, 19200 }, {800, 4500, 12500, 25600 }, {1000, 5700, 15600, 32000 }, {250, 800, 3000, 10000 }, {500, 2000, 7500, 12800 }};
Str DeusExLevelUpStrings[24] =
{
	"Low-Tech Skill has reached Trained level.",
	"Low-Tech Skill has reached Proficient level.",
	"Low-Tech Skill has reached Advanced level.",
	"Low-Tech Skill has reached Master level.",
	"Pistol Skill has reached Trained level.",
	"Pistol Skill has reached Proficient level.",
	"Pistol Skill has reached Advanced level.",
	"Pistol Skill has reached Master level.",
	"Rifle Skill has reached Trained level.",
	"Rifle Skill has reached Proficient level.",
	"Rifle Skill has reached Advanced level.",
	"Rifle Skill has reached Master level.",
	"Heavy Weapon Skill has reached Trained level.",
	"Heavy Weapon Skill has reached Proficient level.",
	"Heavy Weapon Skill has reached Advanced level.",
	"Heavy Weapon Skill has reached Master level.",
	"Medicine Skill has reached Trained level.",
	"Medicine Skill has reached Proficient level.",
	"Medicine Skill has reached Advanced level.",
	"Medicine Skill has reached Master level.",
	"Environmental Training has reached Trained level.",
	"Environmental Training has reached Proficient level.",
	"Environmental Training has reached Advanced level.",
	"Environmental Training has reached Master level.",
};	

Script "DeusEx_GetWeaponSkill" ( int weapontype )
{
	SetResultValue(CheckInventory(DeusExWeaponSkills[weapontype]));
}	

Script "DeusEx_Enter" (void)
{
//	ACS_NamedExecuteWithResult("SamsaraOST_DeusExScriptedMusic");
	if((ClassifyActor(0) & ACTOR_WORLD))
		terminate;
		
	int loopTid = 0;
		
	while(CheckInventory("DeusExClass"))
	{
		bool isPVEGame = isSinglePlayer() || isCoop();
		int speedx, speedy, lasttimer, velocity, movement;
		int forward = GetPlayerInput(-1, INPUT_FORWARDMOVE);
		int running = abs(GetPlayerInput(-1, INPUT_FORWARDMOVE)) > 6400 || abs(GetPlayerInput(-1, INPUT_SIDEMOVE)) > 6144;
		int speedmod, augsActive, lastAugs;

		while ((ClassifyActor(0) & ACTOR_ALIVE))
		{
            SetInventory("DeusEx_Running", keyDown(BT_FORWARD) && running);
            SetInventory("DeusEx_Jumping", keyDown(BT_JUMP));
            SetInventory("DeusEx_Crouching", keyDown(BT_CROUCH)); //GetActorViewHeight(0) <= GetActorViewHeight(0) / 2 << 16
            SetInventory("DeusEx_StrafeLeft", keyDown(BT_MOVELEFT) && !keyDown(BT_MOVERIGHT));
            SetInventory("DeusEx_StrafeRight", keyDown(BT_MOVERIGHT) && !keyDown(BT_MOVELEFT));

            if (!keyDown(BT_ATTACK))
            {
                TakeInventory("DeusEx_GlockSpread", 1);
                TakeInventory("DeusEx_StealthSpread", 1);
                TakeInventory("DeusEx_SawedOffSpread", 1);
                TakeInventory("DeusEx_ShotgunSpread", 1);
                TakeInventory("DeusEx_AssaultGunSpread", 1);
                TakeInventory("DeusEx_PlasmaRifleSpread", 1);
            }

            if (isPVEGame)
            {
                if (CheckInventory("DeusEx_MovementPenaltyEnabled"))
                {
                    if (CheckInventory("DeusEx_GEPGunEquipped") || CheckInventory("DeusEx_FlameThrowerEquipped") || CheckInventory("DeusEx_PREquipped") || CheckInventory("DeusEx_LAWEquipped"))
                    {
                        if (CheckInventory("DeusEx_HeavyWeaponSkill") >= 2) { SetActorProperty(0, APROP_Speed, 1.0); }
                        else if (CheckInventory("DeusEx_HeavyWeaponSkill") == 1) { SetActorProperty(0, APROP_Speed, 0.75); }
                        else { SetActorProperty(0, APROP_Speed, 0.45); }
                    }
                    else { SetActorProperty(0, APROP_Speed, 1.0); }
                }
            }

			HudMessage(d:CheckInventory("DeusEx_PistolPoints"); 8891, HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP, "ec1c24", 46.1, 560.1, 0.031);

			speedx = GetActorVelX(0);
			speedy = GetActorVelY(0);
			
			velocity = magnitudeTwo_f(speedx, speedy);
			if(velocity>>8 != 0)
				movement = 750/((velocity>>8)*7);
			else
				movement = 0;
													
			if((Timer()-lasttimer) > movement && movement != 0)
			{
				if(abs(GetActorZ(0) - GetActorFloorZ(0)) < 1.0 && !CheckInventory("SamsaraQuietFootsteps"))
					ACS_NamedExecuteWithResult("DeusEx_Decorate",17,0.8 - CheckInventory("DeusEx_Augmentation_RunSilentToken")*(0.2 * CheckInventory("DeusEx_Augmentation_RunSilent")));
				if(!GetCVar("compat_soundtarget") && GetCvar("samsara_currentgame") != 16)
					GiveInventory("DeusExStepAlerter",1);
				lasttimer = Timer();
			}
			
			ACS_NamedExecuteWithResult("DeusEx_AugmentationsPlayer");
			ACS_NamedExecuteWithResult("DeusEx_DisplayInfoPlaceHolder");
			
			augsActive = CheckInventory("DeusEx_Augmentation_AugsActive");
			
			if(augsActive)
			{
				if(augsActive != lastAugs)
				{
					loopTid = UniqueTid();
					SpawnForced("HLMusicToken",GetActorX(0),GetActorY(0),GetActorZ(0),loopTid);
					ACS_NamedExecuteWithResult("DeusEx_LocalAugLoop",PlayerNumber(),loopTid);
				}
			}
			else
			{
				if(augsActive != lastAugs)
					Thing_Remove(loopTid);
			}
			
			lastAugs = augsActive;
			Delay(1);

		    If(CheckInventory("DeusEx_LowTechSkill") < 4 || CheckInventory("DeusEx_PistolSkill") < 4 || CheckInventory("DeusEx_RifleSkill") < 4 || CheckInventory("DeusEx_HeavyWeaponSkill") < 4 || CheckInventory("DeusEx_MedicineSkill") < 4 || CheckInventory("DeusEx_EnviroSkill") < 4)
			{
				if(CheckInventory("DeusEx_LowTechPoints") >= NXTPoints[0][CheckInventory("DeusEx_LowTechSkill")] && CheckInventory("DeusEx_LowTechSkill") < 4 || (CheckInventory("DeusEx_StartingSkills") >= 1 && CheckInventory("DeusEx_LowTechSkill") < CheckInventory("DeusEx_StartingSkills")) && CheckInventory("DeusEx_LowTechSkill") < 4)
				{
					TakeInventory("DeusEx_LowTechPoints", NXTPoints[0][CheckInventory("DeusEx_LowTechSkill")]);
					GiveInventory("DeusEx_LowTechSkill", 1);
					if(CheckInventory("DeusEx_LowTechSkill") > CheckInventory("DeusEx_StartingSkills"))
						ACS_NamedExecuteAlways("DeusEx_Decorate", 0, 7, CheckInventory("DeusEx_LowTechSkill")-1);
				}
				If(CheckInventory("DeusEx_PistolPoints") >= NXTPoints[1][CheckInventory("DeusEx_PistolSkill")] && CheckInventory("DeusEx_PistolSkill") < 4 || (CheckInventory("DeusEx_StartingSkills") >= 1 && CheckInventory("DeusEx_PistolSkill") < CheckInventory("DeusEx_StartingSkills")) && CheckInventory("DeusEx_PistolSkill") < 4)
				{
					TakeInventory("DeusEx_PistolPoints", NXTPoints[1][CheckInventory("DeusEx_PistolSkill")]);
					GiveInventory("DeusEx_PistolSkill", 1);
					SetAmmoCapacity("DeusEx_GlockSpread", GetAmmoCapacity("DeusEx_GlockSpread")-25);
					SetAmmoCapacity("DeusEx_XBowSpread", GetAmmoCapacity("DeusEx_XBowSpread")-5);
					SetAmmoCapacity("DeusEx_SawedOffSpread", GetAmmoCapacity("DeusEx_SawedOffSpread")-20);
					SetAmmoCapacity("DeusEx_StealthSpread", GetAmmoCapacity("DeusEx_StealthSpread")-30);
					SetAmmoCapacity("DeusEx_GlockMagazine", GetAmmoCapacity("DeusEx_GlockMagazine")+2);
					SetAmmoCapacity("DeusEx_MiniXBowMagazine", GetAmmoCapacity("DeusEx_MiniXBowMagazine")+2);
					SetAmmoCapacity("DeusEx_ShotgunMagazine", GetAmmoCapacity("DeusEx_ShotgunMagazine")+1);
					SetAmmoCapacity("DeusEx_StealthMagazine", GetAmmoCapacity("DeusEx_StealthMagazine")+3);
					int glockmax = GetAmmoCapacity("DeusEx_GlockMagazine");
					int xbowmax = GetAmmoCapacity("DeusEx_MiniXBowMagazine");
					int shotgunmax = GetAmmoCapacity("DeusEx_ShotgunMagazine");
					int stealthmax = GetAmmoCapacity("DeusEx_StealthMagazine");
					GiveInventory("DeusEx_GlockMagazine", glockmax);
					GiveInventory("DeusEx_MiniXBowMagazine", xbowmax);
					GiveInventory("DeusEx_ShotgunMagazine", shotgunmax);
					GiveInventory("DeusEx_StealthMagazine", stealthmax);
					if(CheckInventory("DeusEx_PistolSkill") > CheckInventory("DeusEx_StartingSkills"))
						ACS_NamedExecuteAlways("DeusEx_Decorate", 0, 7, 3+CheckInventory("DeusEx_PistolSkill"));
				}
				If(CheckInventory("DeusEx_RiflePoints") >= NXTPoints[2][CheckInventory("DeusEx_RifleSkill")] && CheckInventory("DeusEx_RifleSkill") < 4 || (CheckInventory("DeusEx_StartingSkills") >= 1 && CheckInventory("DeusEx_RifleSkill") < CheckInventory("DeusEx_StartingSkills")) && CheckInventory("DeusEx_RifleSkill") < 4)
				{
					TakeInventory("DeusEx_RiflePoints", NXTPoints[2][CheckInventory("DeusEx_RifleSkill")]);
					GiveInventory("DeusEx_RifleSkill", 1);
					SetAmmoCapacity("DeusEx_ShotgunSpread", GetAmmoCapacity("DeusEx_ShotgunSpread")-35);
					SetAmmoCapacity("DeusEx_AssaultGunSpread", GetAmmoCapacity("DeusEx_AssaultGunSpread")-20);
					SetAmmoCapacity("DeusEx_AssShotgunMagazine", GetAmmoCapacity("DeusEx_AssShotgunMagazine")+3);
					SetAmmoCapacity("DeusEx_AssaultGunMagazine", GetAmmoCapacity("DeusEx_AssaultGunMagazine")+10);
					SetAmmoCapacity("DeusEx_SniperMagazine", GetAmmoCapacity("DeusEx_SniperMagazine")+2);
					int assshitmax = GetAmmoCapacity("DeusEx_AssShotgunMagazine"); // lol
					int assgunmax = GetAmmoCapacity("DeusEx_AssaultGunMagazine");
					int snipermax = GetAmmoCapacity("DeusEx_SniperMagazine");
					GiveInventory("DeusEx_AssShotgunMagazine", assshitmax);
					GiveInventory("DeusEx_AssaultGunMagazine", assgunmax);
					GiveInventory("DeusEx_SniperMagazine", snipermax);
					if(CheckInventory("DeusEx_RifleSkill") > CheckInventory("DeusEx_StartingSkills"))
						ACS_NamedExecuteAlways("DeusEx_Decorate", 0, 7, 7+CheckInventory("DeusEx_RifleSkill"));
				}	
				If(CheckInventory("DeusEx_HeavyWeaponPoints") >= NXTPoints[3][CheckInventory("DeusEx_HeavyWeaponSkill")] && CheckInventory("DeusEx_HeavyWeaponSkill") < 4 || (CheckInventory("DeusEx_StartingSkills") >= 1 && CheckInventory("DeusEx_HeavyWeaponSkill") < CheckInventory("DeusEx_StartingSkills")) && CheckInventory("DeusEx_HeavyWeaponSkill") < 4 )
				{
					TakeInventory("DeusEx_HeavyWeaponPoints", NXTPoints[3][CheckInventory("DeusEx_HeavyWeaponSkill")]);
					GiveInventory("DeusEx_HeavyWeaponSkill", 1);
					SetAmmoCapacity("DeusEx_PlasmaRifleSpread", GetAmmoCapacity("DeusEx_PlasmaRifleSpread")-12);
					SetAmmoCapacity("DeusEx_FlameThrowerMagazine", GetAmmoCapacity("DeusEx_FlameThrowerMagazine")+25);
					SetAmmoCapacity("DeusEx_PlasmaRifleMagazine", GetAmmoCapacity("DeusEx_PlasmaRifleMagazine")+4);
					int flamemax = GetAmmoCapacity("DeusEx_FlameThrowerMagazine");
					int plasmamax = GetAmmoCapacity("DeusEx_PlasmaRifleMagazine");
					GiveInventory("DeusEx_FlameThrowerMagazine", flamemax);
					GiveInventory("DeusEx_PlasmaRifleMagazine", plasmamax);
					if(CheckInventory("DeusEx_HeavyWeaponSkill") > CheckInventory("DeusEx_StartingSkills"))
						ACS_NamedExecuteAlways("DeusEx_Decorate", 0, 7, 11+CheckInventory("DeusEx_HeavyWeaponSkill"));
				}
				If(CheckInventory("DeusEx_MedicinePoints") >= NXTPoints[4][CheckInventory("DeusEx_MedicineSkill")] && CheckInventory("DeusEx_MedicineSkill") < 4 || (CheckInventory("DeusEx_StartingSkills") >= 1 && CheckInventory("DeusEx_MedicineSkill") < CheckInventory("DeusEx_StartingSkills")) && CheckInventory("DeusEx_MedicineSkill") < 4 )
				{
					TakeInventory("DeusEx_MedicinePoints", NXTPoints[4][CheckInventory("DeusEx_MedicineSkill")]);
					GiveInventory("DeusEx_MedicineSkill", 1);
					if(CheckInventory("DeusEx_MedicineSkill") > CheckInventory("DeusEx_StartingSkills"))
						ACS_NamedExecuteAlways("DeusEx_Decorate", 0, 7, 15+CheckInventory("DeusEx_MedicineSkill"));
				}
				If(CheckInventory("DeusEx_EnviroPoints") >= NXTPoints[5][CheckInventory("DeusEx_EnviroSkill")] && CheckInventory("DeusEx_EnviroSkill") < 4 || (CheckInventory("DeusEx_StartingSkills") >= 1 && CheckInventory("DeusEx_EnviroSkill") < CheckInventory("DeusEx_StartingSkills")) && CheckInventory("DeusEx_EnviroSkill") < 4 )
				{
					TakeInventory("DeusEx_EnviroPoints", NXTPoints[5][CheckInventory("DeusEx_EnviroSkill")]);
					GiveInventory("DeusEx_EnviroSkill", 1);
					if(CheckInventory("DeusEx_EnviroSkill") > CheckInventory("DeusEx_StartingSkills"))
						ACS_NamedExecuteAlways("DeusEx_Decorate", 0, 7, 19+CheckInventory("DeusEx_EnviroSkill"));
				}
			}	
		}
		Delay(1);
	}
	RemoveMessages(2001,2007);
}	

Script "DeusEx_DisplayInfoPlaceHolder" (void) clientside
{
	int pln = PlayerNumber();
    int screenblocks = GetCVar("screenblocks");

	if(screenblocks >= 11) { RemoveMessages(2001,2001); }
	if(screenblocks == 12) { RemoveMessages(2002,2007); }
	SetFont("CMPSDEUS");
	SetHudSize(1280,960,1);
	int hudRatio = getaspectratio();
	str skillAmount = "";
	str bioEnergyAmount = strparam(s:"Bioelectrical Energy: ",d:CheckInventory("DeusEx_BioEnergy")); 
	//str lowTechSkill = CheckInventory("DeusEx_LowTechPoints");
	if(GetCvar("screenblocks") <= 10)
	{
		HudMessage(s:bioEnergyAmount;HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,2001,"DXGren",0.1,800.0,5.0 / 35 + 1);
	}
	
	if(GetUserCvar(pln,"samsara_cl_deusexskilldisplay"))
	{
		for(int a = 0; a < 6; a++)
		{
			str skill = strparam(s:DxSkillNames[a][1],s:"Skill");
			str points = strparam(s:DxSkillNames[a][1],s:"Points");
			skillAmount = strparam(s:DxSkillNames[a][0],s:":",s:CheckInventory(skill) >= 4 ? "" : strparam(s:" ",d:CheckInventory(points)),s:CheckInventory(skill) >= 4 ? "" : "/",s:CheckInventory(skill) >= 4 ? "" : strparam(d:NXTPoints[a][CheckInventory(skill)]),s:" (",s:DxskillLevelNames[CheckInventory(skill)],s:")");	

			if (screenblocks >= 11) { HudMessage(s:skillAmount;HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,2002+a,"DXGren",1280.2,(560+(a*24))*1.0, 5.0 / 35 + 1); }
			else { HudMessage(s:skillAmount;HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,2002+a,"DXGren",1280.2,(680+(a*24))*1.0, 5.0 / 35 + 1); }
		}
	}
}

Script "DeusEx_LocalAugLoop" (int pln, int loopTid) clientside
{
	if(pln != ConsolePlayerNumber()) terminate;
	PlaySound(loopTid,"DeusEx/Augment/AugLoop",CHAN_5,0.8,1,ATTN_NONE);
}

Script "DeusEx_AugmentationsPlayer" (void)
{
	int healAmount = 5;
	int healing = 0;
	int a = 0, b = 0;
	int augsActive = 0;
	int thisSlotActive = 0;
	int recirculatorDrain[4] = { 0.1, 0.2, 0.4, 0.6 };
	
	for(a = 0; a < DX_AUGSLOTS; a++)
	{
		thisSlotActive = 0;
		TakeInventory(strparam(s:DeusExAugmentationsSlots[a][1],s:"Token"),1);
		TakeInventory(strparam(s:DeusExAugmentationsSlots[a][2],s:"Token"),1);

		if(a >= 9)
		{
			if(CheckInventory(strparam(s:DeusExAugmentationsSlots[a][0],s:"Active")))
			{
				thisSlotActive = 1;
				augsActive = 1;
				GiveInventory(strparam(s:DeusExAugmentationsSlots[a][CheckInventory(strparam(s:DeusExAugmentationsSlots[a][0],s:"Active"))],s:"Token"),1);
			}
		}
		else if(CheckInventory(strparam(s:DeusExAugmentationsSlots[a][0],s:"Slot")) > 0)
		{
			if(a == 6 || (CheckInventory(strparam(s:DeusExAugmentationsSlots[a][0],s:"Active")) == CheckInventory(strparam(s:DeusExAugmentationsSlots[a][0],s:"Slot"))))
			{
				if(a != 6)
				{
					thisSlotActive = 1;
					augsActive = 1;
				}
				GiveInventory(strparam(s:DeusExAugmentationsSlots[a][CheckInventory(strparam(s:DeusExAugmentationsSlots[a][0],s:"Slot"))],s:"Token"),1);
			}
		}
		
		if(augsActive)
			GiveInventory("DeusEx_Augmentation_AugsActive",1);
		else
			TakeInventory("DeusEx_Augmentation_AugsActive",1);
			
		if(thisSlotActive)
		{
			int consumption = a != 10 ? DeusExAugmentationsConsumptions[a][CheckInventory(strparam(s:DeusExAugmentationsSlots[a][0],s:"Slot"))-1] : DeusExAugmentationsConsumptions[a][0];
			if(CheckInventory("DeusEx_Augmentation_VisionEnhancementToken"))
				consumption = (consumption * (1.0-(0.25*(CheckInventory("DeusEx_Augmentation_VisionEnhancement")/2))))>>16;
			else if(CheckInventory("DeusEx_Augmentation_CloakToken"))
				consumption = (consumption * (1.0-(0.125*(CheckInventory("DeusEx_Augmentation_Cloak")))))>>16;
			if(DeusExAugmentationsConsumptions[a][CheckInventory(strparam(s:DeusExAugmentationsSlots[a][0],s:"Slot"))-1] > 0 || a == 10)
			{
				if(timer() % FixedMul(((2100.0/consumption)>>16),1.0-(recirculatorDrain[CheckInventory("DeusEx_Augmentation_PowerRecirculatorToken")]*CheckInventory("DeusEx_Augmentation_PowerRecirculatorToken")*CheckInventory("DeusEx_Augmentation_PowerRecirculatorToken"))) == 0)
					TakeInventory("DeusEx_BioEnergy", !CheckInventory("SamsaraHasInfiniteAmmo"));
			}
			if(CheckInventory("DeusEx_BioEnergy") == 0)
			{
				LocalAmbientSound("DeusEx/Augment/Deactivate",127);
				TakeInventory(strparam(s:DeusExAugmentationsSlots[a][0],s:"Active"),2);
				if(strparam(s:DeusExAugmentationsSlots[a][CheckInventory(strparam(s:DeusExAugmentationsSlots[a][0],s:"Slot"))]) == "DeusEx_Augmentation_Cloak")
					LocalAmbientSound("DeusEx/Augment/CloakDown",127);
			}
		}
		
		switch(a)
		{
			case 0:
				if(CheckInventory("DeusEx_Augmentation_MicroFibralMuscleToken"))
				{
					int use = GetPlayerInput(-1, INPUT_BUTTONS) & BT_USE;
					if(use && !CheckInventory("DeusEx_Augmentation_ObjectGrabbing")) { GiveInventory("DeusEx_Augmentation_MicrofibralMuscleTrigger",1); }
					else if(use && CheckInventory("DeusEx_Augmentation_ObjectGrabbing") && !CheckInventory("DeusEx_Augmentation_ObjectGrabbingLastUse") && timer() > (CheckInventory("DeusEx_Augmentation_ObjectGrabbingTimer") + 5)) { GiveInventory("DeusEx_Augmentation_GrabbingStop",1); }
					SetInventory("DeusEx_Augmentation_ObjectGrabbingLastUse",GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_USE);
				}
				break;
			case 1:
				for(b = 1; b <= 4; b++)
				{
					if(CheckInventory("DeusEx_Augmentation_SpeedEnhancementToken"))
					{
						if(CheckInventory("DeusEx_Augmentation_SpeedEnhancement") == b)
							GiveInventory(strparam(s:"DeusEx_Augmentation_SpeedEnhancement",d:b),1);
						else
							TakeInventory(strparam(s:"DeusEx_Augmentation_SpeedEnhancement",d:b),1);
					}
					else
						TakeInventory(strparam(s:"DeusEx_Augmentation_SpeedEnhancement",d:b),1);
				}
				break;
			case 2:
				for(b = 1; b <= 4; b++)
				{
					if(CheckInventory("DeusEx_Augmentation_BallisticProtectionToken"))
					{
						if(CheckInventory("DeusEx_Augmentation_BallisticProtection") == b)
							GiveInventory(strparam(s:"DeusEx_Augmentation_BallisticProtection",d:b),1);
						else
							TakeInventory(strparam(s:"DeusEx_Augmentation_BallisticProtection",d:b),1);
					}
					else
						TakeInventory(strparam(s:"DeusEx_Augmentation_BallisticProtection",d:b),1);
						
					if(CheckInventory("DeusEx_Augmentation_EMPProtectionToken"))
					{
						if(CheckInventory("DeusEx_Augmentation_EMPProtection") == b)
							GiveInventory(strparam(s:"DeusEx_Augmentation_EMPProtection",d:b),1);
						else
							TakeInventory(strparam(s:"DeusEx_Augmentation_EMPProtection",d:b),1);
					}
					else
						TakeInventory(strparam(s:"DeusEx_Augmentation_EMPProtection",d:b),1);
				}
				break;
			case 3:
				if(CheckInventory("DeusEx_Augmentation_CloakToken"))
				{
					GiveInventory("DeusEx_Augmentation_CloakPower",1);
				}
				else
				{
					TakeInventory("DeusEx_Augmentation_CloakPower",1);
					if(CheckInventory("DeusEx_Augmentation_RepulsorToken"))
					{
						GiveInventory("DeusEx_Augmentation_RepulsorPower",1);
					}
				}
				break;
			case 4:
				for(b = 1; b <= 4; b++)
				{
					if(CheckInventory("DeusEx_Augmentation_EnergyShieldToken"))
					{
						if(CheckInventory("DeusEx_Augmentation_EnergyShield") == b)
							GiveInventory(strparam(s:"DeusEx_Augmentation_EnergyShield",d:b),1);
						else
							TakeInventory(strparam(s:"DeusEx_Augmentation_EnergyShield",d:b),1);
					}
					else
						TakeInventory(strparam(s:"DeusEx_Augmentation_EnergyShield",d:b),1);
						
					if(CheckInventory("DeusEx_Augmentation_EnvironmentalResistanceToken"))
					{
						if(CheckInventory("DeusEx_Augmentation_EnvironmentalResistance") == b)
							GiveInventory(strparam(s:"DeusEx_Augmentation_EnvironmentalResistance",d:b),1);
						else
							TakeInventory(strparam(s:"DeusEx_Augmentation_EnvironmentalResistance",d:b),1);
					}
					else
						TakeInventory(strparam(s:"DeusEx_Augmentation_EnvironmentalResistance",d:b),1);
				}
				break;
			case 5:
				if(CheckInventory("DeusEx_Augmentation_RegenerationToken"))
				{
					switch(CheckInventory("DeusEx_Augmentation_Regeneration"))
					{
						case 1: healAmount = 5; break;
						case 2: healAmount = 15; break;
						case 3: healAmount = 25; break;
						case 4: healAmount = 40; break;
					}
					if(timer() % 7 == 0)
					{
						for(healing = 0; healing < (healAmount/5); healing++)
						{
							if(GetActorProperty(0,APROP_Health) < 100)
								SetActorProperty(0,APROP_Health,GetActorProperty(0,APROP_Health)+1);
							else break;
						}
					}	
				}
				if(CheckInventory("DeusEx_Augmentation_MaintenanceToken"))
				{
					switch(CheckInventory("DeusEx_Augmentation_Maintenance"))
					{
						case 1: healAmount = 5; break;
						case 2: healAmount = 15; break;
						case 3: healAmount = 25; break;
						case 4: healAmount = 40; break;
					}
					if(timer() % 7 == 0)
					{
						for(healing = 0; healing < (healAmount/5); healing++)
						{
							if(CheckInventory("BasicArmor") < 100)
								GiveInventory("ArmorScrapArmorNormal",1);
							else break;
						}
					}	
				}
				break;
			case 6:
				if(CheckInventory("DeusEx_Augmentation_RechargeableBatteryToken"))
				{
					if(timer() % (84/CheckInventory("DeusEx_Augmentation_RechargeableBattery")) == 0)
					{
						GiveInventory("DeusEx_BioEnergy",1);
					}
				}
				break;
			case 7:
				if(CheckInventory("DeusEx_Augmentation_SpyDroneToken"))
				{
					if(!CheckInventory("DeusEx_Augmentation_UsingSpyDrone"))
					{
						GiveInventory("DeusEx_Augmentation_UsingSpyDrone",1);
						int droneTid = UniqueTid();
						SpawnForced("DeusEx_SpyDrone",GetActorX(0),GetActorY(0),GetActorZ(0),droneTid);
						SetActorAngle(droneTid,GetActorAngle(0));
						ACS_NamedExecuteWithResult("DeusEx_SpyDrone",droneTid);
					}
				}
				if(CheckInventory("DeusEx_Augmentation_AggressiveDefenseSystemToken"))
				{
					if(GetCvar("samsara_zscriptready") == 1)
						GiveInventory("DeusEx_Augmentation_AggressiveDefenseSystemTrigger",1);
					else
						GiveInventory("DeusEx_Augmentation_AggressiveDefenseSystemZandronumEnable",1);
				}
				else
				{
					if(GetCvar("samsara_zscriptready") == 0)
						GiveInventory("DeusEx_Augmentation_AggressiveDefenseSystemZandronumDisable",1);
				}
				
				if(CheckInventory("DeusEx_Augmentation_SpyDroneDetonate"))
				{
					TakeInventory("DeusEx_Augmentation_SpyDroneDetonate",1);
					TakeInventory("DeusEx_Augmentation_UsingSpyDrone",1);
					TakeInventory("DeusEx_Augmentation_CranialActive",2);
					LocalAmbientSound("DeusEx/Augment/Deactivate",127);
					HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,3600,0,0,0,0.0);
					HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,3601,0,0,0,0.0);
					HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,3602,0,0,0,0.0);
				}
				break;
			case 8:
				HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,5600,0,0.0,0.0,0.01);
				HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,5601,0,0.0,0.0,0.01);
				HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,5602,0,0.0,0.0,0.01);
				HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,5603,0,0.0,0.0,0.01);
				HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,5604,0,0.0,0.0,0.01);
				if(CheckInventory("DeusEx_Augmentation_VisionEnhancementToken"))
				{
					if(CheckInventory("DeusEx_Augmentation_VisionEnhancement") >= 3)
					{
						GiveInventory("DeusEx_Augmentation_InfraredVision",1);
						GiveInventory("DeusEx_Augmentation_InfraredLooker", 1);
					}
					else
						GiveInventory("DeusEx_Augmentation_NightVision",1);
				}
				else { TakeInventory("DeusEx_Augmentation_NightVision", 1); TakeInventory("DeusEx_Augmentation_InfraredVision",1); }
				if(CheckInventory("DeusEx_Augmentation_TargetingToken"))
				{
					if(CheckInventory("DeusEx_Augmentation_UsingSpyDrone"))
					{
						TakeInventory("DeusEx_Augmentation_EyeActive",2);
						LocalAmbientSound("DeusEx/Augment/Deactivate",127);
					}
					else
					{
						if(CheckInventory("DeusEx_Augmentation_TargetingScanning") < 35)
						{
							if(!ACS_NamedExecuteWithResult("DeusEx_TargeterDrawCamera"))
							{
								TakeInventory("DeusEx_Augmentation_TargetingNoTarget",35);
								GiveInventory("DeusEx_Augmentation_TargetingScanning",1);
								SetFont("CMPSDEUS");
								SetHudSize(1024,768,0);
								HudMessage(s:"* Scanning *";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,5600,"DXGren",512.0,384.0,0.0);
							}
							else
							{
								TakeInventory("DeusEx_Augmentation_TargetingNoTarget",35);
								TakeInventory("DeusEx_Augmentation_TargetingScanning",35);
							}
						}
						else
						{
							if(CheckInventory("DeusEx_Augmentation_TargetingNoTarget") < 35)
							{
								GiveInventory("DeusEx_Augmentation_TargetingNoTarget",1);
								
								SetFont("CMPSDEUS");
								SetHudSize(1024,768,0);
								HudMessage(s:"* No Target *";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,5600,"DXGren",512.0,384.0,0.0);
							}
							else
							{
								TakeInventory("DeusEx_Augmentation_TargetingNoTarget",35);
								TakeInventory("DeusEx_Augmentation_TargetingScanning",35);
							}
						}
					}
				}
				break;
			case 10:
				if(CheckInventory("DeusEx_Augmentation_LightToken"))
					GiveInventory("DeusEx_Augmentation_LightTrigger",1);
				break;
		}
	}	
}

Script "DeusEx_SpyDrone" (int droneTid)
{
	SetPointerExt(AAPTR_MASTER,0,droneTid);
	int moveX, moveY, use, destroy, stop;
	int lookX = GetActorAngle(droneTid);
	int lookY = GetActorPitch(droneTid);
	int GZDoom = (GetCvar("samsara_zscriptready") == 1);
	int startTimer = timer();
    int droneLevel = CheckInventory("DeusEx_Augmentation_SpyDrone");
	SetActorProperty(droneTid, APROP_Health, 100 * droneLevel);
	while(ClassifyActor(droneTid) > 1)
	{	
		SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
		//Display Camera
		int ratio = getaspectratio() - (4.0/3);
		ACS_NamedExecuteWithResult("DeusEx_CameraClient",droneTid,PlayerNumber());
		SetHudSize(640,480,1);
		SetFont("DXAGCAM1");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,3600,0,-(floorwhole(ratio*240)+0.1),240.0,0.0);
		SetFont("DXAUCAM1");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,3601,0,-(floorwhole(ratio*240)+0.1),240.0,0.0);
		SetFont("CMPSDEUS");
		SetHudSize(1280,960,1);
		HudMessage(s:"Remote SpyDrone Active";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,3602,"DXGren",-floorwhole(ratio*124),352.0,0.0);
		
		//Movement
		moveX = GetPlayerInput(-1,INPUT_SIDEMOVE)*(12*CheckInventory("DeusEx_Augmentation_SpyDrone"));
		moveY = GetPlayerInput(-1,INPUT_FORWARDMOVE)*(12*CheckInventory("DeusEx_Augmentation_SpyDrone"));
		lookX += GetPlayerInput(-1,INPUT_YAW);
		lookY += -GetPlayerInput(-1,INPUT_PITCH);
		use = GetPlayerInput(-1,INPUT_BUTTONS) & BT_USE;
		destroy = (GetPlayerInput(-1,INPUT_BUTTONS) & BT_ATTACK) && !CheckInventory("DeusEx_AugmentationsMenu");
		stop = ((CheckInventory("DeusEx_QuickAugmentationsOpen") && GetPlayerInput(-1,INPUT_BUTTONS) & BT_USE) && CheckInventory("DeusEx_QuickAugmentationsSlot") == 8) || CheckInventory("DeusEx_BioEnergY") <= 0;
		if(GetActorPitch(droneTid) > 0.25) lookY = 0.25;
		if(GetActorPitch(droneTid) > 0.25) lookY = 0.25;
		else if(GetActorPitch(droneTid) < -0.25) lookY = -0.25;
		
		SetActivator(droneTid);
		Warp(0,FixedMul(moveY,cos(GetActorPitch(droneTid))),moveX,-FixedMul(moveY,sin(GetActorPitch(droneTid))),0,WARPF_INTERPOLATE * GZDoom);
		SetActorAngle(0,lookX);
		SetActorPitch(0,lookY);
		if((stop && (timer() > startTimer + 5))) { SetActorState(droneTid,"StopIt",true); break; }
		if(use && GZDoom) GiveInventory("DeusEx_DroneActivator",1);
		if(destroy) { Thing_Damage2(droneTid,5000,"Normal"); break; }
		SetActivator(droneTid,AAPTR_MASTER);
		if(!(ClassifyActor(0) & ACTOR_ALIVE) || !CheckInventory("DeusEx_Augmentation_SpyDroneToken")) { SetActorState(droneTid,"StopIt",true); break; }
		Delay(1);
	}
	SetActivator(droneTid,AAPTR_MASTER);
	Delay(1);
	SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
}

Script "DeusEx_TargeterDrawCamera" (void)
{
	int oldtid = PickActor(0, GetActorPitch(0), 0, 8192.0, 0, MF_SHOOTABLE, ML_BLOCKEVERYTHING, PICKAF_RETURNTID);
	int newtid = UniqueTid();
	if(PickActor(0, GetActorAngle(0), GetActorPitch(0), 8192.0, newtid, MF_SHOOTABLE, ML_BLOCKEVERYTHING, PICKAF_FORCETID) && (ClassifyActor(newtid) & ACTOR_ALIVE))
	{
		int height = GetActorProperty(newtid,APROP_Height);
		int health = GetActorProperty(newtid,APROP_Health);
		int spawnHealth = GetActorProperty(newtid,APROP_SpawnHealth);
		int healthPercentage = (health*100)/spawnHealth;
		if(healthPercentage < 1) healthPercentage = 1;
		str healthString = strparam(s:"Health: ",d:healthPercentage,s:"%");
		int camTid = UniqueTid();
		int camDistance = 64;
		int camPosX = GetActorX(newtid) + FixedMul(64*cos(GetActorAngle(0) + 0.5),cos(GetActorPitch(0)));
		int camPosY = GetActorY(newtid) + FixedMul(64*sin(GetActorAngle(0) + 0.5),cos(GetActorPitch(0)));
		int camPosZ = GetActorZ(newtid) + (height/2) + (64 * sin(GetActorPitch(0)));
		int distance = (VectorLength(VectorLength(GetActorX(newtid) - GetActorX(0),GetActorY(newtid) - GetActorY(0)),GetActorZ(newtid) - GetActorZ(0)) / 12)>>16;
		str distanceInfo = strparam(s:GetActorProperty(newtid,APROP_NameTag),s:"\nDistance: ",d:distance,s:" ft\n");
		SpawnForced("ShrinkFlash",camPosX,camPosY,camPosZ,camTid);
		SetActorAngle(camTid,GetActorAngle(0));
		SetActorPitch(camTid,GetActorPitch(0));
		ACS_NamedExecuteWithResult("DeusEx_CameraClient",camTid,PlayerNumber());
		int ratio = getaspectratio() - (4.0/3);
		
		switch(CheckInventory("DeusEx_Augmentation_Targeting"))
		{
			case 1:
			case 2:
			case 3:
				SetFont("DXAGCAM1");
				SetHudSize(640,480,1);
				HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,5600,0,-(floorwhole(ratio*240)+0.1),240.0,0.0);
				SetFont("DXAGCAM2");
				HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,5604,0,-(floorwhole(ratio*240)+0.1),240.0,0.0);
				SetFont("CMPSDEUS");
				SetHudSize(1280,960,1);
				HudMessage(s:healthString;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,5601,"DXGren",-(floorwhole(ratio*472)+0.1),384.0,0.0);
				HudMessage(s:distanceInfo;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,5602,"DXGren",-(floorwhole(ratio*472)+0.1),332.0,0.0);
				HudMessage(s:"Image not Available";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,5603,"HalfLifeWhite",-(floorwhole(ratio*320)+0.1),480.0,0.0);
				break;
			case 4:
				SetFont("DXAGCAM1");
				SetHudSize(640,480,1);
				HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,5600,0,-(floorwhole(ratio*240)+0.1),240.0,0.0);
				SetFont("DXAUCAM1");
				HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,5604,0,-(floorwhole(ratio*240)+0.1),240.0,0.0);
				SetFont("CMPSDEUS");
				SetHudSize(1280,960,1);
				HudMessage(s:healthString;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,5601,"DXGren",-(floorwhole(ratio*472)+0.1),384.0,0.0);
				HudMessage(s:distanceInfo;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,5602,"DXGren",-(floorwhole(ratio*472)+0.1),332.0,0.0);
				break;
		}
		Thing_ChangeTid(newtid, oldtid);
		SetResultValue(1);
	}
	else
	{
		Thing_ChangeTid(newtid, oldtid);
		SetResultValue(0);
	}
}

Script "DeusEx_CameraClient" (int cameraTid, int player) clientside
{
	if(player != ConsolePlayerNumber())
		terminate;
		
	SetCameraToTexture(cameraTid,"DXAUCAM1",90);
}

Script "DeusEx_Decorate" (int funct, int arg1, int arg2, int arg3)
{
	int speedmod, myTid;
	int experience = GetCVar("samsara_experiencegain");
	Switch(funct)
	{
		Case 1:
			SetActorProperty(0, APROP_DAMAGEFACTOR, 2.0);
			break;
		Case 2:	
			int damagefactor = GetActorProperty(0, APROP_DAMAGEFACTOR);
			SetActorProperty(0, APROP_DAMAGEFACTOR, 1.0);
			break;	
		Case 3:
			if (CheckInventory("DeusEx_MovementPenaltyEnabled") || !isDeathMatch() || !isFreeForAll() || !isTeamGame())
			{
				If(CheckInventory("DeusEx_HeavyWeaponSkill") == 0)
				{
					SetActorProperty(0, APROP_SPEED, 0.45);
					break;
				}
				Else If(CheckInventory("DeusEx_HeavyWeaponSkill") == 1)
				{
					SetActorProperty(0, APROP_SPEED, 0.75);
					break;
				}	
				Else
				{
					SetActorProperty(0, APROP_SPEED, 1.0);
					break;
				}
			}
		Case 4: 
			if (CheckInventory("DeusEx_MovementPenaltyEnabled") || !isDeathMatch() || !isFreeForAll() || !isTeamGame())
			{
				SetActorProperty(0, APROP_SPEED, 1.0);
				break;
			}
		case 5:
			if(GetActorViewHeight(0) <=  GetActorViewHeight(0) / 2 << 16)
				SetResultValue(1);
			else
			{
				int targetStrength = CheckInventory("DeusEx_Augmentation_TargetingToken") * CheckInventory("DeusEx_Augmentation_Targeting");
				SetResultValue(FixedMul((1.0+CheckInventory(DeusExSpreads[arg1])*0.1),1.0-(0.1*targetStrength)) >> 16);
			}
			break;			
		case 6:
			int weaponskill = CheckInventory(DeusExWeaponSkills[arg2]);
			int weaponskillacc = 0.25*weaponskill;
			SetResultValue(arg3*weaponskillacc);
			break;
		case 7:
			LocalAmbientSound("DeusEx/SkillPoints", 127);
			SetHudSize(640,480,1);
			HudMessage(s:DeusExLevelUpStrings[arg1];HUDMSG_PLAIN|HUDMSG_LOG,556,CR_UNTRANSLATED,0.1,0.1,3.0);
			break;		
		case 8:
			SetActivator(0,AAPTR_Master);
			switch(arg1)
			{
				case 1:
					SetResultValue(GetActorProperty(0,APROP_Radius)>>16);
					break;
				case 2:
					SetResultValue(GetActorProperty(0,APROP_Height)>>16 + ((GetActorProperty(0,APROP_Height)>>16) * 3 * (ClassifyActor(0) & ACTOR_DEAD)));
					break;
				case 3:
					SetResultValue(GetActorAngle(0)/182);
					break;			
			}
			break;
		case 9:
			SetResultValue(193-(48*CheckInventory("DeusEx_Augmentation_RunSilent")*CheckInventory("DeusEx_Augmentation_RunSilentToken")));
			break;
		case 10:
			int repulsorX = ACS_NamedExecuteWithResult("getTargetX");
			int repulsorY = ACS_NamedExecuteWithResult("getTargetY");
			int repulsorZ = ACS_NamedExecuteWithResult("getTargetZ");
			int repulsorSpeed = 10;
			SetActivator(0,AAPTR_Tracer);
			if(!(ClassifyActor(0) & ACTOR_MONSTER) || CheckFlag(0,"BOSS")) 
				terminate;
			int repulseeX = GetActorX(0);
			int repulseeY = GetActorY(0);
			int repulseeZ = GetActorZ(0);
			int thrustAngle = VectorAngle(repulseeX - repulsorX, repulseeY - repulsorY);
			int thrustPitch = VectorAngle(VectorLength(repulseeX - repulsorX, repulseeY - repulsorY), repulseeZ - repulsorZ);
			SetActorVelocity(0,FixedMul(repulsorSpeed*cos(thrustAngle),cos(thrustPitch)),FixedMul(repulsorSpeed*sin(thrustAngle),cos(thrustPitch)),repulsorSpeed*sin(thrustpitch),0,0);
			break;
		case 11:
			SetResultValue(48*CheckInventory("DeusEx_Augmentation_Repulsor"));
			break;
		case 12:
			int allowThrow = 1;
			myTid = UniqueTid();
			Thing_ChangeTid(0,myTid);
			SetActivator(0,AAPTR_Tracer);
			if(!CheckInventory("DeusEx_Augmentation_ObjectGrabbing"))
				GiveInventory("DeusEx_Augmentation_ObjectGrabbing",1);
			else terminate;
			int selectionTid = UniqueTid();
			int previousSelectionTid = ActivatorTid();
			Thing_ChangeTid(0,selectionTid);
			SetActivator(myTid,AAPTR_Target);
			if(!CheckInventory("DeusEx_Augmentation_ObjectGrabbing"))
				GiveInventory("DeusEx_Augmentation_ObjectGrabbing",1);
			else terminate;
			SetInventory("DeusEx_Augmentation_ObjectGrabbingTimer",timer());
			int musclestrength = CheckInventory("DeusEx_Augmentation_MicroFibralMuscle");
			SetPointerExt(AAPTR_Tracer,0,selectionTid);
			SetActivator(selectionTid);
			Thing_ChangeTid(selectionTid,previousSelectionTid);
			int afraid = GetActorProperty(0,APROP_Frightened);
			int objectGravity = GetActorProperty(0,APROP_Gravity);
			if(!((ClassifyActor(0) & ACTOR_MONSTER) && (musclestrength < 2 || (musclestrength == 4 && GetActorProperty(0,APROP_Height) > 56.0) || (musclestrength == 3 && GetActorProperty(0,APROP_Height) > 32.0))
			|| (ClassifyActor(0) & ACTOR_GENERIC) && (GetActorProperty(0,APROP_Mass) > 100 * musclestrength)))
			{
				SetActorProperty(0,APROP_Frightened,1);
				SetActorProperty(0,APROP_Gravity,0);
				int pass = CheckFlag(0,"CANPASS");
				int blockMonster = CheckFlag(0,"NOBLOCKMONST");
				int mDropOff = CheckFlag(0,"DROPOFF");
				GiveInventory("DeusEx_Augmentation_ObjectGrabberEnablePass",1);
				GiveInventory("DeusEx_Augmentation_ObjectGrabberEnableBlock",1);
				GiveInventory("DeusEx_Augmentation_ObjectGrabberEnableDropOff",1);
				int lastobjectX = GetActorX(0);
				int lastobjectY = GetActorY(0);
				int lastobjectZ = GetActorZ(0);
				int objDistance = VectorLength(VectorLength(lastobjectX - ACS_NamedExecuteWithResult("getTargetX",0,AAPTR_Tracer),lastobjectY - ACS_NamedExecuteWithResult("getTargetY",0,AAPTR_Tracer)),lastobjectZ - ACS_NamedExecuteWithResult("getTargetZ",0,AAPTR_Tracer));
				while(ACS_NamedExecuteWithResult("DeusEx_Decorate",13) && ClassifyActor(0) > 1 && !(ClassifyActor(0) & ACTOR_DEAD))
				{
					objDistance = VectorLength(VectorLength(lastobjectX - ACS_NamedExecuteWithResult("getTargetX",0,AAPTR_Tracer),lastobjectY - ACS_NamedExecuteWithResult("getTargetY",0,AAPTR_Tracer)),lastobjectZ - ACS_NamedExecuteWithResult("getTargetZ",0,AAPTR_Tracer));
					int objectPitch = -ACS_NamedExecuteWithResult("getPointerPitch",0,AAPTR_Tracer);
					int GZDoom = (GetCvar("samsara_zscriptready") == 1);
					Warp(AAPTR_Tracer,48*cos(objectPitch),0,32.0+(48*sin(objectPitch)),0,WARPF_USEPTR|(WARPF_INTERPOLATE * GZDoom));
					int lastAngle = ACS_NamedExecuteWithResult("getPointerAngle",0,AAPTR_Tracer);
					int lastPitch = ACS_NamedExecuteWithResult("getPointerPitch",0,AAPTR_Tracer);
					int objectSight = ACS_NamedExecuteWithResult("DeusEx_Decorate",15);
					if(objectSight && abs(objDistance) < 84.0)
					{
						lastobjectX = GetActorX(0);
						lastobjectY = GetActorY(0);
						lastobjectZ = GetActorZ(0);
					}
					else
					{
						allowThrow = 0;
						ACS_NamedExecuteWithResult("DeusEx_Decorate",14,lastobjectX,lastobjectY,lastobjectZ);
						break;
					}
					Delay(1);
				}
				if(ClassifyActor(0) > 1)
				{
					if(ClassifyActor(0) & ACTOR_DEAD) allowThrow = 0;
					TakeInventory("DeusEx_Augmentation_ObjectGrabbing",1);
					SetActorProperty(0,APROP_Gravity,objectGravity);
					if(!pass) GiveInventory("DeusEx_Augmentation_ObjectGrabberDisablePass",1);
					if(allowThrow)
					{
						int throwAngle = ACS_NamedExecuteWithResult("getPointerAngle",0,AAPTR_Tracer);
						int throwPitch = -ACS_NamedExecuteWithResult("getPointerPitch",0,AAPTR_Tracer);
						int throwVelocity = 5+(musclestrength*5);
						SetActorVelocity(0,FixedMul(throwVelocity*cos(throwAngle),cos(throwPitch)),FixedMul(throwVelocity*sin(throwAngle),cos(throwPitch)),throwVelocity*sin(throwPitch),0,0);
					}
					SetActorProperty(0,APROP_Frightened,afraid);
					ACS_NamedExecuteWithResult("DeusEx_Decorate",16,blockMonster,mDropOff);
				}
			}
			SetActivator(myTid,AAPTR_TARGET);
			Thing_Remove(myTid);
			Delay(5);
			SetInventory("DeusEx_Augmentation_ObjectGrabbingTimer",0);
			TakeInventory("DeusEx_Augmentation_ObjectGrabbing",1);
			TakeInventory("DeusEx_Augmentation_GrabbingStop",1);
			break;
		case 13:
			SetActivator(0,AAPTR_Tracer);
			SetResultValue((ClassifyActor(0) & ACTOR_ALIVE) && CheckInventory("DeusEx_Augmentation_MicroFibralMuscleToken") && !CheckInventory("DeusEx_Augmentation_GrabbingStop"));
			break;
		case 14:
			SetActorPosition(0,arg1,arg2,arg3,0);
			break;
		case 15:
			myTid = UniqueTid();
			int activatorstid = ActivatorTid();
			Thing_ChangeTid(0,myTid);
			SetActivator(0,AAPTR_Tracer);
			int sight = CheckSight(0,myTid,0);
			Thing_ChangeTid(myTid,activatorstid);
			SetResultValue(sight);
			break;
		case 16:
			int throwDamage = VectorLength(GetActorVelX(0),GetActorVelY(0))>>16;
			int throwTimer = 0;
			until(abs(VectorLength(VectorLength(GetActorVelX(0),GetActorVelY(0)),GetActorVelZ(0))) < 4.0)
			{
				if(ClassifyActor(0) <= 1)
					terminate;
					
				throwTimer++;
					
				Delay(1);
			}
			if(ClassifyActor(0) <= 1) terminate;
			int damageRadiusTid = UniqueTid();
			if(throwTimer >= 5)
			{
				SpawnForced("DeusEx_Augmentation_ObjectGrabberDamageNearbyActors",GetActorX(0),GetActorY(0),GetActorZ(0),damageRadiusTid);
				SetActorProperty(damageRadiusTid,APROP_Mass,throwDamage);
				SetActorProperty(damageRadiusTid,APROP_Score,(GetActorProperty(0,APROP_Radius)>>16)+24);
				ACS_NamedExecuteWithResult("DeusEx_Decorate",18,damageRadiusTid);
			}
			if(arg1) GiveInventory("DeusEx_Augmentation_ObjectGrabberEnableBlock",1);
			if(arg2) GiveInventory("DeusEx_Augmentation_ObjectGrabberEnableDropOff",1);
			break;
		case 17:
			myTid = UniqueTid();
			SpawnForced("ShrinkFlash",GetActorX(0),GetActorY(0),GetActorZ(0),myTid);
			SetActivator(myTid);
			Thing_ChangeTid(myTid,0);
			PlaySound(0,"DeusExPlayer/Step", CHAN_BODY, arg1);
			break;	
		case 18:
			SetActivator(0,AAPTR_Tracer);
			SetPointerExt(AAPTR_TARGET,0,arg1);
			break;
		case 19:
			if(VectorLength(VectorLength(GetActorVelX(0),GetActorVelY(0)),GetActorVelZ(0)) < 100.0 && ACS_NamedExecuteWithResult("DeusEx_Decorate",20))
			{
				if(!CheckInventory("DeusEx_Augmentation_ADSDetonate"))
				{
					GiveInventory("DeusEx_Augmentation_ADSDetonate",1);
					SetActorProperty(0,APROP_ReactionTime,0);
					GiveInventory("DeusEx_Augmentation_ADSForceDetonate",1);
				}
			}
			break;
		case 20:
			int detonated = CheckInventory("DeusEx_Augmentation_ADSDetonate");
			int viableToDestroy = ACS_NamedExecuteWithResult("DeusEx_Decorate",24);
			SetActivator(0,AAPTR_Target);
			SetResultValue(!CheckInventory("DeusEx_Augmentation_AggressiveDefenseSystemToken") && !detonated && viableToDestroy);
			break;
		case 21:
			SetResultValue(CheckInventory("DeusEx_Augmentation_AggressiveDefenseSystem"));
			break;
		case 22:
			int inventory = CheckInventory(strparam(s:DeusExAugmentationsSlots[arg1][0],s:"Slot"));
			if(CheckInventory(DeusExAugmentationsSlots[arg1][1]))
			{
				if(inventory < 1)
					SetInventory(strparam(s:DeusExAugmentationsSlots[arg1][0],s:"Slot"),1);
			}
			else if(CheckInventory(DeusExAugmentationsSlots[arg1][2]))
			{
				if(inventory < 1)
					SetInventory(strparam(s:DeusExAugmentationsSlots[arg1][0],s:"Slot"),2);
			}
			else SetInventory(strparam(s:DeusExAugmentationsSlots[arg1][0],s:"Slot"),0);
			break;
		case 23: //Placeholder solution
			int randomAugSlot = random(0,8);
			int randomAugItem = random(1,2);
			int attempts = 0;
			while(CheckInventory(DeusExAugmentationsSlots[randomAugSlot][randomAugItem])) 
			{
				if(attempts >= 16) { GiveInventory("DeusEx_AugmentationUpgradeCannister",1); terminate; }
				attempts++;
				randomAugSlot = random(0,8);
				randomAugItem = random(1,2);
			}
			if(!CheckInventory(strparam(s:DeusExAugmentationsSlots[randomAugSlot][0],s:"Slot"))) GiveInventory(strparam(s:DeusExAugmentationsSlots[randomAugSlot][0],s:"Slot"),randomAugItem);
			GiveInventory(DeusExAugmentationsSlots[randomAugSlot][randomAugItem],1);
			break;
		case 24:
			if(SetActivator(0,AAPTR_TARGET)) { SetResultValue(ClassifyActor(0) & ACTOR_MONSTER);  }
			else if(SetActivator(0,AAPTR_MASTER))  { SetResultValue(ClassifyActor(0) & ACTOR_MONSTER);  }
			else  SetResultValue(0);
			break;
		case 25:
			GiveInventory("DeusEx_MedicinePoints", arg1*(1+(PlayerCount()/4))*(experience)/2);
			break;
		case 26:
			GiveInventory("DeusEx_EnviroPoints", arg1*(1+(PlayerCount()/4))*(experience)/2);
			break;
	}
}	

Script "DeusEx_GibCreator" (void)
{
	int alive;
	int a = 0;
	int height = ACS_NamedExecuteWithResult("DeusEx_GibHeightCheck");
	int radius = GetActorProperty(0,APROP_Radius)>>16;
	int volume = height * radius * radius;
	int chunks = volume/2500;
	if(chunks < 1)
		chunks = 1;
	
	if(chunks > 15)
		chunks = 15;
	
	for(a = 0; a < chunks; a++)
		GiveInventory("DeusEx_TossChunk", 1);
}

Script "DeusEx_GibHeightCheck" (void)
{
	int height = (GetActorProperty(0,APROP_Height)>>16);
	height += height * (3 * (GetActorProperty(0,APROP_Health) <= 0));
	SetResultValue(height);
}

script "DeusEx_ProjectilePitch" (void)
{
	int pTid = UniqueTid();
	Thing_ChangeTid(0,pTid);
	SetActivatorToTarget(0);
	SetActorPitch(pTid,-GetActorPitch(0));
	Thing_ChangeTid(pTid,0);
}

Script "DeusEx_ScopeZoom" (void)
{
	While(CheckInventory("DeusEx_Zoomed"))
	{
		SetHUDSize(256, 256, 0);
		SetFont("SCPVEW2");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD,17460,0,128.0,128.0,0.2,0.45);
		SetFont("SCPVEW1");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD,12480,0,128.0,128.0,0.2,1.0);		
		Delay(1);
	}
	SetHudSize(0,0,0);
	HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD,17460,0,128.0,128.0,0.2,0.45);
	HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_UNDERHUD,12480,0,128.0,128.0,0.2,0.45);
}		

Script "DeusExPlayerCodeFunctions" (int func)
{
	int result = 0;
	int forward = GetPlayerInput(-1, MODINPUT_FORWARDMOVE);
	int side = GetPlayerInput(-1, MODINPUT_SIDEMOVE);
	int buttons = GetPlayerInput(-1, MODINPUT_BUTTONS);
	int running = abs(GetPlayerInput(-1, MODINPUT_FORWARDMOVE)) > 6400 || abs(GetPlayerInput(-1, MODINPUT_SIDEMOVE)) > 6144;
	switch(func)
	{
		case 0:
			result = (forward != 0 || side != 0) && running;
			break;
		case 1:
			result = (forward != 0 || side != 0) && !running;
			break;
		case 2:
			result = GetActorViewHeight(0) <= 38.0;
			break;
		case 3:
			result = (buttons & BT_JUMP) > 0;
			break;
		case 4:
			result = CheckInventory("DeusEx_Firing") && side != 0;
			break;
		case 5:
			result = CheckInventory("DeusEx_Firing") && forward != 0;
			break;
		case 6:
			result = CheckInventory("DeusEx_Firing");
			break;
	}
	if(result > 0)
		TakeInventory("DeusEx_Firing",1);
		
	SetResultValue(result);
}

Script "DeusExRecoil" (int amount, int duration, int type, int rollForce) clientside
{
	int a;
	int pln = PlayerNumber();
	if (CheckInventory("SamsaraRecoilIsDisabled")) { terminate; }

	str skillSelector = "";
	int targetStrength = CheckInventory("DeusEx_Augmentation_TargetingToken") * CheckInventory("DeusEx_Augmentation_Targeting");
	switch(type)
	{
		case 0: skillSelector = "DeusEx_LowTechSkill"; break;
		case 1: skillSelector = "DeusEx_PistolSkill"; break;
		case 2: skillSelector = "DeusEx_RifleSkill"; break;
		case 3: skillSelector = "DeusEx_HeavyWeaponSkill"; break;
	}
	ACS_NamedExecuteWithResult("DeusExRecoilRoll",amount * (5 - CheckInventory(skillSelector)),rollForce == 0 ? 0 : rollForce);
	amount *= 4-CheckInventory(skillSelector);
	amount = (amount * (1.0 - (0.1 * targetStrength)))>>16;
	if (isFreeForAll() || isTeamGame()) { for(a = 0; a < duration; a++) { SetActorPitch(0, GetActorPitch(0) - (a*amount/2)); Delay(1); } }
	else for(a = 0; a < duration; a++) { SetActorPitch(0, GetActorPitch(0) - a*amount); Delay(1); }
}

Script "DeusExRecoilRoll" (int amount, int forceOverride)
{
	int a;
	int direction = (random(0,1) * 2) - 1;
	amount = forceOverride == 0 ? amount : forceOverride;
	for(a = 0; a < 3; a++) { SetActorRoll(0, GetActorRoll(0) - a*amount*direction); Delay(1); }
	for(a = 0; a < 3; a++) { SetActorRoll(0, GetActorRoll(0) + a*amount*direction); Delay(1); }
}

/*Script "DeusExFlamethrowerHandler" (void)
{
	int startTime = timer();
	int channelCounter = 0;
	int channel = 0;
	PlaySound(0,"DeusEx/FlameThrower/Fire", CHAN_6, 1.0, 0, ATTN_NORM);
	While(CheckInventory("DeusEx_FlamethrowerFiring"))
	{
		if((timer() - startTime) > 24)
		{
			switch(channelCounter)
			{
				case 0: channel = CHAN_WEAPON; break;
				case 1: channel = CHAN_5; channelCounter = -1; break;
				case 2: channel = CHAN_6; break;
			}
			PlaySound(0,"DeusEx/FlameThrower/Fire", channel, 1.0, 0, ATTN_NORM);
			startTime = timer();
			channelCounter++;
		}
		GiveInventory("SamsaraDeusExFlamethrowerAttackHandler", 1);
		Delay(1);
	}
}*/

Script "DeusExIgnite" (int self)
{
	if(!self)
		SetActivator(0,AAPTR_TRACER);
		
	if(!CheckFlag(0,"SHOOTABLE"))
		terminate;
		
	GiveInventory("DeusEx_FlamethrowerOnFireCounter",1050);
	
	if(!CheckInventory("DeusEx_FlamethrowerIsOnFire"))
	{
		GiveInventory("DeusEx_FlamethrowerIsOnFire",1);
		/*int ignitionTimer = 0;
		int deathMultiplier = ClassifyActor(0) & ACTOR_DEAD ? 4 : 1;
		int radius = (GetActorProperty(0,APROP_Radius)>>16) - 8;
		int height = (GetActorProperty(0,APROP_Height)>>16) * deathMultiplier;
		int space = (height * radius * radius) / 2048;
		int dummyFlameTid = UniqueTid();
		for(int a = 0; a < space; a++)
		{
			int randomX = random(-radius*1.0,radius*1.0);
			int randomY = random(-radius*1.0,radius*1.0);
			int randomZ = random(height*0.2,height*0.8);
			SpawnForced("DeusEx_BurnEffect",GetActorX(0)+randomX,GetActorY(0)+randomY,GetActorZ(0)+randomZ,dummyFlameTid);
			SetPointerExt(AAPTR_MASTER,0,dummyFlameTid);
			ACS_NamedExecuteWithResult("DeusExFlame",dummyFlameTid,randomX,randomY,randomZ);
			Thing_ChangeTid(dummyFlameTid,0);
		}
		until(ClassifyActor(0) & ACTOR_DEAD || CheckInventory("DeusEx_FlamethrowerOnFireCounter") < 1) { TakeInventory("DeusEx_FlamethrowerOnFireCounter",1); Delay(1); }
		TakeInventory("DeusEx_FlamethrowerIsOnFire",1);*/
		
		int dummyFlameTid = UniqueTid();
		SpawnForced("DeusEx_BurnEffectSpawner",GetActorX(0),GetActorY(0),GetActorZ(0),dummyFlameTid);
		SetPointerExt(AAPTR_MASTER,0,dummyFlameTid);
		ACS_NamedExecuteWithResult("DeusExFlame",dummyFlameTid,0,0,0);
		Thing_ChangeTid(dummyFlameTid,0);

		until(ClassifyActor(0) & ACTOR_DEAD || CheckInventory("DeusEx_FlamethrowerOnFireCounter") < 1) { TakeInventory("DeusEx_FlamethrowerOnFireCounter",1); Delay(1); }
		Delay(7);
		TakeInventory("DeusEx_FlamethrowerIsOnFire",1);
	}
}

Script "DeusExFlame" (int dummyTid, int X, int Y, int Z)
{
	SetActivator(dummyTid);
	While(Warp(AAPTR_MASTER,X,Y,Z,0,WARPF_ABSOLUTEOFFSET|WARPF_NOCHECKPOSITION|WARPF_USEPTR) && ClassifyActor(0) > 1) { Delay(1); }
}

Script "DeusExIsMasterDead" (void)
{
	SetActivator(0,AAPTR_MASTER);
	if(ClassifyActor(0) & ACTOR_ALIVE) SetResultValue(0);
	else SetResultValue(1);
}

script "DeusExGEPTargeter" (void)
{
    while (CheckWeapon("DeusEx_GEPGun") && !isDead(0))
    {
        if (isSinglePlayer() || isCoop()) { LineAttack(0, GetActorAngle(0), GetActorPitch(0), 0, "DeusEx_GEPTargeterPuffCoop", "None", 8192.0, FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL, 0); }
        else { LineAttack(0, GetActorAngle(0), GetActorPitch(0), 0, "DeusEx_GEPTargeterPuff", "None", 8192.0, FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL, 0); }

        Delay(6);
    }
}

Script "DeusEx_LAMTrigger" (void)
{
	while (CheckWeapon("DeusEx_LAM") && !isDead(0))
	{
		GiveInventory("SamsaraDeusExLAMWallChecker", 1);
		Delay(1);
	}
}

Script "DeusEx_PlantMine" (void)
{
	int newTid = UniqueTid();
	SpawnSpotFacingForced("DeusEx_LAMStatic",0,newTid);
	SetPointerExt(AAPTR_TRACER,0,newTid);
	Thing_ChangeTid(newTid,0);
}

Script "DeusEX_LAMMineGlowPlacement" (void)
{
	int pitch = GetActorPitch(0);
	if(pitch > 0.5) pitch = 1.0 - pitch;
	switch(pitch)
	{
		default: SetActorState(0,"SpawnNormal",1); break;
		case 0.25: SetActorState(0,"SpawnFloor",1); break;
		case 0.75: SetActorState(0,"SpawnCeiling",1); break;
	}
}

Script "DeusEx_MonsterCoordinate" (void)
{
	if(ACS_NamedExecuteWithResult("wrongClient",PlayerNumber()) || infraredMessageIds >= 256 || !CheckInventory("DeusEx_Augmentation_VisionEnhancementToken"))
	{
		TakeInventory("C7EnemyCoordinateX",131072);
		TakeInventory("C7EnemyCoordinateY",131072);
		TakeInventory("C7EnemyCoordinateZ",131072);
		TakeInventory("C7EnemyMonsterRadius",768);
		TakeInventory("C7EnemyMonsterHeight",768);
	}
		
	int myX = GetActorX(0);
	int myY = GetActorY(0);
	int myZ = GetActorZ(0);
	
	int monsterRadius = CheckInventory("C7EnemyMonsterRadius");
	int monsterHeight = CheckInventory("C7EnemyMonsterHeight");
	int monsterX = (CheckInventory("C7EnemyCoordinateX") - 65536) * 1.0;
	int monsterY = (CheckInventory("C7EnemyCoordinateY") - 65536) * 1.0;
	int monsterZ = (CheckInventory("C7EnemyCoordinateZ") - 65536) * 1.0;
	
	//PrintBold(s:"Monster X: ",d:monsterX,s:" Monster Y: ",d:monsterY,s:" Monster Z: ",d:monsterZ);
	
	TakeInventory("C7EnemyCoordinateX",131072);
	TakeInventory("C7EnemyCoordinateY",131072);
	TakeInventory("C7EnemyCoordinateZ",131072);
	TakeInventory("C7EnemyMonsterRadius",768);
	TakeInventory("C7EnemyMonsterHeight",768);
	
	int distance = magnitudeThree_f(monsterX - myX,monsterY - myY,monsterZ - myZ);
	
	if(distance <= 768.0)
	{
		int monsterAngle = VectorAngle(monsterX - myX, monsterY - myY);
		int playerAngle = GetActorAngle(0);
		int deltaAngle = (monsterAngle - playerAngle + 1.0) % 1.0;
		
		int monsterPitch = VectorAngle(VectorLength(monsterX - myX, monsterY - myY), monsterZ - myZ);
		int playerPitch = GetActorPitch(0);
		int deltaPitch = (monsterPitch + playerPitch + 1.0) % 1.0;
				
		if (deltaAngle < 0.2 || deltaAngle > 0.8)
		{
			int hudX = FixedMul(960.0,(20.0/monsterRadius))/1.0;
			int hudY = FixedMul(720.0,(52.0/monsterHeight))/1.0;
			int sx = (hudX/2) - ((hudX/2) * Sin (deltaAngle) / Cos (deltaAngle));
			int sy = (hudY/2) - ((hudY/2) * Sin (deltaPitch) / Cos (deltaPitch));
			SetHudSize(hudX, hudY, 0);
			SetFont("DXABOGEY");
			HudMessage(s:"A"; HUDMSG_PLAIN|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 30500+infraredMessageIds, CR_UNTRANSLATED, sx * 1.0, sy * 1.0, 0.5, (768.0-distance)/768);
			infraredMessageIds++;
		
			Delay(1);
		
			HudMessage(s:""; HUDMSG_PLAIN|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 30500+infraredMessageIds-1, CR_UNTRANSLATED, sx * 1.0, sy * 1.0, 0.5, (768.0-distance)/768);
			infraredMessageIds--;
		}	
	}
}

Script "DeusEx_Augmentations_Initiate" (void) net
{
	if(!CheckInventory("DeusEx_AugmentationsMenu"))
	{
		if(!CheckInventory("CompendiumOpened"))
		{
			GiveInventory("DeusEx_AugmentationsMenu",1);
			int execute = ACS_NamedExecuteWithResult("DeusEx_AugmentationsUI");
			SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
		}
	}
	else
	{
		TakeInventory("DeusEx_AugmentationsMenu",1);
		SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
	}
}

Script "DeusEx_AugmentationsUI" (void)
{
	int cursorx, cursory, a, b, holdDelay, inputAvailable;
	int hudboundsx = 640;
	int hudboundsy = 480;
	int hudcenterx = hudboundsx/2;
	int hudcentery = hudboundsy/2;
	int augmentationSlot = 0;
	int validPosition = 0;
	int selectedAugSlot = 0;
	int lastselectedAugSlot = 0;
	int inputDelay = 5;
	int baseIconX = 0;
	int baseIconY = 0;
	int selectorX = 0;
	int selectorY = 0;
	int iconLMargin = -0.025;
	int iconRMargin = 0.055;
	int iconUMargin = -0.033;
	int iconBMargin = 0.077;
	int element = 0;
	int lastElement = 0;
	int lastAugMode = 0;
	int passiveAug = 0;
	int descriptionBarY = 0;
	int priorityElement = 0;
	int lastpriorityElement = 0;
	int upgradeDisplayTimer = 0;
	int upgradedSlot = 0;
	int upgradedSubSlot = 0;
	int GZDoom = (GetCvar("samsara_zscriptready") == 1); //Fairly new change, so we will use this CVAR

	While(CheckInventory("DeusEx_AugmentationsMenu") && Classifyactor(0) & ACTOR_ALIVE)
	{
		//Input based variables
		int mousesensitivity = GetCvar("mouse_sensitivity") + 0.283;
		int mousesensX = GetCvar("m_yaw");
		int mousesensY = GetCvar("m_pitch");
		if(mousesensitivity == 0.0)
			 mousesensitivity = 1.0;
		int yaw = GetPlayerInput(-1, INPUT_YAW);
		int pitch = GetPlayerInput(-1, INPUT_PITCH);
		int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
		int Lclicking = buttons & BT_ATTACK;
		int Rclicking = buttons & BT_ALTATTACK;

		if(yaw > 1 || yaw < -1)
			cursorx -= FixedMul(yaw/16,GZDoom ? mousesensX : mousesensitivity);

		if(pitch > 1 || pitch < -1)
			cursory -= FixedMul(pitch/8,GZDoom ? mousesensY : mousesensitivity);

		if(cursorx < 0)
			cursorx = 0;	
		else if(cursorx > hudboundsx)
			cursorx = hudboundsx;

		if(cursory < 0)
			cursory = 0;
		else if(cursory > hudboundsy)
			cursory = hudboundsy;
			
		inputAvailable = holdDelay <= 0;

		//Basic Graphics
		SetHudSize(hudboundsx,hudboundsy,true);
		SetFont("DXAUGSB1");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1598,0,hudcenterx*1.0,hudcentery*1.0,0.0,0.67);
		SetFont("DXCURSR1");
		HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD, 1500, CR_UNTRANSLATED, (cursorx*1.0), (cursory*1.0), 1.0);
		SetFont("DXCURSR2");
		HudMessage(s:"a"; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA, 1501, CR_UNTRANSLATED, (cursorx*1.0), (cursory*1.0), 1.0);
		SetFont("DXAUGSB2");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1599,0,hudcenterx*1.0,hudcentery*1.0,0.0,0.67);
		SetFont("DXAUGSB3");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1597,0,hudcenterx*1.0,hudcentery*1.0,0.0);
		SetFont("DXAUGSB4");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1596,0,hudcenterx*1.0,hudcentery*1.0,0.0,0.67);
		
		element = 0;
		
		for(b = 0; b < DX_AUGSLOTS-3; b++) ACS_NamedExecuteWithResult("DeusEx_Decorate",22,b);
				
		if(CheckInventory("DeusEx_Augmentation_ArmsSlot") > 0)
		{
			baseIconX = FixedMul(hudboundsx,0.115);
			baseIconY = FixedMul(hudboundsy,0.363);
			validPosition = cursorx > (baseIconX + FixedMul(hudboundsx,iconLMargin)) && cursorx < (baseIconX + FixedMul(hudboundsx,iconRMargin)) && cursory > (baseIconY + FixedMul(hudboundsy,iconUMargin)) && cursory < (baseIconY + FixedMul(hudboundsy,iconBMargin));
			baseIconX = baseIconX*1.0;
			baseIconY = baseIconY*1.0;
			if((lClicking || Rclicking) && validPosition && inputAvailable)
			{
				priorityElement = 0;
				selectedAugSlot = 1;
				if(Rclicking)
				{
					element = -1;
					if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot")) == 1)
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),2);
					else
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),1);
						
					if(!CheckInventory(DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]))
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),!(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))-1)+1);
						
					SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),0);
				}
					
				selectorX = baseIconX;
				selectorY = baseIconY;
			}	
			SetFont(strparam(s:DeusExAugmentationsSlots[0][6+CheckInventory(strparam(s:DeusExAugmentationsSlots[0][0],s:"Slot"))],s:(CheckInventory(strparam(s:DeusExAugmentationsSlots[0][0],s:"Active")) > 0 ? "E" : "D")));	
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ADDBLEND,1511,0,baseIconX,baseIconY,0.0);
			SetFont(strparam(s:"DXAUGTK",d:CheckInventory(DeusExAugmentationsSlots[0][CheckInventory("DeusEx_Augmentation_ArmsSlot")])));
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1531,0,baseIconX,baseIconY,0.0);
			SetFont("DXAUGP01");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1561,0,FixedMul(hudboundsx,0.225)*1.0,FixedMul(hudboundsy,0.354)*1.0,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_LegsSlot") > 0)
		{
			baseIconX = FixedMul(hudboundsx,0.471);
			baseIconY = FixedMul(hudboundsy,0.796);
			validPosition = cursorx > (baseIconX + FixedMul(hudboundsx,iconLMargin)) && cursorx < (baseIconX + FixedMul(hudboundsx,iconRMargin)) && cursory > (baseIconY + FixedMul(hudboundsy,iconUMargin)) && cursory < (baseIconY + FixedMul(hudboundsy,iconBMargin));
			baseIconX = baseIconX*1.0;
			baseIconY = baseIconY*1.0;
			if((lClicking || Rclicking) && validPosition && inputAvailable)
			{
				priorityElement = 0;
				selectedAugSlot = 2;
				if(Rclicking)
				{
					element = -1;
					if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot")) == 1)
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),2);
					else
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),1);
						
					if(!CheckInventory(DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]))
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),!(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))-1)+1);
						
					SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),0);
				}
					
				selectorX = baseIconX;
				selectorY = baseIconY;
			}		
			SetFont(strparam(s:DeusExAugmentationsSlots[1][6+CheckInventory(strparam(s:DeusExAugmentationsSlots[1][0],s:"Slot"))],s:(CheckInventory(strparam(s:DeusExAugmentationsSlots[1][0],s:"Active")) > 0 ? "E" : "D")));	
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ADDBLEND,1512,0,baseIconX,baseIconY,0.0);
			SetFont(strparam(s:"DXAUGTK",d:CheckInventory(DeusExAugmentationsSlots[1][CheckInventory("DeusEx_Augmentation_LegsSlot")])));
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1532,0,baseIconX,baseIconY,0.0);
			SetFont("DXAUGP02");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1562,0,FixedMul(hudboundsx,0.318)*1.0,FixedMul(hudboundsy,0.653)*1.0,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_Subdermal1Slot") > 0)
		{
			baseIconX = FixedMul(hudboundsx,0.115);
			baseIconY = FixedMul(hudboundsy,0.538);
			validPosition = cursorx > (baseIconX + FixedMul(hudboundsx,iconLMargin)) && cursorx < (baseIconX + FixedMul(hudboundsx,iconRMargin)) && cursory > (baseIconY + FixedMul(hudboundsy,iconUMargin)) && cursory < (baseIconY + FixedMul(hudboundsy,iconBMargin));
			baseIconX = baseIconX*1.0;
			baseIconY = baseIconY*1.0;
			if((lClicking || Rclicking) && validPosition && inputAvailable)
			{
				priorityElement = 0;
				selectedAugSlot = 3;
				if(Rclicking)
				{
					element = -1;
					if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot")) == 1)
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),2);
					else
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),1);
						
					if(!CheckInventory(DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]))
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),!(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))-1)+1);
						
					SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),0);
				}
					
				selectorX = baseIconX;
				selectorY = baseIconY;
			}
			SetFont(strparam(s:DeusExAugmentationsSlots[2][6+CheckInventory(strparam(s:DeusExAugmentationsSlots[2][0],s:"Slot"))],s:(CheckInventory(strparam(s:DeusExAugmentationsSlots[2][0],s:"Active")) > 0 ? "E" : "D")));	
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ADDBLEND,1513,0,baseIconX,baseIconY,0.0);
			SetFont(strparam(s:"DXAUGTK",d:CheckInventory(DeusExAugmentationsSlots[2][CheckInventory("DeusEx_Augmentation_Subdermal1Slot")])));
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1533,0,baseIconX,baseIconY,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_Subdermal2Slot") > 0)
		{
			baseIconX = FixedMul(hudboundsx,0.115);
			baseIconY = FixedMul(hudboundsy,0.662);
			validPosition = cursorx > (baseIconX + FixedMul(hudboundsx,iconLMargin)) && cursorx < (baseIconX + FixedMul(hudboundsx,iconRMargin)) && cursory > (baseIconY + FixedMul(hudboundsy,iconUMargin)) && cursory < (baseIconY + FixedMul(hudboundsy,iconBMargin));
			baseIconX = baseIconX*1.0;
			baseIconY = baseIconY*1.0;
			if((lClicking || Rclicking) && validPosition && inputAvailable)
			{
				priorityElement = 0;
				selectedAugSlot = 4;
				if(Rclicking)
				{
					element = -1;
					if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active")) == 1)
						LocalAmbientSound("DeusEx/Augment/CloakDown",127);
					if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot")) == 1)
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),2);
					else
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),1);
						
					if(!CheckInventory(DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]))
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),!(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))-1)+1);
						
					SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),0);
				}
					
				selectorX = baseIconX;
				selectorY = baseIconY;
			}
			SetFont(strparam(s:DeusExAugmentationsSlots[3][6+CheckInventory(strparam(s:DeusExAugmentationsSlots[3][0],s:"Slot"))],s:(CheckInventory(strparam(s:DeusExAugmentationsSlots[3][0],s:"Active")) > 0 ? "E" : "D")));	
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ADDBLEND,1514,0,baseIconX,baseIconY,0.0);
			SetFont(strparam(s:"DXAUGTK",d:CheckInventory(DeusExAugmentationsSlots[3][CheckInventory("DeusEx_Augmentation_Subdermal2Slot")])));
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1534,0,baseIconX,baseIconY,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_Subdermal1Slot") > 0 || CheckInventory("DeusEx_Augmentation_Subdermal2Slot") > 0)
		{
			SetFont("DXAUGP03");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1563,0,FixedMul(hudboundsx,0.179)*1.0,FixedMul(hudboundsy,0.458)*1.0,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_Torso1Slot") > 0)
		{
			baseIconX = FixedMul(hudboundsx,0.471);
			baseIconY = FixedMul(hudboundsy,0.375);
			validPosition = cursorx > (baseIconX + FixedMul(hudboundsx,iconLMargin)) && cursorx < (baseIconX + FixedMul(hudboundsx,iconRMargin)) && cursory > (baseIconY + FixedMul(hudboundsy,iconUMargin)) && cursory < (baseIconY + FixedMul(hudboundsy,iconBMargin));
			baseIconX = baseIconX*1.0;
			baseIconY = baseIconY*1.0;
			if((lClicking || Rclicking) && validPosition && inputAvailable)
			{
				priorityElement = 0;
				selectedAugSlot = 5;
				if(Rclicking)
				{
					element = -1;
					if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot")) == 1)
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),2);
					else
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),1);
						
					if(!CheckInventory(DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]))
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),!(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))-1)+1);
						
					SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),0);
				}
					
				selectorX = baseIconX;
				selectorY = baseIconY;
			}
			SetFont(strparam(s:DeusExAugmentationsSlots[4][6+CheckInventory(strparam(s:DeusExAugmentationsSlots[4][0],s:"Slot"))],s:(CheckInventory(strparam(s:DeusExAugmentationsSlots[4][0],s:"Active")) > 0 ? "E" : "D")));	
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ADDBLEND,1515,0,baseIconX,baseIconY,0.0);
			SetFont(strparam(s:"DXAUGTK",d:CheckInventory(DeusExAugmentationsSlots[4][CheckInventory("DeusEx_Augmentation_Torso1Slot")])));
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1535,0,baseIconX,baseIconY,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_Torso2Slot") > 0)
		{
			baseIconX = FixedMul(hudboundsx,0.471);
			baseIconY = FixedMul(hudboundsy,0.499);
			validPosition = cursorx > (baseIconX + FixedMul(hudboundsx,iconLMargin)) && cursorx < (baseIconX + FixedMul(hudboundsx,iconRMargin)) && cursory > (baseIconY + FixedMul(hudboundsy,iconUMargin)) && cursory < (baseIconY + FixedMul(hudboundsy,iconBMargin));
			baseIconX = baseIconX*1.0;
			baseIconY = baseIconY*1.0;
			if((lClicking || Rclicking) && validPosition && inputAvailable)
			{
				priorityElement = 0;
				selectedAugSlot = 6;
				if(Rclicking)
				{
					element = -1;
					if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot")) == 1)
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),2);
					else
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),1);
						
					if(!CheckInventory(DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]))
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),!(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))-1)+1);
						
					SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),0);
				}
					
				selectorX = baseIconX;
				selectorY = baseIconY;
			}
			SetFont(strparam(s:DeusExAugmentationsSlots[5][6+CheckInventory(strparam(s:DeusExAugmentationsSlots[5][0],s:"Slot"))],s:(CheckInventory(strparam(s:DeusExAugmentationsSlots[5][0],s:"Active")) > 0 ? "E" : "D")));	
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ADDBLEND,1516,0,baseIconX,baseIconY,0.0);
			SetFont(strparam(s:"DXAUGTK",d:CheckInventory(DeusExAugmentationsSlots[5][CheckInventory("DeusEx_Augmentation_Torso2Slot")])));
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1536,0,baseIconX,baseIconY,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_Torso3Slot") > 0)
		{
			baseIconX = FixedMul(hudboundsx,0.471);
			baseIconY = FixedMul(hudboundsy,0.622);
			validPosition = cursorx > (baseIconX + FixedMul(hudboundsx,iconLMargin)) && cursorx < (baseIconX + FixedMul(hudboundsx,iconRMargin)) && cursory > (baseIconY + FixedMul(hudboundsy,iconUMargin)) && cursory < (baseIconY + FixedMul(hudboundsy,iconBMargin));
			baseIconX = baseIconX*1.0;
			baseIconY = baseIconY*1.0;
			if((lClicking || Rclicking) && validPosition && inputAvailable)
			{
				priorityElement = 0;
				selectedAugSlot = 7;
				if(Rclicking)
				{
					element = -1;
					if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot")) == 1)
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),2);
					else
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),1);
						
					if(!CheckInventory(DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]))
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),!(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))-1)+1);
						
					SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),0);
				}
					
				selectorX = baseIconX;
				selectorY = baseIconY;
			}
			SetFont(strparam(s:DeusExAugmentationsSlots[6][6+CheckInventory(strparam(s:DeusExAugmentationsSlots[6][0],s:"Slot"))],s:"E"));		
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ADDBLEND,1517,0,baseIconX,baseIconY,0.0);
			SetFont(strparam(s:"DXAUGTK",d:CheckInventory(DeusExAugmentationsSlots[6][CheckInventory("DeusEx_Augmentation_Torso3Slot")])));
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1537,0,baseIconX,baseIconY,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_Torso1Slot") > 0 || CheckInventory("DeusEx_Augmentation_Torso2Slot") > 0 || CheckInventory("DeusEx_Augmentation_Torso3Slot") > 0)
		{
			SetFont("DXAUGP04");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1564,0,FixedMul(hudboundsx,0.33)*1.0,FixedMul(hudboundsy,0.35)*1.0,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_CranialSlot") > 0)
		{
			baseIconX = FixedMul(hudboundsx,0.175);
			baseIconY = FixedMul(hudboundsy,0.205);
			validPosition = cursorx > (baseIconX + FixedMul(hudboundsx,iconLMargin)) && cursorx < (baseIconX + FixedMul(hudboundsx,iconRMargin)) && cursory > (baseIconY + FixedMul(hudboundsy,iconUMargin)) && cursory < (baseIconY + FixedMul(hudboundsy,iconBMargin));
			baseIconX = baseIconX*1.0;
			baseIconY = baseIconY*1.0;
			if((lClicking || Rclicking) && validPosition && inputAvailable)
			{
				priorityElement = 0;
				selectedAugSlot = 8;
				if(Rclicking)
				{
					element = -1;
					if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot")) == 1)
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),2);
					else
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),1);
						
					if(!CheckInventory(DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]))
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),!(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))-1)+1);
						
					SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),0);
				}
					
				selectorX = baseIconX;
				selectorY = baseIconY;
			}
			SetFont(strparam(s:DeusExAugmentationsSlots[7][6+CheckInventory(strparam(s:DeusExAugmentationsSlots[7][0],s:"Slot"))],s:(CheckInventory(strparam(s:DeusExAugmentationsSlots[7][0],s:"Active")) > 0 ? "E" : "D")));				
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ADDBLEND,1518,0,baseIconX,baseIconY,0.0);
			SetFont(strparam(s:"DXAUGTK",d:CheckInventory(DeusExAugmentationsSlots[7][CheckInventory("DeusEx_Augmentation_CranialSlot")])));
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1538,0,baseIconX,baseIconY,0.0);
			SetFont("DXAUGP05");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1565,0,FixedMul(hudboundsx,0.269)*1.0,FixedMul(hudboundsy,0.185)*1.0,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_EyeSlot") > 0)
		{
			baseIconX = FixedMul(hudboundsx,0.417);
			baseIconY = FixedMul(hudboundsy,0.205);
			validPosition = cursorx > (baseIconX + FixedMul(hudboundsx,iconLMargin)) && cursorx < (baseIconX + FixedMul(hudboundsx,iconRMargin)) && cursory > (baseIconY + FixedMul(hudboundsy,iconUMargin)) && cursory < (baseIconY + FixedMul(hudboundsy,iconBMargin));
			baseIconX = baseIconX*1.0;
			baseIconY = baseIconY*1.0;
			if((lClicking || Rclicking) && validPosition && inputAvailable)
			{
				priorityElement = 0;
				selectedAugSlot = 9;
				if(Rclicking)
				{
					element = -1;
					if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot")) == 1)
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),2);
					else
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),1);
						
					if(!CheckInventory(DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]))
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),!(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))-1)+1);
						
					SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),0);
				}
					
				selectorX = baseIconX;
				selectorY = baseIconY;
			}
			SetFont(strparam(s:DeusExAugmentationsSlots[8][6+CheckInventory(strparam(s:DeusExAugmentationsSlots[8][0],s:"Slot"))],s:(CheckInventory(strparam(s:DeusExAugmentationsSlots[8][0],s:"Active")) > 0 ? "E" : "D")));	
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ADDBLEND,1519,0,baseIconX,baseIconY,0.0);
			SetFont(strparam(s:"DXAUGTK",d:CheckInventory(DeusExAugmentationsSlots[8][CheckInventory("DeusEx_Augmentation_EyeSlot")])));
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1539,0,baseIconX,baseIconY,0.0);
			SetFont("DXAUGP06");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1566,0,FixedMul(hudboundsx,0.312)*1.0,FixedMul(hudboundsy,0.205)*1.0,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_InfoLink") > 0)
		{
			baseIconX = FixedMul(hudboundsx,0.115);
			baseIconY = FixedMul(hudboundsy,0.837);
			validPosition = cursorx > (baseIconX + FixedMul(hudboundsx,iconLMargin)) && cursorx < (baseIconX + FixedMul(hudboundsx,iconRMargin)) && cursory > (baseIconY + FixedMul(hudboundsy,iconUMargin)) && cursory < (baseIconY + FixedMul(hudboundsy,iconBMargin));
			baseIconX = baseIconX*1.0;
			baseIconY = baseIconY*1.0;
			if((lClicking || Rclicking) && validPosition && inputAvailable)
			{
				priorityElement = 0;
				selectedAugSlot = 10;			
				selectorX = baseIconX;
				selectorY = baseIconY;
			}
			SetFont(strparam(s:DeusExAugmentationsSlots[9][6],s:"E"));	
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ADDBLEND,1520,0,baseIconX,baseIconY,0.0);
			SetFont("DXAUGTK1");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1540,0,baseIconX,baseIconY,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_Light") > 0)
		{
			baseIconX = FixedMul(hudboundsx,0.198);
			baseIconY = FixedMul(hudboundsy,0.837);	
			validPosition = cursorx > (baseIconX + FixedMul(hudboundsx,iconLMargin)) && cursorx < (baseIconX + FixedMul(hudboundsx,iconRMargin)) && cursory > (baseIconY + FixedMul(hudboundsy,iconUMargin)) && cursory < (baseIconY + FixedMul(hudboundsy,iconBMargin));
			baseIconX = baseIconX*1.0;
			baseIconY = baseIconY*1.0;
			if((lClicking || Rclicking) && validPosition && inputAvailable)
			{
				priorityElement = 0;
				selectedAugSlot = 11;			
				selectorX = baseIconX;
				selectorY = baseIconY;
			}
			SetFont(strparam(s:DeusExAugmentationsSlots[10][6],s:(CheckInventory(strparam(s:DeusExAugmentationsSlots[10][0],s:"Active")) > 0 ? "E" : "D")));	
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ADDBLEND,1522,0,baseIconX,baseIconY,0.0);
			SetFont("DXAUGTK1");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1542,0,baseIconX,baseIconY,0.0);
		}
		
		if(CheckInventory("DeusEx_Augmentation_IFF") > 0)
		{
			baseIconX = FixedMul(hudboundsx,0.281);
			baseIconY = FixedMul(hudboundsy,0.837);
			validPosition = cursorx > (baseIconX + FixedMul(hudboundsx,iconLMargin)) && cursorx < (baseIconX + FixedMul(hudboundsx,iconRMargin)) && cursory > (baseIconY + FixedMul(hudboundsy,iconUMargin)) && cursory < (baseIconY + FixedMul(hudboundsy,iconBMargin));
			baseIconX = baseIconX*1.0;
			baseIconY = baseIconY*1.0;
			if((lClicking || Rclicking) && validPosition && inputAvailable)
			{
				priorityElement = 0;
				selectedAugSlot = 12;			
				selectorX = baseIconX;
				selectorY = baseIconY;
			}
			SetFont(strparam(s:DeusExAugmentationsSlots[11][6],s:"E"));	
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ADDBLEND,1521,0,baseIconX,baseIconY,0.0);
			SetFont("DXAUGTK1");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1541,0,baseIconX,baseIconY,0.0);
		}
		
		passiveAug = selectedAugSlot == 7 || selectedAugSlot == 10 || selectedAugSlot == 12;
		
		if(selectedAugSlot > 0)
		{
			if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot")) != lastAugMode || selectedAugSlot != lastselectedAugSlot)
				descriptionBarY = 0;
			str consumptionString = DeusExAugmentationsConsumptions[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0]))] > 0 ? strparam(s:"\n\nEnergy Rate: ",d:DeusExAugmentationsConsumptions[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0]))],s:" Units/Minute") : "";
			str description = strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][4+CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))],s:consumptionString,s:"\n\nCurrent Level: ",d:CheckInventory(DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]));
			int messageLines = strlen(description)/23;
			if(messageLines < 15) messageLines = 15;
			int barLength = hudboundsy + ((messageLines-15) * 16);
			SetFont("DXAGBAR2");
			SetHudSize(hudboundsx,barLength,true);
			if(Lclicking && cursorx > FixedMul(hudboundsx,0.957) && cursorx < FixedMul(hudboundsx,0.972) && cursory > (floorwhole((barLength)*0.1655)>>16 + (descriptionBarY * 32)) && cursory < (floorwhole((barLength)*0.393)>>16 + (descriptionBarY * 32)))
			{
				descriptionBarY -= FixedMul(pitch,mousesensitivity);
				if(descriptionBarY < 0)
					descriptionBarY = 0;
				else if(descriptionBarY > (messageLines-15)*36)
					descriptionBarY = (messageLines-15)*36;
				else
					LocalAmbientSound("DeusEx/Menu/Slider",48);
			}
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1581,0,FixedMul(hudboundsx,0.94)*1.0,((floorwhole((barLength+descriptionBarY)*0.1515)>>16)*1.0)+0.1,0.0,0.67);
			SetHudSize(hudboundsx,hudboundsy,true);
			SetFont("CMPSDEUS");
			SetHudSize(hudboundsx*2,hudboundsy*2,true);
			HudMessage(s:DeusExAugmentationsSlots[selectedAugSlot-1][2+CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))];HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1550,"HalfLifeWhite",((floorwhole(hudboundsx*0.58*2)>>16)*1.0)+0.1,(floorwhole(hudboundsy*2*0.105)>>16)*1.0,0.0);
			SetHudClipRect((floorwhole(hudboundsx*0.58*2)>>16),(floorwhole(hudboundsy*2*0.127)>>16),FixedMul(hudboundsX*2,0.37),FixedMul(hudboundsY*2,0.414),FixedMul(hudboundsX*2,0.352));
			HudMessage(s:description;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1551,"HalfLifeWhite",((floorwhole(hudboundsx*0.58*2)>>16)*1.0)+0.1,((floorwhole((hudboundsy)*2*0.13)>>16)*1.0)-(descriptionBarY<<16)+0.1,0.0);
			SetHudSize(hudboundsx,hudboundsy,true);
			SetHudClipRect(0,0,0,0,0);
			SetFont("DXAGBAR1");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1580,0,FixedMul(hudboundsx,0.94)*1.0,FixedMul(hudboundsy,0.332)*1.0,0.0,0.67);
			if(Lclicking && cursorx > FixedMul(hudboundsx,0.957) && cursorx < FixedMul(hudboundsx,0.972) && cursory > FixedMul(hudboundsy,0.152) && cursory < FixedMul(hudboundsy,0.172))
			{
				LocalAmbientSound("DeusEx/Menu/Press",32);
				SetFont("DXAGBR2Y");
				descriptionBarY -= 16;
				if(descriptionBarY < 0)
					descriptionBarY = 0;
				else if(descriptionBarY > (messageLines-15)*36)
					descriptionBarY = (messageLines-15)*36;
			}
			else SetFont("DXAGBR2N");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1583,0,FixedMul(hudboundsx,0.94)*1.0,FixedMul(hudboundsy,0.138)*1.0,0.0,0.67);
			if(Lclicking && cursorx > FixedMul(hudboundsx,0.957) && cursorx < FixedMul(hudboundsx,0.972) && cursory > FixedMul(hudboundsy,0.55) && cursory < FixedMul(hudboundsy,0.57))
			{
				LocalAmbientSound("DeusEx/Menu/Press",32);
				SetFont("DXAGBR1Y");
				descriptionBarY += 16;
				if(descriptionBarY < 0)
					descriptionBarY = 0;
				else if(descriptionBarY > (messageLines-15)*36)
					descriptionBarY = (messageLines-15)*36;
			}
			else SetFont("DXAGBR1N");
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1582,0,FixedMul(hudboundsx,0.94)*1.0,FixedMul(hudboundsy,0.53)*1.0,0.0,0.67);
		}
		
		SetFont("DXAUGCAN");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1588,0,FixedMul(hudboundsx,0.635)*1.0,FixedMul(hudboundsy,0.71)*1.0,0.0,0.67);
		SetFont("DXAUGECL");
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1589,0,FixedMul(hudboundsx,0.635)*1.0,FixedMul(hudboundsy,0.835)*1.0,0.0,0.67);
		SetFont("DXAGEBAR");
		SetHudClipRect((floorwhole(hudboundsx*0.732)>>16),(floorwhole(hudboundsy*0.839)>>16),FixedMul(FixedMul(hudboundsX,0.221),(0.01*CheckInventory("DeusEx_BioEnergy"))),FixedMul(hudboundsY,0.18));
		HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1573,0,FixedMul(hudboundsx,0.841)*1.0,FixedMul(hudboundsy,0.881)*1.0,0.0,0.67);
		SetHudClipRect(0,0,0,0,0);
		SetFont("CMPSDEUS");
		SetHudSize(hudboundsx*2,hudboundsy*2,true);
		SetHudClipRect((floorwhole(hudboundsx*0.58*2)>>16),(floorwhole(hudboundsy*2*0.627)>>16),FixedMul(hudboundsX*2,0.36),FixedMul(hudboundsY*2,0.18),FixedMul(hudboundsX*2,0.36));
		HudMessage(s:"To upgrade an augmentation, click on the augmentation you wish to upgrade, \nthen on the Upgrade button.";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1586,"HalfLifeWhite",(FixedMul(hudboundsx*2,0.663)*1.0)+0.1,FixedMul(hudboundsy*2,0.68)*1.0,0.0);
		SetHudClipRect((floorwhole(hudboundsx*0.58*2)>>16),(floorwhole(hudboundsy*2*0.752)>>16),FixedMul(hudboundsX*2,0.36),FixedMul(hudboundsY*2,0.18),FixedMul(hudboundsX*2,0.36));
		HudMessage(s:"To replenish Bioelectric energy for \nyour Augmentations, click on the Use \nCell button.";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1587,"HalfLifeWhite",(FixedMul(hudboundsx*2,0.663)*1.0)+0.1,FixedMul(hudboundsy*2,0.798)*1.0,0.0);
		SetHudClipRect(0,0,0,0,0);
		HudMessage(s:strparam(d:CheckInventory("DeusEx_BioEnergy"),s:"%");HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1572,"HalfLifeWhite",(FixedMul(hudboundsx*2,0.843)*1.0),FixedMul(hudboundsy*2,0.886)*1.0,0.0);
		HudMessage(s:strparam(s:"Count: ",d:CheckInventory("DeusEx_AugmentationUpgradeCannister"));HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1584,"HalfLifeWhite",(FixedMul(hudboundsx*2,0.618)*1.0),FixedMul(hudboundsy*2,0.732)*1.0,0.0);
		HudMessage(s:strparam(s:"Count: ",d:CheckInventory("DeusEx_AugmentationBioEnergyCell"));HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1585,"HalfLifeWhite",(FixedMul(hudboundsx*2,0.618)*1.0),FixedMul(hudboundsy*2,0.852)*1.0,0.0);
		if(upgradeDisplayTimer > 0) HudMessage(s:strparam(s:DeusExAugmentationsSlots[upgradedSlot][2+upgradedSubSlot],s:" upgraded to level ",d:CheckInventory(DeusExAugmentationsSlots[upgradedSlot][upgradedSubSlot]));HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,1574,"HalfLifeWhite",(FixedMul(hudboundsx*2,0.58)*1.0)+0.1,FixedMul(hudboundsy*2,0.575)*1.0,0.0);
		else HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1574,0,0,0,0.0);
		SetHudSize(hudboundsx,hudboundsy,true);
		SetFont("DXAUGSEL");
		
		if(selectedAugSlot > 0 && priorityElement == 0)
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1591,0,selectorX,selectorY,0.0);
		
		if(Lclicking && cursorx > FixedMul(hudboundsx,0.605) && cursorx < FixedMul(hudboundsx,0.68) && cursory > FixedMul(hudboundsy,0.66) && cursory < FixedMul(hudboundsy,0.775))
		{
			priorityElement = 1;
			element = 6;
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1591,0,FixedMul(hudboundsx,0.628)*1.0,FixedMul(hudboundsy,0.697)*1.0,0.0);
		}
		if(Lclicking && cursorx > FixedMul(hudboundsx,0.605) && cursorx < FixedMul(hudboundsx,0.68) && cursory > FixedMul(hudboundsy,0.775) && cursory < FixedMul(hudboundsy,0.89))
		{
			priorityElement = 2;
			element = 7;
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1591,0,FixedMul(hudboundsx,0.628)*1.0,FixedMul(hudboundsy,0.816)*1.0,0.0);
		}
		
		if(CheckInventory("DeusEx_AugmentationBioEnergyCell") > 0 && CheckInventory("DeusEx_BioEnergy") < 100)
		{
			SetFont("DXAGBTE3");
			if(Lclicking && cursorx > FixedMul(hudboundsx,0.603) && cursorx < FixedMul(hudboundsx,0.7) && cursory > FixedMul(hudboundsy,0.9) && cursory < FixedMul(hudboundsy,0.93))
			{
				SetFont("DXAGBTS3");
				element = 2;
			}
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1570,0,FixedMul(hudboundsx,0.626)*1.0,FixedMul(hudboundsy,0.88)*1.0,0.0,0.67);
		}
		else HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1570,0,FixedMul(hudboundsx,0.626)*1.0,FixedMul(hudboundsy,0.88)*1.0,0.0);
		
		if(selectedAugSlot > 0 && CheckInventory("DeusEx_AugmentationUpgradeCannister") > 0 && (CheckInventory(DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]) < (selectedAugSlot > 9 ? 1 : 4)))
		{	
			SetFont("DXAGBTE4");
			if(Lclicking && cursorx > FixedMul(hudboundsx,0.196) && cursorx < FixedMul(hudboundsx,0.296) && cursory > FixedMul(hudboundsy,0.94) && cursory < FixedMul(hudboundsy,0.975))
			{
				SetFont("DXAGBTS4");
				element = 3;
			}
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1571,0,FixedMul(hudboundsx,0.219)*1.0,FixedMul(hudboundsy,0.921)*1.0,0.0,0.67);
		}
		else HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1571,0,FixedMul(hudboundsx,0.219)*1.0,FixedMul(hudboundsy,0.921)*1.0,0.0,0.67);
		
		if(selectedAugSlot > 0 && !(passiveAug))
		{
			if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active")))
			{
				if(Lclicking && cursorx > FixedMul(hudboundsx,0.078) && cursorx < FixedMul(hudboundsx,0.19) && cursory > FixedMul(hudboundsy,0.938) && cursory < FixedMul(hudboundsy,0.975))
				{
					element = 1;
					SetFont("DXAGBTS2");
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1590,0,FixedMul(hudboundsx,0.112)*1.0,FixedMul(hudboundsy,0.921)*1.0,0.0,0.67);
				}
				else
				{
					SetFont("DXAGBTE2");
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1590,0,FixedMul(hudboundsx,0.112)*1.0,FixedMul(hudboundsy,0.921)*1.0,0.0,0.67);
				}
			}
			else
			{
				if(Lclicking && cursorx > FixedMul(hudboundsx,0.078) && cursorx < FixedMul(hudboundsx,0.19) && cursory > FixedMul(hudboundsy,0.938) && cursory < FixedMul(hudboundsy,0.975))
				{
					element = 1;
					SetFont("DXAGBTS1");
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1590,0,FixedMul(hudboundsx,0.112)*1.0,FixedMul(hudboundsy,0.921)*1.0,0.0,0.67);
				}
				else
				{
					SetFont("DXAGBTE1");
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1590,0,FixedMul(hudboundsx,0.112)*1.0,FixedMul(hudboundsy,0.921)*1.0,0.0,0.67);
				}
			}
		}
		else
			HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD,1590,0,FixedMul(hudboundsx,0.112)*1.0,FixedMul(hudboundsy,0.921)*1.0,0.0);
		//Update input toward end of loop...
		if(Lclicking || Rclicking && inputAvailable)
		{
			holdDelay = inputDelay;
			if(selectedAugSlot != lastselectedAugSlot || lastElement != element || lastpriorityElement != priorityElement)
			{
				if(selectedAugSlot < 10)
				{
					if(selectedAugSlot != lastselectedAugSlot && CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot")) == 0)
						SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"),1);
				}
				if(selectedAugSlot > 0 && element == 1 && !passiveAug)
				{
					if(selectedAugSlot < 10)
					{
						if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active")))
						{
							LocalAmbientSound("DeusEx/Augment/Deactivate",127);
							TakeInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),2);
							if(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]) == "DeusEx_Augmentation_Cloak")
								LocalAmbientSound("DeusEx/Augment/CloakDown",127);
						}
						else
						{
							LocalAmbientSound("DeusEx/Augment/Activate",127);
							SetInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot")));
							if(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]) == "DeusEx_Augmentation_Cloak")
								LocalAmbientSound("DeusEx/Augment/CloakUp",127);
							else if(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))]) == "DeusEx_Augmentation_AggressiveDefenseSystem")
								LocalAmbientSound("DeusEx/Augment/DefenseOn",127);
						}
					}
					else
					{
						if(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active")))
						{
							LocalAmbientSound("DeusEx/Augment/Deactivate",127);
							TakeInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),1);
						}
						else
						{
							LocalAmbientSound("DeusEx/Augment/Activate",127);
							GiveInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Active"),1);	
						}
					}
				}
				
				if(element == 2) 
				{
					TakeInventory("DeusEx_AugmentationBioEnergyCell",1);
					GiveInventory("DeusEx_BioEnergy",100);
				}
				
				if(element == 3) 
				{
					upgradeDisplayTimer = 175;
					upgradedSlot = selectedAugSlot-1;
					upgradedSubSlot = CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"));
					TakeInventory("DeusEx_AugmentationUpgradeCannister",1);
					GiveInventory(DeusExAugmentationsSlots[selectedAugSlot-1][CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"))],1);
				}
				
				if(element != 1)
					LocalAmbientSound("DeusEx/Menu/Press",127);
			}
		}
		
		lastselectedAugSlot = selectedAugSlot;
		lastElement = element;
		lastpriorityElement = priorityElement;
		upgradeDisplayTimer--;
		lastAugMode = CheckInventory(strparam(s:DeusExAugmentationsSlots[selectedAugSlot-1][0],s:"Slot"));
		
		Delay(1);
		
		holdDelay--;
	}
	RemoveMessages(1500,1600);
	SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
}

Script "DeusEx_Augmentations_QuickSwitch" (void)
{
	int hudboundsx = 1280;
	int hudboundsy = 960;
	int totalAugs = 0;
	int augPos = 0;
	int thisAug = 0;
	int selectionChoice = 1;
	int initialChoice = 0;
	int unitiated = CheckInventory("DeusEx_QuickAugmentationsSlot") == 0;
	int inputDelay = 0;
	int a, b;
	
	GiveInventory("DeusEx_QuickAugmentationsTimer",35);
			
	if(CheckInventory("DeusEx_QuickAugmentationsOpen") || unitiated)
	{
		if(unitiated) SetInventory("DeusEx_QuickAugmentationsSlot",1);
		initialChoice = CheckInventory("DeusEx_QuickAugmentationsSlot");
		if(CheckInventory("DeusEx_QuickAugmentationsSlot") >= 11) selectionChoice = 1;
		else selectionChoice = CheckInventory("DeusEx_QuickAugmentationsSlot")+1;
		
		until(CheckInventory(strparam(s:DeusExAugmentationsSlots[selectionChoice-1][0],s:((selectionChoice) >= 10 ? "" : "Slot"))) && selectionChoice != 10 && selectionChoice != 7)
			selectionChoice++;
		
		SetInventory("DeusEx_QuickAugmentationsSlot",selectionChoice);
		
		if(!unitiated) terminate;
	}
	
	if(CheckInventory("DeusEx_QuickAugmentationsOpen"))
		terminate;
		
	GiveInventory("DeusEx_QuickAugmentationsOpen",1);
	while(!CheckInventory("DeusEx_AugmentationsMenu") && CheckInventory("DeusEx_QuickAugmentationsTimer"))
	{
		int use = GetPlayerInput(-1,INPUT_BUTTONS) & BT_USE;
		totalAugs = 0;
		thisAug = 0;
		augPos = 0;
		SetHudSize(hudboundsx,hudboundsy,true);
		for(a = 0; a < 11; a++)
		{
			if(a == 6 || a == 9) continue;
			if(CheckInventory(strparam(s:DeusExAugmentationsSlots[a][0],s:"Slot")) || a == 10)
				totalAugs++;
		}
		for(b = 0; b < 11; b++)
		{
			if(b == 6 || b == 9) continue;
			if(CheckInventory(strparam(s:DeusExAugmentationsSlots[b][0],s:"Slot")) || b == 10)
			{
				thisAug++;
				augPos = (((thisAug * 1.0) - ((totalAugs<<16) / 2)) * 56) >> 16;
				SetFont(b == 10 ? strparam(s:"DXAUG21",s:(CheckInventory(strparam(s:DeusExAugmentationsSlots[b][0],s:"Active")) > 0 ? "E" : "D")) : strparam(s:DeusExAugmentationsSlots[b][6+CheckInventory(strparam(s:DeusExAugmentationsSlots[b][0],s:"Slot"))],s:(CheckInventory(strparam(s:DeusExAugmentationsSlots[b][0],s:"Active")) > 0 ? "E" : "D")));
				HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1551+b,0,((hudboundsx/2) + augPos)*1.0,(FixedMul(hudboundsy,0.8))*1.0,0.0,0.67);
				if(CheckInventory("DeusEx_QuickAugmentationsSlot") == b+1)
				{
					SetFont("DXAUGSEL");
					HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,1550,0,((hudboundsx/2) + augPos)*1.0,(FixedMul(hudboundsy,0.8))*1.0,0.0,0.67);
				}
			}
		}
		if(use && inputDelay <= 0)
		{
			GiveInventory("DeusEx_QuickAugmentationsTimer",35);
			inputDelay = 7;
			if(!CheckInventory(strparam(s:DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0],s:"Active")))
			{
				switch(CheckInventory("DeusEx_QuickAugmentationsSlot")-1)
				{
					default: 
						LocalAmbientSound("DeusEx/Augment/Activate",127);
						GiveInventory(strparam(s:DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0],s:"Active"),CheckInventory(strparam(s:DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0],s:"Slot")));	
						break;
					case 3:
						if(CheckInventory(strparam(s:DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0],s:"Slot")) == 1)
							LocalAmbientSound("DeusEx/Augment/CloakUp",127);
						GiveInventory(strparam(s:DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0],s:"Active"),CheckInventory(strparam(s:DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0],s:"Slot")));	
						break;
					case 8:
						if(CheckInventory(strparam(s:DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0],s:"Slot")) == 1)
							LocalAmbientSound("DeusEx/Augment/DefenseOn",127);
						GiveInventory(strparam(s:DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0],s:"Active"),CheckInventory(strparam(s:DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0],s:"Slot")));	
						break;
					case 10:
						LocalAmbientSound("DeusEx/Augment/Activate",127);
						GiveInventory(strparam(s:DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0],s:"Active"),CheckInventory(DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0]));
						break;	
				}
			}
			else 
			{
				switch(CheckInventory("DeusEx_QuickAugmentationsSlot")-1)
				{
					default: 
						LocalAmbientSound("DeusEx/Augment/Deactivate",127);
						break;
					case 3:
						if(CheckInventory(strparam(s:DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0],s:"Slot")) == 1)
							LocalAmbientSound("DeusEx/Augment/CloakDown",127);
						break;
				}
				TakeInventory(strparam(s:DeusExAugmentationsSlots[CheckInventory("DeusEx_QuickAugmentationsSlot")-1][0],s:"Active"),2);
			}
		}
		Delay(1);
		inputDelay--;
		TakeInventory("DeusEx_QuickAugmentationsTimer",1);
	}
	RemoveMessages(1550,1561);
	TakeInventory("DeusEx_QuickAugmentationsOpen",1);
}
